{
  
    
        "post0": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . What is the purpose of identity Column in SQL database? | What is the purpose of a primary key in SQL database? | What are the Data Types in SQL table? | . import sqlite3 database = &#39;files/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? | Same for cursor object? | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? | Is &quot;results&quot; an object? How do you know? | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compore create() in both SQL lessons. What is better or worse in the two implementations? | Explain purpose of SQL INSERT. Is this the same as User init? | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? | Explain try/except, when would except occur? | What code seems to be repeated in each of these examples to point, why is it repeated? | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? | In the print statemements, what is the &quot;f&quot; and what does {uid} do? | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? | Could you refactor this menu? Make it work with a List? | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . | . Reference... sqlite documentation .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "List and Dictionaries",
            "content": "# &quot;List and Dictionaries&quot; &gt; &quot;Customized list and dictionary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . List and Dictionaries . This section is personalized to me and shows the things I like. This uses iteration - while loop . ThingsILike = [] ThingsILike.append({ &quot;FirstName&quot;: &quot;Ahad&quot; &quot;LastName:&quot; &quot;Biabani&quot; &quot;FavoriteFood:&quot; &quot;Steak&quot;, &quot;FavoriteSport&quot;: &quot;Ice Hockey&quot;, &quot;FavoriteVideoGame&quot;: &quot;BattleField 1&quot;, &quot;FavoriteArtist&quot;: &quot;Destroy Lonely&quot;, &quot;Hobbies&quot;: &quot;Ice Hockey and Video Games&quot;, &quot;FavoriteSubject&quot;: &quot;APCSP&quot; }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;FavoriteFood:&quot;, d_rec[&quot;FavoriteFood&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;FavoriteSport:&quot;, d_rec[&quot;FavoriteSport&quot;]) print(&quot; t&quot;, &quot;FavoriteVideoGame:&quot;, d_rec[&quot;FavoriteVideoGame&quot;]) print(&quot; t&quot;, &quot;FavoriteArtist:&quot;, d_rec[&quot;FavoriteArtist&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;,d_rec[&quot;Hobbies&quot;]) print(&quot; t&quot;, &quot;FavoriteSubject: &quot;,d_rec[&quot;FavoriteSubject&quot;]) print(end= &quot;&quot;) print() print(ThingsILike) #for loop algorithm iterates on length of Things I Like def while_loop():# while loop algorithm contains an initial n and an index incrementing statement (n += 1) print(&quot;While loop output n&quot;) i = 0 while i &lt; len(ThingsILike): record = ThingsILike[i] print_data(record) i += 1 return while_loop() # while loop algorithm contains an initial n and an index incrementing statement (n += 1) . This section is also personalized to me. This section uses iteration - for loop . AboutMe = [] AboutMe.append({ &quot;FirstName&quot;: &quot;Ahad&quot;, &quot;LastName&quot;: &quot;Biabani&quot;, &quot;DOB&quot;: &quot;Sept 18&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;aobiabain@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) print() def for_loop(): print(&quot;For loop output n&quot;) for record in AboutMe: print_data(record) for_loop() . . For loop output Ahad Biabani Email: aobiabain@gmail.com Residence: San Diego Birth Day: Sept 18 Cars: None . This section is also personalized to me. This uses iteration - recursive loop . AboutMe = [] AboutMe.append({ &quot;FirstName&quot;: &quot;Ahad&quot;, &quot;LastName&quot;: &quot;Biabani&quot;, &quot;DOB&quot;: &quot;Sept 18&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;aobiabain@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) print() def recursive_loop(i): if i &lt; len(AboutMe): record = AboutMe[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) # recursion algorithm loops incrementing on each call (n + 1) until exit condition is met . . Recursive loop output Ahad Biabani Email: aobiabain@gmail.com Residence: San Diego Birth Day: Sept 18 Cars: None . This is a quiz stored in a list . questions = 4 # number of quiz questions correct = 0 # initialize number of correct answers as 0 print(&quot;This is a 4 question quiz&quot;) def question_and_answer(prompt, answer): print(&quot;Question: &quot; + prompt) # asks user a question user_input = input() # takes user&#39;s input as variable msg print(&quot;Answer: &quot; + user_input) # print user&#39;s input as Answer if answer == user_input.lower(): # convert user&#39;s input to lowercase print(&quot;Correct Answer&quot;) global correct # allows to modify variable outside of current scope correct += 1 # add 1 to correct count else: print (&quot;Incorrect Answer&quot;) return user_input question_1 = question_and_answer(&quot;What is Ahads last name?&quot;, &quot;Biabani&quot;) question_2 = question_and_answer(&quot;What sport does Ahad play&quot;, &quot;Ice Hockey&quot;) question_3 = question_and_answer(&quot;How old is Ahad&quot;, &quot;16&quot;) question_4 = question_and_answer(&quot;When is his birthday?&quot;, &quot;September 18th&quot;) if correct &lt; 3: print(&#39;You scored {correct} correct answers out of 4, ur bad&#39;) elif correct &lt; 5: print(&#39;You scored {correct} correct answers out of 4, okay&#39;) else: print(&#39;You scored {correct} correct answers out of 4, good&#39;) print(&quot;A record of your quiz:&quot;) . This is a 4 question quiz Question: What is Ahads last name? .",
            "url": "https://ahadb63.github.io/ahadsblog/markdown/2023/03/13/list-and-dictionaries.html",
            "relUrl": "/markdown/2023/03/13/list-and-dictionaries.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. Flask app object | SQLAlchemy db object | | . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///files/sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. . class User defining the template for users --&gt; a class definition template. Used to create objects of type users. WHne seeing this code it doesnt do anything right away but is used later to create objects. User template becuase we have different users. Class is atemplate for a future object. Atributes are added to user. db.Model inheritance Inheritance is used to inherity methods and use the mothods to interact with the database to interact with the class. This adds to out template database information. | . | . | . | init method Called the Constructor. This method is enables use to instanciate(make/create/dervive) an object from our user class. | . | @property, @&lt;column&gt;.setter Setters enable us to change the atributes for example the wrong DOB and u can come back and use the object name to reset the thing using property and seters. Getters enable us to retrieve data out of the objects. create, read, update, delete methods | . | CRUD METHODS | Methods are added to help interact and maintain data inside the class | Makes it easer to interact with database. | Attributes and methods are in the class. | . | . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional method used for setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter against stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, a string represents date outside object @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob setter, verifies date type before it is set or default to today @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object | User Object Constructors | Try / Except | | . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Records exist uid toby, or error. Records exist uid niko, or error. Records exist uid lex, or error. Records exist uid whit, or error. Created new uid indi Created new uid raven . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following User.query.filter_by | user.password | | . def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except | user = User(...) | user.dob and try/except | user.create() and try/except | | . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all | json_ready assignment, google List Comprehension | | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-06-AP-unit2_3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390], &quot;duration&quot;: [50, 40, 45] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 3 entries, day1 to day3 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 3 non-null int64 1 duration 3 non-null int64 dtypes: int64(2) memory usage: 180.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Hacks . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Fambulous. | . When choosing a data set, think about the following:- Does it have a good sample size? - Is there bias in the data? - Does the data set need to be cleaned? - What is the purpose of the data set? - ... . Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. Here are some suggestions:- Titanic Dataset: This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. . Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset:- Kaggle: The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. . UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . 2.3 College Board Questions . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;College Board&quot;, &#39;label&#39;: &quot;Data Compression&quot;, &#39;file&#39;: &quot;EIFDQ.png&quot;}, ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # display default images from image_data() default_images = image_data() image_display(default_images) . Creating tables using pandas . import pandas as pd data = {&#39;class&#39;:[&#39;Math&#39;, &#39;AmLit&#39;, &#39;Apush&#39;, &#39;Csp&#39;], &#39;Ratings&#39;:[&#39;A+&#39;, &#39;A+&#39;, &#39;A+&#39;, &#39;A+&#39;]} df = pd.DataFrame(data, index =[&#39;period 1&#39;, &#39;period 2&#39;, &#39;period 3&#39;, &#39;period 4&#39;]) print(df) . class Ratings period 1 Math A+ period 2 AmLit A+ period 3 Apush A+ period 4 Csp A+ . import pandas as pd list = [&#39;hi&#39;, &#39;bye&#39;, &#39;poo&#39;, &#39;car&#39;, &#39;java&#39;, &#39;python&#39;, &#39;Go&#39;] dframe = pd.DataFrame(list) print(dframe) . 0 0 hi 1 bye 2 poo 3 car 4 java 5 python 6 Go . import pandas as pd data = [{&#39;food&#39;: &#39;good&#39;, &#39;Games&#39;: &#39;yes&#39;}] dframe = pd.DataFrame(data, index =[&#39;Day&#39;, &#39;Night&#39;]) print(dframe) . food Games Day good yes Night good yes . import pandas as pd player_data = pd.read_csv(&#39;/vscode/ahadsblog/_notebooks/files/AwardsPlayers.csv&#39;) nhl_data = player_data[player_data[&#39;award&#39;]==&#39;Hart&#39;] print(nhl_data.head()) . playerID award year lgID note pos 7 nighbfr01 Hart 1923 NHL NaN NaN 9 burchbi01 Hart 1924 NHL NaN NaN 12 stewane01 Hart 1925 NHL NaN NaN 15 gardihe01 Hart 1926 NHL NaN NaN 19 morenho01 Hart 1927 NHL NaN NaN . import pandas as pd # creating a data frame df = pd.read_csv(&quot;/vscode/ahadsblog/_notebooks/files/AwardsPlayers.csv&quot;) print(df.head()) . playerID award year lgID note pos 0 malonjo01 Art Ross 1917 NHL NaN NaN 1 cleghod01 Art Ross 1918 NHL NaN NaN 2 malonjo01 Art Ross 1919 NHL NaN NaN 3 lalonne01 Art Ross 1920 NHL NaN NaN 4 broadpu01 Art Ross 1921 NHL NaN NaN . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Titanic Data Index([&#39;survived&#39;, &#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;fare&#39;, &#39;embarked&#39;, &#39;class&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;deck&#39;, &#39;embark_town&#39;, &#39;alive&#39;, &#39;alone&#39;], dtype=&#39;object&#39;) survived pclass sex age sibsp parch class fare 0 0 3 male 22.0 1 0 Third 7.2500 1 1 1 female 38.0 1 0 First 71.2833 2 1 3 female 26.0 0 0 Third 7.9250 3 1 1 female 35.0 1 0 First 53.1000 4 0 3 male 35.0 0 0 Third 8.0500 .. ... ... ... ... ... ... ... ... 886 0 2 male 27.0 0 0 Second 13.0000 887 1 1 female 19.0 0 0 First 30.0000 888 0 3 female NaN 1 2 Third 23.4500 889 1 1 male 26.0 0 0 First 30.0000 890 0 3 male 32.0 0 0 Third 7.7500 embark_town 0 Southampton 1 Cherbourg 2 Southampton 3 Southampton 4 Southampton .. ... 886 Southampton 887 Southampton 888 Southampton 889 Cherbourg 890 Queenstown [891 rows x 9 columns] . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . survived pclass sex age sibsp parch fare alone embarked_C 0 0 3 1 22.0 1 0 7.2500 0 0.0 1 1 1 0 38.0 1 0 71.2833 0 1.0 2 1 3 0 26.0 0 0 7.9250 1 0.0 3 1 1 0 35.0 1 0 53.1000 0 0.0 4 0 3 1 35.0 0 0 8.0500 1 0.0 .. ... ... ... ... ... ... ... ... ... 705 0 2 1 39.0 0 0 26.0000 1 0.0 706 1 2 0 45.0 0 0 13.5000 1 0.0 707 1 1 1 42.0 0 0 26.2875 1 0.0 708 1 1 0 22.0 0 0 151.5500 1 0.0 710 1 1 0 24.0 0 0 49.5042 1 1.0 embarked_Q embarked_S 0 0.0 1.0 1 0.0 0.0 2 0.0 1.0 3 0.0 1.0 4 0.0 1.0 .. ... ... 705 0.0 1.0 706 0.0 1.0 707 1.0 0.0 708 0.0 1.0 710 0.0 0.0 [564 rows x 11 columns] . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . survived 0.000000 pclass 2.464072 sex 0.844311 age 31.073353 sibsp 0.562874 parch 0.398204 fare 24.835902 alone 0.616766 embarked_C 0.185629 embarked_Q 0.038922 embarked_S 0.775449 dtype: float64 . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . survived 1.000000 pclass 1.878261 sex 0.326087 age 28.481522 sibsp 0.504348 parch 0.508696 fare 50.188806 alone 0.456522 embarked_C 0.152174 embarked_Q 0.034783 embarked_S 0.813043 dtype: float64 . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . survived 1.0000 pclass 3.0000 sex 1.0000 age 80.0000 sibsp 4.0000 parch 5.0000 fare 512.3292 alone 1.0000 embarked_C 1.0000 embarked_Q 1.0000 embarked_S 1.0000 dtype: float64 survived 1.00 pclass 1.00 sex 0.00 age 0.75 sibsp 0.00 parch 0.00 fare 0.00 alone 0.00 embarked_C 0.00 embarked_Q 0.00 embarked_S 0.00 dtype: float64 . Machine Learning . From Tutorials Point%20is,a%20consistence%20interface%20in%20Python). Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python.&gt; Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. Decision Trees, prediction by a piecewise constant approximation. - Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) . NameError Traceback (most recent call last) /vscode/ahadsblog/_notebooks/2023-03-12-AP-unit2-3.ipynb Cell 40 in &lt;cell line: 7&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-12-AP-unit2-3.ipynb#X53sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; from sklearn.metrics import accuracy_score &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-12-AP-unit2-3.ipynb#X53sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; # Split arrays or matrices into random train and test subsets. -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-12-AP-unit2-3.ipynb#X53sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; X = td.drop(&#39;survived&#39;, axis=1) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-12-AP-unit2-3.ipynb#X53sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; y = td[&#39;survived&#39;] &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-12-AP-unit2-3.ipynb#X53sdnNjb2RlLXJlbW90ZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) NameError: name &#39;td&#39; is not defined .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/03/12/AP-unit2-3.html",
            "relUrl": "/2023/03/12/AP-unit2-3.html",
            "date": " • Mar 12, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. - Clouds Impression . Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Python Libraries and Concepts used for Jupyter and Files/Directories . Introduction to displaying images in Jupyter notebook . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | What are the command you use in Windows terminal to access files? | What are some of the major differences? | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | How does the meta data source and label relate to Unit 5 topics? | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano-256.jpg&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;smiley&quot;, &#39;file&#39;: &quot;smile.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image greensquare = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(greensquare) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Translate first 3 letters of your name to Base64. | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | From your consumer experience, what effects have you experienced from buffering? | How do these effects apply to images? | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | Describe Grey Scale algorithm in English or Pseudo code? | Describe scale image? What is before and after on pixels in three images? | Is scale image a type of compression? If so, line it up with College Board terms described? | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 500 scalePercent = (baseWidth/float(img.size[1])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;red_scale&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;red_scale&#39;].append((average, average//2 , average, pixel[3])) # PNG format else: image[&#39;red_scale&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;red_scale&#39;]) image[&#39;html_red&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; purple image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_red&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (500, 500) -- original image -- . purple image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (500, 500) -- original image -- . purple image - . . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division # how are average pixel values found? if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano-256.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object # what is image data object? print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . grey image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . grey image . - meta data -- Lassen Volcano Peter Carolin lassen-volcano-256.jpg JPEG RGB Original size: (320, 240) Scaled size: (320, 240) -- scaled image -- . grey image . . import numpy as np from PIL import Image as pilImage from io import BytesIO import base64 from IPython.display import HTML, display # Load image img = pilImage.open(&quot;images/clouds-impression.png&quot;) # Convert image to numpy array img_array = np.array(img) # Create red and blue scale versions of image red_scale = img_array.copy() red_scale[:, :, 1] = 0 # set green channel to 0 red_scale[:, :, 2] = 0 # set blue channel to 0 blue_scale = img_array.copy() blue_scale[:, :, 0] = 0 # set red channel to 0 blue_scale[:, :, 1] = 0 # set green channel to 0 # Convert numpy arrays back to images red_scale_img = pilImage.fromarray(red_scale) blue_scale_img = pilImage.fromarray(blue_scale) # Convert images to base64 for display def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() red_scale_html = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(red_scale_img, img.format) blue_scale_html = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(blue_scale_img, img.format) # Display images display(HTML(red_scale_html)) display(HTML(blue_scale_html)) . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.2 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | . 2.3 College Board Practice Problems . . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;College Board&quot;, &#39;label&#39;: &quot;Data Compression&quot;, &#39;file&#39;: &quot;datacompression.png&quot;}, ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # display default images from image_data() default_images = image_data() image_display(default_images) . Playing around with PIL . Things to do . Display the altered image Observations | After altering the image, it is saved but not displayed yet. | . from PIL import Image def main(): try: #Relative Path img = Image.open(&quot;datacompression.png&quot;) #Angle given img = img.rotate(180) #Saved in the same relative location img.save(&quot;rotated_picture.jpg&quot;) except IOError: pass if __name__ == &quot;__main__&quot;: main() # why is image not being displayed . /bin/bash: -c: line 0: syntax error near unexpected token `rotatedpicture.jpg&#39; /bin/bash: -c: line 0: `[](rotatedpicture.jpg)&#39; . from PIL import Image filename = &quot;berserkpanel.jpg&quot; with Image.open(filename) as image: width, height = image.size . from PIL import Image def main(): try: #Relative Path img = Image.open(&quot;berserkpanel.jpg&quot;) width, height = img.size area = (0, 0, width/2, height/2) img = img.crop(area) #Saved in the same relative location img.save(&quot;cropped_picture.jpg&quot;) except IOError: pass if __name__ == &quot;__main__&quot;: main() . import numpy as np from PIL import Image as pilImage from io import BytesIO import base64 from IPython.display import HTML, display # Load image img = pilImage.open(&quot;images/berserkpanel.jpg&quot;) # Convert image to numpy array img_array = np.array(img) # Create red and blue scale versions of image red_scale = img_array.copy() red_scale[:, :, 1] = 0 # set green channel to 0 red_scale[:, :, 2] = 0 # set blue channel to 0 blue_scale = img_array.copy() blue_scale[:, :, 0] = 0 # set red channel to 0 blue_scale[:, :, 1] = 0 # set green channel to 0 # Convert numpy arrays back to images red_scale_img = pilImage.fromarray(red_scale) blue_scale_img = pilImage.fromarray(blue_scale) # Convert images to base64 for display def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() red_scale_html = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(red_scale_img, img.format) blue_scale_html = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(blue_scale_img, img.format) # Display images display(HTML(red_scale_html)) display(HTML(blue_scale_html)) . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[1] + pixel[1] + pixel[2]) // 40 # average pixel values and use // for integer division # how are average pixel values found? if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Manga&quot;, &#39;file&#39;: &quot;berserkcolor.jpg&quot;}, ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object # what is image data object? print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) . - meta data -- Manga Internet berserkcolor.jpg JPEG RGB Original size: (318, 159) Scaled size: (320, 160) -- scaled image -- . grey image .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/03/11/AP-unit2-2.html",
            "relUrl": "/2023/03/11/AP-unit2-2.html",
            "date": " • Mar 11, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Tri 2 MCQ Corrections",
            "content": ". Corrections . Q1: Many Web browsers allow users to open anonymous windows. During a browsing session in an anonymous window, the browser does not record a browsing history or a list of downloaded files. When the anonymous window is exited, cookies created during the session are deleted. Which of the following statements about browsing sessions in an anonymous window is true? . A: B) This option is correct. Because the cookies created during the anonymous browsing session were deleted, no information exists in the browser to inform future visits to the same website. Thus, any shopping cart items will not be available for future purchase. . Q2: Which of the following has the greatest potential for compromising a user’s personal privacy? . A: A) This option is correct. The aggregation of information in browser cookies can be used by websites that the user visits to track the user and collect information about the user. . Q3: A chain of retail stores uses software to manage telephone calls from customers. The system was recently upgraded. Customers interacted with the original system using their phone keypad. Customers interact with the upgraded system using their voice. . The upgraded system (but not the original system) stores all information from the calling session in a database for future reference. This includes the customer’s telephone number and any information provided by the customer (name, address, order number, credit card number, etc.). . The original system and the upgraded system are described in the following flowcharts. Each flowchart uses the following blocks. . A: A) Correct. All information from the calling session (including personally identifiable information) is saved in a database. This information could be compromised if an unauthorized individual gains access to the database. . Q5 : Of the following potential benefits, which is LEAST likely to be provided by the upgraded system? . A: B) Correct. The company is not able to provide a human representative for calls made after business hours. . Q6: The upgraded system uses a directory containing additional information not supplied by the customer. The directory is used to help direct calls effectively. Which of the following is LEAST likely to be included in the directory? . A: C)Correct. A list of the company’s computers and their IP addresses is not needed to help direct calls. . Q21: A programmer wrote the program below. The program uses a list of numbers called numList. The program is intended to display the sum of the numbers in the list. In order to test the program, the programmer initializes numList to [0, 1, 4, 5]. The program displays 10, and the programmer concludes that the program works as intended. . Which of the following is true? . A: C) This option is correct. Because the variable sum is initialized to store the value of the first element of numList, and because the iteration block is a FOR EACH loop, the value of the first element is added to sum twice. Since the first element of the list is 0, adding this number to the sum does not affect the sum. A non-zero first element would give an incorrect result. In general, a single test case is not sufficient to confirm that a program works as intended. . Q24: The procedure below is intended to display the index in a list of unique names (nameList) where a particular name (targetName) is found. If targetName is not found in nameList, the code should display 0.Which of the following procedure calls can be used to demonstrate that the procedure does NOT work as intended? . A: C)This option is correct. The procedure will not display the correct value of foundIndex if the targetName is &quot;Ben&quot;. In the FOR EACH loop, when the value of name is &quot;Andrea&quot;, the ELSE statement sets foundIndex to 0. When the value of name is &quot;Ben&quot;, the ELSE statement sets foundIndex to 1. But as the loop continues, and the value of name is &quot;Chris&quot;, the ELSE statement sets foundIndex to 0. The procedure displays 0, even though the correct answer is 1. . Q26: A teacher has a goal of displaying the names of 2 students selected at random from a group of 30 students in a classroom. Any possible pair of students should be equally likely to be selected. Which of the following algorithms can be used to accomplish the teacher’s goal? . A: D) Correct. This algorithm selects 1 student from the group of 30 students, then selects another student from the remaining 29 students. Any possible pair of students is equally likely to be selected. . Q28: Assume that the string oldString contains at least 4 characters. A programmer is writing a code segment that is intended to remove the first two characters and the last two characters from oldString and assign the result to newString. . For example, if oldString contains &quot;student&quot;, then newString should contain &quot;ude&quot;. . Which of the following code segments can be used to assign the intended string to newString ? . Select two answers. . A: D) Correct. The first statement removes the first 2 characters of oldString and assigns the result to tempString. The second statement removes the last 2 characters of tempString and assigns the result to newString. . Q29: What is displayed as a result of executing the code segment? . A: B) Correct. The first three statements assign values to the variables. The fourth statement assigns the value of (NOT (a OR b)) AND c to a. Since a OR b is true, NOT (a OR b) is false, so (NOT (a OR b)) AND c is false. The fifth statement assigns the value of c AND a to c. Since a is now false, c AND a is false. The last three statements display the values of the variables. . Q31: A programmer is creating an algorithm that will be used to turn on the motor to open the gate in a parking garage. The specifications for the algorithm are as follows. . The gate should not open when the time is outside of business hours. The motor should not turn on unless the gate sensor is activated. The motor should not turn on if the gate is already open. . Which of the following algorithms can be used to open the gate under the appropriate conditions? . A: D) Correct. The algorithm continues past the first check if the time is during business hours, the algorithm continues past the second check if the gate sensor is activated, and the algorithm continues past the third check if the gate is not open. Performing the checks in this order will ensure that the gate is opened only under the appropriate conditions. . Q34: Which of the following code segments can be used to move the robot to the gray square? . A: D) Correct. The robot moves forward three spaces, turns to the left, moves forward two spaces, turns to the right, and moves forward three spaces. . Q35: Three teams (Team A, Team B, and Team C) are participating in a trivia contest. Let scoreA represent the number of correct questions for Team A, scoreB represent the number of correct questions for Team B, and scoreC represent the number of correct questions for Team C. Assuming no two teams get the same number of correct questions, which of the following code segments correctly displays the team with the highest number of correct questions? . A: A) Correct. If scoreA is greater than both scoreB and scoreC (the first two IF clauses), then Team A wins. If scoreA is greater than scoreB but not greater than scoreC, then scoreC is greater than both scoreA and scoreB and Team C wins. If scoreB is greater than scoreA (the outer ELSE clause) and scoreC (the IF clause in the outer ELSE), then Team B wins. If scoreB is greater than scoreA but not greater than scoreC, then scoreC is greater than both scoreA and scoreB and Team C wins. . Q36: A numeric test score is to be converted to a letter grade of A, B, or C according to the following rules: A score greater than 90 is considered an A; a score between 80 and 90, inclusive, is considered a B; and any other score is considered a C. . Which of the following code segments will assign the correct letter grade to grade based on the value of the variable score ? . A: D) Correct. Code segment I does not work correctly because it is not possible for &quot;C&quot; to be the value of grade at the end of the code segment. Code segment II correctly assigns &quot;A&quot; when the numeric score is greater than 90, or &quot;B&quot; if the numeric score is not greater than 90 but is greater than or equal to 80, or &quot;C&quot; otherwise. Code segment III assigns &quot;C&quot; when the numeric score is less than 80, or &quot;B&quot; if the numeric score is not less than 80 but is less than or equal to 90, or &quot;A&quot; otherwise. . Q37: If x has a value of 7 and y has a value of 20, what is displayed as a result of executing the code segment? . A: C) Correct. The value &quot;THREE&quot; is displayed whenever x is less than or equal to 10 and y is greater than 3. . Q38: Which of the following code segments is equivalent to the code segment above? . A: B) Correct. The given code segment displays &quot;positive&quot; when num is positive, displays &quot;negative&quot; when num is negative, and displays &quot;zero&quot; when num is 0. This code segment produces the same result. When num is negative, &quot;negative&quot; is displayed. Otherwise, when num is 0, &quot;zero&quot; is displayed. Otherwise, &quot;positive&quot; is displayed. . Q39:Consider the goal of modifying the code segment to count the number of squares the robot visits before execution terminates. Which of the following modifications can be made to the code segment to correctly count the number of squares the robot moves to? . A: A) Correct. Inserting this statement between lines 6 and 7 increases the value of count once each time the robot moves forward, which keeps an accurate count of the number of squares the robot visits. . Q40: When the robot reaches the gray square, it turns around and faces the bottom of the grid. Which of the following changes, if any, should be made to the code segment to move the robot back to its original position in the bottom-left square of the grid and facing toward the bottom of the grid? . A: D)Correct. In order for the robot to move from the gray square back to its original position, it must move forward two squares, turn right, move forward four squares, turn left, and move forward two squares. The same set of moves can be used in both directions, so no change is needed to the algorithm. . Q49: A city planner is using simulation software to study crowd flow out of a large arena after an event has ended. The arena is located in an urban city. Which of the following best describes a limitation of using a simulation for this purpose? . A: B) Correct. Simulations are limited by the model that is used. There may be many reasons for using a simplified model, including ease of implementation. .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/03/10/MCQ-Tri-2-corrections.html",
            "relUrl": "/2023/03/10/MCQ-Tri-2-corrections.html",
            "date": " • Mar 10, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-06-AP-unit2_3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390], &quot;duration&quot;: [50, 40, 45] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 3 entries, day1 to day3 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 3 non-null int64 1 duration 3 non-null int64 dtypes: int64(2) memory usage: 180.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Hacks . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Fambulous. | . When choosing a data set, think about the following:- Does it have a good sample size? - Is there bias in the data? - Does the data set need to be cleaned? - What is the purpose of the data set? - ... . Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. Here are some suggestions:- Titanic Dataset: This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. . Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset:- Kaggle: The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. . UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Titanic Data Index([&#39;survived&#39;, &#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;fare&#39;, &#39;embarked&#39;, &#39;class&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;deck&#39;, &#39;embark_town&#39;, &#39;alive&#39;, &#39;alone&#39;], dtype=&#39;object&#39;) survived pclass sex age sibsp parch class fare 0 0 3 male 22.0 1 0 Third 7.2500 1 1 1 female 38.0 1 0 First 71.2833 2 1 3 female 26.0 0 0 Third 7.9250 3 1 1 female 35.0 1 0 First 53.1000 4 0 3 male 35.0 0 0 Third 8.0500 .. ... ... ... ... ... ... ... ... 886 0 2 male 27.0 0 0 Second 13.0000 887 1 1 female 19.0 0 0 First 30.0000 888 0 3 female NaN 1 2 Third 23.4500 889 1 1 male 26.0 0 0 First 30.0000 890 0 3 male 32.0 0 0 Third 7.7500 embark_town 0 Southampton 1 Cherbourg 2 Southampton 3 Southampton 4 Southampton .. ... 886 Southampton 887 Southampton 888 Southampton 889 Cherbourg 890 Queenstown [891 rows x 9 columns] . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . survived pclass sex age sibsp parch fare alone embarked_C 0 0 3 1 22.0 1 0 7.2500 0 0.0 1 1 1 0 38.0 1 0 71.2833 0 1.0 2 1 3 0 26.0 0 0 7.9250 1 0.0 3 1 1 0 35.0 1 0 53.1000 0 0.0 4 0 3 1 35.0 0 0 8.0500 1 0.0 .. ... ... ... ... ... ... ... ... ... 705 0 2 1 39.0 0 0 26.0000 1 0.0 706 1 2 0 45.0 0 0 13.5000 1 0.0 707 1 1 1 42.0 0 0 26.2875 1 0.0 708 1 1 0 22.0 0 0 151.5500 1 0.0 710 1 1 0 24.0 0 0 49.5042 1 1.0 embarked_Q embarked_S 0 0.0 1.0 1 0.0 0.0 2 0.0 1.0 3 0.0 1.0 4 0.0 1.0 .. ... ... 705 0.0 1.0 706 0.0 1.0 707 1.0 0.0 708 0.0 1.0 710 0.0 0.0 [564 rows x 11 columns] . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . survived 0.000000 pclass 2.464072 sex 0.844311 age 31.073353 sibsp 0.562874 parch 0.398204 fare 24.835902 alone 0.616766 embarked_C 0.185629 embarked_Q 0.038922 embarked_S 0.775449 dtype: float64 . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . survived 1.000000 pclass 1.878261 sex 0.326087 age 28.481522 sibsp 0.504348 parch 0.508696 fare 50.188806 alone 0.456522 embarked_C 0.152174 embarked_Q 0.034783 embarked_S 0.813043 dtype: float64 . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . survived 1.0000 pclass 3.0000 sex 1.0000 age 80.0000 sibsp 4.0000 parch 5.0000 fare 512.3292 alone 1.0000 embarked_C 1.0000 embarked_Q 1.0000 embarked_S 1.0000 dtype: float64 survived 1.00 pclass 1.00 sex 0.00 age 0.75 sibsp 0.00 parch 0.00 fare 0.00 alone 0.00 embarked_C 0.00 embarked_Q 0.00 embarked_S 0.00 dtype: float64 . Machine Learning . From Tutorials Point%20is,a%20consistence%20interface%20in%20Python). Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python.&gt; Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. Decision Trees, prediction by a piecewise constant approximation. - Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) . DecisionTreeClassifier Accuracy: 0.7352941176470589 LogisticRegression Accuracy: 0.788235294117647 . /home/pluto/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/03/09/AP-unit2-3.html",
            "relUrl": "/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Tri 2 MCQ Corrections",
            "content": ". Corrections . Q1: Many Web browsers allow users to open anonymous windows. During a browsing session in an anonymous window, the browser does not record a browsing history or a list of downloaded files. When the anonymous window is exited, cookies created during the session are deleted. Which of the following statements about browsing sessions in an anonymous window is true? . A: B) This option is correct. Because the cookies created during the anonymous browsing session were deleted, no information exists in the browser to inform future visits to the same website. Thus, any shopping cart items will not be available for future purchase. . Q2: Which of the following has the greatest potential for compromising a user’s personal privacy? . A: A) This option is correct. The aggregation of information in browser cookies can be used by websites that the user visits to track the user and collect information about the user. . Q3: A chain of retail stores uses software to manage telephone calls from customers. The system was recently upgraded. Customers interacted with the original system using their phone keypad. Customers interact with the upgraded system using their voice. . The upgraded system (but not the original system) stores all information from the calling session in a database for future reference. This includes the customer’s telephone number and any information provided by the customer (name, address, order number, credit card number, etc.). . The original system and the upgraded system are described in the following flowcharts. Each flowchart uses the following blocks. . A: A) Correct. All information from the calling session (including personally identifiable information) is saved in a database. This information could be compromised if an unauthorized individual gains access to the database. . Q5 : Of the following potential benefits, which is LEAST likely to be provided by the upgraded system? . A: B) Correct. The company is not able to provide a human representative for calls made after business hours. . Q6: The upgraded system uses a directory containing additional information not supplied by the customer. The directory is used to help direct calls effectively. Which of the following is LEAST likely to be included in the directory? . A: C)Correct. A list of the company’s computers and their IP addresses is not needed to help direct calls. . Q21: A programmer wrote the program below. The program uses a list of numbers called numList. The program is intended to display the sum of the numbers in the list. In order to test the program, the programmer initializes numList to [0, 1, 4, 5]. The program displays 10, and the programmer concludes that the program works as intended. . Which of the following is true? . A: C) This option is correct. Because the variable sum is initialized to store the value of the first element of numList, and because the iteration block is a FOR EACH loop, the value of the first element is added to sum twice. Since the first element of the list is 0, adding this number to the sum does not affect the sum. A non-zero first element would give an incorrect result. In general, a single test case is not sufficient to confirm that a program works as intended. . Q24: The procedure below is intended to display the index in a list of unique names (nameList) where a particular name (targetName) is found. If targetName is not found in nameList, the code should display 0.Which of the following procedure calls can be used to demonstrate that the procedure does NOT work as intended? . A: C)This option is correct. The procedure will not display the correct value of foundIndex if the targetName is &quot;Ben&quot;. In the FOR EACH loop, when the value of name is &quot;Andrea&quot;, the ELSE statement sets foundIndex to 0. When the value of name is &quot;Ben&quot;, the ELSE statement sets foundIndex to 1. But as the loop continues, and the value of name is &quot;Chris&quot;, the ELSE statement sets foundIndex to 0. The procedure displays 0, even though the correct answer is 1. . Q26: A teacher has a goal of displaying the names of 2 students selected at random from a group of 30 students in a classroom. Any possible pair of students should be equally likely to be selected. Which of the following algorithms can be used to accomplish the teacher’s goal? . A: D) Correct. This algorithm selects 1 student from the group of 30 students, then selects another student from the remaining 29 students. Any possible pair of students is equally likely to be selected. . Q28: Assume that the string oldString contains at least 4 characters. A programmer is writing a code segment that is intended to remove the first two characters and the last two characters from oldString and assign the result to newString. . For example, if oldString contains &quot;student&quot;, then newString should contain &quot;ude&quot;. . Which of the following code segments can be used to assign the intended string to newString ? . Select two answers. . A: D) Correct. The first statement removes the first 2 characters of oldString and assigns the result to tempString. The second statement removes the last 2 characters of tempString and assigns the result to newString. . Q29: What is displayed as a result of executing the code segment? . A: B) Correct. The first three statements assign values to the variables. The fourth statement assigns the value of (NOT (a OR b)) AND c to a. Since a OR b is true, NOT (a OR b) is false, so (NOT (a OR b)) AND c is false. The fifth statement assigns the value of c AND a to c. Since a is now false, c AND a is false. The last three statements display the values of the variables. . Q31: A programmer is creating an algorithm that will be used to turn on the motor to open the gate in a parking garage. The specifications for the algorithm are as follows. . The gate should not open when the time is outside of business hours. The motor should not turn on unless the gate sensor is activated. The motor should not turn on if the gate is already open. . Which of the following algorithms can be used to open the gate under the appropriate conditions? . A: D) Correct. The algorithm continues past the first check if the time is during business hours, the algorithm continues past the second check if the gate sensor is activated, and the algorithm continues past the third check if the gate is not open. Performing the checks in this order will ensure that the gate is opened only under the appropriate conditions. . Q34: Which of the following code segments can be used to move the robot to the gray square? . A: D) Correct. The robot moves forward three spaces, turns to the left, moves forward two spaces, turns to the right, and moves forward three spaces. . Q35: Three teams (Team A, Team B, and Team C) are participating in a trivia contest. Let scoreA represent the number of correct questions for Team A, scoreB represent the number of correct questions for Team B, and scoreC represent the number of correct questions for Team C. Assuming no two teams get the same number of correct questions, which of the following code segments correctly displays the team with the highest number of correct questions? . A: A) Correct. If scoreA is greater than both scoreB and scoreC (the first two IF clauses), then Team A wins. If scoreA is greater than scoreB but not greater than scoreC, then scoreC is greater than both scoreA and scoreB and Team C wins. If scoreB is greater than scoreA (the outer ELSE clause) and scoreC (the IF clause in the outer ELSE), then Team B wins. If scoreB is greater than scoreA but not greater than scoreC, then scoreC is greater than both scoreA and scoreB and Team C wins. . Q36: A numeric test score is to be converted to a letter grade of A, B, or C according to the following rules: A score greater than 90 is considered an A; a score between 80 and 90, inclusive, is considered a B; and any other score is considered a C. . Which of the following code segments will assign the correct letter grade to grade based on the value of the variable score ? . A: D) Correct. Code segment I does not work correctly because it is not possible for &quot;C&quot; to be the value of grade at the end of the code segment. Code segment II correctly assigns &quot;A&quot; when the numeric score is greater than 90, or &quot;B&quot; if the numeric score is not greater than 90 but is greater than or equal to 80, or &quot;C&quot; otherwise. Code segment III assigns &quot;C&quot; when the numeric score is less than 80, or &quot;B&quot; if the numeric score is not less than 80 but is less than or equal to 90, or &quot;A&quot; otherwise. . Q37: If x has a value of 7 and y has a value of 20, what is displayed as a result of executing the code segment? . A: C) Correct. The value &quot;THREE&quot; is displayed whenever x is less than or equal to 10 and y is greater than 3. . Q38: Which of the following code segments is equivalent to the code segment above? . A: B) Correct. The given code segment displays &quot;positive&quot; when num is positive, displays &quot;negative&quot; when num is negative, and displays &quot;zero&quot; when num is 0. This code segment produces the same result. When num is negative, &quot;negative&quot; is displayed. Otherwise, when num is 0, &quot;zero&quot; is displayed. Otherwise, &quot;positive&quot; is displayed. . Q39:Consider the goal of modifying the code segment to count the number of squares the robot visits before execution terminates. Which of the following modifications can be made to the code segment to correctly count the number of squares the robot moves to? . A: A) Correct. Inserting this statement between lines 6 and 7 increases the value of count once each time the robot moves forward, which keeps an accurate count of the number of squares the robot visits. . Q40: When the robot reaches the gray square, it turns around and faces the bottom of the grid. Which of the following changes, if any, should be made to the code segment to move the robot back to its original position in the bottom-left square of the grid and facing toward the bottom of the grid? . A: D)Correct. In order for the robot to move from the gray square back to its original position, it must move forward two squares, turn right, move forward four squares, turn left, and move forward two squares. The same set of moves can be used in both directions, so no change is needed to the algorithm. . Q49: A city planner is using simulation software to study crowd flow out of a large arena after an event has ended. The arena is located in an urban city. Which of the following best describes a limitation of using a simulation for this purpose? . A: B) Correct. Simulations are limited by the model that is used. There may be many reasons for using a simplified model, including ease of implementation. .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/03/07/MCQ-Tri-2-corrections.html",
            "relUrl": "/2023/03/07/MCQ-Tri-2-corrections.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. - Clouds Impression . Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Python Libraries and Concepts used for Jupyter and Files/Directories . Introduction to displaying images in Jupyter notebook . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | What are the command you use in Windows terminal to access files? | What are some of the major differences? | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | How does the meta data source and label relate to Unit 5 topics? | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano-256.jpg&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;smiley&quot;, &#39;file&#39;: &quot;smile.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image greensquare = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(greensquare) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Translate first 3 letters of your name to Base64. | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | From your consumer experience, what effects have you experienced from buffering? | How do these effects apply to images? | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | Describe Grey Scale algorithm in English or Pseudo code? | Describe scale image? What is before and after on pixels in three images? | Is scale image a type of compression? If so, line it up with College Board terms described? | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano-256.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (320, 240) Scaled size: (320, 240) -- original image -- . grey image - . . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division # how are average pixel values found? if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano-256.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object # what is image data object? print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . grey image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . grey image . - meta data -- Lassen Volcano Peter Carolin lassen-volcano-256.jpg JPEG RGB Original size: (320, 240) Scaled size: (320, 240) -- scaled image -- . grey image . . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.2 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | . 2.3 College Board Practice Problems . . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;College Board&quot;, &#39;label&#39;: &quot;Data Compression&quot;, &#39;file&#39;: &quot;datacompression.png&quot;}, ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # display default images from image_data() default_images = image_data() image_display(default_images) . Playing around with PIL . Things to do . Display the altered image Observations | After altering the image, it is saved but not displayed yet. | . from PIL import Image def main(): try: #Relative Path img = Image.open(&quot;datacompression.png&quot;) #Angle given img = img.rotate(180) #Saved in the same relative location img.save(&quot;rotated_picture.jpg&quot;) except IOError: pass if __name__ == &quot;__main__&quot;: main() # why is image not being displayed . /bin/bash: -c: line 0: syntax error near unexpected token `rotatedpicture.jpg&#39; /bin/bash: -c: line 0: `[](rotatedpicture.jpg)&#39; . from PIL import Image filename = &quot;berserkpanel.jpg&quot; with Image.open(filename) as image: width, height = image.size . from PIL import Image def main(): try: #Relative Path img = Image.open(&quot;berserkpanel.jpg&quot;) width, height = img.size area = (0, 0, width/2, height/2) img = img.crop(area) #Saved in the same relative location img.save(&quot;cropped_picture.jpg&quot;) except IOError: pass if __name__ == &quot;__main__&quot;: main() .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/03/07/AP-unit2-2.html",
            "relUrl": "/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "List and Dictionaries",
            "content": "# &quot;List and Dictionaries&quot; &gt; &quot;Customized list and dictionary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . List and Dictionaries . This section is personalized to me and shows the things I like. This uses iteration - while loop . ThingsILike = [] ThingsILike.append({ &quot;FirstName&quot;: &quot;Ahad&quot; &quot;LastName:&quot; &quot;Biabani&quot; &quot;FavoriteFood:&quot; &quot;Steak&quot;, &quot;FavoriteSport&quot;: &quot;Ice Hockey&quot;, &quot;FavoriteVideoGame&quot;: &quot;BattleField 1&quot;, &quot;FavoriteArtist&quot;: &quot;Destroy Lonely&quot;, &quot;Hobbies&quot;: &quot;Ice Hockey and Video Games&quot;, &quot;FavoriteSubject&quot;: &quot;APCSP&quot; }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;FavoriteFood:&quot;, d_rec[&quot;FavoriteFood&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;FavoriteSport:&quot;, d_rec[&quot;FavoriteSport&quot;]) print(&quot; t&quot;, &quot;FavoriteVideoGame:&quot;, d_rec[&quot;FavoriteVideoGame&quot;]) print(&quot; t&quot;, &quot;FavoriteArtist:&quot;, d_rec[&quot;FavoriteArtist&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;,d_rec[&quot;Hobbies&quot;]) print(&quot; t&quot;, &quot;FavoriteSubject: &quot;,d_rec[&quot;FavoriteSubject&quot;]) print(end= &quot;&quot;) print() print(ThingsILike) #for loop algorithm iterates on length of Things I Like def while_loop():# while loop algorithm contains an initial n and an index incrementing statement (n += 1) print(&quot;While loop output n&quot;) i = 0 while i &lt; len(ThingsILike): record = ThingsILike[i] print_data(record) i += 1 return while_loop() # while loop algorithm contains an initial n and an index incrementing statement (n += 1) . This section is also personalized to me. This section uses iteration - for loop . AboutMe = [] AboutMe.append({ &quot;FirstName&quot;: &quot;Ahad&quot;, &quot;LastName&quot;: &quot;Biabani&quot;, &quot;DOB&quot;: &quot;Sept 18&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;aobiabain@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) print() def for_loop(): print(&quot;For loop output n&quot;) for record in AboutMe: print_data(record) for_loop() . . For loop output Ahad Biabani Email: aobiabain@gmail.com Residence: San Diego Birth Day: Sept 18 Cars: None . This section is also personalized to me. This uses iteration - recursive loop . AboutMe = [] AboutMe.append({ &quot;FirstName&quot;: &quot;Ahad&quot;, &quot;LastName&quot;: &quot;Biabani&quot;, &quot;DOB&quot;: &quot;Sept 18&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;aobiabain@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) print() def recursive_loop(i): if i &lt; len(AboutMe): record = AboutMe[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) # recursion algorithm loops incrementing on each call (n + 1) until exit condition is met . . Recursive loop output Ahad Biabani Email: aobiabain@gmail.com Residence: San Diego Birth Day: Sept 18 Cars: None . This is a quiz stored in a list . questions = 4 # number of quiz questions correct = 0 # initialize number of correct answers as 0 print(&quot;This is a 4 question quiz&quot;) def question_and_answer(prompt, answer): print(&quot;Question: &quot; + prompt) # asks user a question user_input = input() # takes user&#39;s input as variable msg print(&quot;Answer: &quot; + user_input) # print user&#39;s input as Answer if answer == user_input.lower(): # convert user&#39;s input to lowercase print(&quot;Correct Answer&quot;) global correct # allows to modify variable outside of current scope correct += 1 # add 1 to correct count else: print (&quot;Incorrect Answer&quot;) return user_input question_1 = question_and_answer(&quot;What is Ahads last name?&quot;, &quot;Biabani&quot;) question_2 = question_and_answer(&quot;What sport does Ahad play&quot;, &quot;Ice Hockey&quot;) question_3 = question_and_answer(&quot;How old is Ahad&quot;, &quot;16&quot;) question_4 = question_and_answer(&quot;When is his birthday?&quot;, &quot;September 18th&quot;) if correct &lt; 3: print(&#39;You scored {correct} correct answers out of 4, ur bad&#39;) elif correct &lt; 5: print(&#39;You scored {correct} correct answers out of 4, okay&#39;) else: print(&#39;You scored {correct} correct answers out of 4, good&#39;) print(&quot;A record of your quiz:&quot;) . This is a 4 question quiz Question: What is Ahads last name? .",
            "url": "https://ahadb63.github.io/ahadsblog/markdown/2023/03/05/list-and-dictionaries.html",
            "relUrl": "/markdown/2023/03/05/list-and-dictionaries.html",
            "date": " • Mar 5, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Project Blog",
            "content": "Pre-view/ Outline and write up . Category Expectation Explanation/Response . Program Purpose and Function | Describes the purpose of the program, describes the program&#39;s functionality, and can take an input and return an output. | The purpose of this website and program is to offer fun games that entertain while also providing a competitive edge. The program uses a virtual currency as well as a leaderboard to engage with the users. In game tokens or currency can be used and earned by interactions. | . Data Abstraction | Shows how data has been stored in a collection and shows data from that collection as it contributes to the overall purpose of the program. Identifies the name of a variable representing the collection being used and describes what the data contained in the collection represents in the program. | Our program abstracts data by creating records that are accessed in the backend database. The purpose of this database is to store information on users(Leaderboard stats, tokens, etc). User ID, name and password are things that are also stored | . Managing Complexity | Shows a collection of data that manages complexity. Explains an alternative method that would have been more complex and explains why that method could not be used or how it would have to be written differently. | There will be many alternative ways to track currency or program each game, so we will show how we chose the simplest way to achieve the desired functionality and explain how it could have been done another way. | . Procedural Abstraction | Shows a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure, and shows where that procedure is called. Describes how the procedure contributes to the functionality of the program. | Each of our 4 games will include all of these. They will all have at least 1 parameter that effects functionality | . Algorithm Implementation | Includes a student-developed algorithm that includes sequencing, selection, and iteration. Explains how the algorithm works in detail enough to where someone could recreate it. | The games that we develop for the virtual arcade will have sufficient algorithms to fit this criteria. | . Testing | Describe two calls to the selected procedure in response 3c. Each call must pass a argument that causes different outputs. Describes conditions being tested by each call. Identifies the result of each call. | We will test different features in each game, which test certain conditions and output different results. | . Create Performance Task . Each of our 4 members has thier own game in the website. This way everyones CPT project will be thier game that they are working on. FOr the N@TM, all of our games will be incorperated into a larget website which we are already doing. Website includes account signup, currency, and a leaderboard. . Code Plan . My code plan uses HTML, JavaScript, and CSS. My code plan has steps that will be completed in order so that nothing is missing/forgotten from the process. My code plan is also subject to change. . User pays 2 tokens to start game | Rules/ How to Play will be displayed before game starts | Game starts classic snake | classic rules Next step occurs when user dies | . | User will be shown a you lose screen | Leaderboard/highscore wil update | Retry/PLay again screen will appear and the process will repeat | Video Plan . In my video, I will show the game running. I will show what happens when you lose and run the game again. Highscores will be kept and updated. Every loss, -1 tokens. If you win, + 50 tokens (snake is hard to complete) There may also be some theme customization .",
            "url": "https://ahadb63.github.io/ahadsblog/cbq/2023/03/05/ProjectBlog.html",
            "relUrl": "/cbq/2023/03/05/ProjectBlog.html",
            "date": " • Mar 5, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "5.5 and 5.6 Notes",
            "content": "Legal and Ethical Concerns . License Communities, License Types Guide . - .",
            "url": "https://ahadb63.github.io/ahadsblog/notes/2023/02/08/notes-week-22.html",
            "relUrl": "/notes/2023/02/08/notes-week-22.html",
            "date": " • Feb 8, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Big Idea 5.6 Safe Computing",
            "content": "Safe Computing . Personal Identifiable Information (PII) . As we create a Web Site and post information we are adding to the Searchable PII. However, there is a dichotomy as a site like LinkedIn is a place where we want to be known for our accomplishments. But be aware, the person that looks at your LinkedIn will, most likely, look at things like TikTok, Instagram or Facebook. . PII considerations . Things that will be known by everyone: Name, Email (suggest a junk email), Picture, High School attended, College Attended, Properties you own, State-City of residence, all State-City of previous residence, Credit Reports, … | Gray area items, more cautious: Birth date, Place of Birth, Street Address, Phone Number, Maiden names of Mother and Grandmother, Drivers License Number, … | Things that you should strive to keep absolutely secret: Credentials for Access, Two-Factor Authentication on Financial accounts, Social Security Number, Tax records, … | . Beware, Establish practices for your own Safety . Multi-factor authentication often requires you to enter a code that has been texted or emailed to you. Other types of authentication are biometrics (finger print or facial recognition). | Malware is often sent in attachments to things in email. Often they request you to click on an attachment and it starts the process of adding a virus to your computer. | Phishing is where unknown sources try to entice you into a response, like click here and receive $500. Often such systems impersonate someone like Amazon asking for login information. Be careful to look closely at source of email (ie amzn.com vs amazon.com). | . Factors to Increase Security of System (recommend Watch 5.6 Video 2) . Most of my financials or critical systems use Multi Factor authentication | Biometrics is something that is used secure systems, fingerprints or facial recognition | Symmetric encryption is a type of encryption where only one key (a secret key) is used to both encrypt and decrypt electronic information. | Asymmetric cryptography, also known as public-key cryptography, is a process that uses a pair of related keys – one public key and one private key – to encrypt and decrypt a message and protect it from unauthorized access or use. | SSL Uses both Asymmetric and Symmetric Encryption | . Nefarious Uses of Internet . A Virus or Malware compromise security, they are opposite of increasing security. | Phishing is a way to get a Virus on your machine, or a way to get you to input PII. | After a Virus or being compromised by Phishing it is advised to review all of you PII vulnerabilities. | . Blog Post Reflection: . Describe PII you have seen on project in CompSci Principles. | When signing up for GitHub I used google. ThIs mean github has access to all the PII stored inside of my google account. Our own porject will be taking user PII in the form of thier full name. | . What are your feelings about PII and your personal exposure? | I think that some people share wayyy to much online and it ends up hurting them in the long run with things like jobs. Ive always kept my online small (compared to others) because of the fear of getting into trouble, or not finding a job later, etc. | . Describe good and bad passwords? What is another step that is used to assist in authentication. | Bad paswords are things that can be easily found out like your name, bday, fav number etc. A good number looks like a combinations of symbols, numbers and charachters that are randomized. | . Try to describe Symmetric and Asymmetric encryption. | Symmetric encryption is an encryption method where the same secret key is used for both encryption and decryption of data. It means that both the sender and the receiver must have the same key to encrypt and decrypt the data. . | Asymmetric encryption is an encryption method where different keys are used for encryption and decryption. The sender uses the receiver’s public key to encrypt the data, and the receiver uses their private key to decrypt the data. The public key can be freely shared and is used for encryption, while the private key must be kept secret and is used for decryption. . | . Provide an example of encryption we used in AWS deployment. | | . Describe a phishing scheme you have learned about the hard way. Describe some other phishing techniques. Sometimes when you click links such as a discord login, it is a fake discord website and they hack you. Fake sites or email address like google.com compared to goggle.com. They create fake logim pages and steal your info | . |",
            "url": "https://ahadb63.github.io/ahadsblog/safe",
            "relUrl": "/safe",
            "date": " • Feb 8, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Big Idea 5.5 Legal and Ethical Concerns",
            "content": "Cost of Free . In Mr Mortensen’s most recent years in industry, there were many Lawyers making a profession on Patents and how they can be impacted on General Public Licensing (GPL). . Qualcomm makes its money on patents, if you use GPL software you could be voiding your rights to charge for software and patents. Open Source by nature, specifically GPL, says any derivative work is free and code should be shared. Qualcomm wants all derivative work to require a royalty payment payment, also anyone who uses the idea/patent pays royalty. . . From synopsis.com, “Black Duck® software composition analysis (SCA) helps teams manage the security, quality, and license compliance risks that come from the use of open source and third-party code in applications and containers.” Qualcomm has had 20 technical jobs and 3 lawyers analyzing all the code produced, analyzing code for Open Source inclusion, and analyzing impact of such licenses to its ability to charge royalties for the use of their Patents. . This may sound like a simple problem, but think about the Students of Today, often they are given an assignment and instead of developing their own algorithm they opt to copy something off the internet. Well, don’t think the Workers of Today are entirely different. In summary, it is important to know the type of software license you are copying, it could impact billions of dollars in business. . License Communities, License Types Guide . Adding and selecting a license GitHub instructions. An author, a licensor, needs to determine a license. This may result in asking… Do I want to waive default copyright in reuse? | Do I want to allow derivative works or not? | Do I want to require all derivative code to be shared? | | . Creative Commons Zero v1.0 Universal . The Creative Commons CC0 Public Domain Dedication waives copyright interest in a work you’ve created and dedicates it to the world-wide public domain. . Open Source MIT License . This license in friendly to someone like Qualcomm! This allows using code freely and making and distributing closed source versions. Typically, the author of software with MIT License want credit. Credit could be as simple as adding the authors name in comments. . Close source means the GitHub project could be private. . Open Source GPL License . The GNU GPLv3 also lets people do almost anything they want with your project, except distributing closed source versions. . Open source means the GitHub project must be public. . For a company like Qualcomm, they are required to institute many practices to deliver their code in parts (public vs private). Isolating their patent and secret code, far away from the GPL or Creative Commons code. In fact, a company that is protecting their patents may need to division engineers, split distribution, not deploy to public, etc. After distribution, the customer of the Patented (ie Qualcomm) product is required to put the public/private domain code back together again. . Legal and Ethically . We need to comply with the terms of licenses. We need to cite sources. (I am particularly bad with internet pictures. However, in the picture of the Black Duck above I am actually advertising the Company). . As consumers, we have become aware that Music and Movie companies own content. These companies build DRM (Digital Rights Management) software to protect, play, and/or distribute content. Most of us buy subscriptions to services. However, some figure out ways to bypass systems and allow download. Often we will see these sites disappear, as they are illegal. . In software, it can be more complicated to understand all the Creative Commons licenses and its impact to our own ideas and businesses. Mostly, if we use things in class, there is “no problem” with Open Source as our usage is considered educational use. Creative Commons software has enabled amazing innovation as we are able to do so much for free, as we have done in this class. However, Individuals and Companies are required to figure out techniques and business models in order to use Open Source software according to terms of license. . Long ago, I remember being amazed that Red Hat was not selling its Linux distribution, they were giving away the software. They had to! This was in the terms of the licenses they were using, GPL. However, as an early pioneers in Linux distributions, they established a business model around buying their support agreement. They rose in fortune, became a public company, and had an amazing Initial Public Offering (IPO). Many, many vendors have followed the Red Hat model in building free distributions and establishing unique business models. Qualcomm figured out how to mix Patent and GPL businesses and have flourished since abandoning all proprietary, to include Android in its very complicated business model using Android. . Creative Commons, Open Source are free terminologies! However, businesses will not last without income. And today, businesses won’t last without engineers pulling Open Source software. . Blog Post Reflection . When you create a GitHub repository it requests a license type. Review the license types in relationship to this Tech Talk and make some notes in your personal blog. | Given many different options for license types, GNU GPL v3.0 | MIT License | Apache License 2.0 | GNU GPL v2.0. All these licenses call for your repository to remain an open source of code, which different requirements for people using your code. MIT License will be the most common license for this class, as it allows you to do whatever you want as long as you include the original copyright and license notice in any copy of the software/source. | . | . In your blog, summarize the discussions and personal analysis on Software Licenses/Options, Digital Rights, and other Legal and Ethical thoughts from this College Board topic. Licensing and the legal aspect of it is much more detailed and complicated than i thought it was. | I think licences and digital rights is a great things and its good that there are protective laws so that people follow proper procedure and dont steal content/ideas. | Digital rights and licences serve great importance because they allow for interation between creators and comsumers in places liek socail media and media apps. | . | Make a license for your personal (blog) and Team repositories for the CPT project. Be sure to have a license for both Team GitHub repositories (frontend/backend). Document license(s) you picked and why. FYI, frontend, since it is built on GitHub pages may come with a license and restrictions. Document in blog how team made license choice and process of update. | For our group frontend repo, we have a MIT License because we want to let anyone use our code, just give credit to us and acknowledge the license. Same for our backend repo as well. In order to update or add a license, we needed to create a file called LICENSE and use the MIT License template in GitHub. We entered the copyright year as 2023 under the name TripleAJ. Both repos are now licensed with an MIT License. | .",
            "url": "https://ahadb63.github.io/ahadsblog/legal",
            "relUrl": "/legal",
            "date": " • Feb 8, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "5.3 and 5.4 Notes",
            "content": "5.3 . Facebook vs TikTok . The biggest demographic of users on facebook (23.7%) is people age 25-34 | The biggest demographic of user on TikTok (32.5%) is people age 10-19 ### Is there descrimination and should it be corrected? | I dont think there is any discrimination. One app is older than the other therefor has older users and TikTok is a newer app so it attracts younger people. Both Facebook and Tiktok both know there demographics and they use this to their advantage. TikTok shows content that appeals to younger generation and facebook shoes content that appeals to older generations. | I dont think this shoukd be corrected becuase there is no discrimination. It is just that one app tends to attract newer generations | This method od uses your demographic to your advantage is good business. ### Why do virtual assistants have female voices? | more attracting | less deep | more inviting | calmer ### Hp computers are racist | I think the video was pretty funny and the dude wasnt being a karen about it. | He jokes about it being intentional but obviously he knows HP didnt program their computers to be racist | I think it wasnt harmful here but in other situations or with other people, some people might take serious offense and it can become a harmful issue. | This kind of issue should be recognized and fixed immediantly | . Summary . I think computer bias is an intresting topic that I never really thought about or looked into before today. Learning about computer bias brings out the emphasis on things like debugging and teamwork. Specifically having a team with lots of different people. Different people allow for different ideas to be shared and used. I also find it interesting how big companies like apple or tiktok use computer bias everyday to attract more people on to thier platfroms. Thinking about computer bias also leads to questions about the future. With new things like ChatGPT, the threat of computer bias increases. What will be the result if AI like chatgpt started to become really bias. . 5.4 . Crowdsourcing . Many websites and companies like Wikipedia use crowdsourcing | Crowdsourcing: The practice of obtaining information or input into a task or project by enlisting the services of a large number of people, either paid or unpaid, typically via the internet. | We have used crowdsorucing here in the form of API&#39;s | covid data is easy to recognize areas that are contributing and not contributing. This data has impacted all our lives and decision we make on attending public events, flying on planes, or wearing masks. The community of data and analysts will spawn many new ways of thinking about data that impacts lives. | . Hacks . We could use crowdsourcing in our own project. gathering game-specific data | Using gathered data we could update our games | we could gather feedback on the website | use feedback to update site | . | We could gather input/feedback/data from past or current CS students to improve the class and the classroom. | during N@TM we could gather feedback and/or ratings for each game then present it on the site. | .",
            "url": "https://ahadb63.github.io/ahadsblog/cbq/2023/02/01/5.3-and-5.4-notes.html",
            "relUrl": "/cbq/2023/02/01/5.3-and-5.4-notes.html",
            "date": " • Feb 1, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Project Blog",
            "content": "Pre-view/ Outline and write up . Category Expectation Explanation/Response . Program Purpose and Function | Describes the purpose of the program, describes the program&#39;s functionality, and can take an input and return an output. | The purpose of this website and program is to offer fun games that entertain while also providing a competitive edge. The program uses a virtual currency as well as a leaderboard to engage with the users. In game tokens or currency can be used and earned by interactions. | . Data Abstraction | Shows how data has been stored in a collection and shows data from that collection as it contributes to the overall purpose of the program. Identifies the name of a variable representing the collection being used and describes what the data contained in the collection represents in the program. | Our program abstracts data by creating records that are accessed in the backend database. The purpose of this database is to store information on users(Leaderboard stats, tokens, etc). User ID, name and password are things that are also stored | . Managing Complexity | Shows a collection of data that manages complexity. Explains an alternative method that would have been more complex and explains why that method could not be used or how it would have to be written differently. | There will be many alternative ways to track currency or program each game, so we will show how we chose the simplest way to achieve the desired functionality and explain how it could have been done another way. | . Procedural Abstraction | Shows a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure, and shows where that procedure is called. Describes how the procedure contributes to the functionality of the program. | Each of our 4 games will include all of these. They will all have at least 1 parameter that effects functionality | . Algorithm Implementation | Includes a student-developed algorithm that includes sequencing, selection, and iteration. Explains how the algorithm works in detail enough to where someone could recreate it. | The games that we develop for the virtual arcade will have sufficient algorithms to fit this criteria. | . Testing | Describe two calls to the selected procedure in response 3c. Each call must pass a argument that causes different outputs. Describes conditions being tested by each call. Identifies the result of each call. | We will test different features in each game, which test certain conditions and output different results. | . Create Performance Task . Each of our 4 members has thier own game in the website. This way everyones CPT project will be thier game that they are working on. FOr the N@TM, all of our games will be incorperated into a larget website which we are already doing. Website includes account signup, currency, and a leaderboard. . Code Plan . My code plan uses HTML, JavaScript, and CSS. My code plan has steps that will be completed in order so that nothing is missing/forgotten from the process. My code plan is also subject to change. . User pays 2 tokens to start game | Rules/ How to Play will be displayed before game starts | Game starts classic snake | classic rules Next step occurs when user dies | . | User will be shown a you lose screen | Leaderboard/highscore wil update | Retry/PLay again screen will appear and the process will repeat | Video Plan . In my video, I will show the game running. I will show what happens when you lose and run the game again. Highscores will be kept and updated. Every loss, -1 tokens. If you win, + 50 tokens (snake is hard to complete) There may also be some theme customization .",
            "url": "https://ahadb63.github.io/ahadsblog/cbq/2023/01/30/ProjectBlog.html",
            "relUrl": "/cbq/2023/01/30/ProjectBlog.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "College Board Quiz Results and Corrections",
            "content": "My Score . I got a 36/50 . . Corrections . Q14 . I answered C) Input A can be either true or false | The correct answer is A) Input A must be true. | . | Q15 . I answered C) | The correct answer is D) | . | Q17** . I answered A) and D) | These are shown as the right answers but for some reason I didnt get the point on this question | . | Q19 . I answerd B) Hotel | The right answer is C) November | . | Q23 . I answered D) 1 2 3 4 5 | The right answer is A) 5 | . | Q25 . I answered B) j&gt;=6 | The right answer is A j=6 | . | Q26 . I answered C) | The correct Answer is A) | . | Q29 . I answered D) | The right answer is A) | . | Q30 . I answered A) x ← 4 y ← 1 r ← 0 REPEAT 3 TIMES { drawCircle(x, y, r) r ← r + 1 y ← y + 1 } | The Correct answer is B) | . | Q32 . I answered A) | The correct answer is C) | . | Q34 . I answered c) 250 | The right answer is A) 10 | . | Q37 . I answered C) | The correct answer is B) | . | Q50 . I answered A) A | The correct answer is C) V | . | . Reflections . Overall, my score wasnt the best and I have lots of room to improve. Maybe working with others and collaborating on the quiz could help raise my score. I could also study and focus more on the flowchart problems, seeing I got most of them wrong. .",
            "url": "https://ahadb63.github.io/ahadsblog/cbq/2023/01/30/CBQ2.html",
            "relUrl": "/cbq/2023/01/30/CBQ2.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "5.1 Beneficial and Harmful Effects/ 5.2 Digital Divide (1/24/23)",
            "content": "Open AI and ChatGPT - Pros and Cons . Private company (cant buy stock) | ChatGPT is a disruptive technology changing the way we do things | . | ChatGPT may disrupt comapnies like Google Google gets payed of ads from google search | chat gpt gives more straight forward answers with less clicks compared to google. | . | Google will have to change thier platform and thier revenue model. | Schools are banning ChatGPT Positive: Kids stop cheating, kids arent relying on chatgpt to do thier work. | Cons: Creativity is taken away. Chat GPT is just like google but quicker and more effiecnt (in terms of what kids are using it for like searching answers/studying) | . | . Our Project . Benefits of our project: . Entertaining for the user if they are bored | It’s a good way to spend time with friends or family and have fun together | It’s a learning experience for everyone involved | . Potential con of our project: . It may be slightly buggy (it was developed by high schoolers) | People can procrastinate and play our games | . Dopamine Issues . Modern technolgy has led to an easy acces of dopamine | Easy access to dopamine raises things liek stress levels and it is hard to find other things fun after that | Social Media and digital companies pray of the fact that people, especially kids, get addicted to thier apps such as tiktok | . Personal . I think I use my phone a little too much but it is nothing threatening seeing I play sports, maintain good grades and have a social life. | I should consider decreasing screen time to combat procrastination | . Digital Divide . Unlike our school, lots of others have little to the technology we have we take our technology for granted | . | When the pandemic hit and digital learning increased, people who didnt have constant access to internet or technology suffered. | . Digital empowerment . Develop digital literacy skills . | Build a strong online presence . | Protect personal data . | Stay informed . | Network and collaborate . | Continuously learn and adapt . | How does someone that is empowered help someone that is not empowered? Describe something you could do at Del Norte HS. . If someone is more digitally empowered than another. THe obvious step is to share. Sharing resoucres such as wifi or laptops or iphones can help digitally empower another student. | Another way of helping without directly providing something physical is helping/teaching. Doing things like signing up for tutorial or asking questions from more knowledgable peers will help one increare there digital power | . Is paper or red tape blocking digital empowerment? Are there such barriers at Del Norte? Elsewhere? . Paper and red tape can slow down and stop digital empowerment becuase they make it harder to access information. These older systems take up more time and are less effiecnt as well as less knowledgeable. Digitilizing information makes it more convientint and effecient for others. | Example : Blocks on websites on PUSD Wifi some neccesary websites and applications require the bypassing of the school wifi. | . | .",
            "url": "https://ahadb63.github.io/ahadsblog/5.1%20notes/5.2%20notes/2023/01/24/week-20-notes.html",
            "relUrl": "/5.1%20notes/5.2%20notes/2023/01/24/week-20-notes.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "CPT Grading 3",
            "content": "Submission 1 . My Score: . My Rubric . College Board Score: . College Board Rubric . Reflection: . . Submission 2 . My Score: . My Rubric . College Board Score: . College Board Rubric . Reflection: . . Submission 3 . My Score: . My Rubric . College Board Score: . College Board Rubric . Reflection: . . Submission 4 . My Score: . My Rubric . College Board Score: . College Board Rubric . Reflection: . . takeaway .",
            "url": "https://ahadb63.github.io/ahadsblog/cpt3/2023/01/18/CPT-Grading-3.html",
            "relUrl": "/cpt3/2023/01/18/CPT-Grading-3.html",
            "date": " • Jan 18, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "Model and Object-Oriented Programming",
            "content": "Morts code . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11)) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) . JSON ready string: {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175} Raw Variables of object: {&#39;_name&#39;: &#39;Thomas Edison&#39;, &#39;_uid&#39;: &#39;toby&#39;, &#39;_password&#39;: &#39;sha256$9a8S4Pq01Nsodrj7$dd8869522055f7e696bc67d4ec6038373426ff78989929c910cb81b60fa1c723&#39;, &#39;_dob&#39;: datetime.date(1847, 2, 11)} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Thomas Edison, uid=toby, password=sha256$9a8S4Pq01Nsodrj7$dd8869522055f7e696bc67d4ec6038373426ff78989929c910cb81b60fa1c723,dob=1847-02-11) . Hacks Complete . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json #Start code for hacks with my b day and age def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) dob = date(2005, 9, 18) age = calculate_age(dob) print(age) class User: def __init__(self, name, uid, password, dob, classOf): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob self._classOf = classOf @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) @property def classOf(self): return self._classOf # a setter function, allows classOf to be updated after initial object creation @classOf.setter def name(self, classOf): self._classOf = classOf # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11), classOf=&#39;1865&#39;) u2 = User(name=&#39;Ahad Biabani&#39;, uid=&#39;Ahadb&#39;, password=&#39;Ahadb05&#39;, dob=date(2005, 9, 18), classOf=&#39;2024&#39;) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) print(&quot;JSON ready string: n&quot;, u2, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u2), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u2), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u2), &quot; n&quot;) . 17 JSON ready string: {&#34;name&#34;: &#34;1865&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175} Raw Variables of object: {&#39;_name&#39;: &#39;Thomas Edison&#39;, &#39;_uid&#39;: &#39;toby&#39;, &#39;_password&#39;: &#39;sha256$QLH8bOjsTBxHC89v$113df62e3512d645a6ea463f2eaaf85a920d8a5d945a3ac6fce94ae2d0c2a023&#39;, &#39;_dob&#39;: datetime.date(1847, 2, 11), &#39;_classOf&#39;: &#39;1865&#39;} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_classOf&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;classOf&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Thomas Edison, uid=toby, password=sha256$QLH8bOjsTBxHC89v$113df62e3512d645a6ea463f2eaaf85a920d8a5d945a3ac6fce94ae2d0c2a023,dob=1847-02-11) JSON ready string: {&#34;name&#34;: &#34;2024&#34;, &#34;uid&#34;: &#34;Ahadb&#34;, &#34;dob&#34;: &#34;01-06-2006&#34;, &#34;age&#34;: 17} Raw Variables of object: {&#39;_name&#39;: &#39;Ahad Biabani&#39;, &#39;_uid&#39;: &#39;Ahadb&#39;, &#39;_password&#39;: &#39;sha256$5rH0mTcTLI89t1M4$084cfd6833c1fcdcf962ac8e4597c591ec5dd2630538c9dddbd80625bac2f9f1&#39;, &#39;_dob&#39;: datetime.date(2006, 1, 6), &#39;_classOf&#39;: &#39;2024&#39;} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_classOf&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;classOf&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Ahad Biabani, uid=Ahadb, password=sha256$5rH0mTcTLI89t1M4$084cfd6833c1fcdcf962ac8e4597c591ec5dd2630538c9dddbd80625bac2f9f1,dob=2006-01-06) .",
            "url": "https://ahadb63.github.io/ahadsblog/oop/model%20and%20object-oriented%20programming/2023/01/16/OOP-hacks.html",
            "relUrl": "/oop/model%20and%20object-oriented%20programming/2023/01/16/OOP-hacks.html",
            "date": " • Jan 16, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "CPT Grading 2",
            "content": "Submission 1 . My Score: 1/6 . My Rubric . College Board Score: 1/6 . College Board Rubric . Reflection: My scoring and the college board scoring were similar on this submission. I recognized that the submission was missing a lot of components so they werent able to earn full points. . . Submission 2 . My Score: 6/6 . My Rubric . College Board Score: 6/6 . College Board Rubric . Reflection: My scoring and the college board scoring were the same. I felt like this submission was checking all the boxes as I was going through the rubric. I can use this as an example and for tips so that I also get full points. . . Submission 3 . My Score: 6/6 . My Rubric . College Board Score: 5/6 . College Board Rubric . Reflection: Again my score and college board&#39;s score are very similar this time mine being one points too high. This means that I recognized most of the good work the submission had but I might have went to easy on them and awarded another point . . Submission 4 . My Score: 5/6 . My Rubric . College Board Score: 3/6 . College Board Rubric . Reflection: This time my score and college boards score were a little off. I may have not analyzed the submissin correctly in accordance to the rubric therefor ending up giving the submission more points than it deserves. . . takeaway . Using both CPT grading 1 and 2, I am able to take away lots of information from the submissions. I now know what to do and what not do. Looking at succesful CPT projects has enabled me to take ideas and implement them into my own project for a full score. .",
            "url": "https://ahadb63.github.io/ahadsblog/cpt/2023/01/16/CPT-Grading-2.html",
            "relUrl": "/cpt/2023/01/16/CPT-Grading-2.html",
            "date": " • Jan 16, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "Submission 1",
            "content": "Submission 1 . Reporting Category Requirements Student Score College Board Score Comments . Program Purpose and Function | - [x] input | - [x] program functionality | - [x] output | - [x] It describes the overall purpose of the program. | - [x] describes what functionality of the program is demonstrated in the video. | - [x] describes the input and output of the program demonstrated in the video. | . | 1 | 0 | Submission one meets and fits all the requirements in this category. The program is functional, and gives a good description of the whole program | . Data Abstraction | - [x] It also includes two program code segments: | - [x] one that shows how data has been stored in this list (or other collection type). | - [x] Also one that shows the data in this same list being used as part of fulfilling the program’s purpose. | - [x]It also identifies the name of the variable representing the list being used in this response. | - [x] It describes what the data contained in this list is representing in the program. | . | 1 | 1 | Provides code segments and shoes how data is being inputed ans stored. User could have explained code segments a little more. | . Managing Complexity | - [ ] Also includes a program code segment that shows a list being used to manage complexity in the program. | - [ ] explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . | 0 | 0 | The submission does not get any points because it doesnt fulfill any of the criteria here | . Procedural Abstraction | - [x] It includes two program code segments: | - [x] one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. | - [x] one showing where the student-developed procedure is being called. | - [x] It describes what the identified procedure does and how it contributes to the overall functionality of the program. | . | 1 | 1 | The Submission has everything required for this section so they received full points | . Algorithmic Implementation | - [x] includes a program code segment of a student-developed algorithm that includes | - [x] sequencing | -[x] selection | [x] iteration | -[x]explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | &lt;/td&gt; 1 | 1 | Everything is describedand the algorithms are in use and explained well, code segments, sequencing, iteration, and selection are included | &lt;/tr&gt; Testing | - [x] describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. | -[x] describes the condition(s) being tested by each call to the procedure. | -[x] identifies the result of each call. | . | 1 | 1 | The submission fits all the criteria for this part | . &lt;/tbody&gt; &lt;/table&gt; Student 1 Reflection: The submission receieved 5/6. They had all the neccesary work completed for all the categories but the Managing Complexity section. They missed all the points possible in the managing complexity section becuase they met none of the requirements for that section. My score differs from teh college board score. College Board gave them a 4/6/, they lost points in the first category. The Submission needs to include something like a list so they can gain points for the managing complexity section. . Submission 2 . Reporting Category Requirements Student Score College Board Score Comments . Program Purpose and Function | - [x] input | - [x] program functionality | - [x] output | - [x] It describes the overall purpose of the program. | - [x] describes what functionality of the program is demonstrated in the video. | - [x] describes the input and output of the program demonstrated in the video. | . | 1 | 1 | All the requirements are met in this section. | . Data Abstraction | - [x] It also includes two program code segments: | - [x] one that shows how data has been stored in this list (or other collection type). | - [x] Also one that shows the data in this same list being used as part of fulfilling the program’s purpose. | - [x]It also identifies the name of the variable representing the list being used in this response. | - [x] It describes what the data contained in this list is representing in the program. | . | 1 | 1 | The submission has all the requirements met here and they even added comments to the code | . Managing Complexity | - [x] Also includes a program code segment that shows a list being used to manage complexity in the program. | - [x] explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . | 1 | 1 | The submission has all the requirements met and there are examples of required items | . Procedural Abstraction | - [x] It includes two program code segments: | - [x] one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. | - [x] one showing where the student-developed procedure is being called. | - [x] It describes what the identified procedure does and how it contributes to the overall functionality of the program. | . | 1 | 1 | The submission has all the requirements met. | . Algorithmic Implementation | - [x] includes a program code segment of a student-developed algorithm that includes | - [x] sequencing | -[x] selection | [x] iteration | -[x]explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | &lt;/td&gt; 1 | 1 | The submission has all the requirements met | &lt;/tr&gt; Testing | - [x] describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. | -[x] describes the condition(s) being tested by each call to the procedure. | -[x] identifies the result of each call. | . | 1 | 1 | Everything is described well and organized. | . &lt;/tbody&gt; &lt;/table&gt; Student 2 Reflection: The student had all the requirements that the college board rubric had. College board also scored this submission full points. The student consistenlt provided comments and examples to demonstrate they meet college board standards. In my own work I can use examples or techniques from this subbmission to help make sure I also get full points on my CPT. Using techniques like adding comments and mulitple examples for everything is good because it ensure that no points are missed. . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . | . | .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/01/15/CPT-Grading-1.html",
            "relUrl": "/2023/01/15/CPT-Grading-1.html",
            "date": " • Jan 15, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "Notes Week 15",
            "content": "3.8 and 3.10 . Lists . Lists: a sequence of variables . we can use lists to store multiple items into one variable | used to store collections of data | changeable, ordered, allow duplicates | . fruits = [&quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot;] index = 1 print (fruits[index]) # Index starts at 0 and not 1, so grape will be printed and not apple (College Board starts at 1) . grape . sports = [&quot;football&quot;, &quot;soccer&quot;, &quot;baseball&quot;, &quot;golf&quot;, &quot;basketball&quot;] # add &quot;golf&quot; as the 3rd element in the list print (sports) . [&#39;football&#39;, &#39;soccer&#39;, &#39;baseball&#39;, &#39;golf&#39;, &#39;basketball&#39;] . sports = [&quot;football&quot;, &quot;hockey&quot;, &quot;baseball&quot;, &quot;basketball&quot;] # change the value &quot;soccer&quot; to &quot;hockey&quot; print (sports) . [&#39;football&#39;, &#39;hockey&#39;, &#39;baseball&#39;, &#39;basketball&#39;] . Output of list practice is unusual, | . | . Iteration . Iteration is the repetition of a process or utterance applied to the result or taken from a previous statement. | Types of Iteration include using a &quot;for loop&quot;, using a &quot;for loop and range()&quot;, using a &quot;while loop&quot;, and using comprehension | . a = [&#39;alpha&#39;, &#39;bravo&#39;, &#39;charlie&#39;] itr = iter(a) print(next(itr)) print(next(itr)) print(next(itr)) . alpha bravo charlie . Loops . Well, above is basically just printing them again, so how do we takes these iterators into something we can make use for? | Loops take essentially what we did above and automates it, here are some examples. | . Iteration HW . words = [&quot;alfa&quot;, &quot;bravo&quot;, &quot;charlie&quot;, &quot;delta&quot;, &quot;echo&quot;, &quot;foxtrot&quot;, &quot;golf&quot;, &quot;hotel&quot;, &quot;india&quot;, &quot;juliett&quot;, &quot;kilo&quot;, &quot;lima&quot;, &quot;mike&quot;, &quot;november&quot;, &quot;oscar&quot;, &quot;papa&quot;, &quot;quebec&quot;, &quot;romeo&quot;, &quot;sierra&quot;, &quot;tango&quot;, &quot;uniform&quot;, &quot;victor&quot;, &quot;whiskey&quot;, &quot;xray&quot;, &quot;yankee&quot;, &quot;zulu&quot;] inp = input().lower() itr = iter(words) name = [&quot;delta&quot;, &quot;alpha&quot;, &quot;hotel&quot;] d = &quot;delta&quot; a = &quot;alfa&quot; h = &quot;hotel&quot; . 2d List Challenge . print_matrix3 = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] . 3.8 and 3.10 Hacks . hacks for 3.8 and 3.10 . sports = [&quot;football&quot;, &quot;hockey&quot;, &quot;baseball&quot;, &quot;basketball&quot;] # change the value &quot;soccer&quot; to &quot;hockey&quot; print (sports) . [&#39;football&#39;, &#39;hockey&#39;, &#39;baseball&#39;, &#39;basketball&#39;] . sports = [&quot;football&quot;, &quot;soccer&quot;, &quot;baseball&quot;, &quot;golf&quot;, &quot;basketball&quot;] # add &quot;golf&quot; as the 3rd element in the list print (sports) . [&#39;football&#39;, &#39;soccer&#39;, &#39;baseball&#39;, &#39;golf&#39;, &#39;basketball&#39;] . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] . def print_matrix3(matrix): for row in matrix: print(*row) print_matrix3(keypad) . 1 2 3 4 5 6 7 8 9 0 . def print_matrix1(matrix): for i in range(len(matrix)): for j in range(len(matrix[i])): print(matrix[i][j], end=&quot; &quot;) . print(&quot;Raw matrix (list of lists): &quot;) print(keypad) print(&quot;Matrix printed using nested for loop iteration:&quot;) print_matrix1(keypad) print() . Raw matrix (list of lists): [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&#39; &#39;, 0, &#39; &#39;]] Matrix printed using nested for loop iteration: 1 2 3 4 5 6 7 8 9 0 . def print_matrix2(matrix): for row in matrix: # Iterates through rows. Iterates through every value in matrix and list. for col in row: # Iterates value in row. row values stored in col. print(col, end=&quot; &quot;) print() print_matrix2(keypad) . 1 2 3 4 5 6 7 8 9 0 . words = [&quot;alfa&quot;, &quot;bravo&quot;, &quot;charlie&quot;, &quot;delta&quot;, &quot;echo&quot;, &quot;foxtrot&quot;, &quot;golf&quot;, &quot;hotel&quot;, &quot;india&quot;, &quot;juliett&quot;, &quot;kilo&quot;, &quot;lima&quot;, &quot;mike&quot;, &quot;november&quot;, &quot;oscar&quot;, &quot;papa&quot;, &quot;quebec&quot;, &quot;romeo&quot;, &quot;sierra&quot;, &quot;tango&quot;, &quot;uniform&quot;, &quot;victor&quot;, &quot;whiskey&quot;, &quot;xray&quot;, &quot;yankee&quot;, &quot;zulu&quot;] output = &quot;&quot; for letter in inp: for word in words: if letter == word[0]: # fidns rigth words output += word + &quot; &quot; # adds space print(inp + &quot; n&quot; + output) # input is ahad biabani . . Print what month you were born and how old you are by iterating through the keyboard (don&#39;t just write a string). . keyboard = [[&quot;`&quot;, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] . month = keyboard[2][1] + keyboard[1][2] + keyboard[1][9] + keyboard[1][4] + keyboard[1][2] + keyboard[3][6] + keyboard[3][4] + keyboard[1][2] + keyboard[1][3] age = str(keyboard[0][1]) + str(keyboard[0][8]) print(month[:1] + month[1:].lower()) print(age) . September 18 . NOTES . VARIABLE : A variable is a named location in a computer&#39;s memory where a programmer can store and retrieve data. The data stored in a variable can be of various types, such as numbers, strings, or booleans (true or false values). . DATA TYPE : Data types refer to the different types of data that a variable can hold. Some common data types include integers, floating-point numbers, strings, and booleans. . ASSIGNMENT OPERATORS : Assignment operators are used to assign a value to a variable. For example, the equal sign (=) is an assignment operator that is used to assign a value to a variable on the left side of the equal sign. . LISTS : Lists are a data structure that allows a programmer to store and manipulate multiple values in a single, ordered collection. . 2D LISTS :lists are lists that contain other lists as elements. They can be thought of as a grid, with rows and columns, where each element in the grid is itself a list. . DICTIONARIES : Dictionaries are another data structure that allows a programmer to store and manipulate data. Unlike lists, which are ordered collections of data, dictionaries are unordered collections of key-value pairs. . CLASS ALGORITHMS : A class is a concept in object-oriented programming that allows a programmer to define a new data type. A class can contain variables and functions (called methods) that operate on those variables. . ALGORITHMS Algorithms are a set of steps or instructions that a computer can follow to solve a problem or accomplish a task. . SEQUENCE : A sequence is a common control flow pattern in which a set of instructions is executed in order, one after the other. . SELECTION : Selection is a control flow pattern in which a program only executes certain instructions depending on whether a certain condition is met. . ITERATION : Iteration is a control flow pattern in which a set of instructions is executed repeatedly until a certain condition is met. This is often accomplished using a looping construct, such as a for loop or a while loop. . Expressions: In programming, an expression is a combination of values, variables, and operators that produces a result. Expressions can be used to perform calculations, assign values to variables, or as part of larger statements or programs. . Comparison Operators: Comparison operators are used to compare two values and determine whether they are equal, greater than, less than, or not equal to each other. Some common comparison operators include == (equal to), &gt; (greater than), &lt; (less than), &gt;= (greater than or equal to), and &lt;= (less than or equal to). . Boolean Expressions and Selection: A boolean expression is an expression that evaluates to either True or False. Boolean expressions are often used in selection statements, such as if and elif, to determine whether a certain block of code should be executed based on the value of the expression. . Boolean Expressions and Iteration: Boolean expressions can also be used in iteration statements, such as for and while, to control the number of times a loop is executed. For example, a while loop can be used to repeat a block of code as long as a boolean expression is True. . Truth Tables: A truth table is a table that displays the output of a logical expression for every possible combination of input values. Truth tables are used to analyze and understand the behavior of logical expressions, such as boolean expressions. . Characters: In programming, a character is a single letter, digit, punctuation mark, or other symbol that can be represented by a single code point in a computer&#39;s memory. Characters are often used to represent text or other types of data in programs. . Strings: A string is a sequence of characters that represents text or other data in a program. Strings are often used to store names, messages, or other types of data that need to be manipulated or displayed in a program. . Length: The length of a string is the number of characters it contains. In programming, the length of a string can be determined using the len() function. . Concatenation: Concatenation is the process of combining two or more strings into a single string. In programming, strings can be concatenated using the + operator. . Upper: The upper() function is used to convert a string to uppercase, meaning that all the letters in the string are converted to their uppercase counterparts. . Lower: The lower() function is used to convert a string to lowercase, meaning that all the letters in the string are converted to their lowercase counterparts. . Traversing Strings: Traversing a string refers to the process of iterating over the characters in a string one by one. This can be done using a loop or other iteration statement, such as a for loop. . Python If, Elif, Else Conditionals: The if statement in Python is used to execute a block of code only if a certain condition is met. The elif statement is used to specify additional conditions to be tested if the condition in the if statement is not met, and the else statement is used to specify a block of code to be executed if none of the conditions in the if and elif statements are met. . Nested Selection Statements: Nested selection statements are selection statements that are placed inside another selection statement. This allows for more complex logic to be implemented in a program, as the inner selection statements can be used to test additional conditions or execute different code based on the result of the outer selection statement. . Python For, While Loops with Range: The for loop in Python is used to iterate over a sequence of values, such as a list or a range of numbers. The while loop is used to execute a block of code repeatedly as long as a certain condition is met. The range() function is used to generate a sequence of numbers that can be used as the iterable in a for loop. . Python For, While Loops with List: The for loop and while loop can also be used to iterate over the elements of a list. This allows the code inside the loop to be executed for each element in the list. . Combining Loops with Conditionals to Break, Continue: Loops and conditionals can be combined in various ways to control the flow of a program. The break statement is used to exit a loop prematurely, and the continue statement is used to skip the rest of the current iteration of a loop and move on to the next one. . Procedural Abstraction: Procedural abstraction is a programming technique that involves breaking a complex task into smaller, more manageable pieces or procedures. This makes it easier to understand and work with large programs by dividing them into smaller, more easily understood units of code. . Python Def Procedures: In Python, a procedure is a block of code that performs a specific task and can be called multiple times from different parts of a program. Procedures are defined using the def keyword and can have parameters, which are variables that are used to pass data into the procedure, and return values, which are the values that the procedure returns to the caller when it is finished. . Parameters: In programming, parameters are variables that are used to pass data into a function or procedure. Parameters are specified when a function or procedure is defined, and the values for the parameters are provided when the function or procedure is called. . Return Values: In programming, a return value is the value that is returned to the caller of a function or procedure when it is finished executing. Return values are specified using the return keyword and can be used to pass data back to the caller or to indicate the status or result of the function or procedure. . result = 3 + 4 x = 3 * 4 + 5 if x &gt; 10: print(&quot;x is greater than 10&quot;) # expressions . if x &lt;= 3: print(&quot;x is less than or equal to 3&quot;) # comparasin operators . if x &gt; 3: print(&quot;x is greater than 3&quot;) elif x &lt; 3: print(&quot;x is less than 3&quot;) else: print(&quot;x is equal to 3&quot;) . x is greater than 3 . while x &gt; 3: print(&quot;x is still greater than 3&quot;) x -= 1 for i in range(10): if i % 2 == 0: print(f&quot;{i} is even&quot;) else: print(f&quot;{i} is odd&quot;) . x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 0 is even 1 is odd 2 is even 3 is odd 4 is even 5 is odd 6 is even 7 is odd 8 is even 9 is odd . print(&quot;AND operator:&quot;) print(f&quot;True AND True = {True and True}&quot;) print(f&quot;True AND False = {True and False}&quot;) print(f&quot;False AND True = {False and True}&quot;) print(f&quot;False AND False = {False and False}&quot;) . AND operator: True AND True = True True AND False = False False AND True = False False AND False = False . x = &#39;a&#39; . x = 3 y = 4 print(x + y) print (&quot;variable example&quot;) . 7 variable example . my_var = 10 # This is a variable with a floating-point data type my_other_var = 10.5 # This is a variable with a string data type my_string = &quot;Hello, world!&quot; print(&quot;data type examples&quot;) . data type examples . my_var = 10 # This is a variable that is assigned the value of another variable my_other_var = my_var print(&quot;assignment operator example&quot;) . assignment operator example . my_list = [&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;] # This is a list of integers my_other_list = [1, 2, 3, 4, 5] # This is an empty list my_empty_list = [] print(&quot;list examples&quot;) . list examples . 3.12 - 3.13 Notes . ## Calling Procedures | . Slide 1: . A (procedure) is a named group of programming instructions that may have parameters and return values. | Procedures are referred to by different names, such as (method) or (function), depending on the programing language. | Parameters are input values of a procedure. (arguments) specify the values of the parameters when procedure is called. | A procedure call interrupts the sequential execution of statements causing the program to execute the statements within the procedure before continuing. One the last statement in the procedure (or a return statement) has executed, flow or control is returned to the point immediately following where the procedure was (called). | . Slide 2: . When calling procedures, it&#39;s important to take notice to whether it returns data, or a block of (statements). | If the procedure just returns a block of statements, you call the procedure by referring to the procedure name, and (input) the arguments. | If the procedure returns some sort of data like a (boolean) or (value), then you will assign that value to a variable | . Slide 3: . Assume the Temperature outside is Fahrenheit. | The procedure convertFahrenheit is intended to convert from Fahrenheit to Celsius. | Convert the following psuedocode to python | . ## Developing Procedures | . Slide 8: . Picking a descriptive name is important in case you revisit the code later on (separate words with capitals) There are 2 different types of procedures- ones that return a value and those that simply execute a block of statements Steps of developing procedure: picking a useful name, thinking of parameters (what data does the procedure need to know), making a flowchart or writing procedure in pseudocode, and actually developing the procedure. . Slide 9: . In this example, a teacher is writing a program that will replace the grade on a previous quiz if the new grade is better than the previous. . quizGrade = 0 currentPoints = 100 def replace_quiz_grade(currentPoints): global quizGrade currentGrade = currentPoints / 40 currentGrade = currentGrade * 100 if currentGrade &gt; quizGrade: quizGrade = currentGrade print(quizGrade) replace_quiz_grade(currentPoints) print(quizGrade) . 3.12-3.13 Homework and hacks . def grade_tracker(): math_grade = input(&quot;What is your current grade in Math? &quot;) chemistry_grade = input(&quot;What is your current grade in Chemistry? &quot;) computer_science_grade = input(&quot;What is your current grade in Computer Science? &quot;) history_grade = input(&quot;What is your current grade in History? &quot;) print(&quot;Here are your current grades:&quot;) print(&quot;Math: &quot; + math_grade) print(&quot;Chemistry: &quot; + chemistry_grade) print(&quot;Computer Science: &quot; + computer_science_grade) print(&quot;History: &quot; + history_grade) grade_tracker() . Here are your current grades: Math: 90 Chemistry: 90 Computer Science: 90 History: 82 . 3.14 and 3.15 . Libraries . A library is a collection of precompiled codes that can be used later on in a program for some specific well-defined operations. | These precompiled codes can be referred to as modules. Each module contains bundles of code that can be used repeatedly in different programs. | A library may also contain documentation, configuration data, message templates, classes, and values, etc. | . Why are libraries important? . Using Libraries makes Python Programming simpler and convenient for the programmer. | One example would be through looping and iteration, as we don’t need to write the same code again and again for different programs. | Python libraries play a very vital role in fields of Machine Learning, Data Science, Data Visualization, etc. | . A few libraries that simplify coding processes: . Pillow allows you to work with images. | Tensor Flow helps with data automation and monitors performance. | Matplotlib allows you to make 2D graphs and plots. | . Hacks . pygame library: used for creating games in python. Pygame offers altered code and third party services to easily run and create games in python | Tensor flow is a python library that is used for computer learning and AI. This library caters towards building and running AI and computer learning in python. | . Homework . import random n = 10 even_numbers = [] odd_numbers = [] for i in range(n): num = random.randint(1, 100) if num % 2 == 0: even_numbers.append(num) else: odd_numbers.append(num) # Print the lists of even and odd numbers print(&quot;Even numbers:&quot;, even_numbers) print(&quot;Odd numbers:&quot;, odd_numbers) . Even numbers: [86, 18, 64, 76, 92] Odd numbers: [25, 49, 35, 45, 65] . import numpy as np def f(x): return 2 * x**5 - 6 * x**2 + 24 * x x = np.linspace(-10, 10, 100) dfdx = np.gradient(f(x)) print(dfdx) . [1.94309469e+04 1.86627722e+04 1.71729445e+04 1.57742420e+04 1.44628691e+04 1.32351110e+04 1.20873336e+04 1.10159834e+04 1.00175879e+04 9.08875536e+03 8.22617458e+03 7.42661527e+03 6.68692788e+03 6.00404362e+03 5.37497442e+03 4.79681302e+03 4.26673287e+03 3.78198822e+03 3.33991404e+03 2.93792609e+03 2.57352086e+03 2.24427563e+03 1.94784840e+03 1.68197796e+03 1.44448384e+03 1.23326634e+03 1.04630650e+03 8.81666144e+02 7.37487828e+02 6.11994882e+02 5.03491387e+02 4.10362186e+02 3.31072878e+02 2.64169819e+02 2.08280124e+02 1.62111667e+02 1.24453077e+02 9.41737454e+01 7.02238171e+01 5.16341972e+01 3.75165485e+01 2.70632913e+01 1.95476044e+01 1.43234240e+01 1.08254447e+01 8.56911877e+00 7.15065649e+00 6.24702608e+00 5.61595374e+00 5.09592357e+00 4.60617762e+00 4.14671591e+00 3.79829636e+00 3.72243488e+00 4.16140527e+00 5.43823933e+00 7.95672675e+00 1.22014152e+01 1.87376103e+01 2.82113755e+01 4.13495324e+01 5.89596604e+01 8.19300968e+01 1.11229937e+02 1.47909034e+02 1.93098000e+02 2.48008202e+02 3.13931770e+02 3.92241586e+02 4.84391295e+02 5.91915298e+02 7.16428753e+02 8.59627576e+02 1.02328844e+03 1.20926879e+03 1.41950680e+03 1.65602142e+03 1.92091237e+03 2.21636011e+03 2.54462585e+03 2.90805159e+03 3.30906005e+03 3.75015473e+03 4.23391990e+03 4.76302055e+03 5.34020246e+03 5.96829216e+03 6.65019694e+03 7.38890483e+03 8.18748465e+03 9.04908594e+03 9.97693903e+03 1.09743550e+04 1.20447257e+04 1.31915236e+04 1.44183022e+04 1.57286956e+04 1.71264186e+04 1.86152668e+04 1.93829518e+04] . import numpy as np def f(x): return 2 * x**5 - 6 * x**2 + 24 * x x = np.linspace(-10, 10, 100) dfdx = np.gradient(f(9)) print(dfdx) . [] . import numpy as np def f(x): return (13 * x**4 + 4 * x**2) / 2 dfdx = np.gradient(f(9)) print(dfdx) . [] . import random # Create a list of dogs and cats dogs_and_cats = [&quot;dog&quot;] * 10 + [&quot;cat&quot;] * 10 # Shuffle the list to create a random order random.shuffle(dogs_and_cats) # Print the list to see the random order print(dogs_and_cats) . [&#39;dog&#39;, &#39;dog&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;dog&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;dog&#39;, &#39;cat&#39;, &#39;dog&#39;, &#39;dog&#39;, &#39;dog&#39;, &#39;dog&#39;, &#39;dog&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;dog&#39;] . 3.16 HW . simulation ideas . planets crashing | cars crashing | objects falling (gravity) | . this is a simulation including gravity and an object falling . pos = 0 vel = 5 # Define the time step (in seconds) dt = 0.1 # Simulate the motion of the object while pos &gt;= 0: # Update the position of the object pos += vel * dt print(f&quot;Position: {pos}&quot;) # Update the velocity of the object (assuming constant acceleration) vel += -9.81 * dt # Print a message when the object hits the ground print(&quot;The object has hit the ground!&quot;) # This simulation models the motion of an object under the influence of gravity. # It updates the position and velocity of the object at each time step, using a simple kinematic equation. # The simulation continues until the object hits the ground (i.e., its position becomes negative), at which point it prints a message. . Position: 0.5 Position: 0.9019 Position: 1.2057000000000002 Position: 1.4114000000000002 Position: 1.5190000000000001 Position: 1.5285000000000002 Position: 1.4399000000000002 Position: 1.2532 Position: 0.9684000000000001 Position: 0.5855000000000001 Position: 0.10450000000000015 Position: -0.4745999999999998 The object has hit the ground! . Simulation example . Desmos graphing calculator | simulates and graphs equations | . . 3.17 - 3.18 Notes . What is Algorithmic Efficiency? . The ability of an algorithm to solve a problem in an efficient way | An efficient algorithm solves a problem quickly and with a minimum amount of resources, such as time and memory. | . How do we determine if an algorithm is efficient or not? . One way we can do this is by determining the time complexity of the algorithm | Another way is through space complexity | . heuristic solution: an approach to a problem that produces a solution that isn’t necessarily optimal but can be used when normal methods to an optimal solution would take forever | algorithmic efficiency: The ability of an algorithm to solve a problem in an efficient way | decidable problem: problem in cs and mathematics for which an algo can be created that can always produce a correct answer | undecidable problem: problem in cs and mathematics for which it is impossible to create an algorithm that can always provide a correct answer or solution. | . Undecidable code . def check_truth(statement): if statement == &quot;This statement is false&quot;: return &quot;UNDECIDABLE&quot; else: return statement result = check_truth(&quot;This statement is false&quot;) print(result) . UNDECIDABLE . def halts(program, input): # This function cannot be implemented because the Halting Problem is undecidable pass . import time def linear_search(lst, x): start_time = time.perf_counter_ns() # records time (nanoseconds) for i in range(len(lst)): # loops through the entire list if lst[i] == x: # until the x value we are looking for is found end_time = time.perf_counter_ns() # records time again total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time print(&quot;Found element after {} loops in {} microseconds&quot;.format(i+1, total_time)) # prints the results return print(&quot;Your number was found at&quot;, i) end_time = time.perf_counter_ns() # records the time again total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time print(&quot;Element not found after {} loops in {} microseconds&quot;.format(len(lst), total_time)) # prints the results return &quot;Your number wasn&#39;t found :(&quot; lst = list(range(1, 10001)) # list with numbers 1-10000 x = 5000 # replace with an integer between 1 and 10000 (I suggest big numbers like 500, 2000, so on) linear_search(lst, x) # runs procedure . Found element after 5000 loops in 347 microseconds Your number was found at 4999 . import time def binary_search(lt, x): start_time = time.perf_counter_ns() # starts timer low = 0 # sets the lower side mid = 0 # sets mid value high = len(lt) -1 # sets the higher side num_loops = 0 # number of loops the search undergoes to find the x value while low&lt;=high: # Loop ran until mid is reached num_loops += 1 # adds one loop each time process is repeated mid = (low + high) // 2 # takes the lowest and highest possible numbers and divides by 2 and rounds to closest whole # if lt[mid] == x: end_time = time.perf_counter_ns() # records time total_time = (end_time - start_time) // 1000 # time in microseconds print(&quot;Element found after {} loops in {} microseconds&quot;.format(num_loops, total_time)) # prints the results return mid # returns the index value elif lt[mid] &gt; x: # if mid was higher than x value, then sets new highest value as mid -1 high = mid -1 elif lt[mid] &lt; x: low = mid + 1 # if mid was lower than x, sets the new low as mid + 1 end_time = time.perf_counter_ns() total_time = (end_time - start_time) // 1000 print(&quot;Element not found after {} loops in {} microseconds&quot;.format(num_loops, total_time)) # prints the results return &quot;Your number wasn&#39;t found :(&quot; lt = list(range(1, 10001)) # list with numbers 1-10000 x = 1000 # replace with an integer between 1 and 10000 (I suggest big numbers like 500, 2000, so on) binary_search(lt, x) # runs procedure . Element found after 11 loops in 3 microseconds . 999 . . . graph description. . The first graph seems to be more linear than the second. Becuase the first graph is linear it is always increasing so he bigger your number is, the longer it takes to identify your number. My seconf graph is supposed to represent a more logarithmic function. the logarithmic like graph mean that it increases slower than the linear one. The second graph has a steeper curve meaning it will take less time to indentify your number. | . 3.18 hw . def binary_search(arr, target): &quot;&quot;&quot;Searches for a given target in a sorted array using binary search&quot;&quot;&quot; low = 0 high = len(arr) - 1 while low &lt;= high: mid = (low + high) // 2 if arr[mid] == target: return mid elif arr[mid] &lt; target: low = mid + 1 else: high = mid - 1 return -1 . while True: # Do some action print(&quot;I&#39;m running forever!&quot;) . I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! . KeyboardInterrupt Traceback (most recent call last) /vscode/ahadsblog/_notebooks/2022-12-15-Week 15 Notes.ipynb Cell 63 in &lt;cell line: 3&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2022-12-15-Week%2015%20Notes.ipynb#Y120sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; while True: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2022-12-15-Week%2015%20Notes.ipynb#Y120sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; # Do some action -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2022-12-15-Week%2015%20Notes.ipynb#Y120sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; print(&#34;I&#39;m running forever!&#34;) File ~/anaconda3/lib/python3.9/site-packages/ipykernel/iostream.py:531, in OutStream.write(self, string) 529 is_child = (not self._is_master_process()) 530 # only touch the buffer in the IO thread to avoid races --&gt; 531 self.pub_thread.schedule(lambda: self._buffer.write(string)) 532 if is_child: 533 # mp.Pool cannot be trusted to flush promptly (or ever), 534 # and this helps. 535 if self._subprocess_flush_pending: File ~/anaconda3/lib/python3.9/site-packages/ipykernel/iostream.py:216, in IOPubThread.schedule(self, f) 214 self._events.append(f) 215 # wake event thread (message content is ignored) --&gt; 216 self._event_pipe.send(b&#39;&#39;) 217 else: 218 f() File ~/anaconda3/lib/python3.9/site-packages/zmq/sugar/socket.py:547, in Socket.send(self, data, flags, copy, track, routing_id, group) 540 data = zmq.Frame( 541 data, 542 track=track, 543 copy=copy or None, 544 copy_threshold=self.copy_threshold, 545 ) 546 data.group = group --&gt; 547 return super(Socket, self).send(data, flags=flags, copy=copy, track=track) File zmq/backend/cython/socket.pyx:718, in zmq.backend.cython.socket.Socket.send() File zmq/backend/cython/socket.pyx:765, in zmq.backend.cython.socket.Socket.send() File zmq/backend/cython/socket.pyx:242, in zmq.backend.cython.socket._send_copy() File ~/anaconda3/lib/python3.9/site-packages/zmq/backend/cython/checkrc.pxd:13, in zmq.backend.cython.checkrc._check_rc() KeyboardInterrupt: .",
            "url": "https://ahadb63.github.io/ahadsblog/notes/3.8/3.1/2022/12/15/Week-15-Notes.html",
            "relUrl": "/notes/3.8/3.1/2022/12/15/Week-15-Notes.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Grades",
            "content": "Grades . 3.1 &amp; 3.2 3.3 and 3.4 3.5-3.7 3.8-3.10 3.9-3.11 3.12-3.13 3.14-3.15 3.16 3.17-3.18 . 0.95/1 | 1/1 | .9/1 | .9/1 | 3.3/4 | 0.9/1 | 0.9/1 | notposted | notposted | .",
            "url": "https://ahadb63.github.io/ahadsblog/grades/2022/12/15/GRADES.html",
            "relUrl": "/grades/2022/12/15/GRADES.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Notes Week 14",
            "content": "Grades . 3.1 &amp; 3.2 3.3 and 3.4 Total . 0.95/1 | 1/1 | 1.95/2 | . 3.1 and 3.2 . Variables . Using meaningful variable names help with readability and help keep stuff organized | be concisive with variables and thier names | . Integer . numbers | . text/string . words phrases | . Boolean . True or False | . List of data can be stored in variable . easily remove/add/change items into the list | print/retrieve specific values in the list without creating a lot of variables | help reduce need for new variables, simplifying the complexity | . Assignments . assignment operator allows a program to change the value represented by a variable. | assigns values to variables | Different operators lile =, +=, /=, *=, etc are used to change value of a variable | . Data Abstraction . Method used in coding to represent data in a useful form, by taking away aspects of data that aren&#39;t being used in the situation | Variables and lists are primary tools in data abstraction | data abstractions help manage complexity in programs by giving a collection of data a name without refernecing the specific detailsof the representation. | . Lists and Strings . list -&gt; ordered sequence of elements | Element -&gt; individual value in a list that is assigned to a unique index | Index -&gt; a way to reference the elements in a list or string using natural numbers; each element of a string is referenced by an index | String -&gt; ordered sequence of charachters (letters, numbers, special charachters.) | . Lists . allow data abstraction | bundles variables togther | can keep adding elements | can store elemetns as a single variable by using a list | . QuestionsandAnswers= { &quot;#1 | What is the operator that displays only true or false?&quot;: &quot;boolean&quot;, &quot;#2 | What lessons were taught by students this week?&quot;: &quot;3.1-3.4&quot;, &quot;#3 | Who is the best teacher?&quot;: &quot;mr.mort&quot;, &quot;#4 | Why are variables important?&quot;: &quot;meaningful variable names help with readability and help keep stuff organized&quot;, &quot;#5 | What is a list in coding?&quot;: &quot;ordered sequence of elements&quot;, } def QuestionandResponse(Question): # display the question then return a response print(Question) Response = input() return Response Correct = 0 # Setting up the start of the quiz print(&quot;Number of questions: &quot; + str(len(QuestionsandAnswers))) # Looks through code till desired answer for key in QuestionsandAnswers: rsp = QuestionandResponse(key) #answer input is saved to a variable rsp = rsp.lower() # answer is case sensitive, so match response to lowercase for answer key to work if rsp == QuestionsandAnswers[key]: # checks if answer is correct accoring to Questions and answers variale defined at the top. print(f&quot;Correct! --&gt; {rsp}&quot;) correct += 1 else: # if else statement to print either correct or incorrect print(f&quot;{rsp} is super wrong&quot;) percent = str(round(correct/len(QandA), 2)*100) # calculate percentage print(&quot;You scored &quot; + str(correct) +&quot;/&quot; + str(len(QandA))) print(f&quot;This is {percent}%&quot;) # print score and percentage . QuestionsandAnswers= { &quot;#1 | What is the operator that displays only true or false?&quot;: &quot;boolean&quot;, &quot;#2 | What lessons were taught by students this week?&quot;: &quot;3.1-3.4&quot;, &quot;#3 | Who is the best teacher?&quot;: &quot;mr.mort&quot;, &quot;#4 | Why are variables important?&quot;: &quot;meaningful variable names help with readability and help keep stuff organized&quot;, &quot;#5 | What is a list in coding?&quot;: &quot;ordered sequence of elements&quot;, } def QuestionandResponse(Question): # display the question then return a response print(Question) Response = input() return Response Correct = 0 # Setting up the start of the quiz print(&quot;Number of questions: &quot; + str(len(QuestionsandAnswers))) # Looks through code till desired answer for key in QuestionsandAnswers: rsp = QuestionandResponse(key) #answer input is saved to a variable # answer is case sensitive, so match response to lowercase for answer key to work if rsp == QuestionsandAnswers[key]: # checks if answer is correct accoring to Questions and answers variale defined at the top. print(f&quot;Correct! --&gt; {rsp}&quot;) correct += 1 else: # if else statement to print either correct or incorrect print(f&quot;{rsp} is super wrong&quot;) print(&quot;You scored &quot; + str(correct) +&quot;/&quot; + str(len(QuestionsandAnswers))) . colorList=[&quot;green&quot;, &quot;red&quot;, &quot;Blue&quot;] colorlist2=[] print(str(colorList)) . 3.3 and 3.4 . Algorithms can be represeted in different ways . flow charts | . strings . len() finds length | lower() converts to lowercase | concat() returns a string made up of the concatenated strings ex. concat(&quot;string1&quot;, &quot;string2&quot;) would return string1string2 | substring() returns the characters from the string beginning at the at the first position to the last so an example of this would be substring (&quot;abcdefghijk&quot;, 2, 5) would print bcde (pseudocode starts at 1) | . 3.3 and 3.4 hacks . Variable hacks . Problem 1 : 23.91 | Problem 2 : 1.25 | Problem 3 : 17 | Problem 4 : straightbrownshort | . Num1 = 50 Num2 = Num1 % 9 + 15 # 50 / 9 +15 = 20.5 Num3 = Num2 / Num1 + ( Num2 * 2 ) # 20.5/50 + (20.5 x 2) = 44.41 Num4 = Num3 + Num1 / 5 - 10 # 44.41+50/5 -10 Result = Num4 - Num2 RESULT = 23.91 . Num1 = 10 Num2 = Num1 % 3 * 4 #10/12 or 0.83 Num1 = Num2 # num 1 is now alos 0.83 Num3 = Num1 * 3 # num 3 is 2.5 Result = Num3 % 2 #num 3 (2.5) becomes 1.25 Result = 1.25 . valueA = 4 valueB = 90 valueC = 17 valueB = valueC - valueA # 17 - 4 valueA = valueA * 10 # 4 x 10 if valueB &gt; 10: # b is bigger than 10 print(valueC) # c stays 17 Result = 17 . type = &quot;curly&quot; color = &quot;brown&quot; length = &quot;short&quot; type = &quot;straight&quot; hair = type + color + length # straight + brown + short print(hair) . String hacks . Problem 1: &quot; Mr.Mortenson is very handsome. | Problem 2: | . Noun = &quot;Mr.Mortenson&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;Very&quot; Verb = &quot;is&quot; abrev = subtring(Noun, 1, 7) yoda = concat(Adjective2, &quot; &quot;, Adjective, &quot; &quot;, abrev, &quot; &quot;,Verb, &quot;.&quot;) display[yoda] . NameError Traceback (most recent call last) /vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb Cell 13 in &lt;cell line: 5&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb#X15sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; Adjective2 = &#34;Very&#34; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb#X15sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; Verb = &#34;is&#34; -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb#X15sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; abrev = subtring(Noun, 1, 7) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb#X15sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; yoda = concat(Adjective2, &#34; &#34;, Adjective, &#34; &#34;, abrev, &#34; &#34;,Verb, &#34;.&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb#X15sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; display[yoda] NameError: name &#39;subtring&#39; is not defined . cookie = len(&quot;choclate&quot;) # 8 cookie2 = len(&quot;rasin&quot;) # 5 len1 = cookie / 2 # 8/2 = 4 len2 = cookie2 * 45 # 5 x 45 = 225 vote1 = (cookie, &quot;vote&quot;, len2) # 8, vote, 225 vote2 = (cookie2, &quot;vote&quot;, len1) # 5, vote, 4 votes = concat(vote1, &quot; &quot;, vote2) #8 vote 225 5 vote 4 display[votes] # 225 vote chocolate, 4 vote rasin . NameError Traceback (most recent call last) /vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb Cell 14 in &lt;cell line: 7&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; vote1 = (cookie, &#34;vote&#34;, len2) # 8, vote, 225 &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; vote2 = (cookie2, &#34;vote&#34;, len1) # 5, vote, 4 -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; votes = concat(vote1, &#34; &#34;, vote2) #8 vote 225 5 vote 4 &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; display[votes] NameError: name &#39;concat&#39; is not defined . 3.5 , 3.6 , 3.7 Notes and Problems . Boolean: data type with two possible values (true or false) | Selection(conditionals): uses a condition that evaluates to true or false Selection determines which part of an algorithm are executed based on a condition being true or false | . | Algorithm is a finite set of instructions that accomplish a specific task | Nested conditional statements consist of conditional statements within other conditional statements | | . grade1 = 90 grade2 = 65 grade3 = 60 grade4 = 75 grade5 = 95 GradeAverage = (90 + 65 + 75 + 60 + 95) / 5 if GradeAverage &gt; 80 : print(GradeAverage) else : print(&quot;no&quot;) . print(&quot;100 == 100:&quot;,100==100) print(&quot;Hello == Adios:&quot;,&quot;greeting&quot;==&quot;farewell&quot;) print(&quot;Hello != Adios:&quot;,&quot;greeting&quot;!=&quot;farewell&quot;) print(&quot;Hello == Hola:&quot;,&quot;greeting&quot;==&quot;greeting&quot;) print(&quot;5&gt;=4:&quot;, 5&gt;=4) print (&#39;&#39;) # Notice that relational operators can even work on lists! # For lists, the relational operator compares each respective component until an answer is derived print(&quot;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]:&quot;, [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]) print(&quot;[1,2,3,5] &gt; [1,2,3,4]:&quot;, [1,2,3,5] &gt; [1,2,3,4]) print(&quot;[1,2,3,5] &lt; [1,2,3,4]:&quot;, [1,2,3,5] &lt; [1,2,3,4]) print(&quot;[1,2,3,5] == [1,2,3,4]:&quot;, [1,2,3,5] == [1,2,3,4]) . print(&quot;1 &gt; 2 or 5 &lt; 12:&quot;,) # Output TRUE using OR ^ # Output FALSE using NOT print(&quot;24 &gt; 8:&quot;,) # Output FALSE using AND print(&quot;10 &gt; 20:&quot;, 10 &gt; 20 and false) . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) else: print(&quot;x is not greater than y&quot;) . x = 2 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) else: print(&quot;x is not greater than y&quot;) . num1 = 100 num2 = 100 sum = num1 + num2 if sum &gt;= 200: print(&quot;200&quot;) else: print(sum) . Analyzing Code Walkthrough . score = 82 if (score &gt;= 90) { console.log(&quot;You got an A, congrats!&quot;) } else { if (score &gt;= 75) { console.log(&quot;Please come to retake up to a 90 next week at tutorial!&quot;) } else { console.log(&quot;You have detention!&quot;) } } //will print &#39;Please come to retake up to a 90 next week at tutorial!&#39; because score &gt;= 75. //javascript dont work on python base kernel . protein = 25 carbs = 36 sugar = 11 if (carbs &gt;= 55 || protein &lt;= 20 || sugar &gt;= 15) { console.log(&quot;Your lunch is too unhealthy, please pick a new one&quot;) } else { if (carbs &lt; 35 || protein &lt; 25) { console.log (&quot;This lunch is alright but try to add some more carbs or protein&quot;) } else { if (sugar &gt;= 11) { console.log (&quot;Looks great but lets see if we can cut down on sugar, we don&#39;t want diabetes!&quot;) } else { console.log (&quot;Amazing, you created a healthy lunch!!!&quot;) } } } // will print &quot;Looks great but lets see if we can cut down on sugar, we don&#39;t want diabetes!&quot; //javascript dont work on python base kernel . Writing Nested Code Activity . hours = 25 if (hours &lt;= 8) { print(&quot;inexpierenced, 50k salary&quot;) } else { if (hours &gt;= 10) { print(&quot;expierenced, 150k salary&quot;) } else { print(&quot;Expierenced, 90k salary&quot;) } } //javascript dont work on python base kernel . 3.5 - 3.7 hacks . Write a program that fits these conditions using nested conditionals: . If the product is expired, print &quot;this product is no good&quot; If the cost is above 50 dollars, and the product isn&#39;t expired, print &quot;this product is too expensive&quot; If the cost is 25 dollars but under 50, and the product isn&#39;t expired, print &quot;this is a regular product&quot; If the cost is under 25 dollars, print &quot;this is a cheap product&quot; . x = &quot;expired&quot; product = x cost = 70 if (product &lt;= x, cost &lt;= 50): print(&quot;This product good and not expensive&quot; ); else: if (product &gt;= x, cost &gt;= 50): print(&quot;Product is not good and expensive&quot;); else: if (product &lt;= x, cost &lt;= 25): print(&quot;regular product&quot;) else: print(&quot;cheap product&quot;) . This product good and not expensive . x = 0 score = x # Question One print(&quot;What is 1 + 1&quot;) answer_1 = input(&quot;a)1 b)2 c)3 d)4:&quot;) if answer_1.lower() == &quot;b&quot; or answer_1.lower() == &quot;2&quot;: print(&quot;Correct&quot;) x = x + 1 else: print(&quot;Incorrect, 1 + 1 is 2&quot;) # Question Two print(&quot;What is my name?&quot;) answer_2 = input(&quot;a)ahad b)akshat c)xeem d)josh:&quot;) if answer_2.lower() == &quot;a&quot; or answer_2.lower() == &quot;ahad&quot;: print(&quot;Correct&quot;) x = x + 1 else: print(&quot;Incorrect, my name is Ahad&quot;) # Question Three print(&quot;True or False Ahad is 17&quot;) answer_3 = input(&quot;:&quot;) if answer_3.lower() == &quot;true&quot; or answer_3.lower() == &quot;T&quot;: print(&quot;Correct&quot;) x = x + 1 else: print(&quot;Incorrect&quot;) #Total Score score = float(x / 3) * 100 print(x,&quot;out of 3, that is&quot;,score, &quot;%&quot;) . What is 1 + 1 Correct What is my name? Correct True or False Ahad is 17 Incorrect 2 out of 3, that is 66.66666666666666 % .",
            "url": "https://ahadb63.github.io/ahadsblog/notes%2011/28/22/3.1/3.2/2022/12/01/Notes.html",
            "relUrl": "/notes%2011/28/22/3.1/3.2/2022/12/01/Notes.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Week 13 Lesson Planning",
            "content": "Our Group . - .",
            "url": "https://ahadb63.github.io/ahadsblog/week13/2022/11/22/Week-13.html",
            "relUrl": "/week13/2022/11/22/Week-13.html",
            "date": " • Nov 22, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "List and Dictionaries",
            "content": "# &quot;List and Dictionaries&quot; &gt; &quot;Customized list and dictionary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . List and Dictionaries . This section is personalized to me and shows the things I like. This uses iteration - while loop . ThingsILike = [] ThingsILike.append({ &quot;FirstName&quot;: &quot;Ahad&quot; &quot;LastName:&quot; &quot;Biabani&quot; &quot;FavoriteFood:&quot; &quot;Steak&quot;, &quot;FavoriteSport&quot;: &quot;Ice Hockey&quot;, &quot;FavoriteVideoGame&quot;: &quot;BattleField 1&quot;, &quot;FavoriteArtist&quot;: &quot;Destroy Lonely&quot;, &quot;Hobbies&quot;: &quot;Ice Hockey and Video Games&quot;, &quot;FavoriteSubject&quot;: &quot;APCSP&quot; }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;FavoriteFood:&quot;, d_rec[&quot;FavoriteFood&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;FavoriteSport:&quot;, d_rec[&quot;FavoriteSport&quot;]) print(&quot; t&quot;, &quot;FavoriteVideoGame:&quot;, d_rec[&quot;FavoriteVideoGame&quot;]) print(&quot; t&quot;, &quot;FavoriteArtist:&quot;, d_rec[&quot;FavoriteArtist&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;,d_rec[&quot;Hobbies&quot;]) print(&quot; t&quot;, &quot;FavoriteSubject: &quot;,d_rec[&quot;FavoriteSubject&quot;]) print(end= &quot;&quot;) print() print(ThingsILike) #for loop algorithm iterates on length of Things I Like def while_loop():# while loop algorithm contains an initial n and an index incrementing statement (n += 1) print(&quot;While loop output n&quot;) i = 0 while i &lt; len(ThingsILike): record = ThingsILike[i] print_data(record) i += 1 return while_loop() # while loop algorithm contains an initial n and an index incrementing statement (n += 1) . This section is also personalized to me. This section uses iteration - for loop . AboutMe = [] AboutMe.append({ &quot;FirstName&quot;: &quot;Ahad&quot;, &quot;LastName&quot;: &quot;Biabani&quot;, &quot;DOB&quot;: &quot;Sept 18&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;aobiabain@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) print() def for_loop(): print(&quot;For loop output n&quot;) for record in AboutMe: print_data(record) for_loop() . . For loop output Ahad Biabani Email: aobiabain@gmail.com Residence: San Diego Birth Day: Sept 18 Cars: None . This section is also personalized to me. This uses iteration - recursive loop . AboutMe = [] AboutMe.append({ &quot;FirstName&quot;: &quot;Ahad&quot;, &quot;LastName&quot;: &quot;Biabani&quot;, &quot;DOB&quot;: &quot;Sept 18&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;aobiabain@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) print() def recursive_loop(i): if i &lt; len(AboutMe): record = AboutMe[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) # recursion algorithm loops incrementing on each call (n + 1) until exit condition is met . . Recursive loop output Ahad Biabani Email: aobiabain@gmail.com Residence: San Diego Birth Day: Sept 18 Cars: None . This is a quiz stored in a list . questions = 4 # number of quiz questions correct = 0 # initialize number of correct answers as 0 print(&quot;This is a 4 question quiz&quot;) def question_and_answer(prompt, answer): print(&quot;Question: &quot; + prompt) # asks user a question user_input = input() # takes user&#39;s input as variable msg print(&quot;Answer: &quot; + user_input) # print user&#39;s input as Answer if answer == user_input.lower(): # convert user&#39;s input to lowercase print(&quot;Correct Answer&quot;) global correct # allows to modify variable outside of current scope correct += 1 # add 1 to correct count else: print (&quot;Incorrect Answer&quot;) return user_input question_1 = question_and_answer(&quot;What is Ahads last name?&quot;, &quot;Biabani&quot;) question_2 = question_and_answer(&quot;What sport does Ahad play&quot;, &quot;Ice Hockey&quot;) question_3 = question_and_answer(&quot;How old is Ahad&quot;, &quot;16&quot;) question_4 = question_and_answer(&quot;When is his birthday?&quot;, &quot;September 18th&quot;) if correct &lt; 3: print(&#39;You scored {correct} correct answers out of 4, ur bad&#39;) elif correct &lt; 5: print(&#39;You scored {correct} correct answers out of 4, okay&#39;) else: print(&#39;You scored {correct} correct answers out of 4, good&#39;) print(&quot;A record of your quiz:&quot;) . This is a 4 question quiz Question: What is Ahads last name? .",
            "url": "https://ahadb63.github.io/ahadsblog/markdown/2022/11/15/list-and-dictionaries.html",
            "relUrl": "/markdown/2022/11/15/list-and-dictionaries.html",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "MC Corrections and Final Presentation notes/review",
            "content": "Final Presentation Notes . For the final presentations I took notes on Haozuan, Aj, Paaras, and Samarth&#39;s group. . Theme of thier website: Motivational Website They provided a quote generator | quotes -included happy quotes, motivational quotes (used api) | . | They had a tracker/voter-thingy to see how many people disliked or liked the joke | A counter would tell you the stats of the quote | . | . I think this group did a great job on thier site, it was ver9y detailed and appealing. . College Board Quiz Corrections . Q5: My answer was A (II only), Correct answer was B(III only) | Q30: My answer was A (Keeping the numeric values in a list makes it easier to round a number to the nearest integer.) Correct answer is B(Keeping the numeric values in a list makes it easier to apply the same computation to every data element.) | Q34: My answer was C([&quot;flute&quot;, &quot;violin&quot;]), the correct answer was B([&quot;guitar&quot;, &quot;drums&quot;, &quot;bass&quot;]) | Q19: My answer was B(An overflow error will occur because 4 bits is not large enough to represent either of the values 14 or 15.), The correct answer was C(An overflow error will occur because 4 bits is not large enough to represent 29, the sum of 14 and 15.) | Q20: My answer was B(Four bits are not enough to store the eight directions. Eight bits are needed for the new version of the game.), The correct answer was D(Four bits are enough to store the eight directions.) | Q23: My answer was A(The position of the runner is determined by calculating the time difference between the start and the end of the race and making an estimation based on the runner’s average speed.). The correct answer was D(The position of the runner is sampled at regular intervals to approximate the real-word position, and a sequence of bits is used to represent each sample.) | Q37: My answer was A, the correct answer was B | Q41: My answer was D(40), the correct answer was B(20) | Q45: My answer was A(count1 = 2, count2 = 2). The correct answer is B(count1 = 2, count2 = 3) | Q49: My answer was A(wordword ←concat(reverse(word), word)). The correct asnwer is C(word ←&quot;on&quot;word ←concat(reverse(word), word)). | . img .",
            "url": "https://ahadb63.github.io/ahadsblog/final/2022/11/07/Final.html",
            "relUrl": "/final/2022/11/07/Final.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . import http.client conn = http.client.HTTPSConnection(&quot;corona-virus-world-and-india-data.p.rapidapi.com&quot;) headers = { &#39;X-RapidAPI-Key&#39;: &quot;3d86dd31a2mshca1f32e22e2396cp1f7302jsn610cf54ceeb6&quot;, &#39;X-RapidAPI-Host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } conn.request(&quot;GET&quot;, &quot;/api_india_timeline&quot;, headers=headers) res = conn.getresponse() data = res.read() print(data.decode(&quot;utf-8&quot;)) . [{&#34;dailyconfirmed&#34;:&#34;1&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;30 January 2020&#34;,&#34;dateymd&#34;:&#34;2020-01-30&#34;,&#34;totalconfirmed&#34;:&#34;1&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;31 January 2020&#34;,&#34;dateymd&#34;:&#34;2020-01-31&#34;,&#34;totalconfirmed&#34;:&#34;1&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;1 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-01&#34;,&#34;totalconfirmed&#34;:&#34;1&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;1&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;2 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-02&#34;,&#34;totalconfirmed&#34;:&#34;2&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;1&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;3 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-03&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;4 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-04&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;5 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-05&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;6 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-06&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;7 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-07&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;8 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-08&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;9 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-09&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;10 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-10&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;11 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-11&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;12 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-12&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;1&#34;,&#34;date&#34;:&#34;13 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-13&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;1&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;14 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-14&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;1&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;15 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-15&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;1&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;1&#34;,&#34;date&#34;:&#34;16 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-16&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;2&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;17 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-17&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;2&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;18 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-18&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;2&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;19 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-19&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;2&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;1&#34;,&#34;date&#34;:&#34;20 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-20&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;21 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-21&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;22 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-22&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;23 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-23&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;24 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-24&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;25 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-25&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;26 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-26&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;27 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-27&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;28 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-28&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;29 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-29&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;1 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-01&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;2&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;2 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-02&#34;,&#34;totalconfirmed&#34;:&#34;5&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;1&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;3 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-03&#34;,&#34;totalconfirmed&#34;:&#34;6&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;22&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;4 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-04&#34;,&#34;totalconfirmed&#34;:&#34;28&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;2&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;5 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-05&#34;,&#34;totalconfirmed&#34;:&#34;30&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;1&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;6 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-06&#34;,&#34;totalconfirmed&#34;:&#34;31&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;3&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;7 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-07&#34;,&#34;totalconfirmed&#34;:&#34;34&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;5&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;8 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-08&#34;,&#34;totalconfirmed&#34;:&#34;39&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;9&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;9 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-09&#34;,&#34;totalconfirmed&#34;:&#34;48&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;15&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;1&#34;,&#34;date&#34;:&#34;10 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-10&#34;,&#34;totalconfirmed&#34;:&#34;63&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;4&#34;},{&#34;dailyconfirmed&#34;:&#34;8&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;11 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-11&#34;,&#34;totalconfirmed&#34;:&#34;71&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;4&#34;},{&#34;dailyconfirmed&#34;:&#34;10&#34;,&#34;dailydeceased&#34;:&#34;1&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;12 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-12&#34;,&#34;totalconfirmed&#34;:&#34;81&#34;,&#34;totaldeceased&#34;:&#34;1&#34;,&#34;totalrecovered&#34;:&#34;4&#34;},{&#34;dailyconfirmed&#34;:&#34;10&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;6&#34;,&#34;date&#34;:&#34;13 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-13&#34;,&#34;totalconfirmed&#34;:&#34;91&#34;,&#34;totaldeceased&#34;:&#34;1&#34;,&#34;totalrecovered&#34;:&#34;10&#34;},{&#34;dailyconfirmed&#34;:&#34;11&#34;,&#34;dailydeceased&#34;:&#34;1&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;14 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-14&#34;,&#34;totalconfirmed&#34;:&#34;102&#34;,&#34;totaldeceased&#34;:&#34;2&#34;,&#34;totalrecovered&#34;:&#34;10&#34;},{&#34;dailyconfirmed&#34;:&#34;10&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;3&#34;,&#34;date&#34;:&#34;15 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-15&#34;,&#34;totalconfirmed&#34;:&#34;112&#34;,&#34;totaldeceased&#34;:&#34;2&#34;,&#34;totalrecovered&#34;:&#34;13&#34;},{&#34;dailyconfirmed&#34;:&#34;14&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;1&#34;,&#34;date&#34;:&#34;16 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-16&#34;,&#34;totalconfirmed&#34;:&#34;126&#34;,&#34;totaldeceased&#34;:&#34;2&#34;,&#34;totalrecovered&#34;:&#34;14&#34;},{&#34;dailyconfirmed&#34;:&#34;20&#34;,&#34;dailydeceased&#34;:&#34;1&#34;,&#34;dailyrecovered&#34;:&#34;1&#34;,&#34;date&#34;:&#34;17 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-17&#34;,&#34;totalconfirmed&#34;:&#34;146&#34;,&#34;totaldeceased&#34;:&#34;3&#34;,&#34;totalrecovered&#34;:&#34;15&#34;},{&#34;dailyconfirmed&#34;:&#34;25&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;18 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-18&#34;,&#34;totalconfirmed&#34;:&#34;171&#34;,&#34;totaldeceased&#34;:&#34;3&#34;,&#34;totalrecovered&#34;:&#34;15&#34;},{&#34;dailyconfirmed&#34;:&#34;27&#34;,&#34;dailydeceased&#34;:&#34;1&#34;,&#34;dailyrecovered&#34;:&#34;5&#34;,&#34;date&#34;:&#34;19 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-19&#34;,&#34;totalconfirmed&#34;:&#34;198&#34;,&#34;totaldeceased&#34;:&#34;4&#34;,&#34;totalrecovered&#34;:&#34;20&#34;},{&#34;dailyconfirmed&#34;:&#34;58&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;3&#34;,&#34;date&#34;:&#34;20 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-20&#34;,&#34;totalconfirmed&#34;:&#34;256&#34;,&#34;totaldeceased&#34;:&#34;4&#34;,&#34;totalrecovered&#34;:&#34;23&#34;},{&#34;dailyconfirmed&#34;:&#34;78&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;21 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-21&#34;,&#34;totalconfirmed&#34;:&#34;334&#34;,&#34;totaldeceased&#34;:&#34;4&#34;,&#34;totalrecovered&#34;:&#34;23&#34;},{&#34;dailyconfirmed&#34;:&#34;69&#34;,&#34;dailydeceased&#34;:&#34;3&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;22 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-22&#34;,&#34;totalconfirmed&#34;:&#34;403&#34;,&#34;totaldeceased&#34;:&#34;7&#34;,&#34;totalrecovered&#34;:&#34;23&#34;},{&#34;dailyconfirmed&#34;:&#34;94&#34;,&#34;dailydeceased&#34;:&#34;2&#34;,&#34;dailyrecovered&#34;:&#34;2&#34;,&#34;date&#34;:&#34;23 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-23&#34;,&#34;totalconfirmed&#34;:&#34;497&#34;,&#34;totaldeceased&#34;:&#34;9&#34;,&#34;totalrecovered&#34;:&#34;25&#34;},{&#34;dailyconfirmed&#34;:&#34;74&#34;,&#34;dailydeceased&#34;:&#34;1&#34;,&#34;dailyrecovered&#34;:&#34;15&#34;,&#34;date&#34;:&#34;24 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-24&#34;,&#34;totalconfirmed&#34;:&#34;571&#34;,&#34;totaldeceased&#34;:&#34;10&#34;,&#34;totalrecovered&#34;:&#34;40&#34;},{&#34;dailyconfirmed&#34;:&#34;86&#34;,&#34;dailydeceased&#34;:&#34;1&#34;,&#34;dailyrecovered&#34;:&#34;3&#34;,&#34;date&#34;:&#34;25 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-25&#34;,&#34;totalconfirmed&#34;:&#34;657&#34;,&#34;totaldeceased&#34;:&#34;11&#34;,&#34;totalrecovered&#34;:&#34;43&#34;},{&#34;dailyconfirmed&#34;:&#34;73&#34;,&#34;dailydeceased&#34;:&#34;5&#34;,&#34;dailyrecovered&#34;:&#34;7&#34;,&#34;date&#34;:&#34;26 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-26&#34;,&#34;totalconfirmed&#34;:&#34;730&#34;,&#34;totaldeceased&#34;:&#34;16&#34;,&#34;totalrecovered&#34;:&#34;50&#34;},{&#34;dailyconfirmed&#34;:&#34;153&#34;,&#34;dailydeceased&#34;:&#34;3&#34;,&#34;dailyrecovered&#34;:&#34;25&#34;,&#34;date&#34;:&#34;27 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-27&#34;,&#34;totalconfirmed&#34;:&#34;883&#34;,&#34;totaldeceased&#34;:&#34;19&#34;,&#34;totalrecovered&#34;:&#34;75&#34;},{&#34;dailyconfirmed&#34;:&#34;136&#34;,&#34;dailydeceased&#34;:&#34;5&#34;,&#34;dailyrecovered&#34;:&#34;10&#34;,&#34;date&#34;:&#34;28 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-28&#34;,&#34;totalconfirmed&#34;:&#34;1019&#34;,&#34;totaldeceased&#34;:&#34;24&#34;,&#34;totalrecovered&#34;:&#34;85&#34;},{&#34;dailyconfirmed&#34;:&#34;120&#34;,&#34;dailydeceased&#34;:&#34;3&#34;,&#34;dailyrecovered&#34;:&#34;17&#34;,&#34;date&#34;:&#34;29 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-29&#34;,&#34;totalconfirmed&#34;:&#34;1139&#34;,&#34;totaldeceased&#34;:&#34;27&#34;,&#34;totalrecovered&#34;:&#34;102&#34;},{&#34;dailyconfirmed&#34;:&#34;187&#34;,&#34;dailydeceased&#34;:&#34;14&#34;,&#34;dailyrecovered&#34;:&#34;35&#34;,&#34;date&#34;:&#34;30 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-30&#34;,&#34;totalconfirmed&#34;:&#34;1326&#34;,&#34;totaldeceased&#34;:&#34;41&#34;,&#34;totalrecovered&#34;:&#34;137&#34;},{&#34;dailyconfirmed&#34;:&#34;309&#34;,&#34;dailydeceased&#34;:&#34;6&#34;,&#34;dailyrecovered&#34;:&#34;13&#34;,&#34;date&#34;:&#34;31 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-31&#34;,&#34;totalconfirmed&#34;:&#34;1635&#34;,&#34;totaldeceased&#34;:&#34;47&#34;,&#34;totalrecovered&#34;:&#34;150&#34;},{&#34;dailyconfirmed&#34;:&#34;424&#34;,&#34;dailydeceased&#34;:&#34;6&#34;,&#34;dailyrecovered&#34;:&#34;19&#34;,&#34;date&#34;:&#34;1 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-01&#34;,&#34;totalconfirmed&#34;:&#34;2059&#34;,&#34;totaldeceased&#34;:&#34;53&#34;,&#34;totalrecovered&#34;:&#34;169&#34;},{&#34;dailyconfirmed&#34;:&#34;486&#34;,&#34;dailydeceased&#34;:&#34;16&#34;,&#34;dailyrecovered&#34;:&#34;22&#34;,&#34;date&#34;:&#34;2 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-02&#34;,&#34;totalconfirmed&#34;:&#34;2545&#34;,&#34;totaldeceased&#34;:&#34;69&#34;,&#34;totalrecovered&#34;:&#34;191&#34;},{&#34;dailyconfirmed&#34;:&#34;560&#34;,&#34;dailydeceased&#34;:&#34;14&#34;,&#34;dailyrecovered&#34;:&#34;39&#34;,&#34;date&#34;:&#34;3 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-03&#34;,&#34;totalconfirmed&#34;:&#34;3105&#34;,&#34;totaldeceased&#34;:&#34;83&#34;,&#34;totalrecovered&#34;:&#34;230&#34;},{&#34;dailyconfirmed&#34;:&#34;579&#34;,&#34;dailydeceased&#34;:&#34;13&#34;,&#34;dailyrecovered&#34;:&#34;56&#34;,&#34;date&#34;:&#34;4 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-04&#34;,&#34;totalconfirmed&#34;:&#34;3684&#34;,&#34;totaldeceased&#34;:&#34;96&#34;,&#34;totalrecovered&#34;:&#34;286&#34;},{&#34;dailyconfirmed&#34;:&#34;609&#34;,&#34;dailydeceased&#34;:&#34;22&#34;,&#34;dailyrecovered&#34;:&#34;43&#34;,&#34;date&#34;:&#34;5 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-05&#34;,&#34;totalconfirmed&#34;:&#34;4293&#34;,&#34;totaldeceased&#34;:&#34;118&#34;,&#34;totalrecovered&#34;:&#34;329&#34;},{&#34;dailyconfirmed&#34;:&#34;484&#34;,&#34;dailydeceased&#34;:&#34;16&#34;,&#34;dailyrecovered&#34;:&#34;65&#34;,&#34;date&#34;:&#34;6 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-06&#34;,&#34;totalconfirmed&#34;:&#34;4777&#34;,&#34;totaldeceased&#34;:&#34;134&#34;,&#34;totalrecovered&#34;:&#34;394&#34;},{&#34;dailyconfirmed&#34;:&#34;573&#34;,&#34;dailydeceased&#34;:&#34;27&#34;,&#34;dailyrecovered&#34;:&#34;75&#34;,&#34;date&#34;:&#34;7 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-07&#34;,&#34;totalconfirmed&#34;:&#34;5350&#34;,&#34;totaldeceased&#34;:&#34;161&#34;,&#34;totalrecovered&#34;:&#34;469&#34;},{&#34;dailyconfirmed&#34;:&#34;565&#34;,&#34;dailydeceased&#34;:&#34;20&#34;,&#34;dailyrecovered&#34;:&#34;96&#34;,&#34;date&#34;:&#34;8 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-08&#34;,&#34;totalconfirmed&#34;:&#34;5915&#34;,&#34;totaldeceased&#34;:&#34;181&#34;,&#34;totalrecovered&#34;:&#34;565&#34;},{&#34;dailyconfirmed&#34;:&#34;813&#34;,&#34;dailydeceased&#34;:&#34;46&#34;,&#34;dailyrecovered&#34;:&#34;70&#34;,&#34;date&#34;:&#34;9 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-09&#34;,&#34;totalconfirmed&#34;:&#34;6728&#34;,&#34;totaldeceased&#34;:&#34;227&#34;,&#34;totalrecovered&#34;:&#34;635&#34;},{&#34;dailyconfirmed&#34;:&#34;871&#34;,&#34;dailydeceased&#34;:&#34;22&#34;,&#34;dailyrecovered&#34;:&#34;151&#34;,&#34;date&#34;:&#34;10 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-10&#34;,&#34;totalconfirmed&#34;:&#34;7599&#34;,&#34;totaldeceased&#34;:&#34;249&#34;,&#34;totalrecovered&#34;:&#34;786&#34;},{&#34;dailyconfirmed&#34;:&#34;854&#34;,&#34;dailydeceased&#34;:&#34;41&#34;,&#34;dailyrecovered&#34;:&#34;186&#34;,&#34;date&#34;:&#34;11 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-11&#34;,&#34;totalconfirmed&#34;:&#34;8453&#34;,&#34;totaldeceased&#34;:&#34;290&#34;,&#34;totalrecovered&#34;:&#34;972&#34;},{&#34;dailyconfirmed&#34;:&#34;758&#34;,&#34;dailydeceased&#34;:&#34;42&#34;,&#34;dailyrecovered&#34;:&#34;114&#34;,&#34;date&#34;:&#34;12 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-12&#34;,&#34;totalconfirmed&#34;:&#34;9211&#34;,&#34;totaldeceased&#34;:&#34;332&#34;,&#34;totalrecovered&#34;:&#34;1086&#34;},{&#34;dailyconfirmed&#34;:&#34;1243&#34;,&#34;dailydeceased&#34;:&#34;27&#34;,&#34;dailyrecovered&#34;:&#34;112&#34;,&#34;date&#34;:&#34;13 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-13&#34;,&#34;totalconfirmed&#34;:&#34;10454&#34;,&#34;totaldeceased&#34;:&#34;359&#34;,&#34;totalrecovered&#34;:&#34;1198&#34;},{&#34;dailyconfirmed&#34;:&#34;1031&#34;,&#34;dailydeceased&#34;:&#34;37&#34;,&#34;dailyrecovered&#34;:&#34;167&#34;,&#34;date&#34;:&#34;14 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-14&#34;,&#34;totalconfirmed&#34;:&#34;11485&#34;,&#34;totaldeceased&#34;:&#34;396&#34;,&#34;totalrecovered&#34;:&#34;1365&#34;},{&#34;dailyconfirmed&#34;:&#34;886&#34;,&#34;dailydeceased&#34;:&#34;27&#34;,&#34;dailyrecovered&#34;:&#34;144&#34;,&#34;date&#34;:&#34;15 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-15&#34;,&#34;totalconfirmed&#34;:&#34;12371&#34;,&#34;totaldeceased&#34;:&#34;423&#34;,&#34;totalrecovered&#34;:&#34;1509&#34;},{&#34;dailyconfirmed&#34;:&#34;1061&#34;,&#34;dailydeceased&#34;:&#34;26&#34;,&#34;dailyrecovered&#34;:&#34;258&#34;,&#34;date&#34;:&#34;16 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-16&#34;,&#34;totalconfirmed&#34;:&#34;13432&#34;,&#34;totaldeceased&#34;:&#34;449&#34;,&#34;totalrecovered&#34;:&#34;1767&#34;},{&#34;dailyconfirmed&#34;:&#34;922&#34;,&#34;dailydeceased&#34;:&#34;38&#34;,&#34;dailyrecovered&#34;:&#34;273&#34;,&#34;date&#34;:&#34;17 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-17&#34;,&#34;totalconfirmed&#34;:&#34;14354&#34;,&#34;totaldeceased&#34;:&#34;487&#34;,&#34;totalrecovered&#34;:&#34;2040&#34;},{&#34;dailyconfirmed&#34;:&#34;1371&#34;,&#34;dailydeceased&#34;:&#34;35&#34;,&#34;dailyrecovered&#34;:&#34;426&#34;,&#34;date&#34;:&#34;18 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-18&#34;,&#34;totalconfirmed&#34;:&#34;15725&#34;,&#34;totaldeceased&#34;:&#34;522&#34;,&#34;totalrecovered&#34;:&#34;2466&#34;},{&#34;dailyconfirmed&#34;:&#34;1580&#34;,&#34;dailydeceased&#34;:&#34;38&#34;,&#34;dailyrecovered&#34;:&#34;388&#34;,&#34;date&#34;:&#34;19 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-19&#34;,&#34;totalconfirmed&#34;:&#34;17305&#34;,&#34;totaldeceased&#34;:&#34;560&#34;,&#34;totalrecovered&#34;:&#34;2854&#34;},{&#34;dailyconfirmed&#34;:&#34;1239&#34;,&#34;dailydeceased&#34;:&#34;33&#34;,&#34;dailyrecovered&#34;:&#34;419&#34;,&#34;date&#34;:&#34;20 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-20&#34;,&#34;totalconfirmed&#34;:&#34;18544&#34;,&#34;totaldeceased&#34;:&#34;593&#34;,&#34;totalrecovered&#34;:&#34;3273&#34;},{&#34;dailyconfirmed&#34;:&#34;1537&#34;,&#34;dailydeceased&#34;:&#34;53&#34;,&#34;dailyrecovered&#34;:&#34;703&#34;,&#34;date&#34;:&#34;21 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-21&#34;,&#34;totalconfirmed&#34;:&#34;20081&#34;,&#34;totaldeceased&#34;:&#34;646&#34;,&#34;totalrecovered&#34;:&#34;3976&#34;},{&#34;dailyconfirmed&#34;:&#34;1292&#34;,&#34;dailydeceased&#34;:&#34;36&#34;,&#34;dailyrecovered&#34;:&#34;394&#34;,&#34;date&#34;:&#34;22 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-22&#34;,&#34;totalconfirmed&#34;:&#34;21373&#34;,&#34;totaldeceased&#34;:&#34;682&#34;,&#34;totalrecovered&#34;:&#34;4370&#34;},{&#34;dailyconfirmed&#34;:&#34;1667&#34;,&#34;dailydeceased&#34;:&#34;40&#34;,&#34;dailyrecovered&#34;:&#34;642&#34;,&#34;date&#34;:&#34;23 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-23&#34;,&#34;totalconfirmed&#34;:&#34;23040&#34;,&#34;totaldeceased&#34;:&#34;722&#34;,&#34;totalrecovered&#34;:&#34;5012&#34;},{&#34;dailyconfirmed&#34;:&#34;1408&#34;,&#34;dailydeceased&#34;:&#34;59&#34;,&#34;dailyrecovered&#34;:&#34;484&#34;,&#34;date&#34;:&#34;24 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-24&#34;,&#34;totalconfirmed&#34;:&#34;24448&#34;,&#34;totaldeceased&#34;:&#34;781&#34;,&#34;totalrecovered&#34;:&#34;5496&#34;},{&#34;dailyconfirmed&#34;:&#34;1835&#34;,&#34;dailydeceased&#34;:&#34;44&#34;,&#34;dailyrecovered&#34;:&#34;442&#34;,&#34;date&#34;:&#34;25 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-25&#34;,&#34;totalconfirmed&#34;:&#34;26283&#34;,&#34;totaldeceased&#34;:&#34;825&#34;,&#34;totalrecovered&#34;:&#34;5938&#34;},{&#34;dailyconfirmed&#34;:&#34;1607&#34;,&#34;dailydeceased&#34;:&#34;56&#34;,&#34;dailyrecovered&#34;:&#34;585&#34;,&#34;date&#34;:&#34;26 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-26&#34;,&#34;totalconfirmed&#34;:&#34;27890&#34;,&#34;totaldeceased&#34;:&#34;881&#34;,&#34;totalrecovered&#34;:&#34;6523&#34;},{&#34;dailyconfirmed&#34;:&#34;1568&#34;,&#34;dailydeceased&#34;:&#34;58&#34;,&#34;dailyrecovered&#34;:&#34;580&#34;,&#34;date&#34;:&#34;27 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-27&#34;,&#34;totalconfirmed&#34;:&#34;29458&#34;,&#34;totaldeceased&#34;:&#34;939&#34;,&#34;totalrecovered&#34;:&#34;7103&#34;},{&#34;dailyconfirmed&#34;:&#34;1902&#34;,&#34;dailydeceased&#34;:&#34;69&#34;,&#34;dailyrecovered&#34;:&#34;636&#34;,&#34;date&#34;:&#34;28 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-28&#34;,&#34;totalconfirmed&#34;:&#34;31360&#34;,&#34;totaldeceased&#34;:&#34;1008&#34;,&#34;totalrecovered&#34;:&#34;7739&#34;},{&#34;dailyconfirmed&#34;:&#34;1705&#34;,&#34;dailydeceased&#34;:&#34;71&#34;,&#34;dailyrecovered&#34;:&#34;690&#34;,&#34;date&#34;:&#34;29 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-29&#34;,&#34;totalconfirmed&#34;:&#34;33065&#34;,&#34;totaldeceased&#34;:&#34;1079&#34;,&#34;totalrecovered&#34;:&#34;8429&#34;},{&#34;dailyconfirmed&#34;:&#34;1801&#34;,&#34;dailydeceased&#34;:&#34;75&#34;,&#34;dailyrecovered&#34;:&#34;630&#34;,&#34;date&#34;:&#34;30 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-30&#34;,&#34;totalconfirmed&#34;:&#34;34866&#34;,&#34;totaldeceased&#34;:&#34;1154&#34;,&#34;totalrecovered&#34;:&#34;9059&#34;},{&#34;dailyconfirmed&#34;:&#34;2396&#34;,&#34;dailydeceased&#34;:&#34;77&#34;,&#34;dailyrecovered&#34;:&#34;962&#34;,&#34;date&#34;:&#34;1 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-01&#34;,&#34;totalconfirmed&#34;:&#34;37262&#34;,&#34;totaldeceased&#34;:&#34;1231&#34;,&#34;totalrecovered&#34;:&#34;10021&#34;},{&#34;dailyconfirmed&#34;:&#34;2564&#34;,&#34;dailydeceased&#34;:&#34;92&#34;,&#34;dailyrecovered&#34;:&#34;831&#34;,&#34;date&#34;:&#34;2 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-02&#34;,&#34;totalconfirmed&#34;:&#34;39826&#34;,&#34;totaldeceased&#34;:&#34;1323&#34;,&#34;totalrecovered&#34;:&#34;10852&#34;},{&#34;dailyconfirmed&#34;:&#34;2952&#34;,&#34;dailydeceased&#34;:&#34;140&#34;,&#34;dailyrecovered&#34;:&#34;911&#34;,&#34;date&#34;:&#34;3 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-03&#34;,&#34;totalconfirmed&#34;:&#34;42778&#34;,&#34;totaldeceased&#34;:&#34;1463&#34;,&#34;totalrecovered&#34;:&#34;11763&#34;},{&#34;dailyconfirmed&#34;:&#34;3656&#34;,&#34;dailydeceased&#34;:&#34;103&#34;,&#34;dailyrecovered&#34;:&#34;1082&#34;,&#34;date&#34;:&#34;4 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-04&#34;,&#34;totalconfirmed&#34;:&#34;46434&#34;,&#34;totaldeceased&#34;:&#34;1566&#34;,&#34;totalrecovered&#34;:&#34;12845&#34;},{&#34;dailyconfirmed&#34;:&#34;2971&#34;,&#34;dailydeceased&#34;:&#34;128&#34;,&#34;dailyrecovered&#34;:&#34;1295&#34;,&#34;date&#34;:&#34;5 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-05&#34;,&#34;totalconfirmed&#34;:&#34;49405&#34;,&#34;totaldeceased&#34;:&#34;1694&#34;,&#34;totalrecovered&#34;:&#34;14140&#34;},{&#34;dailyconfirmed&#34;:&#34;3602&#34;,&#34;dailydeceased&#34;:&#34;91&#34;,&#34;dailyrecovered&#34;:&#34;1161&#34;,&#34;date&#34;:&#34;6 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-06&#34;,&#34;totalconfirmed&#34;:&#34;53007&#34;,&#34;totaldeceased&#34;:&#34;1785&#34;,&#34;totalrecovered&#34;:&#34;15301&#34;},{&#34;dailyconfirmed&#34;:&#34;3344&#34;,&#34;dailydeceased&#34;:&#34;104&#34;,&#34;dailyrecovered&#34;:&#34;1475&#34;,&#34;date&#34;:&#34;7 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-07&#34;,&#34;totalconfirmed&#34;:&#34;56351&#34;,&#34;totaldeceased&#34;:&#34;1889&#34;,&#34;totalrecovered&#34;:&#34;16776&#34;},{&#34;dailyconfirmed&#34;:&#34;3339&#34;,&#34;dailydeceased&#34;:&#34;97&#34;,&#34;dailyrecovered&#34;:&#34;1111&#34;,&#34;date&#34;:&#34;8 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-08&#34;,&#34;totalconfirmed&#34;:&#34;59690&#34;,&#34;totaldeceased&#34;:&#34;1986&#34;,&#34;totalrecovered&#34;:&#34;17887&#34;},{&#34;dailyconfirmed&#34;:&#34;3175&#34;,&#34;dailydeceased&#34;:&#34;115&#34;,&#34;dailyrecovered&#34;:&#34;1414&#34;,&#34;date&#34;:&#34;9 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-09&#34;,&#34;totalconfirmed&#34;:&#34;62865&#34;,&#34;totaldeceased&#34;:&#34;2101&#34;,&#34;totalrecovered&#34;:&#34;19301&#34;},{&#34;dailyconfirmed&#34;:&#34;4311&#34;,&#34;dailydeceased&#34;:&#34;112&#34;,&#34;dailyrecovered&#34;:&#34;1669&#34;,&#34;date&#34;:&#34;10 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-10&#34;,&#34;totalconfirmed&#34;:&#34;67176&#34;,&#34;totaldeceased&#34;:&#34;2213&#34;,&#34;totalrecovered&#34;:&#34;20970&#34;},{&#34;dailyconfirmed&#34;:&#34;3592&#34;,&#34;dailydeceased&#34;:&#34;81&#34;,&#34;dailyrecovered&#34;:&#34;1579&#34;,&#34;date&#34;:&#34;11 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-11&#34;,&#34;totalconfirmed&#34;:&#34;70768&#34;,&#34;totaldeceased&#34;:&#34;2294&#34;,&#34;totalrecovered&#34;:&#34;22549&#34;},{&#34;dailyconfirmed&#34;:&#34;3562&#34;,&#34;dailydeceased&#34;:&#34;120&#34;,&#34;dailyrecovered&#34;:&#34;1905&#34;,&#34;date&#34;:&#34;12 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-12&#34;,&#34;totalconfirmed&#34;:&#34;74330&#34;,&#34;totaldeceased&#34;:&#34;2414&#34;,&#34;totalrecovered&#34;:&#34;24454&#34;},{&#34;dailyconfirmed&#34;:&#34;3726&#34;,&#34;dailydeceased&#34;:&#34;137&#34;,&#34;dailyrecovered&#34;:&#34;1963&#34;,&#34;date&#34;:&#34;13 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-13&#34;,&#34;totalconfirmed&#34;:&#34;78056&#34;,&#34;totaldeceased&#34;:&#34;2551&#34;,&#34;totalrecovered&#34;:&#34;26417&#34;},{&#34;dailyconfirmed&#34;:&#34;3991&#34;,&#34;dailydeceased&#34;:&#34;97&#34;,&#34;dailyrecovered&#34;:&#34;1594&#34;,&#34;date&#34;:&#34;14 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-14&#34;,&#34;totalconfirmed&#34;:&#34;82047&#34;,&#34;totaldeceased&#34;:&#34;2648&#34;,&#34;totalrecovered&#34;:&#34;28011&#34;},{&#34;dailyconfirmed&#34;:&#34;3808&#34;,&#34;dailydeceased&#34;:&#34;104&#34;,&#34;dailyrecovered&#34;:&#34;2234&#34;,&#34;date&#34;:&#34;15 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-15&#34;,&#34;totalconfirmed&#34;:&#34;85855&#34;,&#34;totaldeceased&#34;:&#34;2752&#34;,&#34;totalrecovered&#34;:&#34;30245&#34;},{&#34;dailyconfirmed&#34;:&#34;4794&#34;,&#34;dailydeceased&#34;:&#34;120&#34;,&#34;dailyrecovered&#34;:&#34;4012&#34;,&#34;date&#34;:&#34;16 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-16&#34;,&#34;totalconfirmed&#34;:&#34;90649&#34;,&#34;totaldeceased&#34;:&#34;2872&#34;,&#34;totalrecovered&#34;:&#34;34257&#34;},{&#34;dailyconfirmed&#34;:&#34;5049&#34;,&#34;dailydeceased&#34;:&#34;152&#34;,&#34;dailyrecovered&#34;:&#34;2538&#34;,&#34;date&#34;:&#34;17 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-17&#34;,&#34;totalconfirmed&#34;:&#34;95698&#34;,&#34;totaldeceased&#34;:&#34;3024&#34;,&#34;totalrecovered&#34;:&#34;36795&#34;},{&#34;dailyconfirmed&#34;:&#34;4628&#34;,&#34;dailydeceased&#34;:&#34;131&#34;,&#34;dailyrecovered&#34;:&#34;2482&#34;,&#34;date&#34;:&#34;18 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-18&#34;,&#34;totalconfirmed&#34;:&#34;100326&#34;,&#34;totaldeceased&#34;:&#34;3155&#34;,&#34;totalrecovered&#34;:&#34;39277&#34;},{&#34;dailyconfirmed&#34;:&#34;6154&#34;,&#34;dailydeceased&#34;:&#34;146&#34;,&#34;dailyrecovered&#34;:&#34;3032&#34;,&#34;date&#34;:&#34;19 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-19&#34;,&#34;totalconfirmed&#34;:&#34;106480&#34;,&#34;totaldeceased&#34;:&#34;3301&#34;,&#34;totalrecovered&#34;:&#34;42309&#34;},{&#34;dailyconfirmed&#34;:&#34;5720&#34;,&#34;dailydeceased&#34;:&#34;134&#34;,&#34;dailyrecovered&#34;:&#34;3113&#34;,&#34;date&#34;:&#34;20 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-20&#34;,&#34;totalconfirmed&#34;:&#34;112200&#34;,&#34;totaldeceased&#34;:&#34;3435&#34;,&#34;totalrecovered&#34;:&#34;45422&#34;},{&#34;dailyconfirmed&#34;:&#34;6023&#34;,&#34;dailydeceased&#34;:&#34;148&#34;,&#34;dailyrecovered&#34;:&#34;3131&#34;,&#34;date&#34;:&#34;21 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-21&#34;,&#34;totalconfirmed&#34;:&#34;118223&#34;,&#34;totaldeceased&#34;:&#34;3583&#34;,&#34;totalrecovered&#34;:&#34;48553&#34;},{&#34;dailyconfirmed&#34;:&#34;6536&#34;,&#34;dailydeceased&#34;:&#34;142&#34;,&#34;dailyrecovered&#34;:&#34;3280&#34;,&#34;date&#34;:&#34;22 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-22&#34;,&#34;totalconfirmed&#34;:&#34;124759&#34;,&#34;totaldeceased&#34;:&#34;3725&#34;,&#34;totalrecovered&#34;:&#34;51833&#34;},{&#34;dailyconfirmed&#34;:&#34;6667&#34;,&#34;dailydeceased&#34;:&#34;142&#34;,&#34;dailyrecovered&#34;:&#34;2576&#34;,&#34;date&#34;:&#34;23 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-23&#34;,&#34;totalconfirmed&#34;:&#34;131424&#34;,&#34;totaldeceased&#34;:&#34;3867&#34;,&#34;totalrecovered&#34;:&#34;54409&#34;},{&#34;dailyconfirmed&#34;:&#34;7111&#34;,&#34;dailydeceased&#34;:&#34;156&#34;,&#34;dailyrecovered&#34;:&#34;3285&#34;,&#34;date&#34;:&#34;24 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-24&#34;,&#34;totalconfirmed&#34;:&#34;138537&#34;,&#34;totaldeceased&#34;:&#34;4023&#34;,&#34;totalrecovered&#34;:&#34;57694&#34;},{&#34;dailyconfirmed&#34;:&#34;6414&#34;,&#34;dailydeceased&#34;:&#34;150&#34;,&#34;dailyrecovered&#34;:&#34;3012&#34;,&#34;date&#34;:&#34;25 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-25&#34;,&#34;totalconfirmed&#34;:&#34;144951&#34;,&#34;totaldeceased&#34;:&#34;4173&#34;,&#34;totalrecovered&#34;:&#34;60706&#34;},{&#34;dailyconfirmed&#34;:&#34;5907&#34;,&#34;dailydeceased&#34;:&#34;173&#34;,&#34;dailyrecovered&#34;:&#34;3585&#34;,&#34;date&#34;:&#34;26 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-26&#34;,&#34;totalconfirmed&#34;:&#34;150858&#34;,&#34;totaldeceased&#34;:&#34;4346&#34;,&#34;totalrecovered&#34;:&#34;64291&#34;},{&#34;dailyconfirmed&#34;:&#34;7246&#34;,&#34;dailydeceased&#34;:&#34;188&#34;,&#34;dailyrecovered&#34;:&#34;3434&#34;,&#34;date&#34;:&#34;27 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-27&#34;,&#34;totalconfirmed&#34;:&#34;158104&#34;,&#34;totaldeceased&#34;:&#34;4534&#34;,&#34;totalrecovered&#34;:&#34;67725&#34;},{&#34;dailyconfirmed&#34;:&#34;7254&#34;,&#34;dailydeceased&#34;:&#34;176&#34;,&#34;dailyrecovered&#34;:&#34;3171&#34;,&#34;date&#34;:&#34;28 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-28&#34;,&#34;totalconfirmed&#34;:&#34;165358&#34;,&#34;totaldeceased&#34;:&#34;4710&#34;,&#34;totalrecovered&#34;:&#34;70896&#34;},{&#34;dailyconfirmed&#34;:&#34;8138&#34;,&#34;dailydeceased&#34;:&#34;269&#34;,&#34;dailyrecovered&#34;:&#34;11735&#34;,&#34;date&#34;:&#34;29 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-29&#34;,&#34;totalconfirmed&#34;:&#34;173496&#34;,&#34;totaldeceased&#34;:&#34;4979&#34;,&#34;totalrecovered&#34;:&#34;82631&#34;},{&#34;dailyconfirmed&#34;:&#34;8364&#34;,&#34;dailydeceased&#34;:&#34;205&#34;,&#34;dailyrecovered&#34;:&#34;4303&#34;,&#34;date&#34;:&#34;30 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-30&#34;,&#34;totalconfirmed&#34;:&#34;181860&#34;,&#34;totaldeceased&#34;:&#34;5184&#34;,&#34;totalrecovered&#34;:&#34;86934&#34;},{&#34;dailyconfirmed&#34;:&#34;8789&#34;,&#34;dailydeceased&#34;:&#34;222&#34;,&#34;dailyrecovered&#34;:&#34;4928&#34;,&#34;date&#34;:&#34;31 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-31&#34;,&#34;totalconfirmed&#34;:&#34;190649&#34;,&#34;totaldeceased&#34;:&#34;5406&#34;,&#34;totalrecovered&#34;:&#34;91862&#34;},{&#34;dailyconfirmed&#34;:&#34;7723&#34;,&#34;dailydeceased&#34;:&#34;201&#34;,&#34;dailyrecovered&#34;:&#34;3882&#34;,&#34;date&#34;:&#34;1 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-01&#34;,&#34;totalconfirmed&#34;:&#34;198372&#34;,&#34;totaldeceased&#34;:&#34;5607&#34;,&#34;totalrecovered&#34;:&#34;95744&#34;},{&#34;dailyconfirmed&#34;:&#34;8812&#34;,&#34;dailydeceased&#34;:&#34;222&#34;,&#34;dailyrecovered&#34;:&#34;4531&#34;,&#34;date&#34;:&#34;2 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-02&#34;,&#34;totalconfirmed&#34;:&#34;207187&#34;,&#34;totaldeceased&#34;:&#34;5829&#34;,&#34;totalrecovered&#34;:&#34;100275&#34;},{&#34;dailyconfirmed&#34;:&#34;9689&#34;,&#34;dailydeceased&#34;:&#34;259&#34;,&#34;dailyrecovered&#34;:&#34;3789&#34;,&#34;date&#34;:&#34;3 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-03&#34;,&#34;totalconfirmed&#34;:&#34;216876&#34;,&#34;totaldeceased&#34;:&#34;6088&#34;,&#34;totalrecovered&#34;:&#34;104064&#34;},{&#34;dailyconfirmed&#34;:&#34;9847&#34;,&#34;dailydeceased&#34;:&#34;274&#34;,&#34;dailyrecovered&#34;:&#34;4390&#34;,&#34;date&#34;:&#34;4 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-04&#34;,&#34;totalconfirmed&#34;:&#34;226723&#34;,&#34;totaldeceased&#34;:&#34;6362&#34;,&#34;totalrecovered&#34;:&#34;108454&#34;},{&#34;dailyconfirmed&#34;:&#34;9472&#34;,&#34;dailydeceased&#34;:&#34;286&#34;,&#34;dailyrecovered&#34;:&#34;4770&#34;,&#34;date&#34;:&#34;5 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-05&#34;,&#34;totalconfirmed&#34;:&#34;236195&#34;,&#34;totaldeceased&#34;:&#34;6648&#34;,&#34;totalrecovered&#34;:&#34;113224&#34;},{&#34;dailyconfirmed&#34;:&#34;10408&#34;,&#34;dailydeceased&#34;:&#34;297&#34;,&#34;dailyrecovered&#34;:&#34;5433&#34;,&#34;date&#34;:&#34;6 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-06&#34;,&#34;totalconfirmed&#34;:&#34;246603&#34;,&#34;totaldeceased&#34;:&#34;6945&#34;,&#34;totalrecovered&#34;:&#34;118657&#34;},{&#34;dailyconfirmed&#34;:&#34;10882&#34;,&#34;dailydeceased&#34;:&#34;261&#34;,&#34;dailyrecovered&#34;:&#34;5191&#34;,&#34;date&#34;:&#34;7 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-07&#34;,&#34;totalconfirmed&#34;:&#34;257485&#34;,&#34;totaldeceased&#34;:&#34;7206&#34;,&#34;totalrecovered&#34;:&#34;123848&#34;},{&#34;dailyconfirmed&#34;:&#34;8536&#34;,&#34;dailydeceased&#34;:&#34;271&#34;,&#34;dailyrecovered&#34;:&#34;5171&#34;,&#34;date&#34;:&#34;8 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-08&#34;,&#34;totalconfirmed&#34;:&#34;266021&#34;,&#34;totaldeceased&#34;:&#34;7477&#34;,&#34;totalrecovered&#34;:&#34;129019&#34;},{&#34;dailyconfirmed&#34;:&#34;9981&#34;,&#34;dailydeceased&#34;:&#34;272&#34;,&#34;dailyrecovered&#34;:&#34;5634&#34;,&#34;date&#34;:&#34;9 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-09&#34;,&#34;totalconfirmed&#34;:&#34;276002&#34;,&#34;totaldeceased&#34;:&#34;7749&#34;,&#34;totalrecovered&#34;:&#34;134653&#34;},{&#34;dailyconfirmed&#34;:&#34;11156&#34;,&#34;dailydeceased&#34;:&#34;358&#34;,&#34;dailyrecovered&#34;:&#34;6275&#34;,&#34;date&#34;:&#34;10 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-10&#34;,&#34;totalconfirmed&#34;:&#34;287158&#34;,&#34;totaldeceased&#34;:&#34;8107&#34;,&#34;totalrecovered&#34;:&#34;140928&#34;},{&#34;dailyconfirmed&#34;:&#34;11135&#34;,&#34;dailydeceased&#34;:&#34;394&#34;,&#34;dailyrecovered&#34;:&#34;6044&#34;,&#34;date&#34;:&#34;11 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-11&#34;,&#34;totalconfirmed&#34;:&#34;298293&#34;,&#34;totaldeceased&#34;:&#34;8501&#34;,&#34;totalrecovered&#34;:&#34;146972&#34;},{&#34;dailyconfirmed&#34;:&#34;11306&#34;,&#34;dailydeceased&#34;:&#34;388&#34;,&#34;dailyrecovered&#34;:&#34;7263&#34;,&#34;date&#34;:&#34;12 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-12&#34;,&#34;totalconfirmed&#34;:&#34;309599&#34;,&#34;totaldeceased&#34;:&#34;8889&#34;,&#34;totalrecovered&#34;:&#34;154235&#34;},{&#34;dailyconfirmed&#34;:&#34;12039&#34;,&#34;dailydeceased&#34;:&#34;309&#34;,&#34;dailyrecovered&#34;:&#34;8092&#34;,&#34;date&#34;:&#34;13 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-13&#34;,&#34;totalconfirmed&#34;:&#34;321638&#34;,&#34;totaldeceased&#34;:&#34;9198&#34;,&#34;totalrecovered&#34;:&#34;162327&#34;},{&#34;dailyconfirmed&#34;:&#34;11405&#34;,&#34;dailydeceased&#34;:&#34;324&#34;,&#34;dailyrecovered&#34;:&#34;7358&#34;,&#34;date&#34;:&#34;14 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-14&#34;,&#34;totalconfirmed&#34;:&#34;333043&#34;,&#34;totaldeceased&#34;:&#34;9522&#34;,&#34;totalrecovered&#34;:&#34;169685&#34;},{&#34;dailyconfirmed&#34;:&#34;10032&#34;,&#34;dailydeceased&#34;:&#34;396&#34;,&#34;dailyrecovered&#34;:&#34;10639&#34;,&#34;date&#34;:&#34;15 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-15&#34;,&#34;totalconfirmed&#34;:&#34;343075&#34;,&#34;totaldeceased&#34;:&#34;9918&#34;,&#34;totalrecovered&#34;:&#34;180324&#34;},{&#34;dailyconfirmed&#34;:&#34;11086&#34;,&#34;dailydeceased&#34;:&#34;2004&#34;,&#34;dailyrecovered&#34;:&#34;7226&#34;,&#34;date&#34;:&#34;16 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-16&#34;,&#34;totalconfirmed&#34;:&#34;354161&#34;,&#34;totaldeceased&#34;:&#34;11922&#34;,&#34;totalrecovered&#34;:&#34;187550&#34;},{&#34;dailyconfirmed&#34;:&#34;13108&#34;,&#34;dailydeceased&#34;:&#34;341&#34;,&#34;dailyrecovered&#34;:&#34;6890&#34;,&#34;date&#34;:&#34;17 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-17&#34;,&#34;totalconfirmed&#34;:&#34;367269&#34;,&#34;totaldeceased&#34;:&#34;12263&#34;,&#34;totalrecovered&#34;:&#34;194440&#34;},{&#34;dailyconfirmed&#34;:&#34;13829&#34;,&#34;dailydeceased&#34;:&#34;343&#34;,&#34;dailyrecovered&#34;:&#34;10741&#34;,&#34;date&#34;:&#34;18 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-18&#34;,&#34;totalconfirmed&#34;:&#34;381098&#34;,&#34;totaldeceased&#34;:&#34;12606&#34;,&#34;totalrecovered&#34;:&#34;205181&#34;},{&#34;dailyconfirmed&#34;:&#34;14740&#34;,&#34;dailydeceased&#34;:&#34;364&#34;,&#34;dailyrecovered&#34;:&#34;9029&#34;,&#34;date&#34;:&#34;19 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-19&#34;,&#34;totalconfirmed&#34;:&#34;395838&#34;,&#34;totaldeceased&#34;:&#34;12970&#34;,&#34;totalrecovered&#34;:&#34;214210&#34;},{&#34;dailyconfirmed&#34;:&#34;15918&#34;,&#34;dailydeceased&#34;:&#34;308&#34;,&#34;dailyrecovered&#34;:&#34;13974&#34;,&#34;date&#34;:&#34;20 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-20&#34;,&#34;totalconfirmed&#34;:&#34;411753&#34;,&#34;totaldeceased&#34;:&#34;13278&#34;,&#34;totalrecovered&#34;:&#34;228184&#34;},{&#34;dailyconfirmed&#34;:&#34;15151&#34;,&#34;dailydeceased&#34;:&#34;426&#34;,&#34;dailyrecovered&#34;:&#34;9075&#34;,&#34;date&#34;:&#34;21 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-21&#34;,&#34;totalconfirmed&#34;:&#34;426904&#34;,&#34;totaldeceased&#34;:&#34;13704&#34;,&#34;totalrecovered&#34;:&#34;237259&#34;},{&#34;dailyconfirmed&#34;:&#34;13560&#34;,&#34;dailydeceased&#34;:&#34;312&#34;,&#34;dailyrecovered&#34;:&#34;10879&#34;,&#34;date&#34;:&#34;22 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-22&#34;,&#34;totalconfirmed&#34;:&#34;440464&#34;,&#34;totaldeceased&#34;:&#34;14016&#34;,&#34;totalrecovered&#34;:&#34;248138&#34;},{&#34;dailyconfirmed&#34;:&#34;15656&#34;,&#34;dailydeceased&#34;:&#34;468&#34;,&#34;dailyrecovered&#34;:&#34;10462&#34;,&#34;date&#34;:&#34;23 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-23&#34;,&#34;totalconfirmed&#34;:&#34;456120&#34;,&#34;totaldeceased&#34;:&#34;14484&#34;,&#34;totalrecovered&#34;:&#34;258600&#34;},{&#34;dailyconfirmed&#34;:&#34;16868&#34;,&#34;dailydeceased&#34;:&#34;424&#34;,&#34;dailyrecovered&#34;:&#34;13089&#34;,&#34;date&#34;:&#34;24 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-24&#34;,&#34;totalconfirmed&#34;:&#34;472988&#34;,&#34;totaldeceased&#34;:&#34;14908&#34;,&#34;totalrecovered&#34;:&#34;271689&#34;},{&#34;dailyconfirmed&#34;:&#34;18205&#34;,&#34;dailydeceased&#34;:&#34;401&#34;,&#34;dailyrecovered&#34;:&#34;13983&#34;,&#34;date&#34;:&#34;25 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-25&#34;,&#34;totalconfirmed&#34;:&#34;491193&#34;,&#34;totaldeceased&#34;:&#34;15309&#34;,&#34;totalrecovered&#34;:&#34;285672&#34;},{&#34;dailyconfirmed&#34;:&#34;18255&#34;,&#34;dailydeceased&#34;:&#34;381&#34;,&#34;dailyrecovered&#34;:&#34;10246&#34;,&#34;date&#34;:&#34;26 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-26&#34;,&#34;totalconfirmed&#34;:&#34;509448&#34;,&#34;totaldeceased&#34;:&#34;15690&#34;,&#34;totalrecovered&#34;:&#34;295918&#34;},{&#34;dailyconfirmed&#34;:&#34;20142&#34;,&#34;dailydeceased&#34;:&#34;414&#34;,&#34;dailyrecovered&#34;:&#34;14229&#34;,&#34;date&#34;:&#34;27 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-27&#34;,&#34;totalconfirmed&#34;:&#34;529590&#34;,&#34;totaldeceased&#34;:&#34;16104&#34;,&#34;totalrecovered&#34;:&#34;310147&#34;},{&#34;dailyconfirmed&#34;:&#34;19610&#34;,&#34;dailydeceased&#34;:&#34;384&#34;,&#34;dailyrecovered&#34;:&#34;11631&#34;,&#34;date&#34;:&#34;28 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-28&#34;,&#34;totalconfirmed&#34;:&#34;549200&#34;,&#34;totaldeceased&#34;:&#34;16488&#34;,&#34;totalrecovered&#34;:&#34;321778&#34;},{&#34;dailyconfirmed&#34;:&#34;18339&#34;,&#34;dailydeceased&#34;:&#34;417&#34;,&#34;dailyrecovered&#34;:&#34;13497&#34;,&#34;date&#34;:&#34;29 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-29&#34;,&#34;totalconfirmed&#34;:&#34;567539&#34;,&#34;totaldeceased&#34;:&#34;16905&#34;,&#34;totalrecovered&#34;:&#34;335275&#34;},{&#34;dailyconfirmed&#34;:&#34;18256&#34;,&#34;dailydeceased&#34;:&#34;506&#34;,&#34;dailyrecovered&#34;:&#34;12565&#34;,&#34;date&#34;:&#34;30 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-30&#34;,&#34;totalconfirmed&#34;:&#34;585795&#34;,&#34;totaldeceased&#34;:&#34;17411&#34;,&#34;totalrecovered&#34;:&#34;347840&#34;},{&#34;dailyconfirmed&#34;:&#34;19429&#34;,&#34;dailydeceased&#34;:&#34;438&#34;,&#34;dailyrecovered&#34;:&#34;12064&#34;,&#34;date&#34;:&#34;1 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-01&#34;,&#34;totalconfirmed&#34;:&#34;605224&#34;,&#34;totaldeceased&#34;:&#34;17849&#34;,&#34;totalrecovered&#34;:&#34;359904&#34;},{&#34;dailyconfirmed&#34;:&#34;21947&#34;,&#34;dailydeceased&#34;:&#34;378&#34;,&#34;dailyrecovered&#34;:&#34;19999&#34;,&#34;date&#34;:&#34;2 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-02&#34;,&#34;totalconfirmed&#34;:&#34;627171&#34;,&#34;totaldeceased&#34;:&#34;18227&#34;,&#34;totalrecovered&#34;:&#34;379903&#34;},{&#34;dailyconfirmed&#34;:&#34;22718&#34;,&#34;dailydeceased&#34;:&#34;444&#34;,&#34;dailyrecovered&#34;:&#34;14417&#34;,&#34;date&#34;:&#34;3 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-03&#34;,&#34;totalconfirmed&#34;:&#34;649889&#34;,&#34;totaldeceased&#34;:&#34;18671&#34;,&#34;totalrecovered&#34;:&#34;394320&#34;},{&#34;dailyconfirmed&#34;:&#34;24018&#34;,&#34;dailydeceased&#34;:&#34;611&#34;,&#34;dailyrecovered&#34;:&#34;14746&#34;,&#34;date&#34;:&#34;4 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-04&#34;,&#34;totalconfirmed&#34;:&#34;673907&#34;,&#34;totaldeceased&#34;:&#34;19282&#34;,&#34;totalrecovered&#34;:&#34;409066&#34;},{&#34;dailyconfirmed&#34;:&#34;23942&#34;,&#34;dailydeceased&#34;:&#34;421&#34;,&#34;dailyrecovered&#34;:&#34;15829&#34;,&#34;date&#34;:&#34;5 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-05&#34;,&#34;totalconfirmed&#34;:&#34;697849&#34;,&#34;totaldeceased&#34;:&#34;19703&#34;,&#34;totalrecovered&#34;:&#34;424895&#34;},{&#34;dailyconfirmed&#34;:&#34;22500&#34;,&#34;dailydeceased&#34;:&#34;473&#34;,&#34;dailyrecovered&#34;:&#34;15315&#34;,&#34;date&#34;:&#34;6 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-06&#34;,&#34;totalconfirmed&#34;:&#34;720349&#34;,&#34;totaldeceased&#34;:&#34;20176&#34;,&#34;totalrecovered&#34;:&#34;440210&#34;},{&#34;dailyconfirmed&#34;:&#34;23147&#34;,&#34;dailydeceased&#34;:&#34;479&#34;,&#34;dailyrecovered&#34;:&#34;16836&#34;,&#34;date&#34;:&#34;7 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-07&#34;,&#34;totalconfirmed&#34;:&#34;743496&#34;,&#34;totaldeceased&#34;:&#34;20655&#34;,&#34;totalrecovered&#34;:&#34;457046&#34;},{&#34;dailyconfirmed&#34;:&#34;25561&#34;,&#34;dailydeceased&#34;:&#34;492&#34;,&#34;dailyrecovered&#34;:&#34;19508&#34;,&#34;date&#34;:&#34;8 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-08&#34;,&#34;totalconfirmed&#34;:&#34;769057&#34;,&#34;totaldeceased&#34;:&#34;21147&#34;,&#34;totalrecovered&#34;:&#34;476554&#34;},{&#34;dailyconfirmed&#34;:&#34;25790&#34;,&#34;dailydeceased&#34;:&#34;479&#34;,&#34;dailyrecovered&#34;:&#34;19408&#34;,&#34;date&#34;:&#34;9 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-09&#34;,&#34;totalconfirmed&#34;:&#34;794847&#34;,&#34;totaldeceased&#34;:&#34;21626&#34;,&#34;totalrecovered&#34;:&#34;495962&#34;},{&#34;dailyconfirmed&#34;:&#34;27762&#34;,&#34;dailydeceased&#34;:&#34;520&#34;,&#34;dailyrecovered&#34;:&#34;20289&#34;,&#34;date&#34;:&#34;10 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-10&#34;,&#34;totalconfirmed&#34;:&#34;822609&#34;,&#34;totaldeceased&#34;:&#34;22146&#34;,&#34;totalrecovered&#34;:&#34;516251&#34;},{&#34;dailyconfirmed&#34;:&#34;27757&#34;,&#34;dailydeceased&#34;:&#34;543&#34;,&#34;dailyrecovered&#34;:&#34;19981&#34;,&#34;date&#34;:&#34;11 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-11&#34;,&#34;totalconfirmed&#34;:&#34;850366&#34;,&#34;totaldeceased&#34;:&#34;22689&#34;,&#34;totalrecovered&#34;:&#34;536232&#34;},{&#34;dailyconfirmed&#34;:&#34;29106&#34;,&#34;dailydeceased&#34;:&#34;500&#34;,&#34;dailyrecovered&#34;:&#34;18198&#34;,&#34;date&#34;:&#34;12 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-12&#34;,&#34;totalconfirmed&#34;:&#34;879472&#34;,&#34;totaldeceased&#34;:&#34;23189&#34;,&#34;totalrecovered&#34;:&#34;554430&#34;},{&#34;dailyconfirmed&#34;:&#34;28178&#34;,&#34;dailydeceased&#34;:&#34;541&#34;,&#34;dailyrecovered&#34;:&#34;17683&#34;,&#34;date&#34;:&#34;13 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-13&#34;,&#34;totalconfirmed&#34;:&#34;907650&#34;,&#34;totaldeceased&#34;:&#34;23730&#34;,&#34;totalrecovered&#34;:&#34;572113&#34;},{&#34;dailyconfirmed&#34;:&#34;29917&#34;,&#34;dailydeceased&#34;:&#34;587&#34;,&#34;dailyrecovered&#34;:&#34;20977&#34;,&#34;date&#34;:&#34;14 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-14&#34;,&#34;totalconfirmed&#34;:&#34;937567&#34;,&#34;totaldeceased&#34;:&#34;24317&#34;,&#34;totalrecovered&#34;:&#34;593090&#34;},{&#34;dailyconfirmed&#34;:&#34;32607&#34;,&#34;dailydeceased&#34;:&#34;614&#34;,&#34;dailyrecovered&#34;:&#34;20646&#34;,&#34;date&#34;:&#34;15 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-15&#34;,&#34;totalconfirmed&#34;:&#34;970174&#34;,&#34;totaldeceased&#34;:&#34;24931&#34;,&#34;totalrecovered&#34;:&#34;613736&#34;},{&#34;dailyconfirmed&#34;:&#34;35468&#34;,&#34;dailydeceased&#34;:&#34;680&#34;,&#34;dailyrecovered&#34;:&#34;22867&#34;,&#34;date&#34;:&#34;16 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-16&#34;,&#34;totalconfirmed&#34;:&#34;1005642&#34;,&#34;totaldeceased&#34;:&#34;25611&#34;,&#34;totalrecovered&#34;:&#34;636603&#34;},{&#34;dailyconfirmed&#34;:&#34;34820&#34;,&#34;dailydeceased&#34;:&#34;676&#34;,&#34;dailyrecovered&#34;:&#34;17476&#34;,&#34;date&#34;:&#34;17 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-17&#34;,&#34;totalconfirmed&#34;:&#34;1040462&#34;,&#34;totaldeceased&#34;:&#34;26287&#34;,&#34;totalrecovered&#34;:&#34;654079&#34;},{&#34;dailyconfirmed&#34;:&#34;37411&#34;,&#34;dailydeceased&#34;:&#34;543&#34;,&#34;dailyrecovered&#34;:&#34;23583&#34;,&#34;date&#34;:&#34;18 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-18&#34;,&#34;totalconfirmed&#34;:&#34;1077873&#34;,&#34;totaldeceased&#34;:&#34;26830&#34;,&#34;totalrecovered&#34;:&#34;677662&#34;},{&#34;dailyconfirmed&#34;:&#34;40235&#34;,&#34;dailydeceased&#34;:&#34;675&#34;,&#34;dailyrecovered&#34;:&#34;22730&#34;,&#34;date&#34;:&#34;19 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-19&#34;,&#34;totalconfirmed&#34;:&#34;1118108&#34;,&#34;totaldeceased&#34;:&#34;27505&#34;,&#34;totalrecovered&#34;:&#34;700392&#34;},{&#34;dailyconfirmed&#34;:&#34;36806&#34;,&#34;dailydeceased&#34;:&#34;596&#34;,&#34;dailyrecovered&#34;:&#34;24303&#34;,&#34;date&#34;:&#34;20 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-20&#34;,&#34;totalconfirmed&#34;:&#34;1154914&#34;,&#34;totaldeceased&#34;:&#34;28101&#34;,&#34;totalrecovered&#34;:&#34;724695&#34;},{&#34;dailyconfirmed&#34;:&#34;39170&#34;,&#34;dailydeceased&#34;:&#34;671&#34;,&#34;dailyrecovered&#34;:&#34;27589&#34;,&#34;date&#34;:&#34;21 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-21&#34;,&#34;totalconfirmed&#34;:&#34;1194084&#34;,&#34;totaldeceased&#34;:&#34;28772&#34;,&#34;totalrecovered&#34;:&#34;752284&#34;},{&#34;dailyconfirmed&#34;:&#34;45601&#34;,&#34;dailydeceased&#34;:&#34;1130&#34;,&#34;dailyrecovered&#34;:&#34;31875&#34;,&#34;date&#34;:&#34;22 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-22&#34;,&#34;totalconfirmed&#34;:&#34;1239685&#34;,&#34;totaldeceased&#34;:&#34;29902&#34;,&#34;totalrecovered&#34;:&#34;784159&#34;},{&#34;dailyconfirmed&#34;:&#34;48443&#34;,&#34;dailydeceased&#34;:&#34;755&#34;,&#34;dailyrecovered&#34;:&#34;33326&#34;,&#34;date&#34;:&#34;23 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-23&#34;,&#34;totalconfirmed&#34;:&#34;1288128&#34;,&#34;totaldeceased&#34;:&#34;30657&#34;,&#34;totalrecovered&#34;:&#34;817485&#34;},{&#34;dailyconfirmed&#34;:&#34;48888&#34;,&#34;dailydeceased&#34;:&#34;763&#34;,&#34;dailyrecovered&#34;:&#34;32514&#34;,&#34;date&#34;:&#34;24 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-24&#34;,&#34;totalconfirmed&#34;:&#34;1337016&#34;,&#34;totaldeceased&#34;:&#34;31420&#34;,&#34;totalrecovered&#34;:&#34;849999&#34;},{&#34;dailyconfirmed&#34;:&#34;50072&#34;,&#34;dailydeceased&#34;:&#34;703&#34;,&#34;dailyrecovered&#34;:&#34;37125&#34;,&#34;date&#34;:&#34;25 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-25&#34;,&#34;totalconfirmed&#34;:&#34;1387088&#34;,&#34;totaldeceased&#34;:&#34;32123&#34;,&#34;totalrecovered&#34;:&#34;887124&#34;},{&#34;dailyconfirmed&#34;:&#34;48932&#34;,&#34;dailydeceased&#34;:&#34;704&#34;,&#34;dailyrecovered&#34;:&#34;31512&#34;,&#34;date&#34;:&#34;26 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-26&#34;,&#34;totalconfirmed&#34;:&#34;1436020&#34;,&#34;totaldeceased&#34;:&#34;32827&#34;,&#34;totalrecovered&#34;:&#34;918636&#34;},{&#34;dailyconfirmed&#34;:&#34;46484&#34;,&#34;dailydeceased&#34;:&#34;642&#34;,&#34;dailyrecovered&#34;:&#34;34354&#34;,&#34;date&#34;:&#34;27 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-27&#34;,&#34;totalconfirmed&#34;:&#34;1482504&#34;,&#34;totaldeceased&#34;:&#34;33469&#34;,&#34;totalrecovered&#34;:&#34;952990&#34;},{&#34;dailyconfirmed&#34;:&#34;49631&#34;,&#34;dailydeceased&#34;:&#34;774&#34;,&#34;dailyrecovered&#34;:&#34;35683&#34;,&#34;date&#34;:&#34;28 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-28&#34;,&#34;totalconfirmed&#34;:&#34;1532135&#34;,&#34;totaldeceased&#34;:&#34;34243&#34;,&#34;totalrecovered&#34;:&#34;988673&#34;},{&#34;dailyconfirmed&#34;:&#34;52479&#34;,&#34;dailydeceased&#34;:&#34;775&#34;,&#34;dailyrecovered&#34;:&#34;32886&#34;,&#34;date&#34;:&#34;29 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-29&#34;,&#34;totalconfirmed&#34;:&#34;1584614&#34;,&#34;totaldeceased&#34;:&#34;35018&#34;,&#34;totalrecovered&#34;:&#34;1021559&#34;},{&#34;dailyconfirmed&#34;:&#34;54968&#34;,&#34;dailydeceased&#34;:&#34;784&#34;,&#34;dailyrecovered&#34;:&#34;37425&#34;,&#34;date&#34;:&#34;30 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-30&#34;,&#34;totalconfirmed&#34;:&#34;1639582&#34;,&#34;totaldeceased&#34;:&#34;35802&#34;,&#34;totalrecovered&#34;:&#34;1058984&#34;},{&#34;dailyconfirmed&#34;:&#34;57486&#34;,&#34;dailydeceased&#34;:&#34;764&#34;,&#34;dailyrecovered&#34;:&#34;36554&#34;,&#34;date&#34;:&#34;31 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-31&#34;,&#34;totalconfirmed&#34;:&#34;1697068&#34;,&#34;totaldeceased&#34;:&#34;36566&#34;,&#34;totalrecovered&#34;:&#34;1095538&#34;},{&#34;dailyconfirmed&#34;:&#34;55117&#34;,&#34;dailydeceased&#34;:&#34;854&#34;,&#34;dailyrecovered&#34;:&#34;51368&#34;,&#34;date&#34;:&#34;1 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-01&#34;,&#34;totalconfirmed&#34;:&#34;1752185&#34;,&#34;totaldeceased&#34;:&#34;37420&#34;,&#34;totalrecovered&#34;:&#34;1146906&#34;},{&#34;dailyconfirmed&#34;:&#34;52672&#34;,&#34;dailydeceased&#34;:&#34;760&#34;,&#34;dailyrecovered&#34;:&#34;40355&#34;,&#34;date&#34;:&#34;2 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-02&#34;,&#34;totalconfirmed&#34;:&#34;1804857&#34;,&#34;totaldeceased&#34;:&#34;38180&#34;,&#34;totalrecovered&#34;:&#34;1187261&#34;},{&#34;dailyconfirmed&#34;:&#34;50488&#34;,&#34;dailydeceased&#34;:&#34;806&#34;,&#34;dailyrecovered&#34;:&#34;43070&#34;,&#34;date&#34;:&#34;3 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-03&#34;,&#34;totalconfirmed&#34;:&#34;1855345&#34;,&#34;totaldeceased&#34;:&#34;38986&#34;,&#34;totalrecovered&#34;:&#34;1230331&#34;},{&#34;dailyconfirmed&#34;:&#34;51282&#34;,&#34;dailydeceased&#34;:&#34;849&#34;,&#34;dailyrecovered&#34;:&#34;51220&#34;,&#34;date&#34;:&#34;4 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-04&#34;,&#34;totalconfirmed&#34;:&#34;1906627&#34;,&#34;totaldeceased&#34;:&#34;39835&#34;,&#34;totalrecovered&#34;:&#34;1281551&#34;},{&#34;dailyconfirmed&#34;:&#34;56626&#34;,&#34;dailydeceased&#34;:&#34;919&#34;,&#34;dailyrecovered&#34;:&#34;45583&#34;,&#34;date&#34;:&#34;5 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-05&#34;,&#34;totalconfirmed&#34;:&#34;1963253&#34;,&#34;totaldeceased&#34;:&#34;40754&#34;,&#34;totalrecovered&#34;:&#34;1327134&#34;},{&#34;dailyconfirmed&#34;:&#34;62170&#34;,&#34;dailydeceased&#34;:&#34;899&#34;,&#34;dailyrecovered&#34;:&#34;50141&#34;,&#34;date&#34;:&#34;6 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-06&#34;,&#34;totalconfirmed&#34;:&#34;2025423&#34;,&#34;totaldeceased&#34;:&#34;41653&#34;,&#34;totalrecovered&#34;:&#34;1377275&#34;},{&#34;dailyconfirmed&#34;:&#34;61455&#34;,&#34;dailydeceased&#34;:&#34;936&#34;,&#34;dailyrecovered&#34;:&#34;50387&#34;,&#34;date&#34;:&#34;7 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-07&#34;,&#34;totalconfirmed&#34;:&#34;2086878&#34;,&#34;totaldeceased&#34;:&#34;42589&#34;,&#34;totalrecovered&#34;:&#34;1427662&#34;},{&#34;dailyconfirmed&#34;:&#34;65156&#34;,&#34;dailydeceased&#34;:&#34;875&#34;,&#34;dailyrecovered&#34;:&#34;52135&#34;,&#34;date&#34;:&#34;8 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-08&#34;,&#34;totalconfirmed&#34;:&#34;2152034&#34;,&#34;totaldeceased&#34;:&#34;43464&#34;,&#34;totalrecovered&#34;:&#34;1479797&#34;},{&#34;dailyconfirmed&#34;:&#34;62117&#34;,&#34;dailydeceased&#34;:&#34;1013&#34;,&#34;dailyrecovered&#34;:&#34;54474&#34;,&#34;date&#34;:&#34;9 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-09&#34;,&#34;totalconfirmed&#34;:&#34;2214151&#34;,&#34;totaldeceased&#34;:&#34;44477&#34;,&#34;totalrecovered&#34;:&#34;1534271&#34;},{&#34;dailyconfirmed&#34;:&#34;53016&#34;,&#34;dailydeceased&#34;:&#34;887&#34;,&#34;dailyrecovered&#34;:&#34;47362&#34;,&#34;date&#34;:&#34;10 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-10&#34;,&#34;totalconfirmed&#34;:&#34;2267167&#34;,&#34;totaldeceased&#34;:&#34;45364&#34;,&#34;totalrecovered&#34;:&#34;1581633&#34;},{&#34;dailyconfirmed&#34;:&#34;61252&#34;,&#34;dailydeceased&#34;:&#34;835&#34;,&#34;dailyrecovered&#34;:&#34;56461&#34;,&#34;date&#34;:&#34;11 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-11&#34;,&#34;totalconfirmed&#34;:&#34;2328419&#34;,&#34;totaldeceased&#34;:&#34;46199&#34;,&#34;totalrecovered&#34;:&#34;1638094&#34;},{&#34;dailyconfirmed&#34;:&#34;67066&#34;,&#34;dailydeceased&#34;:&#34;950&#34;,&#34;dailyrecovered&#34;:&#34;57759&#34;,&#34;date&#34;:&#34;12 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-12&#34;,&#34;totalconfirmed&#34;:&#34;2395485&#34;,&#34;totaldeceased&#34;:&#34;47149&#34;,&#34;totalrecovered&#34;:&#34;1695853&#34;},{&#34;dailyconfirmed&#34;:&#34;64141&#34;,&#34;dailydeceased&#34;:&#34;1006&#34;,&#34;dailyrecovered&#34;:&#34;54776&#34;,&#34;date&#34;:&#34;13 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-13&#34;,&#34;totalconfirmed&#34;:&#34;2459626&#34;,&#34;totaldeceased&#34;:&#34;48155&#34;,&#34;totalrecovered&#34;:&#34;1750629&#34;},{&#34;dailyconfirmed&#34;:&#34;65610&#34;,&#34;dailydeceased&#34;:&#34;989&#34;,&#34;dailyrecovered&#34;:&#34;56920&#34;,&#34;date&#34;:&#34;14 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-14&#34;,&#34;totalconfirmed&#34;:&#34;2525236&#34;,&#34;totaldeceased&#34;:&#34;49144&#34;,&#34;totalrecovered&#34;:&#34;1807549&#34;},{&#34;dailyconfirmed&#34;:&#34;63986&#34;,&#34;dailydeceased&#34;:&#34;952&#34;,&#34;dailyrecovered&#34;:&#34;53116&#34;,&#34;date&#34;:&#34;15 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-15&#34;,&#34;totalconfirmed&#34;:&#34;2589222&#34;,&#34;totaldeceased&#34;:&#34;50096&#34;,&#34;totalrecovered&#34;:&#34;1860665&#34;},{&#34;dailyconfirmed&#34;:&#34;58096&#34;,&#34;dailydeceased&#34;:&#34;952&#34;,&#34;dailyrecovered&#34;:&#34;57404&#34;,&#34;date&#34;:&#34;16 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-16&#34;,&#34;totalconfirmed&#34;:&#34;2647318&#34;,&#34;totaldeceased&#34;:&#34;51048&#34;,&#34;totalrecovered&#34;:&#34;1918069&#34;},{&#34;dailyconfirmed&#34;:&#34;54298&#34;,&#34;dailydeceased&#34;:&#34;880&#34;,&#34;dailyrecovered&#34;:&#34;58172&#34;,&#34;date&#34;:&#34;17 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-17&#34;,&#34;totalconfirmed&#34;:&#34;2701616&#34;,&#34;totaldeceased&#34;:&#34;51928&#34;,&#34;totalrecovered&#34;:&#34;1976241&#34;},{&#34;dailyconfirmed&#34;:&#34;65024&#34;,&#34;dailydeceased&#34;:&#34;1099&#34;,&#34;dailyrecovered&#34;:&#34;60455&#34;,&#34;date&#34;:&#34;18 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-18&#34;,&#34;totalconfirmed&#34;:&#34;2766640&#34;,&#34;totaldeceased&#34;:&#34;53027&#34;,&#34;totalrecovered&#34;:&#34;2036696&#34;},{&#34;dailyconfirmed&#34;:&#34;69196&#34;,&#34;dailydeceased&#34;:&#34;979&#34;,&#34;dailyrecovered&#34;:&#34;59365&#34;,&#34;date&#34;:&#34;19 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-19&#34;,&#34;totalconfirmed&#34;:&#34;2835836&#34;,&#34;totaldeceased&#34;:&#34;54006&#34;,&#34;totalrecovered&#34;:&#34;2096061&#34;},{&#34;dailyconfirmed&#34;:&#34;68518&#34;,&#34;dailydeceased&#34;:&#34;981&#34;,&#34;dailyrecovered&#34;:&#34;61873&#34;,&#34;date&#34;:&#34;20 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-20&#34;,&#34;totalconfirmed&#34;:&#34;2904354&#34;,&#34;totaldeceased&#34;:&#34;54987&#34;,&#34;totalrecovered&#34;:&#34;2157934&#34;},{&#34;dailyconfirmed&#34;:&#34;69029&#34;,&#34;dailydeceased&#34;:&#34;953&#34;,&#34;dailyrecovered&#34;:&#34;62858&#34;,&#34;date&#34;:&#34;21 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-21&#34;,&#34;totalconfirmed&#34;:&#34;2973383&#34;,&#34;totaldeceased&#34;:&#34;55940&#34;,&#34;totalrecovered&#34;:&#34;2220792&#34;},{&#34;dailyconfirmed&#34;:&#34;70067&#34;,&#34;dailydeceased&#34;:&#34;918&#34;,&#34;dailyrecovered&#34;:&#34;59101&#34;,&#34;date&#34;:&#34;22 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-22&#34;,&#34;totalconfirmed&#34;:&#34;3043450&#34;,&#34;totaldeceased&#34;:&#34;56858&#34;,&#34;totalrecovered&#34;:&#34;2279893&#34;},{&#34;dailyconfirmed&#34;:&#34;61749&#34;,&#34;dailydeceased&#34;:&#34;846&#34;,&#34;dailyrecovered&#34;:&#34;56896&#34;,&#34;date&#34;:&#34;23 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-23&#34;,&#34;totalconfirmed&#34;:&#34;3105199&#34;,&#34;totaldeceased&#34;:&#34;57704&#34;,&#34;totalrecovered&#34;:&#34;2336789&#34;},{&#34;dailyconfirmed&#34;:&#34;59696&#34;,&#34;dailydeceased&#34;:&#34;854&#34;,&#34;dailyrecovered&#34;:&#34;66305&#34;,&#34;date&#34;:&#34;24 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-24&#34;,&#34;totalconfirmed&#34;:&#34;3164895&#34;,&#34;totaldeceased&#34;:&#34;58558&#34;,&#34;totalrecovered&#34;:&#34;2403094&#34;},{&#34;dailyconfirmed&#34;:&#34;66873&#34;,&#34;dailydeceased&#34;:&#34;1066&#34;,&#34;dailyrecovered&#34;:&#34;64151&#34;,&#34;date&#34;:&#34;25 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-25&#34;,&#34;totalconfirmed&#34;:&#34;3231768&#34;,&#34;totaldeceased&#34;:&#34;59624&#34;,&#34;totalrecovered&#34;:&#34;2467245&#34;},{&#34;dailyconfirmed&#34;:&#34;75995&#34;,&#34;dailydeceased&#34;:&#34;1017&#34;,&#34;dailyrecovered&#34;:&#34;56191&#34;,&#34;date&#34;:&#34;26 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-26&#34;,&#34;totalconfirmed&#34;:&#34;3307763&#34;,&#34;totaldeceased&#34;:&#34;60641&#34;,&#34;totalrecovered&#34;:&#34;2523436&#34;},{&#34;dailyconfirmed&#34;:&#34;76827&#34;,&#34;dailydeceased&#34;:&#34;1066&#34;,&#34;dailyrecovered&#34;:&#34;59620&#34;,&#34;date&#34;:&#34;27 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-27&#34;,&#34;totalconfirmed&#34;:&#34;3384590&#34;,&#34;totaldeceased&#34;:&#34;61707&#34;,&#34;totalrecovered&#34;:&#34;2583056&#34;},{&#34;dailyconfirmed&#34;:&#34;76657&#34;,&#34;dailydeceased&#34;:&#34;1019&#34;,&#34;dailyrecovered&#34;:&#34;64475&#34;,&#34;date&#34;:&#34;28 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-28&#34;,&#34;totalconfirmed&#34;:&#34;3461247&#34;,&#34;totaldeceased&#34;:&#34;62726&#34;,&#34;totalrecovered&#34;:&#34;2647531&#34;},{&#34;dailyconfirmed&#34;:&#34;78479&#34;,&#34;dailydeceased&#34;:&#34;943&#34;,&#34;dailyrecovered&#34;:&#34;64982&#34;,&#34;date&#34;:&#34;29 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-29&#34;,&#34;totalconfirmed&#34;:&#34;3539726&#34;,&#34;totaldeceased&#34;:&#34;63669&#34;,&#34;totalrecovered&#34;:&#34;2712513&#34;},{&#34;dailyconfirmed&#34;:&#34;79461&#34;,&#34;dailydeceased&#34;:&#34;960&#34;,&#34;dailyrecovered&#34;:&#34;60422&#34;,&#34;date&#34;:&#34;30 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-30&#34;,&#34;totalconfirmed&#34;:&#34;3619187&#34;,&#34;totaldeceased&#34;:&#34;64629&#34;,&#34;totalrecovered&#34;:&#34;2772935&#34;},{&#34;dailyconfirmed&#34;:&#34;68766&#34;,&#34;dailydeceased&#34;:&#34;816&#34;,&#34;dailyrecovered&#34;:&#34;64435&#34;,&#34;date&#34;:&#34;31 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-31&#34;,&#34;totalconfirmed&#34;:&#34;3687953&#34;,&#34;totaldeceased&#34;:&#34;65445&#34;,&#34;totalrecovered&#34;:&#34;2837370&#34;},{&#34;dailyconfirmed&#34;:&#34;78168&#34;,&#34;dailydeceased&#34;:&#34;892&#34;,&#34;dailyrecovered&#34;:&#34;62145&#34;,&#34;date&#34;:&#34;1 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-01&#34;,&#34;totalconfirmed&#34;:&#34;3766121&#34;,&#34;totaldeceased&#34;:&#34;66337&#34;,&#34;totalrecovered&#34;:&#34;2899515&#34;},{&#34;dailyconfirmed&#34;:&#34;82860&#34;,&#34;dailydeceased&#34;:&#34;913&#34;,&#34;dailyrecovered&#34;:&#34;67874&#34;,&#34;date&#34;:&#34;2 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-02&#34;,&#34;totalconfirmed&#34;:&#34;3848981&#34;,&#34;totaldeceased&#34;:&#34;67250&#34;,&#34;totalrecovered&#34;:&#34;2967389&#34;},{&#34;dailyconfirmed&#34;:&#34;84156&#34;,&#34;dailydeceased&#34;:&#34;979&#34;,&#34;dailyrecovered&#34;:&#34;67491&#34;,&#34;date&#34;:&#34;3 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-03&#34;,&#34;totalconfirmed&#34;:&#34;3933137&#34;,&#34;totaldeceased&#34;:&#34;68229&#34;,&#34;totalrecovered&#34;:&#34;3034880&#34;},{&#34;dailyconfirmed&#34;:&#34;87115&#34;,&#34;dailydeceased&#34;:&#34;950&#34;,&#34;dailyrecovered&#34;:&#34;69625&#34;,&#34;date&#34;:&#34;4 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-04&#34;,&#34;totalconfirmed&#34;:&#34;4020252&#34;,&#34;totaldeceased&#34;:&#34;69179&#34;,&#34;totalrecovered&#34;:&#34;3104505&#34;},{&#34;dailyconfirmed&#34;:&#34;90600&#34;,&#34;dailydeceased&#34;:&#34;916&#34;,&#34;dailyrecovered&#34;:&#34;73161&#34;,&#34;date&#34;:&#34;5 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-05&#34;,&#34;totalconfirmed&#34;:&#34;4110852&#34;,&#34;totaldeceased&#34;:&#34;70095&#34;,&#34;totalrecovered&#34;:&#34;3177666&#34;},{&#34;dailyconfirmed&#34;:&#34;91725&#34;,&#34;dailydeceased&#34;:&#34;1005&#34;,&#34;dailyrecovered&#34;:&#34;69630&#34;,&#34;date&#34;:&#34;6 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-06&#34;,&#34;totalconfirmed&#34;:&#34;4202577&#34;,&#34;totaldeceased&#34;:&#34;71100&#34;,&#34;totalrecovered&#34;:&#34;3247296&#34;},{&#34;dailyconfirmed&#34;:&#34;75015&#34;,&#34;dailydeceased&#34;:&#34;1129&#34;,&#34;dailyrecovered&#34;:&#34;74116&#34;,&#34;date&#34;:&#34;7 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-07&#34;,&#34;totalconfirmed&#34;:&#34;4277592&#34;,&#34;totaldeceased&#34;:&#34;72229&#34;,&#34;totalrecovered&#34;:&#34;3321412&#34;},{&#34;dailyconfirmed&#34;:&#34;89855&#34;,&#34;dailydeceased&#34;:&#34;1107&#34;,&#34;dailyrecovered&#34;:&#34;74608&#34;,&#34;date&#34;:&#34;8 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-08&#34;,&#34;totalconfirmed&#34;:&#34;4367447&#34;,&#34;totaldeceased&#34;:&#34;73336&#34;,&#34;totalrecovered&#34;:&#34;3396020&#34;},{&#34;dailyconfirmed&#34;:&#34;95536&#34;,&#34;dailydeceased&#34;:&#34;1168&#34;,&#34;dailyrecovered&#34;:&#34;73062&#34;,&#34;date&#34;:&#34;9 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-09&#34;,&#34;totalconfirmed&#34;:&#34;4462983&#34;,&#34;totaldeceased&#34;:&#34;74504&#34;,&#34;totalrecovered&#34;:&#34;3469082&#34;},{&#34;dailyconfirmed&#34;:&#34;96762&#34;,&#34;dailydeceased&#34;:&#34;1213&#34;,&#34;dailyrecovered&#34;:&#34;70904&#34;,&#34;date&#34;:&#34;10 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-10&#34;,&#34;totalconfirmed&#34;:&#34;4559745&#34;,&#34;totaldeceased&#34;:&#34;75717&#34;,&#34;totalrecovered&#34;:&#34;3539986&#34;},{&#34;dailyconfirmed&#34;:&#34;97655&#34;,&#34;dailydeceased&#34;:&#34;1202&#34;,&#34;dailyrecovered&#34;:&#34;81456&#34;,&#34;date&#34;:&#34;11 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-11&#34;,&#34;totalconfirmed&#34;:&#34;4657400&#34;,&#34;totaldeceased&#34;:&#34;76919&#34;,&#34;totalrecovered&#34;:&#34;3621442&#34;},{&#34;dailyconfirmed&#34;:&#34;94414&#34;,&#34;dailydeceased&#34;:&#34;1111&#34;,&#34;dailyrecovered&#34;:&#34;77862&#34;,&#34;date&#34;:&#34;12 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-12&#34;,&#34;totalconfirmed&#34;:&#34;4751814&#34;,&#34;totaldeceased&#34;:&#34;78030&#34;,&#34;totalrecovered&#34;:&#34;3699304&#34;},{&#34;dailyconfirmed&#34;:&#34;93220&#34;,&#34;dailydeceased&#34;:&#34;1140&#34;,&#34;dailyrecovered&#34;:&#34;77748&#34;,&#34;date&#34;:&#34;13 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-13&#34;,&#34;totalconfirmed&#34;:&#34;4845034&#34;,&#34;totaldeceased&#34;:&#34;79170&#34;,&#34;totalrecovered&#34;:&#34;3777052&#34;},{&#34;dailyconfirmed&#34;:&#34;81913&#34;,&#34;dailydeceased&#34;:&#34;1054&#34;,&#34;dailyrecovered&#34;:&#34;79213&#34;,&#34;date&#34;:&#34;14 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-14&#34;,&#34;totalconfirmed&#34;:&#34;4926947&#34;,&#34;totaldeceased&#34;:&#34;80224&#34;,&#34;totalrecovered&#34;:&#34;3856265&#34;},{&#34;dailyconfirmed&#34;:&#34;91098&#34;,&#34;dailydeceased&#34;:&#34;1281&#34;,&#34;dailyrecovered&#34;:&#34;82849&#34;,&#34;date&#34;:&#34;15 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-15&#34;,&#34;totalconfirmed&#34;:&#34;5018045&#34;,&#34;totaldeceased&#34;:&#34;81505&#34;,&#34;totalrecovered&#34;:&#34;3939114&#34;},{&#34;dailyconfirmed&#34;:&#34;97860&#34;,&#34;dailydeceased&#34;:&#34;1140&#34;,&#34;dailyrecovered&#34;:&#34;82924&#34;,&#34;date&#34;:&#34;16 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-16&#34;,&#34;totalconfirmed&#34;:&#34;5115905&#34;,&#34;totaldeceased&#34;:&#34;82645&#34;,&#34;totalrecovered&#34;:&#34;4022038&#34;},{&#34;dailyconfirmed&#34;:&#34;96787&#34;,&#34;dailydeceased&#34;:&#34;1175&#34;,&#34;dailyrecovered&#34;:&#34;87788&#34;,&#34;date&#34;:&#34;17 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-17&#34;,&#34;totalconfirmed&#34;:&#34;5212692&#34;,&#34;totaldeceased&#34;:&#34;83820&#34;,&#34;totalrecovered&#34;:&#34;4109826&#34;},{&#34;dailyconfirmed&#34;:&#34;92973&#34;,&#34;dailydeceased&#34;:&#34;1221&#34;,&#34;dailyrecovered&#34;:&#34;95515&#34;,&#34;date&#34;:&#34;18 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-18&#34;,&#34;totalconfirmed&#34;:&#34;5305665&#34;,&#34;totaldeceased&#34;:&#34;85041&#34;,&#34;totalrecovered&#34;:&#34;4205341&#34;},{&#34;dailyconfirmed&#34;:&#34;92574&#34;,&#34;dailydeceased&#34;:&#34;1149&#34;,&#34;dailyrecovered&#34;:&#34;94389&#34;,&#34;date&#34;:&#34;19 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-19&#34;,&#34;totalconfirmed&#34;:&#34;5398239&#34;,&#34;totaldeceased&#34;:&#34;86190&#34;,&#34;totalrecovered&#34;:&#34;4299730&#34;},{&#34;dailyconfirmed&#34;:&#34;87395&#34;,&#34;dailydeceased&#34;:&#34;1135&#34;,&#34;dailyrecovered&#34;:&#34;92926&#34;,&#34;date&#34;:&#34;20 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-20&#34;,&#34;totalconfirmed&#34;:&#34;5485634&#34;,&#34;totaldeceased&#34;:&#34;87325&#34;,&#34;totalrecovered&#34;:&#34;4392656&#34;},{&#34;dailyconfirmed&#34;:&#34;74493&#34;,&#34;dailydeceased&#34;:&#34;1056&#34;,&#34;dailyrecovered&#34;:&#34;102070&#34;,&#34;date&#34;:&#34;21 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-21&#34;,&#34;totalconfirmed&#34;:&#34;5560127&#34;,&#34;totaldeceased&#34;:&#34;88381&#34;,&#34;totalrecovered&#34;:&#34;4494726&#34;},{&#34;dailyconfirmed&#34;:&#34;83362&#34;,&#34;dailydeceased&#34;:&#34;1085&#34;,&#34;dailyrecovered&#34;:&#34;89657&#34;,&#34;date&#34;:&#34;22 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-22&#34;,&#34;totalconfirmed&#34;:&#34;5643489&#34;,&#34;totaldeceased&#34;:&#34;89466&#34;,&#34;totalrecovered&#34;:&#34;4584383&#34;},{&#34;dailyconfirmed&#34;:&#34;86703&#34;,&#34;dailydeceased&#34;:&#34;1123&#34;,&#34;dailyrecovered&#34;:&#34;87459&#34;,&#34;date&#34;:&#34;23 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-23&#34;,&#34;totalconfirmed&#34;:&#34;5730192&#34;,&#34;totaldeceased&#34;:&#34;90589&#34;,&#34;totalrecovered&#34;:&#34;4671842&#34;},{&#34;dailyconfirmed&#34;:&#34;85921&#34;,&#34;dailydeceased&#34;:&#34;1144&#34;,&#34;dailyrecovered&#34;:&#34;81142&#34;,&#34;date&#34;:&#34;24 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-24&#34;,&#34;totalconfirmed&#34;:&#34;5816113&#34;,&#34;totaldeceased&#34;:&#34;91733&#34;,&#34;totalrecovered&#34;:&#34;4752984&#34;},{&#34;dailyconfirmed&#34;:&#34;85717&#34;,&#34;dailydeceased&#34;:&#34;1093&#34;,&#34;dailyrecovered&#34;:&#34;93331&#34;,&#34;date&#34;:&#34;25 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-25&#34;,&#34;totalconfirmed&#34;:&#34;5901830&#34;,&#34;totaldeceased&#34;:&#34;92826&#34;,&#34;totalrecovered&#34;:&#34;4846315&#34;},{&#34;dailyconfirmed&#34;:&#34;88759&#34;,&#34;dailydeceased&#34;:&#34;1124&#34;,&#34;dailyrecovered&#34;:&#34;92365&#34;,&#34;date&#34;:&#34;26 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-26&#34;,&#34;totalconfirmed&#34;:&#34;5990589&#34;,&#34;totaldeceased&#34;:&#34;93950&#34;,&#34;totalrecovered&#34;:&#34;4938680&#34;},{&#34;dailyconfirmed&#34;:&#34;82770&#34;,&#34;dailydeceased&#34;:&#34;1040&#34;,&#34;dailyrecovered&#34;:&#34;74691&#34;,&#34;date&#34;:&#34;27 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-27&#34;,&#34;totalconfirmed&#34;:&#34;6073359&#34;,&#34;totaldeceased&#34;:&#34;94990&#34;,&#34;totalrecovered&#34;:&#34;5013371&#34;},{&#34;dailyconfirmed&#34;:&#34;69669&#34;,&#34;dailydeceased&#34;:&#34;775&#34;,&#34;dailyrecovered&#34;:&#34;85198&#34;,&#34;date&#34;:&#34;28 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-28&#34;,&#34;totalconfirmed&#34;:&#34;6143028&#34;,&#34;totaldeceased&#34;:&#34;95765&#34;,&#34;totalrecovered&#34;:&#34;5098569&#34;},{&#34;dailyconfirmed&#34;:&#34;80500&#34;,&#34;dailydeceased&#34;:&#34;1178&#34;,&#34;dailyrecovered&#34;:&#34;86150&#34;,&#34;date&#34;:&#34;29 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-29&#34;,&#34;totalconfirmed&#34;:&#34;6223528&#34;,&#34;totaldeceased&#34;:&#34;96943&#34;,&#34;totalrecovered&#34;:&#34;5184719&#34;},{&#34;dailyconfirmed&#34;:&#34;86748&#34;,&#34;dailydeceased&#34;:&#34;1179&#34;,&#34;dailyrecovered&#34;:&#34;85274&#34;,&#34;date&#34;:&#34;30 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-30&#34;,&#34;totalconfirmed&#34;:&#34;6310276&#34;,&#34;totaldeceased&#34;:&#34;98122&#34;,&#34;totalrecovered&#34;:&#34;5269993&#34;},{&#34;dailyconfirmed&#34;:&#34;81784&#34;,&#34;dailydeceased&#34;:&#34;1099&#34;,&#34;dailyrecovered&#34;:&#34;78731&#34;,&#34;date&#34;:&#34;1 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-01&#34;,&#34;totalconfirmed&#34;:&#34;6392060&#34;,&#34;totaldeceased&#34;:&#34;99221&#34;,&#34;totalrecovered&#34;:&#34;5348724&#34;},{&#34;dailyconfirmed&#34;:&#34;79883&#34;,&#34;dailydeceased&#34;:&#34;1068&#34;,&#34;dailyrecovered&#34;:&#34;76339&#34;,&#34;date&#34;:&#34;2 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-02&#34;,&#34;totalconfirmed&#34;:&#34;6471943&#34;,&#34;totaldeceased&#34;:&#34;100289&#34;,&#34;totalrecovered&#34;:&#34;5425063&#34;},{&#34;dailyconfirmed&#34;:&#34;75479&#34;,&#34;dailydeceased&#34;:&#34;937&#34;,&#34;dailyrecovered&#34;:&#34;81655&#34;,&#34;date&#34;:&#34;3 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-03&#34;,&#34;totalconfirmed&#34;:&#34;6547422&#34;,&#34;totaldeceased&#34;:&#34;101226&#34;,&#34;totalrecovered&#34;:&#34;5506718&#34;},{&#34;dailyconfirmed&#34;:&#34;74770&#34;,&#34;dailydeceased&#34;:&#34;903&#34;,&#34;dailyrecovered&#34;:&#34;76713&#34;,&#34;date&#34;:&#34;4 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-04&#34;,&#34;totalconfirmed&#34;:&#34;6622192&#34;,&#34;totaldeceased&#34;:&#34;102129&#34;,&#34;totalrecovered&#34;:&#34;5583431&#34;},{&#34;dailyconfirmed&#34;:&#34;60130&#34;,&#34;dailydeceased&#34;:&#34;886&#34;,&#34;dailyrecovered&#34;:&#34;75855&#34;,&#34;date&#34;:&#34;5 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-05&#34;,&#34;totalconfirmed&#34;:&#34;6682322&#34;,&#34;totaldeceased&#34;:&#34;103015&#34;,&#34;totalrecovered&#34;:&#34;5659286&#34;},{&#34;dailyconfirmed&#34;:&#34;71869&#34;,&#34;dailydeceased&#34;:&#34;990&#34;,&#34;dailyrecovered&#34;:&#34;81945&#34;,&#34;date&#34;:&#34;6 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-06&#34;,&#34;totalconfirmed&#34;:&#34;6754191&#34;,&#34;totaldeceased&#34;:&#34;104005&#34;,&#34;totalrecovered&#34;:&#34;5741231&#34;},{&#34;dailyconfirmed&#34;:&#34;78809&#34;,&#34;dailydeceased&#34;:&#34;963&#34;,&#34;dailyrecovered&#34;:&#34;83209&#34;,&#34;date&#34;:&#34;7 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-07&#34;,&#34;totalconfirmed&#34;:&#34;6833000&#34;,&#34;totaldeceased&#34;:&#34;104968&#34;,&#34;totalrecovered&#34;:&#34;5824440&#34;},{&#34;dailyconfirmed&#34;:&#34;70797&#34;,&#34;dailydeceased&#34;:&#34;967&#34;,&#34;dailyrecovered&#34;:&#34;78745&#34;,&#34;date&#34;:&#34;8 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-08&#34;,&#34;totalconfirmed&#34;:&#34;6903797&#34;,&#34;totaldeceased&#34;:&#34;105935&#34;,&#34;totalrecovered&#34;:&#34;5903185&#34;},{&#34;dailyconfirmed&#34;:&#34;73305&#34;,&#34;dailydeceased&#34;:&#34;929&#34;,&#34;dailyrecovered&#34;:&#34;82628&#34;,&#34;date&#34;:&#34;9 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-09&#34;,&#34;totalconfirmed&#34;:&#34;6977102&#34;,&#34;totaldeceased&#34;:&#34;106864&#34;,&#34;totalrecovered&#34;:&#34;5985813&#34;},{&#34;dailyconfirmed&#34;:&#34;74418&#34;,&#34;dailydeceased&#34;:&#34;921&#34;,&#34;dailyrecovered&#34;:&#34;89024&#34;,&#34;date&#34;:&#34;10 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-10&#34;,&#34;totalconfirmed&#34;:&#34;7051520&#34;,&#34;totaldeceased&#34;:&#34;107785&#34;,&#34;totalrecovered&#34;:&#34;6074837&#34;},{&#34;dailyconfirmed&#34;:&#34;67789&#34;,&#34;dailydeceased&#34;:&#34;813&#34;,&#34;dailyrecovered&#34;:&#34;71565&#34;,&#34;date&#34;:&#34;11 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-11&#34;,&#34;totalconfirmed&#34;:&#34;7119309&#34;,&#34;totaldeceased&#34;:&#34;108598&#34;,&#34;totalrecovered&#34;:&#34;6146402&#34;},{&#34;dailyconfirmed&#34;:&#34;54262&#34;,&#34;dailydeceased&#34;:&#34;710&#34;,&#34;dailyrecovered&#34;:&#34;78365&#34;,&#34;date&#34;:&#34;12 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-12&#34;,&#34;totalconfirmed&#34;:&#34;7173571&#34;,&#34;totaldeceased&#34;:&#34;109308&#34;,&#34;totalrecovered&#34;:&#34;6224767&#34;},{&#34;dailyconfirmed&#34;:&#34;63717&#34;,&#34;dailydeceased&#34;:&#34;727&#34;,&#34;dailyrecovered&#34;:&#34;74079&#34;,&#34;date&#34;:&#34;13 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-13&#34;,&#34;totalconfirmed&#34;:&#34;7237288&#34;,&#34;totaldeceased&#34;:&#34;110035&#34;,&#34;totalrecovered&#34;:&#34;6298846&#34;},{&#34;dailyconfirmed&#34;:&#34;67811&#34;,&#34;dailydeceased&#34;:&#34;690&#34;,&#34;dailyrecovered&#34;:&#34;81582&#34;,&#34;date&#34;:&#34;14 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-14&#34;,&#34;totalconfirmed&#34;:&#34;7305099&#34;,&#34;totaldeceased&#34;:&#34;110725&#34;,&#34;totalrecovered&#34;:&#34;6380428&#34;},{&#34;dailyconfirmed&#34;:&#34;63441&#34;,&#34;dailydeceased&#34;:&#34;882&#34;,&#34;dailyrecovered&#34;:&#34;70792&#34;,&#34;date&#34;:&#34;15 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-15&#34;,&#34;totalconfirmed&#34;:&#34;7368540&#34;,&#34;totaldeceased&#34;:&#34;111607&#34;,&#34;totalrecovered&#34;:&#34;6451220&#34;},{&#34;dailyconfirmed&#34;:&#34;62304&#34;,&#34;dailydeceased&#34;:&#34;840&#34;,&#34;dailyrecovered&#34;:&#34;70568&#34;,&#34;date&#34;:&#34;16 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-16&#34;,&#34;totalconfirmed&#34;:&#34;7430844&#34;,&#34;totaldeceased&#34;:&#34;112447&#34;,&#34;totalrecovered&#34;:&#34;6521788&#34;},{&#34;dailyconfirmed&#34;:&#34;61893&#34;,&#34;dailydeceased&#34;:&#34;1032&#34;,&#34;dailyrecovered&#34;:&#34;72583&#34;,&#34;date&#34;:&#34;17 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-17&#34;,&#34;totalconfirmed&#34;:&#34;7492737&#34;,&#34;totaldeceased&#34;:&#34;113479&#34;,&#34;totalrecovered&#34;:&#34;6594371&#34;},{&#34;dailyconfirmed&#34;:&#34;56519&#34;,&#34;dailydeceased&#34;:&#34;582&#34;,&#34;dailyrecovered&#34;:&#34;66418&#34;,&#34;date&#34;:&#34;18 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-18&#34;,&#34;totalconfirmed&#34;:&#34;7549256&#34;,&#34;totaldeceased&#34;:&#34;114061&#34;,&#34;totalrecovered&#34;:&#34;6660789&#34;},{&#34;dailyconfirmed&#34;:&#34;45506&#34;,&#34;dailydeceased&#34;:&#34;589&#34;,&#34;dailyrecovered&#34;:&#34;69800&#34;,&#34;date&#34;:&#34;19 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-19&#34;,&#34;totalconfirmed&#34;:&#34;7594762&#34;,&#34;totaldeceased&#34;:&#34;114650&#34;,&#34;totalrecovered&#34;:&#34;6730589&#34;},{&#34;dailyconfirmed&#34;:&#34;54348&#34;,&#34;dailydeceased&#34;:&#34;714&#34;,&#34;dailyrecovered&#34;:&#34;61828&#34;,&#34;date&#34;:&#34;20 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-20&#34;,&#34;totalconfirmed&#34;:&#34;7649110&#34;,&#34;totaldeceased&#34;:&#34;115364&#34;,&#34;totalrecovered&#34;:&#34;6792417&#34;},{&#34;dailyconfirmed&#34;:&#34;56264&#34;,&#34;dailydeceased&#34;:&#34;701&#34;,&#34;dailyrecovered&#34;:&#34;79561&#34;,&#34;date&#34;:&#34;21 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-21&#34;,&#34;totalconfirmed&#34;:&#34;7705374&#34;,&#34;totaldeceased&#34;:&#34;116065&#34;,&#34;totalrecovered&#34;:&#34;6871978&#34;},{&#34;dailyconfirmed&#34;:&#34;54371&#34;,&#34;dailydeceased&#34;:&#34;686&#34;,&#34;dailyrecovered&#34;:&#34;74569&#34;,&#34;date&#34;:&#34;22 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-22&#34;,&#34;totalconfirmed&#34;:&#34;7759745&#34;,&#34;totaldeceased&#34;:&#34;116751&#34;,&#34;totalrecovered&#34;:&#34;6946547&#34;},{&#34;dailyconfirmed&#34;:&#34;53931&#34;,&#34;dailydeceased&#34;:&#34;655&#34;,&#34;dailyrecovered&#34;:&#34;66994&#34;,&#34;date&#34;:&#34;23 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-23&#34;,&#34;totalconfirmed&#34;:&#34;7813676&#34;,&#34;totaldeceased&#34;:&#34;117406&#34;,&#34;totalrecovered&#34;:&#34;7013541&#34;},{&#34;dailyconfirmed&#34;:&#34;50366&#34;,&#34;dailydeceased&#34;:&#34;578&#34;,&#34;dailyrecovered&#34;:&#34;62270&#34;,&#34;date&#34;:&#34;24 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-24&#34;,&#34;totalconfirmed&#34;:&#34;7864042&#34;,&#34;totaldeceased&#34;:&#34;117984&#34;,&#34;totalrecovered&#34;:&#34;7075811&#34;},{&#34;dailyconfirmed&#34;:&#34;45922&#34;,&#34;dailydeceased&#34;:&#34;483&#34;,&#34;dailyrecovered&#34;:&#34;59304&#34;,&#34;date&#34;:&#34;25 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-25&#34;,&#34;totalconfirmed&#34;:&#34;7909964&#34;,&#34;totaldeceased&#34;:&#34;118467&#34;,&#34;totalrecovered&#34;:&#34;7135115&#34;},{&#34;dailyconfirmed&#34;:&#34;36019&#34;,&#34;dailydeceased&#34;:&#34;485&#34;,&#34;dailyrecovered&#34;:&#34;63734&#34;,&#34;date&#34;:&#34;26 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-26&#34;,&#34;totalconfirmed&#34;:&#34;7945983&#34;,&#34;totaldeceased&#34;:&#34;118952&#34;,&#34;totalrecovered&#34;:&#34;7198849&#34;},{&#34;dailyconfirmed&#34;:&#34;43036&#34;,&#34;dailydeceased&#34;:&#34;511&#34;,&#34;dailyrecovered&#34;:&#34;58429&#34;,&#34;date&#34;:&#34;27 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-27&#34;,&#34;totalconfirmed&#34;:&#34;7989019&#34;,&#34;totaldeceased&#34;:&#34;119463&#34;,&#34;totalrecovered&#34;:&#34;7257278&#34;},{&#34;dailyconfirmed&#34;:&#34;50188&#34;,&#34;dailydeceased&#34;:&#34;515&#34;,&#34;dailyrecovered&#34;:&#34;56594&#34;,&#34;date&#34;:&#34;28 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-28&#34;,&#34;totalconfirmed&#34;:&#34;8039207&#34;,&#34;totaldeceased&#34;:&#34;119978&#34;,&#34;totalrecovered&#34;:&#34;7313872&#34;},{&#34;dailyconfirmed&#34;:&#34;48765&#34;,&#34;dailydeceased&#34;:&#34;562&#34;,&#34;dailyrecovered&#34;:&#34;57867&#34;,&#34;date&#34;:&#34;29 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-29&#34;,&#34;totalconfirmed&#34;:&#34;8087972&#34;,&#34;totaldeceased&#34;:&#34;120540&#34;,&#34;totalrecovered&#34;:&#34;7371739&#34;},{&#34;dailyconfirmed&#34;:&#34;48117&#34;,&#34;dailydeceased&#34;:&#34;550&#34;,&#34;dailyrecovered&#34;:&#34;59005&#34;,&#34;date&#34;:&#34;30 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-30&#34;,&#34;totalconfirmed&#34;:&#34;8136089&#34;,&#34;totaldeceased&#34;:&#34;121090&#34;,&#34;totalrecovered&#34;:&#34;7430744&#34;},{&#34;dailyconfirmed&#34;:&#34;47228&#34;,&#34;dailydeceased&#34;:&#34;469&#34;,&#34;dailyrecovered&#34;:&#34;58682&#34;,&#34;date&#34;:&#34;31 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-31&#34;,&#34;totalconfirmed&#34;:&#34;8183317&#34;,&#34;totaldeceased&#34;:&#34;121559&#34;,&#34;totalrecovered&#34;:&#34;7489426&#34;},{&#34;dailyconfirmed&#34;:&#34;45928&#34;,&#34;dailydeceased&#34;:&#34;491&#34;,&#34;dailyrecovered&#34;:&#34;53312&#34;,&#34;date&#34;:&#34;1 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-01&#34;,&#34;totalconfirmed&#34;:&#34;8229245&#34;,&#34;totaldeceased&#34;:&#34;122050&#34;,&#34;totalrecovered&#34;:&#34;7542738&#34;},{&#34;dailyconfirmed&#34;:&#34;37592&#34;,&#34;dailydeceased&#34;:&#34;498&#34;,&#34;dailyrecovered&#34;:&#34;58524&#34;,&#34;date&#34;:&#34;2 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-02&#34;,&#34;totalconfirmed&#34;:&#34;8266837&#34;,&#34;totaldeceased&#34;:&#34;122548&#34;,&#34;totalrecovered&#34;:&#34;7601262&#34;},{&#34;dailyconfirmed&#34;:&#34;46027&#34;,&#34;dailydeceased&#34;:&#34;510&#34;,&#34;dailyrecovered&#34;:&#34;53328&#34;,&#34;date&#34;:&#34;3 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-03&#34;,&#34;totalconfirmed&#34;:&#34;8312864&#34;,&#34;totaldeceased&#34;:&#34;123058&#34;,&#34;totalrecovered&#34;:&#34;7654590&#34;},{&#34;dailyconfirmed&#34;:&#34;50465&#34;,&#34;dailydeceased&#34;:&#34;707&#34;,&#34;dailyrecovered&#34;:&#34;55873&#34;,&#34;date&#34;:&#34;4 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-04&#34;,&#34;totalconfirmed&#34;:&#34;8363329&#34;,&#34;totaldeceased&#34;:&#34;123765&#34;,&#34;totalrecovered&#34;:&#34;7710463&#34;},{&#34;dailyconfirmed&#34;:&#34;47628&#34;,&#34;dailydeceased&#34;:&#34;672&#34;,&#34;dailyrecovered&#34;:&#34;54133&#34;,&#34;date&#34;:&#34;5 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-05&#34;,&#34;totalconfirmed&#34;:&#34;8410957&#34;,&#34;totaldeceased&#34;:&#34;124437&#34;,&#34;totalrecovered&#34;:&#34;7764596&#34;},{&#34;dailyconfirmed&#34;:&#34;50017&#34;,&#34;dailydeceased&#34;:&#34;577&#34;,&#34;dailyrecovered&#34;:&#34;53946&#34;,&#34;date&#34;:&#34;6 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-06&#34;,&#34;totalconfirmed&#34;:&#34;8460974&#34;,&#34;totaldeceased&#34;:&#34;125014&#34;,&#34;totalrecovered&#34;:&#34;7818542&#34;},{&#34;dailyconfirmed&#34;:&#34;46153&#34;,&#34;dailydeceased&#34;:&#34;557&#34;,&#34;dailyrecovered&#34;:&#34;48582&#34;,&#34;date&#34;:&#34;7 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-07&#34;,&#34;totalconfirmed&#34;:&#34;8507127&#34;,&#34;totaldeceased&#34;:&#34;125571&#34;,&#34;totalrecovered&#34;:&#34;7867124&#34;},{&#34;dailyconfirmed&#34;:&#34;46707&#34;,&#34;dailydeceased&#34;:&#34;491&#34;,&#34;dailyrecovered&#34;:&#34;48465&#34;,&#34;date&#34;:&#34;8 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-08&#34;,&#34;totalconfirmed&#34;:&#34;8553834&#34;,&#34;totaldeceased&#34;:&#34;126062&#34;,&#34;totalrecovered&#34;:&#34;7915589&#34;},{&#34;dailyconfirmed&#34;:&#34;37119&#34;,&#34;dailydeceased&#34;:&#34;450&#34;,&#34;dailyrecovered&#34;:&#34;41449&#34;,&#34;date&#34;:&#34;9 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-09&#34;,&#34;totalconfirmed&#34;:&#34;8590953&#34;,&#34;totaldeceased&#34;:&#34;126512&#34;,&#34;totalrecovered&#34;:&#34;7957038&#34;},{&#34;dailyconfirmed&#34;:&#34;44724&#34;,&#34;dailydeceased&#34;:&#34;511&#34;,&#34;dailyrecovered&#34;:&#34;54639&#34;,&#34;date&#34;:&#34;10 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-10&#34;,&#34;totalconfirmed&#34;:&#34;8635677&#34;,&#34;totaldeceased&#34;:&#34;127023&#34;,&#34;totalrecovered&#34;:&#34;8011677&#34;},{&#34;dailyconfirmed&#34;:&#34;48285&#34;,&#34;dailydeceased&#34;:&#34;550&#34;,&#34;dailyrecovered&#34;:&#34;52704&#34;,&#34;date&#34;:&#34;11 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-11&#34;,&#34;totalconfirmed&#34;:&#34;8683962&#34;,&#34;totaldeceased&#34;:&#34;127573&#34;,&#34;totalrecovered&#34;:&#34;8064381&#34;},{&#34;dailyconfirmed&#34;:&#34;44585&#34;,&#34;dailydeceased&#34;:&#34;544&#34;,&#34;dailyrecovered&#34;:&#34;49354&#34;,&#34;date&#34;:&#34;12 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-12&#34;,&#34;totalconfirmed&#34;:&#34;8728547&#34;,&#34;totaldeceased&#34;:&#34;128117&#34;,&#34;totalrecovered&#34;:&#34;8113735&#34;},{&#34;dailyconfirmed&#34;:&#34;44620&#34;,&#34;dailydeceased&#34;:&#34;517&#34;,&#34;dailyrecovered&#34;:&#34;47620&#34;,&#34;date&#34;:&#34;13 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-13&#34;,&#34;totalconfirmed&#34;:&#34;8773167&#34;,&#34;totaldeceased&#34;:&#34;128634&#34;,&#34;totalrecovered&#34;:&#34;8161355&#34;},{&#34;dailyconfirmed&#34;:&#34;41692&#34;,&#34;dailydeceased&#34;:&#34;450&#34;,&#34;dailyrecovered&#34;:&#34;42317&#34;,&#34;date&#34;:&#34;14 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-14&#34;,&#34;totalconfirmed&#34;:&#34;8814859&#34;,&#34;totaldeceased&#34;:&#34;129084&#34;,&#34;totalrecovered&#34;:&#34;8203672&#34;},{&#34;dailyconfirmed&#34;:&#34;30681&#34;,&#34;dailydeceased&#34;:&#34;434&#34;,&#34;dailyrecovered&#34;:&#34;44111&#34;,&#34;date&#34;:&#34;15 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-15&#34;,&#34;totalconfirmed&#34;:&#34;8845540&#34;,&#34;totaldeceased&#34;:&#34;129518&#34;,&#34;totalrecovered&#34;:&#34;8247783&#34;},{&#34;dailyconfirmed&#34;:&#34;28609&#34;,&#34;dailydeceased&#34;:&#34;451&#34;,&#34;dailyrecovered&#34;:&#34;40392&#34;,&#34;date&#34;:&#34;16 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-16&#34;,&#34;totalconfirmed&#34;:&#34;8874149&#34;,&#34;totaldeceased&#34;:&#34;129969&#34;,&#34;totalrecovered&#34;:&#34;8288175&#34;},{&#34;dailyconfirmed&#34;:&#34;38548&#34;,&#34;dailydeceased&#34;:&#34;472&#34;,&#34;dailyrecovered&#34;:&#34;44753&#34;,&#34;date&#34;:&#34;17 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-17&#34;,&#34;totalconfirmed&#34;:&#34;8912697&#34;,&#34;totaldeceased&#34;:&#34;130441&#34;,&#34;totalrecovered&#34;:&#34;8332928&#34;},{&#34;dailyconfirmed&#34;:&#34;45366&#34;,&#34;dailydeceased&#34;:&#34;586&#34;,&#34;dailyrecovered&#34;:&#34;48675&#34;,&#34;date&#34;:&#34;18 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-18&#34;,&#34;totalconfirmed&#34;:&#34;8958063&#34;,&#34;totaldeceased&#34;:&#34;131027&#34;,&#34;totalrecovered&#34;:&#34;8381603&#34;},{&#34;dailyconfirmed&#34;:&#34;46185&#34;,&#34;dailydeceased&#34;:&#34;582&#34;,&#34;dailyrecovered&#34;:&#34;45246&#34;,&#34;date&#34;:&#34;19 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-19&#34;,&#34;totalconfirmed&#34;:&#34;9004248&#34;,&#34;totaldeceased&#34;:&#34;131609&#34;,&#34;totalrecovered&#34;:&#34;8426849&#34;},{&#34;dailyconfirmed&#34;:&#34;46283&#34;,&#34;dailydeceased&#34;:&#34;564&#34;,&#34;dailyrecovered&#34;:&#34;48968&#34;,&#34;date&#34;:&#34;20 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-20&#34;,&#34;totalconfirmed&#34;:&#34;9050531&#34;,&#34;totaldeceased&#34;:&#34;132173&#34;,&#34;totalrecovered&#34;:&#34;8475817&#34;},{&#34;dailyconfirmed&#34;:&#34;45301&#34;,&#34;dailydeceased&#34;:&#34;499&#34;,&#34;dailyrecovered&#34;:&#34;44055&#34;,&#34;date&#34;:&#34;21 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-21&#34;,&#34;totalconfirmed&#34;:&#34;9095832&#34;,&#34;totaldeceased&#34;:&#34;132672&#34;,&#34;totalrecovered&#34;:&#34;8519872&#34;},{&#34;dailyconfirmed&#34;:&#34;44404&#34;,&#34;dailydeceased&#34;:&#34;510&#34;,&#34;dailyrecovered&#34;:&#34;41405&#34;,&#34;date&#34;:&#34;22 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-22&#34;,&#34;totalconfirmed&#34;:&#34;9140236&#34;,&#34;totaldeceased&#34;:&#34;133182&#34;,&#34;totalrecovered&#34;:&#34;8561277&#34;},{&#34;dailyconfirmed&#34;:&#34;37441&#34;,&#34;dailydeceased&#34;:&#34;481&#34;,&#34;dailyrecovered&#34;:&#34;42195&#34;,&#34;date&#34;:&#34;23 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-23&#34;,&#34;totalconfirmed&#34;:&#34;9177677&#34;,&#34;totaldeceased&#34;:&#34;133663&#34;,&#34;totalrecovered&#34;:&#34;8603472&#34;},{&#34;dailyconfirmed&#34;:&#34;44245&#34;,&#34;dailydeceased&#34;:&#34;489&#34;,&#34;dailyrecovered&#34;:&#34;37765&#34;,&#34;date&#34;:&#34;24 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-24&#34;,&#34;totalconfirmed&#34;:&#34;9221922&#34;,&#34;totaldeceased&#34;:&#34;134152&#34;,&#34;totalrecovered&#34;:&#34;8641237&#34;},{&#34;dailyconfirmed&#34;:&#34;44699&#34;,&#34;dailydeceased&#34;:&#34;518&#34;,&#34;dailyrecovered&#34;:&#34;36582&#34;,&#34;date&#34;:&#34;25 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-25&#34;,&#34;totalconfirmed&#34;:&#34;9266621&#34;,&#34;totaldeceased&#34;:&#34;134670&#34;,&#34;totalrecovered&#34;:&#34;8677819&#34;},{&#34;dailyconfirmed&#34;:&#34;43174&#34;,&#34;dailydeceased&#34;:&#34;491&#34;,&#34;dailyrecovered&#34;:&#34;39723&#34;,&#34;date&#34;:&#34;26 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-26&#34;,&#34;totalconfirmed&#34;:&#34;9309795&#34;,&#34;totaldeceased&#34;:&#34;135161&#34;,&#34;totalrecovered&#34;:&#34;8717542&#34;},{&#34;dailyconfirmed&#34;:&#34;41353&#34;,&#34;dailydeceased&#34;:&#34;486&#34;,&#34;dailyrecovered&#34;:&#34;41177&#34;,&#34;date&#34;:&#34;27 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-27&#34;,&#34;totalconfirmed&#34;:&#34;9351148&#34;,&#34;totaldeceased&#34;:&#34;135647&#34;,&#34;totalrecovered&#34;:&#34;8758719&#34;},{&#34;dailyconfirmed&#34;:&#34;41815&#34;,&#34;dailydeceased&#34;:&#34;495&#34;,&#34;dailyrecovered&#34;:&#34;42275&#34;,&#34;date&#34;:&#34;28 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-28&#34;,&#34;totalconfirmed&#34;:&#34;9392963&#34;,&#34;totaldeceased&#34;:&#34;136142&#34;,&#34;totalrecovered&#34;:&#34;8800994&#34;},{&#34;dailyconfirmed&#34;:&#34;39036&#34;,&#34;dailydeceased&#34;:&#34;444&#34;,&#34;dailyrecovered&#34;:&#34;45152&#34;,&#34;date&#34;:&#34;29 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-29&#34;,&#34;totalconfirmed&#34;:&#34;9431999&#34;,&#34;totaldeceased&#34;:&#34;136586&#34;,&#34;totalrecovered&#34;:&#34;8846146&#34;},{&#34;dailyconfirmed&#34;:&#34;31179&#34;,&#34;dailydeceased&#34;:&#34;482&#34;,&#34;dailyrecovered&#34;:&#34;42282&#34;,&#34;date&#34;:&#34;30 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-30&#34;,&#34;totalconfirmed&#34;:&#34;9463178&#34;,&#34;totaldeceased&#34;:&#34;137068&#34;,&#34;totalrecovered&#34;:&#34;8888428&#34;},{&#34;dailyconfirmed&#34;:&#34;36474&#34;,&#34;dailydeceased&#34;:&#34;501&#34;,&#34;dailyrecovered&#34;:&#34;43208&#34;,&#34;date&#34;:&#34;1 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-01&#34;,&#34;totalconfirmed&#34;:&#34;9499652&#34;,&#34;totaldeceased&#34;:&#34;137569&#34;,&#34;totalrecovered&#34;:&#34;8931636&#34;},{&#34;dailyconfirmed&#34;:&#34;35506&#34;,&#34;dailydeceased&#34;:&#34;526&#34;,&#34;dailyrecovered&#34;:&#34;40908&#34;,&#34;date&#34;:&#34;2 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-02&#34;,&#34;totalconfirmed&#34;:&#34;9535158&#34;,&#34;totaldeceased&#34;:&#34;138095&#34;,&#34;totalrecovered&#34;:&#34;8972544&#34;},{&#34;dailyconfirmed&#34;:&#34;36574&#34;,&#34;dailydeceased&#34;:&#34;541&#34;,&#34;dailyrecovered&#34;:&#34;42991&#34;,&#34;date&#34;:&#34;3 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-03&#34;,&#34;totalconfirmed&#34;:&#34;9571732&#34;,&#34;totaldeceased&#34;:&#34;138636&#34;,&#34;totalrecovered&#34;:&#34;9015535&#34;},{&#34;dailyconfirmed&#34;:&#34;36711&#34;,&#34;dailydeceased&#34;:&#34;511&#34;,&#34;dailyrecovered&#34;:&#34;42359&#34;,&#34;date&#34;:&#34;4 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-04&#34;,&#34;totalconfirmed&#34;:&#34;9608443&#34;,&#34;totaldeceased&#34;:&#34;139147&#34;,&#34;totalrecovered&#34;:&#34;9057894&#34;},{&#34;dailyconfirmed&#34;:&#34;36010&#34;,&#34;dailydeceased&#34;:&#34;482&#34;,&#34;dailyrecovered&#34;:&#34;41885&#34;,&#34;date&#34;:&#34;5 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-05&#34;,&#34;totalconfirmed&#34;:&#34;9644453&#34;,&#34;totaldeceased&#34;:&#34;139629&#34;,&#34;totalrecovered&#34;:&#34;9099779&#34;},{&#34;dailyconfirmed&#34;:&#34;33178&#34;,&#34;dailydeceased&#34;:&#34;390&#34;,&#34;dailyrecovered&#34;:&#34;39078&#34;,&#34;date&#34;:&#34;6 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-06&#34;,&#34;totalconfirmed&#34;:&#34;9677631&#34;,&#34;totaldeceased&#34;:&#34;140019&#34;,&#34;totalrecovered&#34;:&#34;9138857&#34;},{&#34;dailyconfirmed&#34;:&#34;26227&#34;,&#34;dailydeceased&#34;:&#34;386&#34;,&#34;dailyrecovered&#34;:&#34;39293&#34;,&#34;date&#34;:&#34;7 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-07&#34;,&#34;totalconfirmed&#34;:&#34;9703858&#34;,&#34;totaldeceased&#34;:&#34;140405&#34;,&#34;totalrecovered&#34;:&#34;9178150&#34;},{&#34;dailyconfirmed&#34;:&#34;32083&#34;,&#34;dailydeceased&#34;:&#34;402&#34;,&#34;dailyrecovered&#34;:&#34;36583&#34;,&#34;date&#34;:&#34;8 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-08&#34;,&#34;totalconfirmed&#34;:&#34;9735941&#34;,&#34;totaldeceased&#34;:&#34;140807&#34;,&#34;totalrecovered&#34;:&#34;9214733&#34;},{&#34;dailyconfirmed&#34;:&#34;31637&#34;,&#34;dailydeceased&#34;:&#34;413&#34;,&#34;dailyrecovered&#34;:&#34;37693&#34;,&#34;date&#34;:&#34;9 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-09&#34;,&#34;totalconfirmed&#34;:&#34;9767578&#34;,&#34;totaldeceased&#34;:&#34;141220&#34;,&#34;totalrecovered&#34;:&#34;9252426&#34;},{&#34;dailyconfirmed&#34;:&#34;29411&#34;,&#34;dailydeceased&#34;:&#34;411&#34;,&#34;dailyrecovered&#34;:&#34;37707&#34;,&#34;date&#34;:&#34;10 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-10&#34;,&#34;totalconfirmed&#34;:&#34;9796989&#34;,&#34;totaldeceased&#34;:&#34;141631&#34;,&#34;totalrecovered&#34;:&#34;9290133&#34;},{&#34;dailyconfirmed&#34;:&#34;29961&#34;,&#34;dailydeceased&#34;:&#34;442&#34;,&#34;dailyrecovered&#34;:&#34;33492&#34;,&#34;date&#34;:&#34;11 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-11&#34;,&#34;totalconfirmed&#34;:&#34;9826950&#34;,&#34;totaldeceased&#34;:&#34;142073&#34;,&#34;totalrecovered&#34;:&#34;9323625&#34;},{&#34;dailyconfirmed&#34;:&#34;30354&#34;,&#34;dailydeceased&#34;:&#34;391&#34;,&#34;dailyrecovered&#34;:&#34;33087&#34;,&#34;date&#34;:&#34;12 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-12&#34;,&#34;totalconfirmed&#34;:&#34;9857304&#34;,&#34;totaldeceased&#34;:&#34;142464&#34;,&#34;totalrecovered&#34;:&#34;9356712&#34;},{&#34;dailyconfirmed&#34;:&#34;27336&#34;,&#34;dailydeceased&#34;:&#34;338&#34;,&#34;dailyrecovered&#34;:&#34;30640&#34;,&#34;date&#34;:&#34;13 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-13&#34;,&#34;totalconfirmed&#34;:&#34;9884640&#34;,&#34;totaldeceased&#34;:&#34;142802&#34;,&#34;totalrecovered&#34;:&#34;9387352&#34;},{&#34;dailyconfirmed&#34;:&#34;21941&#34;,&#34;dailydeceased&#34;:&#34;354&#34;,&#34;dailyrecovered&#34;:&#34;34421&#34;,&#34;date&#34;:&#34;14 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-14&#34;,&#34;totalconfirmed&#34;:&#34;9906581&#34;,&#34;totaldeceased&#34;:&#34;143156&#34;,&#34;totalrecovered&#34;:&#34;9421773&#34;},{&#34;dailyconfirmed&#34;:&#34;26251&#34;,&#34;dailydeceased&#34;:&#34;384&#34;,&#34;dailyrecovered&#34;:&#34;33853&#34;,&#34;date&#34;:&#34;15 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-15&#34;,&#34;totalconfirmed&#34;:&#34;9932832&#34;,&#34;totaldeceased&#34;:&#34;143540&#34;,&#34;totalrecovered&#34;:&#34;9455626&#34;},{&#34;dailyconfirmed&#34;:&#34;18172&#34;,&#34;dailydeceased&#34;:&#34;356&#34;,&#34;dailyrecovered&#34;:&#34;33360&#34;,&#34;date&#34;:&#34;16 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-16&#34;,&#34;totalconfirmed&#34;:&#34;9951004&#34;,&#34;totaldeceased&#34;:&#34;143896&#34;,&#34;totalrecovered&#34;:&#34;9488986&#34;},{&#34;dailyconfirmed&#34;:&#34;26754&#34;,&#34;dailydeceased&#34;:&#34;342&#34;,&#34;dailyrecovered&#34;:&#34;30891&#34;,&#34;date&#34;:&#34;17 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-17&#34;,&#34;totalconfirmed&#34;:&#34;9977758&#34;,&#34;totaldeceased&#34;:&#34;144238&#34;,&#34;totalrecovered&#34;:&#34;9519877&#34;},{&#34;dailyconfirmed&#34;:&#34;26991&#34;,&#34;dailydeceased&#34;:&#34;342&#34;,&#34;dailyrecovered&#34;:&#34;29879&#34;,&#34;date&#34;:&#34;18 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-18&#34;,&#34;totalconfirmed&#34;:&#34;10004749&#34;,&#34;totaldeceased&#34;:&#34;144580&#34;,&#34;totalrecovered&#34;:&#34;9549756&#34;},{&#34;dailyconfirmed&#34;:&#34;26834&#34;,&#34;dailydeceased&#34;:&#34;342&#34;,&#34;dailyrecovered&#34;:&#34;29758&#34;,&#34;date&#34;:&#34;19 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-19&#34;,&#34;totalconfirmed&#34;:&#34;10031583&#34;,&#34;totaldeceased&#34;:&#34;144922&#34;,&#34;totalrecovered&#34;:&#34;9579514&#34;},{&#34;dailyconfirmed&#34;:&#34;24622&#34;,&#34;dailydeceased&#34;:&#34;332&#34;,&#34;dailyrecovered&#34;:&#34;25734&#34;,&#34;date&#34;:&#34;20 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-20&#34;,&#34;totalconfirmed&#34;:&#34;10056205&#34;,&#34;totaldeceased&#34;:&#34;145254&#34;,&#34;totalrecovered&#34;:&#34;9605248&#34;},{&#34;dailyconfirmed&#34;:&#34;19147&#34;,&#34;dailydeceased&#34;:&#34;302&#34;,&#34;dailyrecovered&#34;:&#34;30250&#34;,&#34;date&#34;:&#34;21 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-21&#34;,&#34;totalconfirmed&#34;:&#34;10075352&#34;,&#34;totaldeceased&#34;:&#34;145556&#34;,&#34;totalrecovered&#34;:&#34;9635498&#34;},{&#34;dailyconfirmed&#34;:&#34;23880&#34;,&#34;dailydeceased&#34;:&#34;329&#34;,&#34;dailyrecovered&#34;:&#34;27032&#34;,&#34;date&#34;:&#34;22 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-22&#34;,&#34;totalconfirmed&#34;:&#34;10099232&#34;,&#34;totaldeceased&#34;:&#34;145885&#34;,&#34;totalrecovered&#34;:&#34;9662530&#34;},{&#34;dailyconfirmed&#34;:&#34;24716&#34;,&#34;dailydeceased&#34;:&#34;315&#34;,&#34;dailyrecovered&#34;:&#34;29946&#34;,&#34;date&#34;:&#34;23 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-23&#34;,&#34;totalconfirmed&#34;:&#34;10123948&#34;,&#34;totaldeceased&#34;:&#34;146200&#34;,&#34;totalrecovered&#34;:&#34;9692476&#34;},{&#34;dailyconfirmed&#34;:&#34;23444&#34;,&#34;dailydeceased&#34;:&#34;337&#34;,&#34;dailyrecovered&#34;:&#34;24555&#34;,&#34;date&#34;:&#34;24 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-24&#34;,&#34;totalconfirmed&#34;:&#34;10147392&#34;,&#34;totaldeceased&#34;:&#34;146537&#34;,&#34;totalrecovered&#34;:&#34;9717031&#34;},{&#34;dailyconfirmed&#34;:&#34;22349&#34;,&#34;dailydeceased&#34;:&#34;251&#34;,&#34;dailyrecovered&#34;:&#34;22184&#34;,&#34;date&#34;:&#34;25 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-25&#34;,&#34;totalconfirmed&#34;:&#34;10169741&#34;,&#34;totaldeceased&#34;:&#34;146788&#34;,&#34;totalrecovered&#34;:&#34;9739215&#34;},{&#34;dailyconfirmed&#34;:&#34;18575&#34;,&#34;dailydeceased&#34;:&#34;280&#34;,&#34;dailyrecovered&#34;:&#34;21466&#34;,&#34;date&#34;:&#34;26 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-26&#34;,&#34;totalconfirmed&#34;:&#34;10188316&#34;,&#34;totaldeceased&#34;:&#34;147068&#34;,&#34;totalrecovered&#34;:&#34;9760681&#34;},{&#34;dailyconfirmed&#34;:&#34;20333&#34;,&#34;dailydeceased&#34;:&#34;281&#34;,&#34;dailyrecovered&#34;:&#34;21097&#34;,&#34;date&#34;:&#34;27 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-27&#34;,&#34;totalconfirmed&#34;:&#34;10208649&#34;,&#34;totaldeceased&#34;:&#34;147349&#34;,&#34;totalrecovered&#34;:&#34;9781778&#34;},{&#34;dailyconfirmed&#34;:&#34;16072&#34;,&#34;dailydeceased&#34;:&#34;250&#34;,&#34;dailyrecovered&#34;:&#34;24822&#34;,&#34;date&#34;:&#34;28 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-28&#34;,&#34;totalconfirmed&#34;:&#34;10224721&#34;,&#34;totaldeceased&#34;:&#34;147599&#34;,&#34;totalrecovered&#34;:&#34;9806600&#34;},{&#34;dailyconfirmed&#34;:&#34;20542&#34;,&#34;dailydeceased&#34;:&#34;285&#34;,&#34;dailyrecovered&#34;:&#34;26589&#34;,&#34;date&#34;:&#34;29 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-29&#34;,&#34;totalconfirmed&#34;:&#34;10245263&#34;,&#34;totaldeceased&#34;:&#34;147884&#34;,&#34;totalrecovered&#34;:&#34;9833189&#34;},{&#34;dailyconfirmed&#34;:&#34;21945&#34;,&#34;dailydeceased&#34;:&#34;299&#34;,&#34;dailyrecovered&#34;:&#34;26407&#34;,&#34;date&#34;:&#34;30 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-30&#34;,&#34;totalconfirmed&#34;:&#34;10267208&#34;,&#34;totaldeceased&#34;:&#34;148183&#34;,&#34;totalrecovered&#34;:&#34;9859596&#34;},{&#34;dailyconfirmed&#34;:&#34;19026&#34;,&#34;dailydeceased&#34;:&#34;244&#34;,&#34;dailyrecovered&#34;:&#34;21969&#34;,&#34;date&#34;:&#34;31 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-31&#34;,&#34;totalconfirmed&#34;:&#34;10286234&#34;,&#34;totaldeceased&#34;:&#34;148427&#34;,&#34;totalrecovered&#34;:&#34;9881565&#34;},{&#34;dailyconfirmed&#34;:&#34;20159&#34;,&#34;dailydeceased&#34;:&#34;237&#34;,&#34;dailyrecovered&#34;:&#34;23838&#34;,&#34;date&#34;:&#34;1 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-01&#34;,&#34;totalconfirmed&#34;:&#34;10306393&#34;,&#34;totaldeceased&#34;:&#34;148664&#34;,&#34;totalrecovered&#34;:&#34;9905403&#34;},{&#34;dailyconfirmed&#34;:&#34;18144&#34;,&#34;dailydeceased&#34;:&#34;216&#34;,&#34;dailyrecovered&#34;:&#34;20903&#34;,&#34;date&#34;:&#34;2 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-02&#34;,&#34;totalconfirmed&#34;:&#34;10324537&#34;,&#34;totaldeceased&#34;:&#34;148880&#34;,&#34;totalrecovered&#34;:&#34;9926306&#34;},{&#34;dailyconfirmed&#34;:&#34;16678&#34;,&#34;dailydeceased&#34;:&#34;215&#34;,&#34;dailyrecovered&#34;:&#34;19658&#34;,&#34;date&#34;:&#34;3 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-03&#34;,&#34;totalconfirmed&#34;:&#34;10341215&#34;,&#34;totaldeceased&#34;:&#34;149095&#34;,&#34;totalrecovered&#34;:&#34;9945964&#34;},{&#34;dailyconfirmed&#34;:&#34;16278&#34;,&#34;dailydeceased&#34;:&#34;200&#34;,&#34;dailyrecovered&#34;:&#34;29209&#34;,&#34;date&#34;:&#34;4 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-04&#34;,&#34;totalconfirmed&#34;:&#34;10357493&#34;,&#34;totaldeceased&#34;:&#34;149295&#34;,&#34;totalrecovered&#34;:&#34;9975173&#34;},{&#34;dailyconfirmed&#34;:&#34;17909&#34;,&#34;dailydeceased&#34;:&#34;265&#34;,&#34;dailyrecovered&#34;:&#34;21161&#34;,&#34;date&#34;:&#34;5 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-05&#34;,&#34;totalconfirmed&#34;:&#34;10375402&#34;,&#34;totaldeceased&#34;:&#34;149560&#34;,&#34;totalrecovered&#34;:&#34;9996334&#34;},{&#34;dailyconfirmed&#34;:&#34;20472&#34;,&#34;dailydeceased&#34;:&#34;222&#34;,&#34;dailyrecovered&#34;:&#34;19689&#34;,&#34;date&#34;:&#34;6 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-06&#34;,&#34;totalconfirmed&#34;:&#34;10395874&#34;,&#34;totaldeceased&#34;:&#34;149782&#34;,&#34;totalrecovered&#34;:&#34;10016023&#34;},{&#34;dailyconfirmed&#34;:&#34;18123&#34;,&#34;dailydeceased&#34;:&#34;233&#34;,&#34;dailyrecovered&#34;:&#34;20503&#34;,&#34;date&#34;:&#34;7 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-07&#34;,&#34;totalconfirmed&#34;:&#34;10413997&#34;,&#34;totaldeceased&#34;:&#34;150015&#34;,&#34;totalrecovered&#34;:&#34;10036526&#34;},{&#34;dailyconfirmed&#34;:&#34;18453&#34;,&#34;dailydeceased&#34;:&#34;229&#34;,&#34;dailyrecovered&#34;:&#34;19242&#34;,&#34;date&#34;:&#34;8 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-08&#34;,&#34;totalconfirmed&#34;:&#34;10432450&#34;,&#34;totaldeceased&#34;:&#34;150244&#34;,&#34;totalrecovered&#34;:&#34;10055768&#34;},{&#34;dailyconfirmed&#34;:&#34;18820&#34;,&#34;dailydeceased&#34;:&#34;213&#34;,&#34;dailyrecovered&#34;:&#34;19460&#34;,&#34;date&#34;:&#34;9 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-09&#34;,&#34;totalconfirmed&#34;:&#34;10451270&#34;,&#34;totaldeceased&#34;:&#34;150457&#34;,&#34;totalrecovered&#34;:&#34;10075228&#34;},{&#34;dailyconfirmed&#34;:&#34;16086&#34;,&#34;dailydeceased&#34;:&#34;150&#34;,&#34;dailyrecovered&#34;:&#34;16737&#34;,&#34;date&#34;:&#34;10 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-10&#34;,&#34;totalconfirmed&#34;:&#34;10467356&#34;,&#34;totaldeceased&#34;:&#34;150607&#34;,&#34;totalrecovered&#34;:&#34;10091965&#34;},{&#34;dailyconfirmed&#34;:&#34;12481&#34;,&#34;dailydeceased&#34;:&#34;166&#34;,&#34;dailyrecovered&#34;:&#34;18578&#34;,&#34;date&#34;:&#34;11 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-11&#34;,&#34;totalconfirmed&#34;:&#34;10479837&#34;,&#34;totaldeceased&#34;:&#34;150773&#34;,&#34;totalrecovered&#34;:&#34;10110543&#34;},{&#34;dailyconfirmed&#34;:&#34;15903&#34;,&#34;dailydeceased&#34;:&#34;200&#34;,&#34;dailyrecovered&#34;:&#34;17762&#34;,&#34;date&#34;:&#34;12 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-12&#34;,&#34;totalconfirmed&#34;:&#34;10495740&#34;,&#34;totaldeceased&#34;:&#34;150973&#34;,&#34;totalrecovered&#34;:&#34;10128305&#34;},{&#34;dailyconfirmed&#34;:&#34;17015&#34;,&#34;dailydeceased&#34;:&#34;201&#34;,&#34;dailyrecovered&#34;:&#34;17797&#34;,&#34;date&#34;:&#34;13 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-13&#34;,&#34;totalconfirmed&#34;:&#34;10512755&#34;,&#34;totaldeceased&#34;:&#34;151174&#34;,&#34;totalrecovered&#34;:&#34;10146102&#34;},{&#34;dailyconfirmed&#34;:&#34;15677&#34;,&#34;dailydeceased&#34;:&#34;189&#34;,&#34;dailyrecovered&#34;:&#34;15943&#34;,&#34;date&#34;:&#34;14 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-14&#34;,&#34;totalconfirmed&#34;:&#34;10528432&#34;,&#34;totaldeceased&#34;:&#34;151363&#34;,&#34;totalrecovered&#34;:&#34;10162045&#34;},{&#34;dailyconfirmed&#34;:&#34;15155&#34;,&#34;dailydeceased&#34;:&#34;176&#34;,&#34;dailyrecovered&#34;:&#34;16809&#34;,&#34;date&#34;:&#34;15 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-15&#34;,&#34;totalconfirmed&#34;:&#34;10543587&#34;,&#34;totaldeceased&#34;:&#34;151539&#34;,&#34;totalrecovered&#34;:&#34;10178854&#34;},{&#34;dailyconfirmed&#34;:&#34;15050&#34;,&#34;dailydeceased&#34;:&#34;181&#34;,&#34;dailyrecovered&#34;:&#34;17202&#34;,&#34;date&#34;:&#34;16 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-16&#34;,&#34;totalconfirmed&#34;:&#34;10558637&#34;,&#34;totaldeceased&#34;:&#34;151720&#34;,&#34;totalrecovered&#34;:&#34;10196056&#34;},{&#34;dailyconfirmed&#34;:&#34;13962&#34;,&#34;dailydeceased&#34;:&#34;145&#34;,&#34;dailyrecovered&#34;:&#34;14513&#34;,&#34;date&#34;:&#34;17 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-17&#34;,&#34;totalconfirmed&#34;:&#34;10572599&#34;,&#34;totaldeceased&#34;:&#34;151865&#34;,&#34;totalrecovered&#34;:&#34;10210569&#34;},{&#34;dailyconfirmed&#34;:&#34;9987&#34;,&#34;dailydeceased&#34;:&#34;137&#34;,&#34;dailyrecovered&#34;:&#34;17127&#34;,&#34;date&#34;:&#34;18 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-18&#34;,&#34;totalconfirmed&#34;:&#34;10582586&#34;,&#34;totaldeceased&#34;:&#34;152002&#34;,&#34;totalrecovered&#34;:&#34;10227696&#34;},{&#34;dailyconfirmed&#34;:&#34;13787&#34;,&#34;dailydeceased&#34;:&#34;162&#34;,&#34;dailyrecovered&#34;:&#34;17229&#34;,&#34;date&#34;:&#34;19 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-19&#34;,&#34;totalconfirmed&#34;:&#34;10596373&#34;,&#34;totaldeceased&#34;:&#34;152164&#34;,&#34;totalrecovered&#34;:&#34;10244925&#34;},{&#34;dailyconfirmed&#34;:&#34;15279&#34;,&#34;dailydeceased&#34;:&#34;152&#34;,&#34;dailyrecovered&#34;:&#34;20071&#34;,&#34;date&#34;:&#34;20 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-20&#34;,&#34;totalconfirmed&#34;:&#34;10611652&#34;,&#34;totaldeceased&#34;:&#34;152316&#34;,&#34;totalrecovered&#34;:&#34;10264996&#34;},{&#34;dailyconfirmed&#34;:&#34;14495&#34;,&#34;dailydeceased&#34;:&#34;161&#34;,&#34;dailyrecovered&#34;:&#34;17734&#34;,&#34;date&#34;:&#34;21 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-21&#34;,&#34;totalconfirmed&#34;:&#34;10626147&#34;,&#34;totaldeceased&#34;:&#34;152477&#34;,&#34;totalrecovered&#34;:&#34;10282730&#34;},{&#34;dailyconfirmed&#34;:&#34;14323&#34;,&#34;dailydeceased&#34;:&#34;153&#34;,&#34;dailyrecovered&#34;:&#34;17166&#34;,&#34;date&#34;:&#34;22 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-22&#34;,&#34;totalconfirmed&#34;:&#34;10640470&#34;,&#34;totaldeceased&#34;:&#34;152630&#34;,&#34;totalrecovered&#34;:&#34;10299896&#34;},{&#34;dailyconfirmed&#34;:&#34;14896&#34;,&#34;dailydeceased&#34;:&#34;156&#34;,&#34;dailyrecovered&#34;:&#34;16033&#34;,&#34;date&#34;:&#34;23 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-23&#34;,&#34;totalconfirmed&#34;:&#34;10655366&#34;,&#34;totaldeceased&#34;:&#34;152786&#34;,&#34;totalrecovered&#34;:&#34;10315929&#34;},{&#34;dailyconfirmed&#34;:&#34;13232&#34;,&#34;dailydeceased&#34;:&#34;131&#34;,&#34;dailyrecovered&#34;:&#34;13148&#34;,&#34;date&#34;:&#34;24 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-24&#34;,&#34;totalconfirmed&#34;:&#34;10668598&#34;,&#34;totaldeceased&#34;:&#34;152917&#34;,&#34;totalrecovered&#34;:&#34;10329077&#34;},{&#34;dailyconfirmed&#34;:&#34;9098&#34;,&#34;dailydeceased&#34;:&#34;116&#34;,&#34;dailyrecovered&#34;:&#34;16092&#34;,&#34;date&#34;:&#34;25 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-25&#34;,&#34;totalconfirmed&#34;:&#34;10677696&#34;,&#34;totaldeceased&#34;:&#34;153033&#34;,&#34;totalrecovered&#34;:&#34;10345169&#34;},{&#34;dailyconfirmed&#34;:&#34;12733&#34;,&#34;dailydeceased&#34;:&#34;138&#34;,&#34;dailyrecovered&#34;:&#34;13250&#34;,&#34;date&#34;:&#34;26 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-26&#34;,&#34;totalconfirmed&#34;:&#34;10690429&#34;,&#34;totaldeceased&#34;:&#34;153171&#34;,&#34;totalrecovered&#34;:&#34;10358419&#34;},{&#34;dailyconfirmed&#34;:&#34;11556&#34;,&#34;dailydeceased&#34;:&#34;123&#34;,&#34;dailyrecovered&#34;:&#34;14261&#34;,&#34;date&#34;:&#34;27 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-27&#34;,&#34;totalconfirmed&#34;:&#34;10701985&#34;,&#34;totaldeceased&#34;:&#34;153294&#34;,&#34;totalrecovered&#34;:&#34;10372680&#34;},{&#34;dailyconfirmed&#34;:&#34;18912&#34;,&#34;dailydeceased&#34;:&#34;162&#34;,&#34;dailyrecovered&#34;:&#34;20315&#34;,&#34;date&#34;:&#34;28 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-28&#34;,&#34;totalconfirmed&#34;:&#34;10720897&#34;,&#34;totaldeceased&#34;:&#34;153456&#34;,&#34;totalrecovered&#34;:&#34;10392995&#34;},{&#34;dailyconfirmed&#34;:&#34;13054&#34;,&#34;dailydeceased&#34;:&#34;137&#34;,&#34;dailyrecovered&#34;:&#34;14886&#34;,&#34;date&#34;:&#34;29 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-29&#34;,&#34;totalconfirmed&#34;:&#34;10733951&#34;,&#34;totaldeceased&#34;:&#34;153593&#34;,&#34;totalrecovered&#34;:&#34;10407881&#34;},{&#34;dailyconfirmed&#34;:&#34;13073&#34;,&#34;dailydeceased&#34;:&#34;128&#34;,&#34;dailyrecovered&#34;:&#34;14077&#34;,&#34;date&#34;:&#34;30 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-30&#34;,&#34;totalconfirmed&#34;:&#34;10747024&#34;,&#34;totaldeceased&#34;:&#34;153721&#34;,&#34;totalrecovered&#34;:&#34;10421958&#34;},{&#34;dailyconfirmed&#34;:&#34;11527&#34;,&#34;dailydeceased&#34;:&#34;116&#34;,&#34;dailyrecovered&#34;:&#34;11882&#34;,&#34;date&#34;:&#34;31 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-31&#34;,&#34;totalconfirmed&#34;:&#34;10758551&#34;,&#34;totaldeceased&#34;:&#34;153837&#34;,&#34;totalrecovered&#34;:&#34;10433840&#34;},{&#34;dailyconfirmed&#34;:&#34;8579&#34;,&#34;dailydeceased&#34;:&#34;94&#34;,&#34;dailyrecovered&#34;:&#34;13443&#34;,&#34;date&#34;:&#34;1 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-01&#34;,&#34;totalconfirmed&#34;:&#34;10767130&#34;,&#34;totaldeceased&#34;:&#34;153931&#34;,&#34;totalrecovered&#34;:&#34;10447283&#34;},{&#34;dailyconfirmed&#34;:&#34;11001&#34;,&#34;dailydeceased&#34;:&#34;113&#34;,&#34;dailyrecovered&#34;:&#34;14250&#34;,&#34;date&#34;:&#34;2 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-02&#34;,&#34;totalconfirmed&#34;:&#34;10778131&#34;,&#34;totaldeceased&#34;:&#34;154044&#34;,&#34;totalrecovered&#34;:&#34;10461533&#34;},{&#34;dailyconfirmed&#34;:&#34;12925&#34;,&#34;dailydeceased&#34;:&#34;107&#34;,&#34;dailyrecovered&#34;:&#34;17813&#34;,&#34;date&#34;:&#34;3 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-03&#34;,&#34;totalconfirmed&#34;:&#34;10791056&#34;,&#34;totaldeceased&#34;:&#34;154151&#34;,&#34;totalrecovered&#34;:&#34;10479346&#34;},{&#34;dailyconfirmed&#34;:&#34;12401&#34;,&#34;dailydeceased&#34;:&#34;120&#34;,&#34;dailyrecovered&#34;:&#34;15788&#34;,&#34;date&#34;:&#34;4 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-04&#34;,&#34;totalconfirmed&#34;:&#34;10803457&#34;,&#34;totaldeceased&#34;:&#34;154271&#34;,&#34;totalrecovered&#34;:&#34;10495134&#34;},{&#34;dailyconfirmed&#34;:&#34;11711&#34;,&#34;dailydeceased&#34;:&#34;95&#34;,&#34;dailyrecovered&#34;:&#34;14512&#34;,&#34;date&#34;:&#34;5 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-05&#34;,&#34;totalconfirmed&#34;:&#34;10815168&#34;,&#34;totaldeceased&#34;:&#34;154366&#34;,&#34;totalrecovered&#34;:&#34;10509646&#34;},{&#34;dailyconfirmed&#34;:&#34;12069&#34;,&#34;dailydeceased&#34;:&#34;75&#34;,&#34;dailyrecovered&#34;:&#34;11761&#34;,&#34;date&#34;:&#34;6 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-06&#34;,&#34;totalconfirmed&#34;:&#34;10827237&#34;,&#34;totaldeceased&#34;:&#34;154441&#34;,&#34;totalrecovered&#34;:&#34;10521407&#34;},{&#34;dailyconfirmed&#34;:&#34;11786&#34;,&#34;dailydeceased&#34;:&#34;86&#34;,&#34;dailyrecovered&#34;:&#34;11756&#34;,&#34;date&#34;:&#34;7 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-07&#34;,&#34;totalconfirmed&#34;:&#34;10839023&#34;,&#34;totaldeceased&#34;:&#34;154527&#34;,&#34;totalrecovered&#34;:&#34;10533163&#34;},{&#34;dailyconfirmed&#34;:&#34;8715&#34;,&#34;dailydeceased&#34;:&#34;78&#34;,&#34;dailyrecovered&#34;:&#34;13600&#34;,&#34;date&#34;:&#34;8 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-08&#34;,&#34;totalconfirmed&#34;:&#34;10847738&#34;,&#34;totaldeceased&#34;:&#34;154605&#34;,&#34;totalrecovered&#34;:&#34;10546763&#34;},{&#34;dailyconfirmed&#34;:&#34;10731&#34;,&#34;dailydeceased&#34;:&#34;94&#34;,&#34;dailyrecovered&#34;:&#34;12928&#34;,&#34;date&#34;:&#34;9 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-09&#34;,&#34;totalconfirmed&#34;:&#34;10858469&#34;,&#34;totaldeceased&#34;:&#34;154699&#34;,&#34;totalrecovered&#34;:&#34;10559691&#34;},{&#34;dailyconfirmed&#34;:&#34;12539&#34;,&#34;dailydeceased&#34;:&#34;110&#34;,&#34;dailyrecovered&#34;:&#34;11796&#34;,&#34;date&#34;:&#34;10 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-10&#34;,&#34;totalconfirmed&#34;:&#34;10871008&#34;,&#34;totaldeceased&#34;:&#34;154809&#34;,&#34;totalrecovered&#34;:&#34;10571487&#34;},{&#34;dailyconfirmed&#34;:&#34;9353&#34;,&#34;dailydeceased&#34;:&#34;85&#34;,&#34;dailyrecovered&#34;:&#34;15722&#34;,&#34;date&#34;:&#34;11 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-11&#34;,&#34;totalconfirmed&#34;:&#34;10880361&#34;,&#34;totaldeceased&#34;:&#34;154894&#34;,&#34;totalrecovered&#34;:&#34;10587209&#34;},{&#34;dailyconfirmed&#34;:&#34;12137&#34;,&#34;dailydeceased&#34;:&#34;104&#34;,&#34;dailyrecovered&#34;:&#34;11358&#34;,&#34;date&#34;:&#34;12 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-12&#34;,&#34;totalconfirmed&#34;:&#34;10892498&#34;,&#34;totaldeceased&#34;:&#34;154998&#34;,&#34;totalrecovered&#34;:&#34;10598567&#34;},{&#34;dailyconfirmed&#34;:&#34;12198&#34;,&#34;dailydeceased&#34;:&#34;89&#34;,&#34;dailyrecovered&#34;:&#34;11107&#34;,&#34;date&#34;:&#34;13 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-13&#34;,&#34;totalconfirmed&#34;:&#34;10904696&#34;,&#34;totaldeceased&#34;:&#34;155087&#34;,&#34;totalrecovered&#34;:&#34;10609674&#34;},{&#34;dailyconfirmed&#34;:&#34;11706&#34;,&#34;dailydeceased&#34;:&#34;91&#34;,&#34;dailyrecovered&#34;:&#34;9500&#34;,&#34;date&#34;:&#34;14 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-14&#34;,&#34;totalconfirmed&#34;:&#34;10916402&#34;,&#34;totaldeceased&#34;:&#34;155178&#34;,&#34;totalrecovered&#34;:&#34;10619174&#34;},{&#34;dailyconfirmed&#34;:&#34;9086&#34;,&#34;dailydeceased&#34;:&#34;82&#34;,&#34;dailyrecovered&#34;:&#34;11793&#34;,&#34;date&#34;:&#34;15 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-15&#34;,&#34;totalconfirmed&#34;:&#34;10925488&#34;,&#34;totaldeceased&#34;:&#34;155260&#34;,&#34;totalrecovered&#34;:&#34;10630967&#34;},{&#34;dailyconfirmed&#34;:&#34;11592&#34;,&#34;dailydeceased&#34;:&#34;99&#34;,&#34;dailyrecovered&#34;:&#34;11836&#34;,&#34;date&#34;:&#34;16 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-16&#34;,&#34;totalconfirmed&#34;:&#34;10937080&#34;,&#34;totaldeceased&#34;:&#34;155359&#34;,&#34;totalrecovered&#34;:&#34;10642803&#34;},{&#34;dailyconfirmed&#34;:&#34;12862&#34;,&#34;dailydeceased&#34;:&#34;100&#34;,&#34;dailyrecovered&#34;:&#34;12028&#34;,&#34;date&#34;:&#34;17 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-17&#34;,&#34;totalconfirmed&#34;:&#34;10949942&#34;,&#34;totaldeceased&#34;:&#34;155459&#34;,&#34;totalrecovered&#34;:&#34;10654831&#34;},{&#34;dailyconfirmed&#34;:&#34;13237&#34;,&#34;dailydeceased&#34;:&#34;100&#34;,&#34;dailyrecovered&#34;:&#34;10914&#34;,&#34;date&#34;:&#34;18 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-18&#34;,&#34;totalconfirmed&#34;:&#34;10963179&#34;,&#34;totaldeceased&#34;:&#34;155559&#34;,&#34;totalrecovered&#34;:&#34;10665745&#34;},{&#34;dailyconfirmed&#34;:&#34;13916&#34;,&#34;dailydeceased&#34;:&#34;100&#34;,&#34;dailyrecovered&#34;:&#34;10214&#34;,&#34;date&#34;:&#34;19 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-19&#34;,&#34;totalconfirmed&#34;:&#34;10977095&#34;,&#34;totaldeceased&#34;:&#34;155659&#34;,&#34;totalrecovered&#34;:&#34;10675959&#34;},{&#34;dailyconfirmed&#34;:&#34;13919&#34;,&#34;dailydeceased&#34;:&#34;89&#34;,&#34;dailyrecovered&#34;:&#34;11413&#34;,&#34;date&#34;:&#34;20 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-20&#34;,&#34;totalconfirmed&#34;:&#34;10991014&#34;,&#34;totaldeceased&#34;:&#34;155748&#34;,&#34;totalrecovered&#34;:&#34;10687372&#34;},{&#34;dailyconfirmed&#34;:&#34;14278&#34;,&#34;dailydeceased&#34;:&#34;83&#34;,&#34;dailyrecovered&#34;:&#34;9715&#34;,&#34;date&#34;:&#34;21 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-21&#34;,&#34;totalconfirmed&#34;:&#34;11005292&#34;,&#34;totaldeceased&#34;:&#34;155831&#34;,&#34;totalrecovered&#34;:&#34;10697087&#34;},{&#34;dailyconfirmed&#34;:&#34;10494&#34;,&#34;dailydeceased&#34;:&#34;76&#34;,&#34;dailyrecovered&#34;:&#34;13233&#34;,&#34;date&#34;:&#34;22 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-22&#34;,&#34;totalconfirmed&#34;:&#34;11015786&#34;,&#34;totaldeceased&#34;:&#34;155907&#34;,&#34;totalrecovered&#34;:&#34;10710320&#34;},{&#34;dailyconfirmed&#34;:&#34;13682&#34;,&#34;dailydeceased&#34;:&#34;103&#34;,&#34;dailyrecovered&#34;:&#34;13969&#34;,&#34;date&#34;:&#34;23 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-23&#34;,&#34;totalconfirmed&#34;:&#34;11029468&#34;,&#34;totaldeceased&#34;:&#34;156010&#34;,&#34;totalrecovered&#34;:&#34;10724289&#34;},{&#34;dailyconfirmed&#34;:&#34;16930&#34;,&#34;dailydeceased&#34;:&#34;141&#34;,&#34;dailyrecovered&#34;:&#34;12100&#34;,&#34;date&#34;:&#34;24 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-24&#34;,&#34;totalconfirmed&#34;:&#34;11046398&#34;,&#34;totaldeceased&#34;:&#34;156151&#34;,&#34;totalrecovered&#34;:&#34;10736389&#34;},{&#34;dailyconfirmed&#34;:&#34;16599&#34;,&#34;dailydeceased&#34;:&#34;119&#34;,&#34;dailyrecovered&#34;:&#34;12222&#34;,&#34;date&#34;:&#34;25 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-25&#34;,&#34;totalconfirmed&#34;:&#34;11062997&#34;,&#34;totaldeceased&#34;:&#34;156270&#34;,&#34;totalrecovered&#34;:&#34;10748611&#34;},{&#34;dailyconfirmed&#34;:&#34;16562&#34;,&#34;dailydeceased&#34;:&#34;114&#34;,&#34;dailyrecovered&#34;:&#34;12790&#34;,&#34;date&#34;:&#34;26 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-26&#34;,&#34;totalconfirmed&#34;:&#34;11079559&#34;,&#34;totaldeceased&#34;:&#34;156384&#34;,&#34;totalrecovered&#34;:&#34;10761401&#34;},{&#34;dailyconfirmed&#34;:&#34;16805&#34;,&#34;dailydeceased&#34;:&#34;111&#34;,&#34;dailyrecovered&#34;:&#34;11709&#34;,&#34;date&#34;:&#34;27 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-27&#34;,&#34;totalconfirmed&#34;:&#34;11096364&#34;,&#34;totaldeceased&#34;:&#34;156495&#34;,&#34;totalrecovered&#34;:&#34;10773110&#34;},{&#34;dailyconfirmed&#34;:&#34;15614&#34;,&#34;dailydeceased&#34;:&#34;108&#34;,&#34;dailyrecovered&#34;:&#34;11291&#34;,&#34;date&#34;:&#34;28 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-28&#34;,&#34;totalconfirmed&#34;:&#34;11111978&#34;,&#34;totaldeceased&#34;:&#34;156603&#34;,&#34;totalrecovered&#34;:&#34;10784401&#34;},{&#34;dailyconfirmed&#34;:&#34;12270&#34;,&#34;dailydeceased&#34;:&#34;92&#34;,&#34;dailyrecovered&#34;:&#34;12472&#34;,&#34;date&#34;:&#34;1 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-01&#34;,&#34;totalconfirmed&#34;:&#34;11124248&#34;,&#34;totaldeceased&#34;:&#34;156695&#34;,&#34;totalrecovered&#34;:&#34;10796873&#34;},{&#34;dailyconfirmed&#34;:&#34;14998&#34;,&#34;dailydeceased&#34;:&#34;98&#34;,&#34;dailyrecovered&#34;:&#34;13113&#34;,&#34;date&#34;:&#34;2 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-02&#34;,&#34;totalconfirmed&#34;:&#34;11139246&#34;,&#34;totaldeceased&#34;:&#34;156793&#34;,&#34;totalrecovered&#34;:&#34;10809986&#34;},{&#34;dailyconfirmed&#34;:&#34;17425&#34;,&#34;dailydeceased&#34;:&#34;87&#34;,&#34;dailyrecovered&#34;:&#34;14071&#34;,&#34;date&#34;:&#34;3 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-03&#34;,&#34;totalconfirmed&#34;:&#34;11156671&#34;,&#34;totaldeceased&#34;:&#34;156880&#34;,&#34;totalrecovered&#34;:&#34;10824057&#34;},{&#34;dailyconfirmed&#34;:&#34;16824&#34;,&#34;dailydeceased&#34;:&#34;113&#34;,&#34;dailyrecovered&#34;:&#34;13788&#34;,&#34;date&#34;:&#34;4 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-04&#34;,&#34;totalconfirmed&#34;:&#34;11173495&#34;,&#34;totaldeceased&#34;:&#34;156993&#34;,&#34;totalrecovered&#34;:&#34;10837845&#34;},{&#34;dailyconfirmed&#34;:&#34;18324&#34;,&#34;dailydeceased&#34;:&#34;109&#34;,&#34;dailyrecovered&#34;:&#34;14186&#34;,&#34;date&#34;:&#34;5 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-05&#34;,&#34;totalconfirmed&#34;:&#34;11191819&#34;,&#34;totaldeceased&#34;:&#34;157102&#34;,&#34;totalrecovered&#34;:&#34;10852031&#34;},{&#34;dailyconfirmed&#34;:&#34;18724&#34;,&#34;dailydeceased&#34;:&#34;100&#34;,&#34;dailyrecovered&#34;:&#34;14379&#34;,&#34;date&#34;:&#34;6 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-06&#34;,&#34;totalconfirmed&#34;:&#34;11210543&#34;,&#34;totaldeceased&#34;:&#34;157202&#34;,&#34;totalrecovered&#34;:&#34;10866410&#34;},{&#34;dailyconfirmed&#34;:&#34;18650&#34;,&#34;dailydeceased&#34;:&#34;97&#34;,&#34;dailyrecovered&#34;:&#34;14303&#34;,&#34;date&#34;:&#34;7 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-07&#34;,&#34;totalconfirmed&#34;:&#34;11229193&#34;,&#34;totaldeceased&#34;:&#34;157299&#34;,&#34;totalrecovered&#34;:&#34;10880713&#34;},{&#34;dailyconfirmed&#34;:&#34;15353&#34;,&#34;dailydeceased&#34;:&#34;76&#34;,&#34;dailyrecovered&#34;:&#34;16606&#34;,&#34;date&#34;:&#34;8 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-08&#34;,&#34;totalconfirmed&#34;:&#34;11244546&#34;,&#34;totaldeceased&#34;:&#34;157375&#34;,&#34;totalrecovered&#34;:&#34;10897319&#34;},{&#34;dailyconfirmed&#34;:&#34;17873&#34;,&#34;dailydeceased&#34;:&#34;133&#34;,&#34;dailyrecovered&#34;:&#34;20643&#34;,&#34;date&#34;:&#34;9 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-09&#34;,&#34;totalconfirmed&#34;:&#34;11262419&#34;,&#34;totaldeceased&#34;:&#34;157508&#34;,&#34;totalrecovered&#34;:&#34;10917962&#34;},{&#34;dailyconfirmed&#34;:&#34;22851&#34;,&#34;dailydeceased&#34;:&#34;125&#34;,&#34;dailyrecovered&#34;:&#34;18154&#34;,&#34;date&#34;:&#34;10 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-10&#34;,&#34;totalconfirmed&#34;:&#34;11285270&#34;,&#34;totaldeceased&#34;:&#34;157633&#34;,&#34;totalrecovered&#34;:&#34;10936116&#34;},{&#34;dailyconfirmed&#34;:&#34;23298&#34;,&#34;dailydeceased&#34;:&#34;119&#34;,&#34;dailyrecovered&#34;:&#34;15092&#34;,&#34;date&#34;:&#34;11 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-11&#34;,&#34;totalconfirmed&#34;:&#34;11308568&#34;,&#34;totaldeceased&#34;:&#34;157752&#34;,&#34;totalrecovered&#34;:&#34;10951208&#34;},{&#34;dailyconfirmed&#34;:&#34;24845&#34;,&#34;dailydeceased&#34;:&#34;140&#34;,&#34;dailyrecovered&#34;:&#34;19972&#34;,&#34;date&#34;:&#34;12 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-12&#34;,&#34;totalconfirmed&#34;:&#34;11333413&#34;,&#34;totaldeceased&#34;:&#34;157892&#34;,&#34;totalrecovered&#34;:&#34;10971180&#34;},{&#34;dailyconfirmed&#34;:&#34;25154&#34;,&#34;dailydeceased&#34;:&#34;159&#34;,&#34;dailyrecovered&#34;:&#34;16508&#34;,&#34;date&#34;:&#34;13 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-13&#34;,&#34;totalconfirmed&#34;:&#34;11358567&#34;,&#34;totaldeceased&#34;:&#34;158051&#34;,&#34;totalrecovered&#34;:&#34;10987688&#34;},{&#34;dailyconfirmed&#34;:&#34;26513&#34;,&#34;dailydeceased&#34;:&#34;120&#34;,&#34;dailyrecovered&#34;:&#34;17590&#34;,&#34;date&#34;:&#34;14 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-14&#34;,&#34;totalconfirmed&#34;:&#34;11385080&#34;,&#34;totaldeceased&#34;:&#34;158171&#34;,&#34;totalrecovered&#34;:&#34;11005278&#34;},{&#34;dailyconfirmed&#34;:&#34;24437&#34;,&#34;dailydeceased&#34;:&#34;130&#34;,&#34;dailyrecovered&#34;:&#34;20186&#34;,&#34;date&#34;:&#34;15 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-15&#34;,&#34;totalconfirmed&#34;:&#34;11409517&#34;,&#34;totaldeceased&#34;:&#34;158301&#34;,&#34;totalrecovered&#34;:&#34;11025464&#34;},{&#34;dailyconfirmed&#34;:&#34;28869&#34;,&#34;dailydeceased&#34;:&#34;187&#34;,&#34;dailyrecovered&#34;:&#34;17746&#34;,&#34;date&#34;:&#34;16 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-16&#34;,&#34;totalconfirmed&#34;:&#34;11438386&#34;,&#34;totaldeceased&#34;:&#34;158488&#34;,&#34;totalrecovered&#34;:&#34;11043210&#34;},{&#34;dailyconfirmed&#34;:&#34;35838&#34;,&#34;dailydeceased&#34;:&#34;171&#34;,&#34;dailyrecovered&#34;:&#34;17793&#34;,&#34;date&#34;:&#34;17 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-17&#34;,&#34;totalconfirmed&#34;:&#34;11474224&#34;,&#34;totaldeceased&#34;:&#34;158659&#34;,&#34;totalrecovered&#34;:&#34;11061003&#34;},{&#34;dailyconfirmed&#34;:&#34;39687&#34;,&#34;dailydeceased&#34;:&#34;156&#34;,&#34;dailyrecovered&#34;:&#34;20356&#34;,&#34;date&#34;:&#34;18 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-18&#34;,&#34;totalconfirmed&#34;:&#34;11513911&#34;,&#34;totaldeceased&#34;:&#34;158815&#34;,&#34;totalrecovered&#34;:&#34;11081359&#34;},{&#34;dailyconfirmed&#34;:&#34;40906&#34;,&#34;dailydeceased&#34;:&#34;188&#34;,&#34;dailyrecovered&#34;:&#34;23623&#34;,&#34;date&#34;:&#34;19 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-19&#34;,&#34;totalconfirmed&#34;:&#34;11554817&#34;,&#34;totaldeceased&#34;:&#34;159003&#34;,&#34;totalrecovered&#34;:&#34;11104982&#34;},{&#34;dailyconfirmed&#34;:&#34;43815&#34;,&#34;dailydeceased&#34;:&#34;196&#34;,&#34;dailyrecovered&#34;:&#34;22971&#34;,&#34;date&#34;:&#34;20 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-20&#34;,&#34;totalconfirmed&#34;:&#34;11598632&#34;,&#34;totaldeceased&#34;:&#34;159199&#34;,&#34;totalrecovered&#34;:&#34;11127953&#34;},{&#34;dailyconfirmed&#34;:&#34;47009&#34;,&#34;dailydeceased&#34;:&#34;213&#34;,&#34;dailyrecovered&#34;:&#34;21205&#34;,&#34;date&#34;:&#34;21 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-21&#34;,&#34;totalconfirmed&#34;:&#34;11645641&#34;,&#34;totaldeceased&#34;:&#34;159412&#34;,&#34;totalrecovered&#34;:&#34;11149158&#34;},{&#34;dailyconfirmed&#34;:&#34;40636&#34;,&#34;dailydeceased&#34;:&#34;197&#34;,&#34;dailyrecovered&#34;:&#34;29779&#34;,&#34;date&#34;:&#34;22 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-22&#34;,&#34;totalconfirmed&#34;:&#34;11686277&#34;,&#34;totaldeceased&#34;:&#34;159609&#34;,&#34;totalrecovered&#34;:&#34;11178937&#34;},{&#34;dailyconfirmed&#34;:&#34;47239&#34;,&#34;dailydeceased&#34;:&#34;277&#34;,&#34;dailyrecovered&#34;:&#34;23913&#34;,&#34;date&#34;:&#34;23 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-23&#34;,&#34;totalconfirmed&#34;:&#34;11733516&#34;,&#34;totaldeceased&#34;:&#34;159886&#34;,&#34;totalrecovered&#34;:&#34;11202850&#34;},{&#34;dailyconfirmed&#34;:&#34;53419&#34;,&#34;dailydeceased&#34;:&#34;249&#34;,&#34;dailyrecovered&#34;:&#34;26575&#34;,&#34;date&#34;:&#34;24 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-24&#34;,&#34;totalconfirmed&#34;:&#34;11786935&#34;,&#34;totaldeceased&#34;:&#34;160135&#34;,&#34;totalrecovered&#34;:&#34;11229425&#34;},{&#34;dailyconfirmed&#34;:&#34;59083&#34;,&#34;dailydeceased&#34;:&#34;257&#34;,&#34;dailyrecovered&#34;:&#34;32917&#34;,&#34;date&#34;:&#34;25 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-25&#34;,&#34;totalconfirmed&#34;:&#34;11846018&#34;,&#34;totaldeceased&#34;:&#34;160392&#34;,&#34;totalrecovered&#34;:&#34;11262342&#34;},{&#34;dailyconfirmed&#34;:&#34;62276&#34;,&#34;dailydeceased&#34;:&#34;292&#34;,&#34;dailyrecovered&#34;:&#34;30341&#34;,&#34;date&#34;:&#34;26 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-26&#34;,&#34;totalconfirmed&#34;:&#34;11908294&#34;,&#34;totaldeceased&#34;:&#34;160684&#34;,&#34;totalrecovered&#34;:&#34;11292683&#34;},{&#34;dailyconfirmed&#34;:&#34;62632&#34;,&#34;dailydeceased&#34;:&#34;311&#34;,&#34;dailyrecovered&#34;:&#34;28728&#34;,&#34;date&#34;:&#34;27 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-27&#34;,&#34;totalconfirmed&#34;:&#34;11970926&#34;,&#34;totaldeceased&#34;:&#34;160995&#34;,&#34;totalrecovered&#34;:&#34;11321411&#34;},{&#34;dailyconfirmed&#34;:&#34;68206&#34;,&#34;dailydeceased&#34;:&#34;295&#34;,&#34;dailyrecovered&#34;:&#34;32269&#34;,&#34;date&#34;:&#34;28 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-28&#34;,&#34;totalconfirmed&#34;:&#34;12039132&#34;,&#34;totaldeceased&#34;:&#34;161290&#34;,&#34;totalrecovered&#34;:&#34;11353680&#34;},{&#34;dailyconfirmed&#34;:&#34;56152&#34;,&#34;dailydeceased&#34;:&#34;266&#34;,&#34;dailyrecovered&#34;:&#34;36989&#34;,&#34;date&#34;:&#34;29 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-29&#34;,&#34;totalconfirmed&#34;:&#34;12095284&#34;,&#34;totaldeceased&#34;:&#34;161556&#34;,&#34;totalrecovered&#34;:&#34;11390669&#34;},{&#34;dailyconfirmed&#34;:&#34;53237&#34;,&#34;dailydeceased&#34;:&#34;355&#34;,&#34;dailyrecovered&#34;:&#34;41242&#34;,&#34;date&#34;:&#34;30 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-30&#34;,&#34;totalconfirmed&#34;:&#34;12148521&#34;,&#34;totaldeceased&#34;:&#34;161911&#34;,&#34;totalrecovered&#34;:&#34;11431911&#34;},{&#34;dailyconfirmed&#34;:&#34;72113&#34;,&#34;dailydeceased&#34;:&#34;458&#34;,&#34;dailyrecovered&#34;:&#34;40423&#34;,&#34;date&#34;:&#34;31 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-31&#34;,&#34;totalconfirmed&#34;:&#34;12220634&#34;,&#34;totaldeceased&#34;:&#34;162369&#34;,&#34;totalrecovered&#34;:&#34;11472334&#34;},{&#34;dailyconfirmed&#34;:&#34;81398&#34;,&#34;dailydeceased&#34;:&#34;468&#34;,&#34;dailyrecovered&#34;:&#34;50384&#34;,&#34;date&#34;:&#34;1 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-01&#34;,&#34;totalconfirmed&#34;:&#34;12302032&#34;,&#34;totaldeceased&#34;:&#34;162837&#34;,&#34;totalrecovered&#34;:&#34;11522718&#34;},{&#34;dailyconfirmed&#34;:&#34;89023&#34;,&#34;dailydeceased&#34;:&#34;713&#34;,&#34;dailyrecovered&#34;:&#34;44179&#34;,&#34;date&#34;:&#34;2 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-02&#34;,&#34;totalconfirmed&#34;:&#34;12391055&#34;,&#34;totaldeceased&#34;:&#34;163550&#34;,&#34;totalrecovered&#34;:&#34;11566897&#34;},{&#34;dailyconfirmed&#34;:&#34;92994&#34;,&#34;dailydeceased&#34;:&#34;514&#34;,&#34;dailyrecovered&#34;:&#34;60059&#34;,&#34;date&#34;:&#34;3 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-03&#34;,&#34;totalconfirmed&#34;:&#34;12484049&#34;,&#34;totaldeceased&#34;:&#34;164064&#34;,&#34;totalrecovered&#34;:&#34;11626956&#34;},{&#34;dailyconfirmed&#34;:&#34;103794&#34;,&#34;dailydeceased&#34;:&#34;477&#34;,&#34;dailyrecovered&#34;:&#34;52840&#34;,&#34;date&#34;:&#34;4 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-04&#34;,&#34;totalconfirmed&#34;:&#34;12587843&#34;,&#34;totaldeceased&#34;:&#34;164541&#34;,&#34;totalrecovered&#34;:&#34;11679796&#34;},{&#34;dailyconfirmed&#34;:&#34;96563&#34;,&#34;dailydeceased&#34;:&#34;446&#34;,&#34;dailyrecovered&#34;:&#34;50100&#34;,&#34;date&#34;:&#34;5 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-05&#34;,&#34;totalconfirmed&#34;:&#34;12684406&#34;,&#34;totaldeceased&#34;:&#34;164987&#34;,&#34;totalrecovered&#34;:&#34;11729896&#34;},{&#34;dailyconfirmed&#34;:&#34;115312&#34;,&#34;dailydeceased&#34;:&#34;630&#34;,&#34;dailyrecovered&#34;:&#34;59714&#34;,&#34;date&#34;:&#34;6 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-06&#34;,&#34;totalconfirmed&#34;:&#34;12799718&#34;,&#34;totaldeceased&#34;:&#34;165617&#34;,&#34;totalrecovered&#34;:&#34;11789610&#34;},{&#34;dailyconfirmed&#34;:&#34;126276&#34;,&#34;dailydeceased&#34;:&#34;684&#34;,&#34;dailyrecovered&#34;:&#34;59137&#34;,&#34;date&#34;:&#34;7 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-07&#34;,&#34;totalconfirmed&#34;:&#34;12925994&#34;,&#34;totaldeceased&#34;:&#34;166301&#34;,&#34;totalrecovered&#34;:&#34;11848747&#34;},{&#34;dailyconfirmed&#34;:&#34;131878&#34;,&#34;dailydeceased&#34;:&#34;802&#34;,&#34;dailyrecovered&#34;:&#34;61829&#34;,&#34;date&#34;:&#34;8 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-08&#34;,&#34;totalconfirmed&#34;:&#34;13057872&#34;,&#34;totaldeceased&#34;:&#34;167103&#34;,&#34;totalrecovered&#34;:&#34;11910576&#34;},{&#34;dailyconfirmed&#34;:&#34;144945&#34;,&#34;dailydeceased&#34;:&#34;773&#34;,&#34;dailyrecovered&#34;:&#34;77263&#34;,&#34;date&#34;:&#34;9 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-09&#34;,&#34;totalconfirmed&#34;:&#34;13202817&#34;,&#34;totaldeceased&#34;:&#34;167876&#34;,&#34;totalrecovered&#34;:&#34;11987839&#34;},{&#34;dailyconfirmed&#34;:&#34;152565&#34;,&#34;dailydeceased&#34;:&#34;838&#34;,&#34;dailyrecovered&#34;:&#34;90328&#34;,&#34;date&#34;:&#34;10 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-10&#34;,&#34;totalconfirmed&#34;:&#34;13355382&#34;,&#34;totaldeceased&#34;:&#34;168714&#34;,&#34;totalrecovered&#34;:&#34;12078167&#34;},{&#34;dailyconfirmed&#34;:&#34;169914&#34;,&#34;dailydeceased&#34;:&#34;904&#34;,&#34;dailyrecovered&#34;:&#34;75380&#34;,&#34;date&#34;:&#34;11 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-11&#34;,&#34;totalconfirmed&#34;:&#34;13525296&#34;,&#34;totaldeceased&#34;:&#34;169618&#34;,&#34;totalrecovered&#34;:&#34;12153547&#34;},{&#34;dailyconfirmed&#34;:&#34;160838&#34;,&#34;dailydeceased&#34;:&#34;880&#34;,&#34;dailyrecovered&#34;:&#34;96746&#34;,&#34;date&#34;:&#34;12 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-12&#34;,&#34;totalconfirmed&#34;:&#34;13686134&#34;,&#34;totaldeceased&#34;:&#34;170498&#34;,&#34;totalrecovered&#34;:&#34;12250293&#34;},{&#34;dailyconfirmed&#34;:&#34;185297&#34;,&#34;dailydeceased&#34;:&#34;1026&#34;,&#34;dailyrecovered&#34;:&#34;82271&#34;,&#34;date&#34;:&#34;13 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-13&#34;,&#34;totalconfirmed&#34;:&#34;13871431&#34;,&#34;totaldeceased&#34;:&#34;171524&#34;,&#34;totalrecovered&#34;:&#34;12332564&#34;},{&#34;dailyconfirmed&#34;:&#34;199584&#34;,&#34;dailydeceased&#34;:&#34;1038&#34;,&#34;dailyrecovered&#34;:&#34;93425&#34;,&#34;date&#34;:&#34;14 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-14&#34;,&#34;totalconfirmed&#34;:&#34;14071015&#34;,&#34;totaldeceased&#34;:&#34;172562&#34;,&#34;totalrecovered&#34;:&#34;12425989&#34;},{&#34;dailyconfirmed&#34;:&#34;216828&#34;,&#34;dailydeceased&#34;:&#34;1184&#34;,&#34;dailyrecovered&#34;:&#34;117897&#34;,&#34;date&#34;:&#34;15 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-15&#34;,&#34;totalconfirmed&#34;:&#34;14287843&#34;,&#34;totaldeceased&#34;:&#34;173746&#34;,&#34;totalrecovered&#34;:&#34;12543886&#34;},{&#34;dailyconfirmed&#34;:&#34;234002&#34;,&#34;dailydeceased&#34;:&#34;1338&#34;,&#34;dailyrecovered&#34;:&#34;122886&#34;,&#34;date&#34;:&#34;16 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-16&#34;,&#34;totalconfirmed&#34;:&#34;14521845&#34;,&#34;totaldeceased&#34;:&#34;175084&#34;,&#34;totalrecovered&#34;:&#34;12666772&#34;},{&#34;dailyconfirmed&#34;:&#34;260895&#34;,&#34;dailydeceased&#34;:&#34;1498&#34;,&#34;dailyrecovered&#34;:&#34;138209&#34;,&#34;date&#34;:&#34;17 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-17&#34;,&#34;totalconfirmed&#34;:&#34;14782740&#34;,&#34;totaldeceased&#34;:&#34;176582&#34;,&#34;totalrecovered&#34;:&#34;12804981&#34;},{&#34;dailyconfirmed&#34;:&#34;275063&#34;,&#34;dailydeceased&#34;:&#34;1620&#34;,&#34;dailyrecovered&#34;:&#34;143839&#34;,&#34;date&#34;:&#34;18 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-18&#34;,&#34;totalconfirmed&#34;:&#34;15057803&#34;,&#34;totaldeceased&#34;:&#34;178202&#34;,&#34;totalrecovered&#34;:&#34;12948820&#34;},{&#34;dailyconfirmed&#34;:&#34;257003&#34;,&#34;dailydeceased&#34;:&#34;1757&#34;,&#34;dailyrecovered&#34;:&#34;154357&#34;,&#34;date&#34;:&#34;19 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-19&#34;,&#34;totalconfirmed&#34;:&#34;15314806&#34;,&#34;totaldeceased&#34;:&#34;179959&#34;,&#34;totalrecovered&#34;:&#34;13103177&#34;},{&#34;dailyconfirmed&#34;:&#34;294365&#34;,&#34;dailydeceased&#34;:&#34;2021&#34;,&#34;dailyrecovered&#34;:&#34;166656&#34;,&#34;date&#34;:&#34;20 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-20&#34;,&#34;totalconfirmed&#34;:&#34;15609171&#34;,&#34;totaldeceased&#34;:&#34;181980&#34;,&#34;totalrecovered&#34;:&#34;13269833&#34;},{&#34;dailyconfirmed&#34;:&#34;315752&#34;,&#34;dailydeceased&#34;:&#34;2101&#34;,&#34;dailyrecovered&#34;:&#34;179434&#34;,&#34;date&#34;:&#34;21 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-21&#34;,&#34;totalconfirmed&#34;:&#34;15924923&#34;,&#34;totaldeceased&#34;:&#34;184081&#34;,&#34;totalrecovered&#34;:&#34;13449267&#34;},{&#34;dailyconfirmed&#34;:&#34;332531&#34;,&#34;dailydeceased&#34;:&#34;2257&#34;,&#34;dailyrecovered&#34;:&#34;192317&#34;,&#34;date&#34;:&#34;22 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-22&#34;,&#34;totalconfirmed&#34;:&#34;16257454&#34;,&#34;totaldeceased&#34;:&#34;186338&#34;,&#34;totalrecovered&#34;:&#34;13641584&#34;},{&#34;dailyconfirmed&#34;:&#34;345296&#34;,&#34;dailydeceased&#34;:&#34;2620&#34;,&#34;dailyrecovered&#34;:&#34;220545&#34;,&#34;date&#34;:&#34;23 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-23&#34;,&#34;totalconfirmed&#34;:&#34;16602750&#34;,&#34;totaldeceased&#34;:&#34;188958&#34;,&#34;totalrecovered&#34;:&#34;13862129&#34;},{&#34;dailyconfirmed&#34;:&#34;348996&#34;,&#34;dailydeceased&#34;:&#34;2761&#34;,&#34;dailyrecovered&#34;:&#34;215809&#34;,&#34;date&#34;:&#34;24 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-24&#34;,&#34;totalconfirmed&#34;:&#34;16951746&#34;,&#34;totaldeceased&#34;:&#34;191719&#34;,&#34;totalrecovered&#34;:&#34;14077938&#34;},{&#34;dailyconfirmed&#34;:&#34;354658&#34;,&#34;dailydeceased&#34;:&#34;2808&#34;,&#34;dailyrecovered&#34;:&#34;218626&#34;,&#34;date&#34;:&#34;25 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-25&#34;,&#34;totalconfirmed&#34;:&#34;17306404&#34;,&#34;totaldeceased&#34;:&#34;194527&#34;,&#34;totalrecovered&#34;:&#34;14296564&#34;},{&#34;dailyconfirmed&#34;:&#34;319471&#34;,&#34;dailydeceased&#34;:&#34;2762&#34;,&#34;dailyrecovered&#34;:&#34;249009&#34;,&#34;date&#34;:&#34;26 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-26&#34;,&#34;totalconfirmed&#34;:&#34;17625875&#34;,&#34;totaldeceased&#34;:&#34;197289&#34;,&#34;totalrecovered&#34;:&#34;14545573&#34;},{&#34;dailyconfirmed&#34;:&#34;362913&#34;,&#34;dailydeceased&#34;:&#34;3286&#34;,&#34;dailyrecovered&#34;:&#34;262349&#34;,&#34;date&#34;:&#34;27 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-27&#34;,&#34;totalconfirmed&#34;:&#34;17988788&#34;,&#34;totaldeceased&#34;:&#34;200575&#34;,&#34;totalrecovered&#34;:&#34;14807922&#34;},{&#34;dailyconfirmed&#34;:&#34;379404&#34;,&#34;dailydeceased&#34;:&#34;3646&#34;,&#34;dailyrecovered&#34;:&#34;274171&#34;,&#34;date&#34;:&#34;28 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-28&#34;,&#34;totalconfirmed&#34;:&#34;18368192&#34;,&#34;totaldeceased&#34;:&#34;204221&#34;,&#34;totalrecovered&#34;:&#34;15082093&#34;},{&#34;dailyconfirmed&#34;:&#34;386773&#34;,&#34;dailydeceased&#34;:&#34;3502&#34;,&#34;dailyrecovered&#34;:&#34;291727&#34;,&#34;date&#34;:&#34;29 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-29&#34;,&#34;totalconfirmed&#34;:&#34;18754965&#34;,&#34;totaldeceased&#34;:&#34;207723&#34;,&#34;totalrecovered&#34;:&#34;15373820&#34;},{&#34;dailyconfirmed&#34;:&#34;402014&#34;,&#34;dailydeceased&#34;:&#34;3525&#34;,&#34;dailyrecovered&#34;:&#34;299198&#34;,&#34;date&#34;:&#34;30 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-30&#34;,&#34;totalconfirmed&#34;:&#34;19156979&#34;,&#34;totaldeceased&#34;:&#34;211248&#34;,&#34;totalrecovered&#34;:&#34;15673018&#34;},{&#34;dailyconfirmed&#34;:&#34;392576&#34;,&#34;dailydeceased&#34;:&#34;3685&#34;,&#34;dailyrecovered&#34;:&#34;308688&#34;,&#34;date&#34;:&#34;1 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-01&#34;,&#34;totalconfirmed&#34;:&#34;19549555&#34;,&#34;totaldeceased&#34;:&#34;214933&#34;,&#34;totalrecovered&#34;:&#34;15981706&#34;},{&#34;dailyconfirmed&#34;:&#34;370090&#34;,&#34;dailydeceased&#34;:&#34;3423&#34;,&#34;dailyrecovered&#34;:&#34;300004&#34;,&#34;date&#34;:&#34;2 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-02&#34;,&#34;totalconfirmed&#34;:&#34;19919645&#34;,&#34;totaldeceased&#34;:&#34;218356&#34;,&#34;totalrecovered&#34;:&#34;16281710&#34;},{&#34;dailyconfirmed&#34;:&#34;355769&#34;,&#34;dailydeceased&#34;:&#34;3439&#34;,&#34;dailyrecovered&#34;:&#34;318910&#34;,&#34;date&#34;:&#34;3 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-03&#34;,&#34;totalconfirmed&#34;:&#34;20275414&#34;,&#34;totaldeceased&#34;:&#34;221795&#34;,&#34;totalrecovered&#34;:&#34;16600620&#34;},{&#34;dailyconfirmed&#34;:&#34;382847&#34;,&#34;dailydeceased&#34;:&#34;3786&#34;,&#34;dailyrecovered&#34;:&#34;337699&#34;,&#34;date&#34;:&#34;4 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-04&#34;,&#34;totalconfirmed&#34;:&#34;20658261&#34;,&#34;totaldeceased&#34;:&#34;225581&#34;,&#34;totalrecovered&#34;:&#34;16938319&#34;},{&#34;dailyconfirmed&#34;:&#34;412624&#34;,&#34;dailydeceased&#34;:&#34;3979&#34;,&#34;dailyrecovered&#34;:&#34;330718&#34;,&#34;date&#34;:&#34;5 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-05&#34;,&#34;totalconfirmed&#34;:&#34;21070885&#34;,&#34;totaldeceased&#34;:&#34;229560&#34;,&#34;totalrecovered&#34;:&#34;17269037&#34;},{&#34;dailyconfirmed&#34;:&#34;414280&#34;,&#34;dailydeceased&#34;:&#34;3923&#34;,&#34;dailyrecovered&#34;:&#34;328349&#34;,&#34;date&#34;:&#34;6 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-06&#34;,&#34;totalconfirmed&#34;:&#34;21485165&#34;,&#34;totaldeceased&#34;:&#34;233483&#34;,&#34;totalrecovered&#34;:&#34;17597386&#34;},{&#34;dailyconfirmed&#34;:&#34;406901&#34;,&#34;dailydeceased&#34;:&#34;4233&#34;,&#34;dailyrecovered&#34;:&#34;327675&#34;,&#34;date&#34;:&#34;7 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-07&#34;,&#34;totalconfirmed&#34;:&#34;21892066&#34;,&#34;totaldeceased&#34;:&#34;237716&#34;,&#34;totalrecovered&#34;:&#34;17925061&#34;},{&#34;dailyconfirmed&#34;:&#34;403808&#34;,&#34;dailydeceased&#34;:&#34;4092&#34;,&#34;dailyrecovered&#34;:&#34;386395&#34;,&#34;date&#34;:&#34;8 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-08&#34;,&#34;totalconfirmed&#34;:&#34;22295874&#34;,&#34;totaldeceased&#34;:&#34;241808&#34;,&#34;totalrecovered&#34;:&#34;18311456&#34;},{&#34;dailyconfirmed&#34;:&#34;366455&#34;,&#34;dailydeceased&#34;:&#34;3749&#34;,&#34;dailyrecovered&#34;:&#34;353777&#34;,&#34;date&#34;:&#34;9 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-09&#34;,&#34;totalconfirmed&#34;:&#34;22662329&#34;,&#34;totaldeceased&#34;:&#34;245557&#34;,&#34;totalrecovered&#34;:&#34;18665233&#34;},{&#34;dailyconfirmed&#34;:&#34;329491&#34;,&#34;dailydeceased&#34;:&#34;3879&#34;,&#34;dailyrecovered&#34;:&#34;355930&#34;,&#34;date&#34;:&#34;10 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-10&#34;,&#34;totalconfirmed&#34;:&#34;22991820&#34;,&#34;totaldeceased&#34;:&#34;249436&#34;,&#34;totalrecovered&#34;:&#34;19021163&#34;},{&#34;dailyconfirmed&#34;:&#34;348555&#34;,&#34;dailydeceased&#34;:&#34;4198&#34;,&#34;dailyrecovered&#34;:&#34;355398&#34;,&#34;date&#34;:&#34;11 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-11&#34;,&#34;totalconfirmed&#34;:&#34;23340375&#34;,&#34;totaldeceased&#34;:&#34;253634&#34;,&#34;totalrecovered&#34;:&#34;19376561&#34;},{&#34;dailyconfirmed&#34;:&#34;362632&#34;,&#34;dailydeceased&#34;:&#34;4128&#34;,&#34;dailyrecovered&#34;:&#34;352005&#34;,&#34;date&#34;:&#34;12 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-12&#34;,&#34;totalconfirmed&#34;:&#34;23703007&#34;,&#34;totaldeceased&#34;:&#34;257762&#34;,&#34;totalrecovered&#34;:&#34;19728566&#34;},{&#34;dailyconfirmed&#34;:&#34;343005&#34;,&#34;dailydeceased&#34;:&#34;4000&#34;,&#34;dailyrecovered&#34;:&#34;344676&#34;,&#34;date&#34;:&#34;13 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-13&#34;,&#34;totalconfirmed&#34;:&#34;24046012&#34;,&#34;totaldeceased&#34;:&#34;261762&#34;,&#34;totalrecovered&#34;:&#34;20073242&#34;},{&#34;dailyconfirmed&#34;:&#34;326256&#34;,&#34;dailydeceased&#34;:&#34;3889&#34;,&#34;dailyrecovered&#34;:&#34;353200&#34;,&#34;date&#34;:&#34;14 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-14&#34;,&#34;totalconfirmed&#34;:&#34;24372268&#34;,&#34;totaldeceased&#34;:&#34;265651&#34;,&#34;totalrecovered&#34;:&#34;20426442&#34;},{&#34;dailyconfirmed&#34;:&#34;310757&#34;,&#34;dailydeceased&#34;:&#34;4077&#34;,&#34;dailyrecovered&#34;:&#34;362547&#34;,&#34;date&#34;:&#34;15 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-15&#34;,&#34;totalconfirmed&#34;:&#34;24683025&#34;,&#34;totaldeceased&#34;:&#34;269728&#34;,&#34;totalrecovered&#34;:&#34;20788989&#34;},{&#34;dailyconfirmed&#34;:&#34;281837&#34;,&#34;dailydeceased&#34;:&#34;4098&#34;,&#34;dailyrecovered&#34;:&#34;378526&#34;,&#34;date&#34;:&#34;16 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-16&#34;,&#34;totalconfirmed&#34;:&#34;24964862&#34;,&#34;totaldeceased&#34;:&#34;273826&#34;,&#34;totalrecovered&#34;:&#34;21167515&#34;},{&#34;dailyconfirmed&#34;:&#34;263021&#34;,&#34;dailydeceased&#34;:&#34;4334&#34;,&#34;dailyrecovered&#34;:&#34;422391&#34;,&#34;date&#34;:&#34;17 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-17&#34;,&#34;totalconfirmed&#34;:&#34;25227883&#34;,&#34;totaldeceased&#34;:&#34;278160&#34;,&#34;totalrecovered&#34;:&#34;21589906&#34;},{&#34;dailyconfirmed&#34;:&#34;267246&#34;,&#34;dailydeceased&#34;:&#34;4529&#34;,&#34;dailyrecovered&#34;:&#34;389758&#34;,&#34;date&#34;:&#34;18 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-18&#34;,&#34;totalconfirmed&#34;:&#34;25495129&#34;,&#34;totaldeceased&#34;:&#34;282689&#34;,&#34;totalrecovered&#34;:&#34;21979664&#34;},{&#34;dailyconfirmed&#34;:&#34;276187&#34;,&#34;dailydeceased&#34;:&#34;3877&#34;,&#34;dailyrecovered&#34;:&#34;369005&#34;,&#34;date&#34;:&#34;19 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-19&#34;,&#34;totalconfirmed&#34;:&#34;25771316&#34;,&#34;totaldeceased&#34;:&#34;286566&#34;,&#34;totalrecovered&#34;:&#34;22348669&#34;},{&#34;dailyconfirmed&#34;:&#34;259242&#34;,&#34;dailydeceased&#34;:&#34;4209&#34;,&#34;dailyrecovered&#34;:&#34;357173&#34;,&#34;date&#34;:&#34;20 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-20&#34;,&#34;totalconfirmed&#34;:&#34;26030558&#34;,&#34;totaldeceased&#34;:&#34;290775&#34;,&#34;totalrecovered&#34;:&#34;22705842&#34;},{&#34;dailyconfirmed&#34;:&#34;257299&#34;,&#34;dailydeceased&#34;:&#34;4194&#34;,&#34;dailyrecovered&#34;:&#34;357625&#34;,&#34;date&#34;:&#34;21 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-21&#34;,&#34;totalconfirmed&#34;:&#34;26287857&#34;,&#34;totaldeceased&#34;:&#34;294969&#34;,&#34;totalrecovered&#34;:&#34;23063467&#34;},{&#34;dailyconfirmed&#34;:&#34;240897&#34;,&#34;dailydeceased&#34;:&#34;3739&#34;,&#34;dailyrecovered&#34;:&#34;355138&#34;,&#34;date&#34;:&#34;22 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-22&#34;,&#34;totalconfirmed&#34;:&#34;26528754&#34;,&#34;totaldeceased&#34;:&#34;298708&#34;,&#34;totalrecovered&#34;:&#34;23418605&#34;},{&#34;dailyconfirmed&#34;:&#34;222834&#34;,&#34;dailydeceased&#34;:&#34;4454&#34;,&#34;dailyrecovered&#34;:&#34;302253&#34;,&#34;date&#34;:&#34;23 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-23&#34;,&#34;totalconfirmed&#34;:&#34;26751588&#34;,&#34;totaldeceased&#34;:&#34;303162&#34;,&#34;totalrecovered&#34;:&#34;23720858&#34;},{&#34;dailyconfirmed&#34;:&#34;195857&#34;,&#34;dailydeceased&#34;:&#34;3509&#34;,&#34;dailyrecovered&#34;:&#34;326737&#34;,&#34;date&#34;:&#34;24 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-24&#34;,&#34;totalconfirmed&#34;:&#34;26947445&#34;,&#34;totaldeceased&#34;:&#34;306671&#34;,&#34;totalrecovered&#34;:&#34;24047595&#34;},{&#34;dailyconfirmed&#34;:&#34;208992&#34;,&#34;dailydeceased&#34;:&#34;4160&#34;,&#34;dailyrecovered&#34;:&#34;295264&#34;,&#34;date&#34;:&#34;25 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-25&#34;,&#34;totalconfirmed&#34;:&#34;27156437&#34;,&#34;totaldeceased&#34;:&#34;310831&#34;,&#34;totalrecovered&#34;:&#34;24342859&#34;},{&#34;dailyconfirmed&#34;:&#34;211510&#34;,&#34;dailydeceased&#34;:&#34;3843&#34;,&#34;dailyrecovered&#34;:&#34;283054&#34;,&#34;date&#34;:&#34;26 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-26&#34;,&#34;totalconfirmed&#34;:&#34;27367947&#34;,&#34;totaldeceased&#34;:&#34;314674&#34;,&#34;totalrecovered&#34;:&#34;24625913&#34;},{&#34;dailyconfirmed&#34;:&#34;186075&#34;,&#34;dailydeceased&#34;:&#34;3659&#34;,&#34;dailyrecovered&#34;:&#34;271002&#34;,&#34;date&#34;:&#34;27 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-27&#34;,&#34;totalconfirmed&#34;:&#34;27554022&#34;,&#34;totaldeceased&#34;:&#34;318333&#34;,&#34;totalrecovered&#34;:&#34;24896915&#34;},{&#34;dailyconfirmed&#34;:&#34;174083&#34;,&#34;dailydeceased&#34;:&#34;3611&#34;,&#34;dailyrecovered&#34;:&#34;285332&#34;,&#34;date&#34;:&#34;28 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-28&#34;,&#34;totalconfirmed&#34;:&#34;27728105&#34;,&#34;totaldeceased&#34;:&#34;321944&#34;,&#34;totalrecovered&#34;:&#34;25182247&#34;},{&#34;dailyconfirmed&#34;:&#34;165282&#34;,&#34;dailydeceased&#34;:&#34;3463&#34;,&#34;dailyrecovered&#34;:&#34;264483&#34;,&#34;date&#34;:&#34;29 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-29&#34;,&#34;totalconfirmed&#34;:&#34;27893387&#34;,&#34;totaldeceased&#34;:&#34;325407&#34;,&#34;totalrecovered&#34;:&#34;25446730&#34;},{&#34;dailyconfirmed&#34;:&#34;153396&#34;,&#34;dailydeceased&#34;:&#34;3130&#34;,&#34;dailyrecovered&#34;:&#34;237664&#34;,&#34;date&#34;:&#34;30 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-30&#34;,&#34;totalconfirmed&#34;:&#34;28046783&#34;,&#34;totaldeceased&#34;:&#34;328537&#34;,&#34;totalrecovered&#34;:&#34;25684394&#34;},{&#34;dailyconfirmed&#34;:&#34;126883&#34;,&#34;dailydeceased&#34;:&#34;2783&#34;,&#34;dailyrecovered&#34;:&#34;255125&#34;,&#34;date&#34;:&#34;31 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-31&#34;,&#34;totalconfirmed&#34;:&#34;28173666&#34;,&#34;totaldeceased&#34;:&#34;331320&#34;,&#34;totalrecovered&#34;:&#34;25939519&#34;},{&#34;dailyconfirmed&#34;:&#34;133152&#34;,&#34;dailydeceased&#34;:&#34;3205&#34;,&#34;dailyrecovered&#34;:&#34;231397&#34;,&#34;date&#34;:&#34;1 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-01&#34;,&#34;totalconfirmed&#34;:&#34;28306818&#34;,&#34;totaldeceased&#34;:&#34;334525&#34;,&#34;totalrecovered&#34;:&#34;26170916&#34;},{&#34;dailyconfirmed&#34;:&#34;134044&#34;,&#34;dailydeceased&#34;:&#34;2898&#34;,&#34;dailyrecovered&#34;:&#34;211890&#34;,&#34;date&#34;:&#34;2 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-02&#34;,&#34;totalconfirmed&#34;:&#34;28440862&#34;,&#34;totaldeceased&#34;:&#34;337423&#34;,&#34;totalrecovered&#34;:&#34;26382806&#34;},{&#34;dailyconfirmed&#34;:&#34;132424&#34;,&#34;dailydeceased&#34;:&#34;2717&#34;,&#34;dailyrecovered&#34;:&#34;206722&#34;,&#34;date&#34;:&#34;3 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-03&#34;,&#34;totalconfirmed&#34;:&#34;28573286&#34;,&#34;totaldeceased&#34;:&#34;340140&#34;,&#34;totalrecovered&#34;:&#34;26589528&#34;},{&#34;dailyconfirmed&#34;:&#34;120454&#34;,&#34;dailydeceased&#34;:&#34;3372&#34;,&#34;dailyrecovered&#34;:&#34;197763&#34;,&#34;date&#34;:&#34;4 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-04&#34;,&#34;totalconfirmed&#34;:&#34;28693740&#34;,&#34;totaldeceased&#34;:&#34;343512&#34;,&#34;totalrecovered&#34;:&#34;26787291&#34;},{&#34;dailyconfirmed&#34;:&#34;114488&#34;,&#34;dailydeceased&#34;:&#34;2682&#34;,&#34;dailyrecovered&#34;:&#34;189374&#34;,&#34;date&#34;:&#34;5 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-05&#34;,&#34;totalconfirmed&#34;:&#34;28808228&#34;,&#34;totaldeceased&#34;:&#34;346194&#34;,&#34;totalrecovered&#34;:&#34;26976665&#34;},{&#34;dailyconfirmed&#34;:&#34;101209&#34;,&#34;dailydeceased&#34;:&#34;2444&#34;,&#34;dailyrecovered&#34;:&#34;174156&#34;,&#34;date&#34;:&#34;6 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-06&#34;,&#34;totalconfirmed&#34;:&#34;28909437&#34;,&#34;totaldeceased&#34;:&#34;348638&#34;,&#34;totalrecovered&#34;:&#34;27150821&#34;},{&#34;dailyconfirmed&#34;:&#34;85804&#34;,&#34;dailydeceased&#34;:&#34;2107&#34;,&#34;dailyrecovered&#34;:&#34;182866&#34;,&#34;date&#34;:&#34;7 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-07&#34;,&#34;totalconfirmed&#34;:&#34;28995241&#34;,&#34;totaldeceased&#34;:&#34;350745&#34;,&#34;totalrecovered&#34;:&#34;27333687&#34;},{&#34;dailyconfirmed&#34;:&#34;92787&#34;,&#34;dailydeceased&#34;:&#34;2222&#34;,&#34;dailyrecovered&#34;:&#34;162356&#34;,&#34;date&#34;:&#34;8 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-08&#34;,&#34;totalconfirmed&#34;:&#34;29088028&#34;,&#34;totaldeceased&#34;:&#34;352967&#34;,&#34;totalrecovered&#34;:&#34;27496043&#34;},{&#34;dailyconfirmed&#34;:&#34;93883&#34;,&#34;dailydeceased&#34;:&#34;6139&#34;,&#34;dailyrecovered&#34;:&#34;149022&#34;,&#34;date&#34;:&#34;9 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-09&#34;,&#34;totalconfirmed&#34;:&#34;29181911&#34;,&#34;totaldeceased&#34;:&#34;359106&#34;,&#34;totalrecovered&#34;:&#34;27645065&#34;},{&#34;dailyconfirmed&#34;:&#34;91849&#34;,&#34;dailydeceased&#34;:&#34;3414&#34;,&#34;dailyrecovered&#34;:&#34;135329&#34;,&#34;date&#34;:&#34;10 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-10&#34;,&#34;totalconfirmed&#34;:&#34;29273760&#34;,&#34;totaldeceased&#34;:&#34;362520&#34;,&#34;totalrecovered&#34;:&#34;27780394&#34;},{&#34;dailyconfirmed&#34;:&#34;84574&#34;,&#34;dailydeceased&#34;:&#34;3996&#34;,&#34;dailyrecovered&#34;:&#34;122685&#34;,&#34;date&#34;:&#34;11 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-11&#34;,&#34;totalconfirmed&#34;:&#34;29358334&#34;,&#34;totaldeceased&#34;:&#34;366516&#34;,&#34;totalrecovered&#34;:&#34;27903079&#34;},{&#34;dailyconfirmed&#34;:&#34;80525&#34;,&#34;dailydeceased&#34;:&#34;3300&#34;,&#34;dailyrecovered&#34;:&#34;132664&#34;,&#34;date&#34;:&#34;12 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-12&#34;,&#34;totalconfirmed&#34;:&#34;29438859&#34;,&#34;totaldeceased&#34;:&#34;369816&#34;,&#34;totalrecovered&#34;:&#34;28035743&#34;},{&#34;dailyconfirmed&#34;:&#34;71001&#34;,&#34;dailydeceased&#34;:&#34;3922&#34;,&#34;dailyrecovered&#34;:&#34;119574&#34;,&#34;date&#34;:&#34;13 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-13&#34;,&#34;totalconfirmed&#34;:&#34;29509860&#34;,&#34;totaldeceased&#34;:&#34;373738&#34;,&#34;totalrecovered&#34;:&#34;28155317&#34;},{&#34;dailyconfirmed&#34;:&#34;60008&#34;,&#34;dailydeceased&#34;:&#34;2733&#34;,&#34;dailyrecovered&#34;:&#34;117376&#34;,&#34;date&#34;:&#34;14 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-14&#34;,&#34;totalconfirmed&#34;:&#34;29569868&#34;,&#34;totaldeceased&#34;:&#34;376471&#34;,&#34;totalrecovered&#34;:&#34;28272693&#34;},{&#34;dailyconfirmed&#34;:&#34;62215&#34;,&#34;dailydeceased&#34;:&#34;2540&#34;,&#34;dailyrecovered&#34;:&#34;107776&#34;,&#34;date&#34;:&#34;15 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-15&#34;,&#34;totalconfirmed&#34;:&#34;29632083&#34;,&#34;totaldeceased&#34;:&#34;379011&#34;,&#34;totalrecovered&#34;:&#34;28380469&#34;},{&#34;dailyconfirmed&#34;:&#34;67289&#34;,&#34;dailydeceased&#34;:&#34;2329&#34;,&#34;dailyrecovered&#34;:&#34;103900&#34;,&#34;date&#34;:&#34;16 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-16&#34;,&#34;totalconfirmed&#34;:&#34;29699372&#34;,&#34;totaldeceased&#34;:&#34;381340&#34;,&#34;totalrecovered&#34;:&#34;28484369&#34;},{&#34;dailyconfirmed&#34;:&#34;62436&#34;,&#34;dailydeceased&#34;:&#34;1591&#34;,&#34;dailyrecovered&#34;:&#34;88500&#34;,&#34;date&#34;:&#34;17 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-17&#34;,&#34;totalconfirmed&#34;:&#34;29761808&#34;,&#34;totaldeceased&#34;:&#34;382931&#34;,&#34;totalrecovered&#34;:&#34;28572869&#34;},{&#34;dailyconfirmed&#34;:&#34;60765&#34;,&#34;dailydeceased&#34;:&#34;1645&#34;,&#34;dailyrecovered&#34;:&#34;97854&#34;,&#34;date&#34;:&#34;18 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-18&#34;,&#34;totalconfirmed&#34;:&#34;29822573&#34;,&#34;totaldeceased&#34;:&#34;384576&#34;,&#34;totalrecovered&#34;:&#34;28670723&#34;},{&#34;dailyconfirmed&#34;:&#34;58615&#34;,&#34;dailydeceased&#34;:&#34;1574&#34;,&#34;dailyrecovered&#34;:&#34;87608&#34;,&#34;date&#34;:&#34;19 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-19&#34;,&#34;totalconfirmed&#34;:&#34;29881188&#34;,&#34;totaldeceased&#34;:&#34;386150&#34;,&#34;totalrecovered&#34;:&#34;28758331&#34;},{&#34;dailyconfirmed&#34;:&#34;52978&#34;,&#34;dailydeceased&#34;:&#34;1424&#34;,&#34;dailyrecovered&#34;:&#34;78189&#34;,&#34;date&#34;:&#34;20 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-20&#34;,&#34;totalconfirmed&#34;:&#34;29934166&#34;,&#34;totaldeceased&#34;:&#34;387574&#34;,&#34;totalrecovered&#34;:&#34;28836520&#34;},{&#34;dailyconfirmed&#34;:&#34;42683&#34;,&#34;dailydeceased&#34;:&#34;1167&#34;,&#34;dailyrecovered&#34;:&#34;82031&#34;,&#34;date&#34;:&#34;21 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-21&#34;,&#34;totalconfirmed&#34;:&#34;29976849&#34;,&#34;totaldeceased&#34;:&#34;388741&#34;,&#34;totalrecovered&#34;:&#34;28918551&#34;},{&#34;dailyconfirmed&#34;:&#34;50817&#34;,&#34;dailydeceased&#34;:&#34;1359&#34;,&#34;dailyrecovered&#34;:&#34;68697&#34;,&#34;date&#34;:&#34;22 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-22&#34;,&#34;totalconfirmed&#34;:&#34;30027666&#34;,&#34;totaldeceased&#34;:&#34;390100&#34;,&#34;totalrecovered&#34;:&#34;28987248&#34;},{&#34;dailyconfirmed&#34;:&#34;54309&#34;,&#34;dailydeceased&#34;:&#34;1323&#34;,&#34;dailyrecovered&#34;:&#34;69187&#34;,&#34;date&#34;:&#34;23 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-23&#34;,&#34;totalconfirmed&#34;:&#34;30081975&#34;,&#34;totaldeceased&#34;:&#34;391423&#34;,&#34;totalrecovered&#34;:&#34;29056435&#34;},{&#34;dailyconfirmed&#34;:&#34;51659&#34;,&#34;dailydeceased&#34;:&#34;1328&#34;,&#34;dailyrecovered&#34;:&#34;64369&#34;,&#34;date&#34;:&#34;24 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-24&#34;,&#34;totalconfirmed&#34;:&#34;30133634&#34;,&#34;totaldeceased&#34;:&#34;392751&#34;,&#34;totalrecovered&#34;:&#34;29120804&#34;},{&#34;dailyconfirmed&#34;:&#34;48768&#34;,&#34;dailydeceased&#34;:&#34;1183&#34;,&#34;dailyrecovered&#34;:&#34;64819&#34;,&#34;date&#34;:&#34;25 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-25&#34;,&#34;totalconfirmed&#34;:&#34;30182402&#34;,&#34;totaldeceased&#34;:&#34;393934&#34;,&#34;totalrecovered&#34;:&#34;29185623&#34;},{&#34;dailyconfirmed&#34;:&#34;49844&#34;,&#34;dailydeceased&#34;:&#34;1258&#34;,&#34;dailyrecovered&#34;:&#34;57866&#34;,&#34;date&#34;:&#34;26 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-26&#34;,&#34;totalconfirmed&#34;:&#34;30232246&#34;,&#34;totaldeceased&#34;:&#34;395192&#34;,&#34;totalrecovered&#34;:&#34;29243489&#34;},{&#34;dailyconfirmed&#34;:&#34;46523&#34;,&#34;dailydeceased&#34;:&#34;978&#34;,&#34;dailyrecovered&#34;:&#34;58563&#34;,&#34;date&#34;:&#34;27 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-27&#34;,&#34;totalconfirmed&#34;:&#34;30278769&#34;,&#34;totaldeceased&#34;:&#34;396170&#34;,&#34;totalrecovered&#34;:&#34;29302052&#34;},{&#34;dailyconfirmed&#34;:&#34;37070&#34;,&#34;dailydeceased&#34;:&#34;907&#34;,&#34;dailyrecovered&#34;:&#34;57016&#34;,&#34;date&#34;:&#34;28 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-28&#34;,&#34;totalconfirmed&#34;:&#34;30315839&#34;,&#34;totaldeceased&#34;:&#34;397077&#34;,&#34;totalrecovered&#34;:&#34;29359068&#34;},{&#34;dailyconfirmed&#34;:&#34;46104&#34;,&#34;dailydeceased&#34;:&#34;819&#34;,&#34;dailyrecovered&#34;:&#34;60789&#34;,&#34;date&#34;:&#34;29 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-29&#34;,&#34;totalconfirmed&#34;:&#34;30361943&#34;,&#34;totaldeceased&#34;:&#34;397896&#34;,&#34;totalrecovered&#34;:&#34;29419857&#34;},{&#34;dailyconfirmed&#34;:&#34;48606&#34;,&#34;dailydeceased&#34;:&#34;1002&#34;,&#34;dailyrecovered&#34;:&#34;61813&#34;,&#34;date&#34;:&#34;30 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-30&#34;,&#34;totalconfirmed&#34;:&#34;30410549&#34;,&#34;totaldeceased&#34;:&#34;398898&#34;,&#34;totalrecovered&#34;:&#34;29481670&#34;},{&#34;dailyconfirmed&#34;:&#34;46781&#34;,&#34;dailydeceased&#34;:&#34;857&#34;,&#34;dailyrecovered&#34;:&#34;59054&#34;,&#34;date&#34;:&#34;1 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-01&#34;,&#34;totalconfirmed&#34;:&#34;30457330&#34;,&#34;totaldeceased&#34;:&#34;399755&#34;,&#34;totalrecovered&#34;:&#34;29540724&#34;},{&#34;dailyconfirmed&#34;:&#34;44187&#34;,&#34;dailydeceased&#34;:&#34;737&#34;,&#34;dailyrecovered&#34;:&#34;57497&#34;,&#34;date&#34;:&#34;2 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-02&#34;,&#34;totalconfirmed&#34;:&#34;30501517&#34;,&#34;totaldeceased&#34;:&#34;400492&#34;,&#34;totalrecovered&#34;:&#34;29598221&#34;},{&#34;dailyconfirmed&#34;:&#34;43027&#34;,&#34;dailydeceased&#34;:&#34;950&#34;,&#34;dailyrecovered&#34;:&#34;52270&#34;,&#34;date&#34;:&#34;3 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-03&#34;,&#34;totalconfirmed&#34;:&#34;30544544&#34;,&#34;totaldeceased&#34;:&#34;401442&#34;,&#34;totalrecovered&#34;:&#34;29650491&#34;},{&#34;dailyconfirmed&#34;:&#34;40150&#34;,&#34;dailydeceased&#34;:&#34;725&#34;,&#34;dailyrecovered&#34;:&#34;42342&#34;,&#34;date&#34;:&#34;4 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-04&#34;,&#34;totalconfirmed&#34;:&#34;30584694&#34;,&#34;totaldeceased&#34;:&#34;402167&#34;,&#34;totalrecovered&#34;:&#34;29692833&#34;},{&#34;dailyconfirmed&#34;:&#34;34026&#34;,&#34;dailydeceased&#34;:&#34;552&#34;,&#34;dailyrecovered&#34;:&#34;51933&#34;,&#34;date&#34;:&#34;5 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-05&#34;,&#34;totalconfirmed&#34;:&#34;30618720&#34;,&#34;totaldeceased&#34;:&#34;402719&#34;,&#34;totalrecovered&#34;:&#34;29744766&#34;},{&#34;dailyconfirmed&#34;:&#34;43964&#34;,&#34;dailydeceased&#34;:&#34;930&#34;,&#34;dailyrecovered&#34;:&#34;47054&#34;,&#34;date&#34;:&#34;6 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-06&#34;,&#34;totalconfirmed&#34;:&#34;30662684&#34;,&#34;totaldeceased&#34;:&#34;403649&#34;,&#34;totalrecovered&#34;:&#34;29791820&#34;},{&#34;dailyconfirmed&#34;:&#34;45701&#34;,&#34;dailydeceased&#34;:&#34;819&#34;,&#34;dailyrecovered&#34;:&#34;44529&#34;,&#34;date&#34;:&#34;7 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-07&#34;,&#34;totalconfirmed&#34;:&#34;30708385&#34;,&#34;totaldeceased&#34;:&#34;404468&#34;,&#34;totalrecovered&#34;:&#34;29836349&#34;},{&#34;dailyconfirmed&#34;:&#34;43504&#34;,&#34;dailydeceased&#34;:&#34;908&#34;,&#34;dailyrecovered&#34;:&#34;44204&#34;,&#34;date&#34;:&#34;8 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-08&#34;,&#34;totalconfirmed&#34;:&#34;30751889&#34;,&#34;totaldeceased&#34;:&#34;405376&#34;,&#34;totalrecovered&#34;:&#34;29880553&#34;},{&#34;dailyconfirmed&#34;:&#34;42660&#34;,&#34;dailydeceased&#34;:&#34;1207&#34;,&#34;dailyrecovered&#34;:&#34;45291&#34;,&#34;date&#34;:&#34;9 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-09&#34;,&#34;totalconfirmed&#34;:&#34;30794549&#34;,&#34;totaldeceased&#34;:&#34;406583&#34;,&#34;totalrecovered&#34;:&#34;29925844&#34;},{&#34;dailyconfirmed&#34;:&#34;41494&#34;,&#34;dailydeceased&#34;:&#34;898&#34;,&#34;dailyrecovered&#34;:&#34;41511&#34;,&#34;date&#34;:&#34;10 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-10&#34;,&#34;totalconfirmed&#34;:&#34;30836043&#34;,&#34;totaldeceased&#34;:&#34;407481&#34;,&#34;totalrecovered&#34;:&#34;29967355&#34;},{&#34;dailyconfirmed&#34;:&#34;37654&#34;,&#34;dailydeceased&#34;:&#34;720&#34;,&#34;dailyrecovered&#34;:&#34;39688&#34;,&#34;date&#34;:&#34;11 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-11&#34;,&#34;totalconfirmed&#34;:&#34;30873697&#34;,&#34;totaldeceased&#34;:&#34;408201&#34;,&#34;totalrecovered&#34;:&#34;30007043&#34;},{&#34;dailyconfirmed&#34;:&#34;30818&#34;,&#34;dailydeceased&#34;:&#34;2024&#34;,&#34;dailyrecovered&#34;:&#34;47544&#34;,&#34;date&#34;:&#34;12 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-12&#34;,&#34;totalconfirmed&#34;:&#34;30904515&#34;,&#34;totaldeceased&#34;:&#34;410225&#34;,&#34;totalrecovered&#34;:&#34;30054587&#34;},{&#34;dailyconfirmed&#34;:&#34;40314&#34;,&#34;dailydeceased&#34;:&#34;625&#34;,&#34;dailyrecovered&#34;:&#34;42436&#34;,&#34;date&#34;:&#34;13 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-13&#34;,&#34;totalconfirmed&#34;:&#34;30944829&#34;,&#34;totaldeceased&#34;:&#34;410850&#34;,&#34;totalrecovered&#34;:&#34;30097023&#34;},{&#34;dailyconfirmed&#34;:&#34;41759&#34;,&#34;dailydeceased&#34;:&#34;578&#34;,&#34;dailyrecovered&#34;:&#34;39293&#34;,&#34;date&#34;:&#34;14 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-14&#34;,&#34;totalconfirmed&#34;:&#34;30986588&#34;,&#34;totaldeceased&#34;:&#34;411428&#34;,&#34;totalrecovered&#34;:&#34;30136316&#34;},{&#34;dailyconfirmed&#34;:&#34;39071&#34;,&#34;dailydeceased&#34;:&#34;544&#34;,&#34;dailyrecovered&#34;:&#34;39827&#34;,&#34;date&#34;:&#34;15 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-15&#34;,&#34;totalconfirmed&#34;:&#34;31025659&#34;,&#34;totaldeceased&#34;:&#34;411972&#34;,&#34;totalrecovered&#34;:&#34;30176143&#34;},{&#34;dailyconfirmed&#34;:&#34;38117&#34;,&#34;dailydeceased&#34;:&#34;560&#34;,&#34;dailyrecovered&#34;:&#34;43878&#34;,&#34;date&#34;:&#34;16 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-16&#34;,&#34;totalconfirmed&#34;:&#34;31063776&#34;,&#34;totaldeceased&#34;:&#34;412532&#34;,&#34;totalrecovered&#34;:&#34;30220021&#34;},{&#34;dailyconfirmed&#34;:&#34;41283&#34;,&#34;dailydeceased&#34;:&#34;517&#34;,&#34;dailyrecovered&#34;:&#34;42051&#34;,&#34;date&#34;:&#34;17 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-17&#34;,&#34;totalconfirmed&#34;:&#34;31105059&#34;,&#34;totaldeceased&#34;:&#34;413049&#34;,&#34;totalrecovered&#34;:&#34;30262072&#34;},{&#34;dailyconfirmed&#34;:&#34;38330&#34;,&#34;dailydeceased&#34;:&#34;501&#34;,&#34;dailyrecovered&#34;:&#34;38545&#34;,&#34;date&#34;:&#34;18 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-18&#34;,&#34;totalconfirmed&#34;:&#34;31143389&#34;,&#34;totaldeceased&#34;:&#34;413550&#34;,&#34;totalrecovered&#34;:&#34;30300617&#34;},{&#34;dailyconfirmed&#34;:&#34;29420&#34;,&#34;dailydeceased&#34;:&#34;372&#34;,&#34;dailyrecovered&#34;:&#34;45356&#34;,&#34;date&#34;:&#34;19 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-19&#34;,&#34;totalconfirmed&#34;:&#34;31172809&#34;,&#34;totaldeceased&#34;:&#34;413922&#34;,&#34;totalrecovered&#34;:&#34;30345973&#34;},{&#34;dailyconfirmed&#34;:&#34;42128&#34;,&#34;dailydeceased&#34;:&#34;3998&#34;,&#34;dailyrecovered&#34;:&#34;36876&#34;,&#34;date&#34;:&#34;20 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-20&#34;,&#34;totalconfirmed&#34;:&#34;31214937&#34;,&#34;totaldeceased&#34;:&#34;417920&#34;,&#34;totalrecovered&#34;:&#34;30382849&#34;},{&#34;dailyconfirmed&#34;:&#34;41687&#34;,&#34;dailydeceased&#34;:&#34;510&#34;,&#34;dailyrecovered&#34;:&#34;38891&#34;,&#34;date&#34;:&#34;21 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-21&#34;,&#34;totalconfirmed&#34;:&#34;31256624&#34;,&#34;totaldeceased&#34;:&#34;418430&#34;,&#34;totalrecovered&#34;:&#34;30421740&#34;},{&#34;dailyconfirmed&#34;:&#34;34863&#34;,&#34;dailydeceased&#34;:&#34;481&#34;,&#34;dailyrecovered&#34;:&#34;38403&#34;,&#34;date&#34;:&#34;22 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-22&#34;,&#34;totalconfirmed&#34;:&#34;31291487&#34;,&#34;totaldeceased&#34;:&#34;418911&#34;,&#34;totalrecovered&#34;:&#34;30460143&#34;},{&#34;dailyconfirmed&#34;:&#34;39501&#34;,&#34;dailydeceased&#34;:&#34;542&#34;,&#34;dailyrecovered&#34;:&#34;35144&#34;,&#34;date&#34;:&#34;23 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-23&#34;,&#34;totalconfirmed&#34;:&#34;31330988&#34;,&#34;totaldeceased&#34;:&#34;419453&#34;,&#34;totalrecovered&#34;:&#34;30495287&#34;},{&#34;dailyconfirmed&#34;:&#34;40286&#34;,&#34;dailydeceased&#34;:&#34;541&#34;,&#34;dailyrecovered&#34;:&#34;40038&#34;,&#34;date&#34;:&#34;24 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-24&#34;,&#34;totalconfirmed&#34;:&#34;31371274&#34;,&#34;totaldeceased&#34;:&#34;419994&#34;,&#34;totalrecovered&#34;:&#34;30535325&#34;},{&#34;dailyconfirmed&#34;:&#34;38179&#34;,&#34;dailydeceased&#34;:&#34;411&#34;,&#34;dailyrecovered&#34;:&#34;35945&#34;,&#34;date&#34;:&#34;25 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-25&#34;,&#34;totalconfirmed&#34;:&#34;31409453&#34;,&#34;totaldeceased&#34;:&#34;420405&#34;,&#34;totalrecovered&#34;:&#34;30571270&#34;},{&#34;dailyconfirmed&#34;:&#34;30820&#34;,&#34;dailydeceased&#34;:&#34;418&#34;,&#34;dailyrecovered&#34;:&#34;42503&#34;,&#34;date&#34;:&#34;26 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-26&#34;,&#34;totalconfirmed&#34;:&#34;31440273&#34;,&#34;totaldeceased&#34;:&#34;420823&#34;,&#34;totalrecovered&#34;:&#34;30613773&#34;},{&#34;dailyconfirmed&#34;:&#34;42971&#34;,&#34;dailydeceased&#34;:&#34;641&#34;,&#34;dailyrecovered&#34;:&#34;41653&#34;,&#34;date&#34;:&#34;27 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-27&#34;,&#34;totalconfirmed&#34;:&#34;31483244&#34;,&#34;totaldeceased&#34;:&#34;421464&#34;,&#34;totalrecovered&#34;:&#34;30655426&#34;},{&#34;dailyconfirmed&#34;:&#34;43165&#34;,&#34;dailydeceased&#34;:&#34;640&#34;,&#34;dailyrecovered&#34;:&#34;38537&#34;,&#34;date&#34;:&#34;28 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-28&#34;,&#34;totalconfirmed&#34;:&#34;31526409&#34;,&#34;totaldeceased&#34;:&#34;422104&#34;,&#34;totalrecovered&#34;:&#34;30693963&#34;},{&#34;dailyconfirmed&#34;:&#34;44671&#34;,&#34;dailydeceased&#34;:&#34;549&#34;,&#34;dailyrecovered&#34;:&#34;42115&#34;,&#34;date&#34;:&#34;29 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-29&#34;,&#34;totalconfirmed&#34;:&#34;31571080&#34;,&#34;totaldeceased&#34;:&#34;422653&#34;,&#34;totalrecovered&#34;:&#34;30736078&#34;},{&#34;dailyconfirmed&#34;:&#34;41499&#34;,&#34;dailydeceased&#34;:&#34;598&#34;,&#34;dailyrecovered&#34;:&#34;37320&#34;,&#34;date&#34;:&#34;30 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-30&#34;,&#34;totalconfirmed&#34;:&#34;31612579&#34;,&#34;totaldeceased&#34;:&#34;423251&#34;,&#34;totalrecovered&#34;:&#34;30773398&#34;},{&#34;dailyconfirmed&#34;:&#34;41943&#34;,&#34;dailydeceased&#34;:&#34;542&#34;,&#34;dailyrecovered&#34;:&#34;39485&#34;,&#34;date&#34;:&#34;31 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-31&#34;,&#34;totalconfirmed&#34;:&#34;31654522&#34;,&#34;totaldeceased&#34;:&#34;423793&#34;,&#34;totalrecovered&#34;:&#34;30812883&#34;},{&#34;dailyconfirmed&#34;:&#34;40629&#34;,&#34;dailydeceased&#34;:&#34;424&#34;,&#34;dailyrecovered&#34;:&#34;36628&#34;,&#34;date&#34;:&#34;1 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-01&#34;,&#34;totalconfirmed&#34;:&#34;31695151&#34;,&#34;totaldeceased&#34;:&#34;424217&#34;,&#34;totalrecovered&#34;:&#34;30849511&#34;},{&#34;dailyconfirmed&#34;:&#34;30085&#34;,&#34;dailydeceased&#34;:&#34;420&#34;,&#34;dailyrecovered&#34;:&#34;39120&#34;,&#34;date&#34;:&#34;2 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-02&#34;,&#34;totalconfirmed&#34;:&#34;31725236&#34;,&#34;totaldeceased&#34;:&#34;424637&#34;,&#34;totalrecovered&#34;:&#34;30888631&#34;},{&#34;dailyconfirmed&#34;:&#34;42530&#34;,&#34;dailydeceased&#34;:&#34;561&#34;,&#34;dailyrecovered&#34;:&#34;36552&#34;,&#34;date&#34;:&#34;3 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-03&#34;,&#34;totalconfirmed&#34;:&#34;31767766&#34;,&#34;totaldeceased&#34;:&#34;425198&#34;,&#34;totalrecovered&#34;:&#34;30925183&#34;},{&#34;dailyconfirmed&#34;:&#34;42797&#34;,&#34;dailydeceased&#34;:&#34;532&#34;,&#34;dailyrecovered&#34;:&#34;41873&#34;,&#34;date&#34;:&#34;4 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-04&#34;,&#34;totalconfirmed&#34;:&#34;31810563&#34;,&#34;totaldeceased&#34;:&#34;425730&#34;,&#34;totalrecovered&#34;:&#34;30967056&#34;},{&#34;dailyconfirmed&#34;:&#34;45005&#34;,&#34;dailydeceased&#34;:&#34;465&#34;,&#34;dailyrecovered&#34;:&#34;40906&#34;,&#34;date&#34;:&#34;5 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-05&#34;,&#34;totalconfirmed&#34;:&#34;31855568&#34;,&#34;totaldeceased&#34;:&#34;426195&#34;,&#34;totalrecovered&#34;:&#34;31007962&#34;},{&#34;dailyconfirmed&#34;:&#34;38705&#34;,&#34;dailydeceased&#34;:&#34;616&#34;,&#34;dailyrecovered&#34;:&#34;40026&#34;,&#34;date&#34;:&#34;6 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-06&#34;,&#34;totalconfirmed&#34;:&#34;31894273&#34;,&#34;totaldeceased&#34;:&#34;426811&#34;,&#34;totalrecovered&#34;:&#34;31047988&#34;},{&#34;dailyconfirmed&#34;:&#34;39068&#34;,&#34;dailydeceased&#34;:&#34;491&#34;,&#34;dailyrecovered&#34;:&#34;43935&#34;,&#34;date&#34;:&#34;7 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-07&#34;,&#34;totalconfirmed&#34;:&#34;31933341&#34;,&#34;totaldeceased&#34;:&#34;427302&#34;,&#34;totalrecovered&#34;:&#34;31091923&#34;},{&#34;dailyconfirmed&#34;:&#34;36036&#34;,&#34;dailydeceased&#34;:&#34;447&#34;,&#34;dailyrecovered&#34;:&#34;39832&#34;,&#34;date&#34;:&#34;8 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-08&#34;,&#34;totalconfirmed&#34;:&#34;31969377&#34;,&#34;totaldeceased&#34;:&#34;427749&#34;,&#34;totalrecovered&#34;:&#34;31131755&#34;},{&#34;dailyconfirmed&#34;:&#34;27428&#34;,&#34;dailydeceased&#34;:&#34;376&#34;,&#34;dailyrecovered&#34;:&#34;41461&#34;,&#34;date&#34;:&#34;9 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-09&#34;,&#34;totalconfirmed&#34;:&#34;31996805&#34;,&#34;totaldeceased&#34;:&#34;428125&#34;,&#34;totalrecovered&#34;:&#34;31173216&#34;},{&#34;dailyconfirmed&#34;:&#34;38376&#34;,&#34;dailydeceased&#34;:&#34;496&#34;,&#34;dailyrecovered&#34;:&#34;40097&#34;,&#34;date&#34;:&#34;10 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-10&#34;,&#34;totalconfirmed&#34;:&#34;32035181&#34;,&#34;totaldeceased&#34;:&#34;428621&#34;,&#34;totalrecovered&#34;:&#34;31213313&#34;},{&#34;dailyconfirmed&#34;:&#34;41586&#34;,&#34;dailydeceased&#34;:&#34;491&#34;,&#34;dailyrecovered&#34;:&#34;39127&#34;,&#34;date&#34;:&#34;11 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-11&#34;,&#34;totalconfirmed&#34;:&#34;32076767&#34;,&#34;totaldeceased&#34;:&#34;429112&#34;,&#34;totalrecovered&#34;:&#34;31252440&#34;},{&#34;dailyconfirmed&#34;:&#34;40081&#34;,&#34;dailydeceased&#34;:&#34;583&#34;,&#34;dailyrecovered&#34;:&#34;42156&#34;,&#34;date&#34;:&#34;12 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-12&#34;,&#34;totalconfirmed&#34;:&#34;32116848&#34;,&#34;totaldeceased&#34;:&#34;429695&#34;,&#34;totalrecovered&#34;:&#34;31294596&#34;},{&#34;dailyconfirmed&#34;:&#34;38761&#34;,&#34;dailydeceased&#34;:&#34;477&#34;,&#34;dailyrecovered&#34;:&#34;35759&#34;,&#34;date&#34;:&#34;13 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-13&#34;,&#34;totalconfirmed&#34;:&#34;32155609&#34;,&#34;totaldeceased&#34;:&#34;430172&#34;,&#34;totalrecovered&#34;:&#34;31330355&#34;},{&#34;dailyconfirmed&#34;:&#34;36135&#34;,&#34;dailydeceased&#34;:&#34;491&#34;,&#34;dailyrecovered&#34;:&#34;37936&#34;,&#34;date&#34;:&#34;14 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-14&#34;,&#34;totalconfirmed&#34;:&#34;32191744&#34;,&#34;totaldeceased&#34;:&#34;430663&#34;,&#34;totalrecovered&#34;:&#34;31368291&#34;},{&#34;dailyconfirmed&#34;:&#34;33245&#34;,&#34;dailydeceased&#34;:&#34;421&#34;,&#34;dailyrecovered&#34;:&#34;35936&#34;,&#34;date&#34;:&#34;15 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-15&#34;,&#34;totalconfirmed&#34;:&#34;32224989&#34;,&#34;totaldeceased&#34;:&#34;431084&#34;,&#34;totalrecovered&#34;:&#34;31404227&#34;},{&#34;dailyconfirmed&#34;:&#34;24692&#34;,&#34;dailydeceased&#34;:&#34;438&#34;,&#34;dailyrecovered&#34;:&#34;36862&#34;,&#34;date&#34;:&#34;16 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-16&#34;,&#34;totalconfirmed&#34;:&#34;32249681&#34;,&#34;totaldeceased&#34;:&#34;431522&#34;,&#34;totalrecovered&#34;:&#34;31441089&#34;}] . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.json) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . &lt;bound method Response.json of &lt;Response [403]&gt;&gt; . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://ahadb63.github.io/ahadsblog/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 0 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [0, 2, 4, 6, 8, 10] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . [0, 2, 4, 6, 8, 10] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 0, 2, 4, 5, 6, 8, 10, 10, 12, 14, 15, 16, 18, 20, 20, 22, 24, 25, 26, 28, 30, 30, 32, 34, 35, 36, 38, 40, 40, 42, 44, 45, 46, 48, 50, 50, 52, 54, 55, 56, 58, 60, 60, 62, 64, 65, 66, 68, 70, 70, 72, 74, 75, 76, 78, 80, 80, 82, 84, 85, 86, 88, 90, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) #code should add the price of the menu items selected by the user print(total) . Menu burger $3.99 fries $1.99 drink $0.99 0 . Fixed Version . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99, } go = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times while go == 0: item = input(&quot;Please select an item from the menu&quot;) print(&quot;Your Order:&quot;, item.lower()) for k,v in menu.items(): if item.lower() == k: print(&quot;Your total is $&quot;, menu[item.lower()]) go = 1 break if item.lower() != k: print(&quot;Please Try Again&quot;) continue #code should add the price of the menu items selected by the user . Menu burger $3.99 fries $1.99 drink $0.99 Your Order: burger Your total is $ 3.99 . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99,} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #code should prompts the user multiple times, until they type &quot;STOP&quot; while True: item = input(&quot;Select an item from the menu then type STOP&quot;) if item == &quot;STOP&quot; : break elif item in menu: total += menu[item] else: print (&quot;Doesnt Exist&quot;) #code adds price of the menu items selected by the user print(&quot;Total: $&quot; + str(total)) . Menu burger $3.99 fries $1.99 drink $0.99 Total: $7.970000000000001 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://ahadb63.github.io/ahadsblog/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Team Final Project",
            "content": "Final Project Early Idea . Webpage that has multiple minigames . Games like chess, poker, slots?, snake, wordle, | Games will be categorized in categories. For example, there will be a Board Games, Card Games, etc. | . Roles . Sabine - Frontend dev Dash - Backend dev Ahad - Backend dev Aiden - Scrum Master .",
            "url": "https://ahadb63.github.io/ahadsblog/final/project/2022/09/27/Final-Project-Planning.html",
            "relUrl": "/final/project/2022/09/27/Final-Project-Planning.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "JavaScript Usage",
            "content": "# JAVASCRIPT - toc: true - badges: true - comments: true - categories: [Java, markdown] . console.log(&quot;Hello World my name is Ahad Biabani&quot;); . Hello World my name is Ahad Biabani . Using Variable in console.log . var ahad = &quot;Hello fortnite hi hi hi&quot;; console.log(ahad); . Hello fortnite hi hi hi . Output showing use of function . function logIt(output) { console.log(output); } logIt(ahad); . Hello fortnite hi hi hi . Showing reuse of fucntion . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;I like to play Ice Hockey&quot;); logIt(2005) . Reuse of logIT I like to play Ice Hockey 2005 . Dynamic or Loosely typed language (string, number) . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Ahad is the best APCSP student&quot;) logItType(&quot;hello&quot;); logItType(2005); logItType([1, 2, 3, 4, 5]); . Ahad is the best APCSP student string ; hello number ; 2005 object ; [ 1, 2, 3, 4, 5 ] . Build a Person Function/Class object and JSON . function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var student = new Person(&quot;Ahad Biabani&quot;, &quot;Ahadb63&quot;, 2024); // object type is easy to work with in JavaScript logItType(student); // before role logItType(student.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher student.setRole(&quot;Teacher&quot;); // set the role logItType(student); logItType(student.toJSON()); . object ; Person { name: &#39;Ahad Biabani&#39;, ghID: &#39;Ahadb63&#39;, classOf: 2024, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Ahad Biabani&#34;,&#34;ghID&#34;:&#34;Ahadb63&#34;,&#34;classOf&#34;:2024,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Ahad Biabani&#39;, ghID: &#39;Ahadb63&#39;, classOf: 2024, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Ahad Biabani&#34;,&#34;ghID&#34;:&#34;Ahadb63&#34;,&#34;classOf&#34;:2024,&#34;role&#34;:&#34;Teacher&#34;} . Build a Classroom Array/List of Persons and JSON . var students = [ new Person(&quot;Kian&quot;, &quot;Pasokhi&quot;, 2024), new Person(&quot;Khalid&quot;, &quot;Farah&quot;, 2024), new Person(&quot;Neel&quot;, &quot;Agnihotri&quot;, 2024), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); . evalmachine.&lt;anonymous&gt;:22 compsci = new Classroom(teacher, students); ^ ReferenceError: teacher is not defined at evalmachine.&lt;anonymous&gt;:22:25 at ContextifyScript.Script.runInThisContext (vm.js:25:33) at Object.runInThisContext (vm.js:97:38) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) . IJavaScript and Table formatting using toHTML method . Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid white;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em blue;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Ahad Biabani | Ahadb63 | 2024 | Teacher | Kian | Pasokhi | 2024 | Student | Khalid | Farah | 2024 | Student | Neel | Agnihotri | 2024 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://ahadb63.github.io/ahadsblog/2022/09/25/JavaScript-Use.html",
            "relUrl": "/2022/09/25/JavaScript-Use.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Agenda",
            "content": "9/22/22 Thursday . AMLIT . Poem Essay (tommorow at 11:59) | . Chemistry . none | . APUSH . Chapter 10 notes | Chapter 10 study | . Math . B8 HW | Test Corrections | . APCOMSCI . none | .",
            "url": "https://ahadb63.github.io/ahadsblog/agenda/2022/09/22/AGENDA.html",
            "relUrl": "/agenda/2022/09/22/AGENDA.html",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Quiz Planning",
            "content": "# Quiz Planning - toc: true - badges: true - comments: true - categories: [Quiz, markdown] . Ideas for Quiz . Geography loction of statues | World Wonders | . | Sports Teams | different sports | players | . | History Historical figures | Historcial events | . | . We chose Geography as the topic for our quiz . Our Quiz will have three questions: . What country is the Eiffel Tower in? Answer: France | What country are the Pyramids Located? Answer: Egypt | What country and city is the Statue of Liberty in? Answer: United States, New York City | . Other: . We chose to add a bonus question | Bonus question gives viewer chance to decline and end quiz or move forward and do bonus question. | We have a loser screen and a winner screen. | . My Geography Quiz . Ideas for final project . Website where you can find information on characters from movies, shows, manga, and anime | Website that has lots of minigames | Trivia game website | website that teaches you stuff about math | . All projects aboce would orgamize the information and data and present it in different sections. . I need to add 6 points for each of the project ideas next time for full points on the weeks assignments . test .",
            "url": "https://ahadb63.github.io/ahadsblog/2022/09/07/Code.org-Quiz-Planning.html",
            "relUrl": "/2022/09/07/Code.org-Quiz-Planning.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Time Box Fragment",
            "content": "&lt;/p&gt; Week 0 Week 1 Week 2 . First Jupyter Notebook&lt;/td&gt; Tool Check&lt;/td&gt; Lists and Dictionaries&lt;/td&gt; &lt;/tr&gt; First Markdown Post&lt;/td&gt; Quiz&lt;/td&gt; &lt;/tr&gt; About Me&lt;/td&gt; Vocab&lt;/td&gt; Weekly Progress&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; test . &lt;/div&gt; | | | . | | . | | | .",
            "url": "https://ahadb63.github.io/ahadsblog/weeklyprogress/2022/09/05/TimeBoxFragment.html",
            "relUrl": "/weeklyprogress/2022/09/05/TimeBoxFragment.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Quiz",
            "content": "test test test . import getpass, sys def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) if rsp == &quot;import&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, pluto running /bin/python3 You will be asked 3 questions. Question: Are you ready to take a test? Answer: Question: What command is used to include other functions that were previously developed? is incorrect! Question: What command is used to evaluate correct or incorrect response in this example? is incorrect! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? is incorrect! pluto you scored 0/3 .",
            "url": "https://ahadb63.github.io/ahadsblog/quiz/2022/08/30/Quiz.html",
            "relUrl": "/quiz/2022/08/30/Quiz.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Quiz 2",
            "content": "import getpass, sys def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) if rsp == &quot;import&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, pluto running /bin/python3 You will be asked 3 questions. Question: Are you ready to take a test? Answer: Question: What command is used to include other functions that were previously developed? is incorrect! Question: What command is used to evaluate correct or incorrect response in this example? is incorrect! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? is incorrect! pluto you scored 0/3 .",
            "url": "https://ahadb63.github.io/ahadsblog/quiz/2022/08/30/QUIZ.html",
            "relUrl": "/quiz/2022/08/30/QUIZ.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "First Jupyter Notebook",
            "content": "print(1+1) print(&quot;hello&quot;) . .",
            "url": "https://ahadb63.github.io/ahadsblog/2022/08/29/firstjupyternotebook.html",
            "relUrl": "/2022/08/29/firstjupyternotebook.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Bash Tool Checks",
            "content": "Python Check . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Package . conda list . # packages in environment at /home/pluto/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . Jupyter Check . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/pluto/.local/share/jupyter/kernels/bash javascript /home/pluto/.local/share/jupyter/kernels/javascript python3 /home/pluto/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://ahadb63.github.io/ahadsblog/2022/08/29/Bash-Tool-Check.html",
            "relUrl": "/2022/08/29/Bash-Tool-Check.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Mrkdwnpost",
            "content": "Markdown test . Things I like . food | school | APCSP | Mr Yeung | .",
            "url": "https://ahadb63.github.io/ahadsblog/2022/08/24/mrkdwnpost.html",
            "relUrl": "/2022/08/24/mrkdwnpost.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | . | | | .",
            "url": "https://ahadb63.github.io/ahadsblog/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "CB quiz",
            "content": "",
            "url": "https://ahadb63.github.io/ahadsblog/quiz/2022/02/02/College-Board-Quiz.html",
            "relUrl": "/quiz/2022/02/02/College-Board-Quiz.html",
            "date": " • Feb 2, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "College board quiz (image)",
            "content": ".",
            "url": "https://ahadb63.github.io/ahadsblog/2022/02/02/College-Board-Quiz-(Image).html",
            "relUrl": "/2022/02/02/College-Board-Quiz-(Image).html",
            "date": " • Feb 2, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Week 4",
            "content": "# Week 4 &gt; Week 4 assignments - toc:true- badges: true - comments: true - categories: [Flask, markdown] . Flask Web Page Video . Collaboration Group is new, none of us know each other well | Variance in gender and culture | United under intrest for comsci | . | Potential Group Project Ideas Trivia game | Mafia game | Media database characters | movies | anime | . | . | .",
            "url": "https://ahadb63.github.io/ahadsblog/2020/09/29/Week-4.html",
            "relUrl": "/2020/09/29/Week-4.html",
            "date": " • Sep 29, 2020"
        }
        
    
  
    
        ,"post44": {
            "title": "COVIDAPI",
            "content": "&quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 .",
            "url": "https://ahadb63.github.io/ahadsblog/api/2020/09/09/apiii.html",
            "relUrl": "/api/2020/09/09/apiii.html",
            "date": " • Sep 9, 2020"
        }
        
    
  
    
        ,"post45": {
            "title": "Algorithm Hacks",
            "content": "var vars = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] ,expressions = [&#39;! ( a || b || c )&#39;, &#39;(!a &amp;&amp; !b &amp;&amp; !c)&#39;]; document.getElementById(&#39;getResult&#39;).addEventListener(&#39;click&#39;, ()=&gt;{ var len = vars.length ,splitBy = Math.round(len/2) ,trueSet ,trues = [] ,falses = [] ,truthData = []; vars = document.getElementById(&#39;vars&#39;).value.split(&#39;,&#39;); expressions = document.getElementById(&#39;expression&#39;).value.split(&#39;,&#39;); truthData.push(truth(vars, vars, true)); for(var i=1; i&lt;=splitBy; i++) { trueSet = reduceToCombinations(permut(vars, i)); trueSet.forEach((truthSrc)=&gt;{ trues = truth(vars, truthSrc); truthData.push(trues); }); } truthData.push(truth(vars, vars)); writeTruthTable(truthData); }); function truth(set, truths, reverse) { var w = {}; set.forEach(v=&gt;w[v]=(truths.indexOf(v)&gt;=0 ? true : false)^reverse); return w; } function reduceToCombinations(arr) { var i=1 ,lastEl; arr = arr.map(v=&gt;{return v.split(&#39;&#39;).sort().join(&#39;&#39;)}).sort(); lastEl = arr[0]; while(i&lt;arr.length) { if(arr[i] == lastEl) { arr.splice(i,1); } else { lastEl = arr[i]; i++; } } arr = arr.map(v=&gt;{return v.split(&#39;&#39;)}); return arr; } function writeTruthTable(truthData) { var table = &#39;&lt;table cellpadding=0 cellspacing=0&gt;&#39; ,keys ,vals ,exprRes; table += &#39;&lt;thead&gt;&lt;tr&gt;&#39;; vars.forEach(v=&gt;{ table += &#39;&lt;th&gt;&#39;; table += v; table += &#39;&lt;/th&gt;&#39;; }); expressions.forEach(v=&gt;{ table += &#39;&lt;th&gt;&#39;; table += v; table += &#39;&lt;/th&gt;&#39;; }); table += &#39;&lt;/tr&gt;&lt;/thead&gt;&#39;; truthData.forEach((v)=&gt; { vals = []; keys = []; table += &#39;&lt;tr&gt;&#39;; console.log(v); for(i in v){ vals.push(v[i]); keys.push(i); table += &#39;&lt;td&gt;&#39;; table += v[i]; table += &#39;&lt;/td&gt;&#39;; }; for(var i = 0; i&lt;keys.length; i++) { eval(`var ${keys[i]} = ${vals[i]};`); } expressions.forEach((expr)=&gt;{ exprRes = eval(expr); table += `&lt;td class=&quot;${exprRes}&quot;&gt;`; table += exprRes ? &#39;T&#39; : &#39;F&#39;; table += &#39;&lt;/td&gt;&#39;; }); table += &#39;&lt;/tr&gt;&#39;; }); table += &#39;&lt;/table&gt;&#39;; document.getElementById(&#39;result&#39;).innerHTML = table; } function permut(arr, c) { var buf = [] ,len ,arrSlice ,permArr ,proArr; if(c&lt;=1) { return arr; } else { len = arr.length; for(var i=0;i&lt;len;i++) { arrSlice = arr.slice(0,i).concat(arr.slice(i+1)); permArr = permut(arrSlice,c-1); proArr = []; for(var y=0; y&lt;permArr.length; y++) { proArr.push([arr[i]].concat(permArr[y]).join(&#39;&#39;)); } buf.push(...proArr); } } return buf; } . evalmachine.&lt;anonymous&gt;:4 document.getElementById(&#39;getResult&#39;).addEventListener(&#39;click&#39;, ()=&gt;{ ^ ReferenceError: document is not defined at evalmachine.&lt;anonymous&gt;:4:1 at ContextifyScript.Script.runInThisContext (vm.js:25:33) at Object.runInThisContext (vm.js:97:38) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) . const A = () =&gt; { console.log(&#39;A&#39;); return true; } const B = () =&gt; { console.log(&#39;B&#39;); return true; } const C = () =&gt; { console.log(&#39;C&#39;); return false; }A() || B() &amp;&amp; C() // prints &quot;A&quot;, returns true (A() || B()) &amp;&amp; C() // prints &quot;A C&quot;, returns false . evalmachine.&lt;anonymous&gt;:12 }A() || B() &amp;&amp; C() ^ SyntaxError: Unexpected identifier at createScript (vm.js:56:10) at Object.runInThisContext (vm.js:97:10) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) at process._tickCallback (internal/process/next_tick.js:104:9) . from itertools import product while True: bexp = input(&#39; nBoolean expression: &#39;) bexp = bexp.strip() if not bexp: print(&quot; nThank you&quot;) break code = compile(bexp, &#39;&lt;string&gt;&#39;, &#39;eval&#39;) names = code.co_names print(&#39; n&#39; + &#39; &#39;.join(names), &#39;:&#39;, bexp) for values in product(range(2), repeat=len(names)): env = dict(zip(names, values)) print(&#39; &#39;.join(str(v) for v in values), &#39;:&#39;, eval(code, env)) . : 1 : 1 : 2 : 2 : 3 : 3 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 2 : 2 Thank you .",
            "url": "https://ahadb63.github.io/ahadsblog/algorithm/hacks/2020/09/09/Algorithm-Hacks.html",
            "relUrl": "/algorithm/hacks/2020/09/09/Algorithm-Hacks.html",
            "date": " • Sep 9, 2020"
        }
        
    
  
    
        ,"post46": {
            "title": "Lesson 3.11",
            "content": "",
            "url": "https://ahadb63.github.io/ahadsblog/2020/09/09/3.11-CB-lesson.html",
            "relUrl": "/2020/09/09/3.11-CB-lesson.html",
            "date": " • Sep 9, 2020"
        }
        
    
  
    
        ,"post47": {
            "title": "Binary Search Lesson 3.11",
            "content": "Lesson 3.11 Binary Search . Goals/Objectives: . detirmine number of iterations required to find vlue in data set. | explain requirements for binary search | . What is Binary Search? . Binary search is a search algorithm that finds the position of a target value within a sorted array. Binary search compares the target value to the middle element of the array. | An algorithm for iterating to find a value inside a data set | . About Binary Search: . Binary Search Algorithm starts in the middle of a data set of numbers and eliminates half the data. This process reapeats until the desired value is found or until all elements have been eliminated. | In order to use binary search effectivly and properly, data must be stored in order | COLLEGE BOARD INDEX STARTS AT 1 NOT 0 | . Think about how you would you would try to find a certain number in this set. . One way would be to line up the numbers and count them individually untill you find the desired value. . When working with large data sets with lots of numbers, methods like these wont work . Instead, a Binary Search would be more effective. | . Here we can see the numbers are set in an increasing order. Setting numbers in an increasing or decreasing is needed for a binary search . Binary search is started with the middle number first Middle number is found by taking the higest index number plus the lowest and divided by two | . | Binary Search can be represented using a tree as shown below | . Heres an easy way to put it: . binary search fidns the desired element by continuously chopping the search area in half | say the element you are looking for is &#39;f&#39; | . [a b c d e f g h] . We would start in the middle at element &#39;d&#39; | becuase our target is greater than d we will eliminate everything left of &#39;d&#39; including &#39;d&#39; (chopping it in half) . [e f g h] is what now remains . again we would &#39;chop in half&#39; | say we iterate through &#39;g&#39; and &#39;h&#39;, our desired element is still not found so we would eliminate &#39;g; and &#39;h&#39; and continue the process | . [e f] . now we are down to 2 elements | &#39;chopping in half&#39; will give us our desired element | . [f] . | . def binarySearch(array, x, low, high): # Repeat until the pointers low and high meet each other while low &lt;= high: mid = low + (high - low)//2 if array[mid] == x: return mid elif array[mid] &lt; x: low = mid + 1 else: high = mid - 1 return -1 array = [3, 4, 5, 6, 7, 8, 9] x = 4 result = binarySearch(array, x, 0, len(array)-1) if result != -1: print(&quot;Element is present at index &quot; + str(result)) else: print(&quot;Not found&quot;) . Element is present at index 1 . Hacks . Using my example above and steps below, create your own iteration using binary search . Steps . Compare x with the middle element. | If x matches with the middle element, we return the mid index. | Else if x is greater than the mid element, then x can only lie in the right (greater) half subarray after the mid element. Then we apply the algorithm again for the right half. | Else if x is smaller, the target x must lie in the left (lower) half. So we apply the algorithm for the left half. | .",
            "url": "https://ahadb63.github.io/ahadsblog/binary/2020/09/09/3.11-CB-lesson-copy.html",
            "relUrl": "/binary/2020/09/09/3.11-CB-lesson-copy.html",
            "date": " • Sep 9, 2020"
        }
        
    
  
    
        ,"post48": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . ModuleNotFoundError Traceback (most recent call last) /vscode/ahadsblog/_notebooks/2020-02-20-test.ipynb Cell 8 in &lt;cell line: 2&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2020-02-20-test.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; #collapse-hide -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2020-02-20-test.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; import pandas as pd &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2020-02-20-test.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; import altair as alt ModuleNotFoundError: No module named &#39;pandas&#39; . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://ahadb63.github.io/ahadsblog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post49": {
            "title": "Python Test",
            "content": "print(&quot;hi&quot;) . hi .",
            "url": "https://ahadb63.github.io/ahadsblog/kerneltest/2020/02/02/kernelworking2.html",
            "relUrl": "/kerneltest/2020/02/02/kernelworking2.html",
            "date": " • Feb 2, 2020"
        }
        
    
  
    
        ,"post50": {
            "title": "Shell Script Bash Test",
            "content": "echo helloo . helloo .",
            "url": "https://ahadb63.github.io/ahadsblog/kerneltest/2020/02/02/kernel2.html",
            "relUrl": "/kerneltest/2020/02/02/kernel2.html",
            "date": " • Feb 2, 2020"
        }
        
    
  
    
        ,"post51": {
            "title": "API Test",
            "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;Weather app&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot; /&gt; &lt;!-- Google Fonts --&gt; &lt;link rel=&quot;preconnect&quot; href=&quot;https://fonts.gstatic.com&quot;&gt; &lt;link href=&quot;https://fonts.googleapis.com/css2?family=Lora:ital,wght@0,700;1,600&amp;display=swap&quot; rel=&quot;stylesheet&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;img src=&quot;&quot; alt=&quot;&quot; srcset=&quot;&quot; id=&quot;weather-icon&quot;&gt; &lt;div id=&quot;location&quot;&gt;Unable to Fetch Weather&lt;/div&gt; &lt;div class=&quot;desc&quot;&gt;No Information Available.&lt;/div&gt; &lt;div class=&quot;weather&quot;&gt; &lt;div class=&quot;c&quot;&gt;Error&lt;/div&gt; &lt;div class=&quot;circle&quot;&gt;&lt;/div&gt; &lt;div class=&quot;f&quot;&gt;Error&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;info&quot;&gt; &lt;h4&gt;Sunrise: &lt;span class=&quot;sunrise&quot;&gt;No Information Available&lt;/span&gt;&lt;/h4&gt; &lt;h4&gt;Sunset: &lt;span class=&quot;sunset&quot;&gt;No Information Available&lt;/span&gt;&lt;/h4&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src=&quot;scripts.js&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . evalmachine.&lt;anonymous&gt;:1 &lt;!DOCTYPE html&gt; ^ SyntaxError: Unexpected token &lt; at createScript (vm.js:56:10) at Object.runInThisContext (vm.js:97:10) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) at process._tickCallback (internal/process/next_tick.js:104:9) . // OpenWeatherMap API. Do not share it publicly. const api = 6e1adc6d03e5d0ef28a7e75964140dd7; //Replace with your API const iconImg = document.getElementById(&#39;weather-icon&#39;); const loc = document.querySelector(&#39;#location&#39;); const tempC = document.querySelector(&#39;.c&#39;); const tempF = document.querySelector(&#39;.f&#39;); const desc = document.querySelector(&#39;.desc&#39;); const sunriseDOM = document.querySelector(&#39;.sunrise&#39;); const sunsetDOM = document.querySelector(&#39;.sunset&#39;); window.addEventListener(&#39;load&#39;, () =&gt; { let long; let lat; // Accesing Geolocation of User if (navigator.geolocation) { navigator.geolocation.getCurrentPosition((position) =&gt; { // Storing Longitude and Latitude in variables long = position.coords.longitude; lat = position.coords.latitude; const base = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&amp;lon=${long}&amp;appid=${api}&amp;units=metric`; // Using fetch to get data fetch(base) .then((response) =&gt; { return response.json(); }) .then((data) =&gt; { const { temp, feels_like } = data.main; const place = data.name; const { description, icon } = data.weather[0]; const { sunrise, sunset } = data.sys; const iconUrl = `http://openweathermap.org/img/wn/${icon}@2x.png`; const fahrenheit = (temp * 9) / 5 + 32; // Converting Epoch(Unix) time to GMT const sunriseGMT = new Date(sunrise * 1000); const sunsetGMT = new Date(sunset * 1000); // Interacting with DOM to show data iconImg.src = iconUrl; loc.textContent = `${place}`; desc.textContent = `${description}`; tempC.textContent = `${temp.toFixed(2)} °C`; tempF.textContent = `${fahrenheit.toFixed(2)} °F`; sunriseDOM.textContent = `${sunriseGMT.toLocaleDateString()}, ${sunriseGMT.toLocaleTimeString()}`; sunsetDOM.textContent = `${sunsetGMT.toLocaleDateString()}, ${sunsetGMT.toLocaleTimeString()}`; }); }); } }); . evalmachine.&lt;anonymous&gt;:2 const api = 6e1adc6d03e5d0ef28a7e75964140dd7; //Replace with your API ^^^ SyntaxError: Invalid or unexpected token at createScript (vm.js:56:10) at Object.runInThisContext (vm.js:97:10) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) at process._tickCallback (internal/process/next_tick.js:104:9) . * { margin: 0; padding: 0; box-sizing: border-box; } body { font-family: &#39;Lora&#39;, serif; } .container { height: 100vh; width: 100vw; display: flex; align-items: center; justify-content: center; flex-direction: column; background: rgb(251, 242, 133); background: radial-gradient( circle, rgba(251, 242, 133, 0.6334908963585435) 0%, rgba(224, 196, 91, 0.8407738095238095) 35%, rgba(230, 224, 113, 1) 100% ); } .weather { display: flex; flex-direction: row; align-items: center; margin: 15px 0; font-size: 1.5rem; } #location { font-size: 3rem; font-weight: 800; font-style: italic; } .desc { font-size: 1.25rem; text-transform: capitalize; } .circle { background-color: black; border-radius: 50px; height: 15px; width: 15px; margin: 0 15px; } . evalmachine.&lt;anonymous&gt;:1 * { ^ SyntaxError: Unexpected token * at createScript (vm.js:56:10) at Object.runInThisContext (vm.js:97:10) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) at process._tickCallback (internal/process/next_tick.js:104:9) .",
            "url": "https://ahadb63.github.io/ahadsblog/2020/02/02/apii.html",
            "relUrl": "/2020/02/02/apii.html",
            "date": " • Feb 2, 2020"
        }
        
    
  
    
        ,"post52": {
            "title": "Hockey API",
            "content": "import requests url = &quot;https://nhl-stats-and-live-data.p.rapidapi.com/standings&quot; querystring = {&quot;season&quot;:&quot;20032004&quot;,&quot;date&quot;:&quot;2018-01-09&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;3d86dd31a2mshca1f32e22e2396cp1f7302jsn610cf54ceeb6&quot;, &quot;X-RapidAPI-Host&quot;: &quot;nhl-stats-and-live-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) print(&quot;Standings&quot;) standing = response.json().get(&quot;id&quot;) for key, value in id.items(): print(key, value) . {&#34;copyright&#34;:&#34;NHL and the NHL Shield are registered trademarks of the National Hockey League. NHL and NHL team marks are the property of the NHL and its teams. u00a9 NHL 2022. All Rights Reserved.&#34;,&#34;records&#34;:[{&#34;conference&#34;:{&#34;id&#34;:5,&#34;link&#34;:&#34;/api/v1/conferences/5&#34;,&#34;name&#34;:&#34;Western&#34;},&#34;division&#34;:{&#34;abbreviation&#34;:&#34;C&#34;,&#34;id&#34;:16,&#34;link&#34;:&#34;/api/v1/divisions/16&#34;,&#34;name&#34;:&#34;Central&#34;,&#34;nameShort&#34;:&#34;CEN&#34;},&#34;league&#34;:{&#34;id&#34;:133,&#34;link&#34;:&#34;/api/v1/league/133&#34;,&#34;name&#34;:&#34;National Hockey League&#34;},&#34;season&#34;:&#34;20032004&#34;,&#34;standingsType&#34;:&#34;regularSeason&#34;,&#34;teamRecords&#34;:[{&#34;clinchIndicator&#34;:&#34;p&#34;,&#34;conferenceHomeRank&#34;:&#34;4&#34;,&#34;conferenceL10Rank&#34;:&#34;11&#34;,&#34;conferenceRank&#34;:&#34;1&#34;,&#34;conferenceRoadRank&#34;:&#34;1&#34;,&#34;divisionHomeRank&#34;:&#34;3&#34;,&#34;divisionL10Rank&#34;:&#34;4&#34;,&#34;divisionRank&#34;:&#34;1&#34;,&#34;divisionRoadRank&#34;:&#34;1&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:211,&#34;goalsScored&#34;:267,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;7&#34;,&#34;leagueL10Rank&#34;:&#34;20&#34;,&#34;leagueRank&#34;:&#34;1&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:18,&#34;ot&#34;:11,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:53},&#34;leagueRoadRank&#34;:&#34;1&#34;,&#34;points&#34;:117,&#34;pointsPercentage&#34;:0.7134146341463414,&#34;ppConferenceRank&#34;:&#34;1&#34;,&#34;ppDivisionRank&#34;:&#34;1&#34;,&#34;ppLeagueRank&#34;:&#34;1&#34;,&#34;row&#34;:47,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W2&#34;,&#34;streakNumber&#34;:2,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:18,&#34;link&#34;:&#34;/api/v1/teams/18&#34;,&#34;name&#34;:&#34;Nashville Predators&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;1&#34;,&#34;conferenceL10Rank&#34;:&#34;1&#34;,&#34;conferenceRank&#34;:&#34;2&#34;,&#34;conferenceRoadRank&#34;:&#34;4&#34;,&#34;divisionHomeRank&#34;:&#34;1&#34;,&#34;divisionL10Rank&#34;:&#34;1&#34;,&#34;divisionRank&#34;:&#34;2&#34;,&#34;divisionRoadRank&#34;:&#34;2&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:218,&#34;goalsScored&#34;:277,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;1&#34;,&#34;leagueL10Rank&#34;:&#34;1&#34;,&#34;leagueRank&#34;:&#34;2&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:20,&#34;ot&#34;:10,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:52},&#34;leagueRoadRank&#34;:&#34;6&#34;,&#34;points&#34;:114,&#34;pointsPercentage&#34;:0.6951219512195121,&#34;ppConferenceRank&#34;:&#34;2&#34;,&#34;ppDivisionRank&#34;:&#34;2&#34;,&#34;ppLeagueRank&#34;:&#34;2&#34;,&#34;row&#34;:48,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W5&#34;,&#34;streakNumber&#34;:5,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:52,&#34;link&#34;:&#34;/api/v1/teams/52&#34;,&#34;name&#34;:&#34;Winnipeg Jets&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;2&#34;,&#34;conferenceL10Rank&#34;:&#34;5&#34;,&#34;conferenceRank&#34;:&#34;4&#34;,&#34;conferenceRoadRank&#34;:&#34;9&#34;,&#34;divisionHomeRank&#34;:&#34;2&#34;,&#34;divisionL10Rank&#34;:&#34;2&#34;,&#34;divisionRank&#34;:&#34;3&#34;,&#34;divisionRoadRank&#34;:&#34;4&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:232,&#34;goalsScored&#34;:253,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;3&#34;,&#34;leagueL10Rank&#34;:&#34;13&#34;,&#34;leagueRank&#34;:&#34;8&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:26,&#34;ot&#34;:11,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:45},&#34;leagueRoadRank&#34;:&#34;17&#34;,&#34;points&#34;:101,&#34;pointsPercentage&#34;:0.6158536585365854,&#34;ppConferenceRank&#34;:&#34;4&#34;,&#34;ppDivisionRank&#34;:&#34;3&#34;,&#34;ppLeagueRank&#34;:&#34;8&#34;,&#34;row&#34;:42,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:30,&#34;link&#34;:&#34;/api/v1/teams/30&#34;,&#34;name&#34;:&#34;Minnesota Wild&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;5&#34;,&#34;conferenceL10Rank&#34;:&#34;12&#34;,&#34;conferenceRank&#34;:&#34;8&#34;,&#34;conferenceRoadRank&#34;:&#34;11&#34;,&#34;divisionHomeRank&#34;:&#34;4&#34;,&#34;divisionL10Rank&#34;:&#34;5&#34;,&#34;divisionRank&#34;:&#34;4&#34;,&#34;divisionRoadRank&#34;:&#34;6&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:237,&#34;goalsScored&#34;:257,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;9&#34;,&#34;leagueL10Rank&#34;:&#34;24&#34;,&#34;leagueRank&#34;:&#34;17&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:30,&#34;ot&#34;:9,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:43},&#34;leagueRoadRank&#34;:&#34;22&#34;,&#34;points&#34;:95,&#34;pointsPercentage&#34;:0.5792682926829268,&#34;ppConferenceRank&#34;:&#34;8&#34;,&#34;ppDivisionRank&#34;:&#34;4&#34;,&#34;ppLeagueRank&#34;:&#34;17&#34;,&#34;row&#34;:41,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:21,&#34;link&#34;:&#34;/api/v1/teams/21&#34;,&#34;name&#34;:&#34;Colorado Avalanche&#34;},&#34;wildCardRank&#34;:&#34;2&#34;},{&#34;conferenceHomeRank&#34;:&#34;10&#34;,&#34;conferenceL10Rank&#34;:&#34;8&#34;,&#34;conferenceRank&#34;:&#34;9&#34;,&#34;conferenceRoadRank&#34;:&#34;6&#34;,&#34;divisionHomeRank&#34;:&#34;6&#34;,&#34;divisionL10Rank&#34;:&#34;3&#34;,&#34;divisionRank&#34;:&#34;5&#34;,&#34;divisionRoadRank&#34;:&#34;3&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:222,&#34;goalsScored&#34;:226,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;19&#34;,&#34;leagueL10Rank&#34;:&#34;17&#34;,&#34;leagueRank&#34;:&#34;18&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:32,&#34;ot&#34;:6,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:44},&#34;leagueRoadRank&#34;:&#34;11&#34;,&#34;points&#34;:94,&#34;pointsPercentage&#34;:0.573170731707317,&#34;ppConferenceRank&#34;:&#34;9&#34;,&#34;ppDivisionRank&#34;:&#34;5&#34;,&#34;ppLeagueRank&#34;:&#34;18&#34;,&#34;row&#34;:41,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:19,&#34;link&#34;:&#34;/api/v1/teams/19&#34;,&#34;name&#34;:&#34;St. Louis Blues&#34;},&#34;wildCardRank&#34;:&#34;3&#34;},{&#34;conferenceHomeRank&#34;:&#34;7&#34;,&#34;conferenceL10Rank&#34;:&#34;13&#34;,&#34;conferenceRank&#34;:&#34;10&#34;,&#34;conferenceRoadRank&#34;:&#34;10&#34;,&#34;divisionHomeRank&#34;:&#34;5&#34;,&#34;divisionL10Rank&#34;:&#34;6&#34;,&#34;divisionRank&#34;:&#34;6&#34;,&#34;divisionRoadRank&#34;:&#34;5&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:225,&#34;goalsScored&#34;:235,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;13&#34;,&#34;leagueL10Rank&#34;:&#34;25&#34;,&#34;leagueRank&#34;:&#34;19&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:32,&#34;ot&#34;:8,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:42},&#34;leagueRoadRank&#34;:&#34;21&#34;,&#34;points&#34;:92,&#34;pointsPercentage&#34;:0.5609756097560976,&#34;ppConferenceRank&#34;:&#34;10&#34;,&#34;ppDivisionRank&#34;:&#34;6&#34;,&#34;ppLeagueRank&#34;:&#34;19&#34;,&#34;row&#34;:38,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:25,&#34;link&#34;:&#34;/api/v1/teams/25&#34;,&#34;name&#34;:&#34;Dallas Stars&#34;},&#34;wildCardRank&#34;:&#34;4&#34;},{&#34;conferenceHomeRank&#34;:&#34;12&#34;,&#34;conferenceL10Rank&#34;:&#34;14&#34;,&#34;conferenceRank&#34;:&#34;13&#34;,&#34;conferenceRoadRank&#34;:&#34;13&#34;,&#34;divisionHomeRank&#34;:&#34;7&#34;,&#34;divisionL10Rank&#34;:&#34;7&#34;,&#34;divisionRank&#34;:&#34;7&#34;,&#34;divisionRoadRank&#34;:&#34;7&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:256,&#34;goalsScored&#34;:229,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;25&#34;,&#34;leagueL10Rank&#34;:&#34;26&#34;,&#34;leagueRank&#34;:&#34;25&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:39,&#34;ot&#34;:10,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:33},&#34;leagueRoadRank&#34;:&#34;24&#34;,&#34;points&#34;:76,&#34;pointsPercentage&#34;:0.4634146341463415,&#34;ppConferenceRank&#34;:&#34;13&#34;,&#34;ppDivisionRank&#34;:&#34;7&#34;,&#34;ppLeagueRank&#34;:&#34;25&#34;,&#34;row&#34;:32,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L2&#34;,&#34;streakNumber&#34;:2,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:16,&#34;link&#34;:&#34;/api/v1/teams/16&#34;,&#34;name&#34;:&#34;Chicago Blackhawks&#34;},&#34;wildCardRank&#34;:&#34;7&#34;}]},{&#34;conference&#34;:{&#34;id&#34;:6,&#34;link&#34;:&#34;/api/v1/conferences/6&#34;,&#34;name&#34;:&#34;Eastern&#34;},&#34;division&#34;:{&#34;abbreviation&#34;:&#34;A&#34;,&#34;id&#34;:17,&#34;link&#34;:&#34;/api/v1/divisions/17&#34;,&#34;name&#34;:&#34;Atlantic&#34;,&#34;nameShort&#34;:&#34;ATL&#34;},&#34;league&#34;:{&#34;id&#34;:133,&#34;link&#34;:&#34;/api/v1/league/133&#34;,&#34;name&#34;:&#34;National Hockey League&#34;},&#34;season&#34;:&#34;20032004&#34;,&#34;standingsType&#34;:&#34;regularSeason&#34;,&#34;teamRecords&#34;:[{&#34;clinchIndicator&#34;:&#34;z&#34;,&#34;conferenceHomeRank&#34;:&#34;3&#34;,&#34;conferenceL10Rank&#34;:&#34;9&#34;,&#34;conferenceRank&#34;:&#34;1&#34;,&#34;conferenceRoadRank&#34;:&#34;1&#34;,&#34;divisionHomeRank&#34;:&#34;2&#34;,&#34;divisionL10Rank&#34;:&#34;4&#34;,&#34;divisionRank&#34;:&#34;1&#34;,&#34;divisionRoadRank&#34;:&#34;1&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:236,&#34;goalsScored&#34;:296,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;6&#34;,&#34;leagueL10Rank&#34;:&#34;16&#34;,&#34;leagueRank&#34;:&#34;3&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:23,&#34;ot&#34;:5,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:54},&#34;leagueRoadRank&#34;:&#34;2&#34;,&#34;points&#34;:113,&#34;pointsPercentage&#34;:0.6890243902439024,&#34;ppConferenceRank&#34;:&#34;1&#34;,&#34;ppDivisionRank&#34;:&#34;1&#34;,&#34;ppLeagueRank&#34;:&#34;3&#34;,&#34;row&#34;:48,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;OT1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;ot&#34;},&#34;team&#34;:{&#34;id&#34;:14,&#34;link&#34;:&#34;/api/v1/teams/14&#34;,&#34;name&#34;:&#34;Tampa Bay Lightning&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;2&#34;,&#34;conferenceL10Rank&#34;:&#34;8&#34;,&#34;conferenceRank&#34;:&#34;2&#34;,&#34;conferenceRoadRank&#34;:&#34;2&#34;,&#34;divisionHomeRank&#34;:&#34;1&#34;,&#34;divisionL10Rank&#34;:&#34;3&#34;,&#34;divisionRank&#34;:&#34;2&#34;,&#34;divisionRoadRank&#34;:&#34;2&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:214,&#34;goalsScored&#34;:270,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;4&#34;,&#34;leagueL10Rank&#34;:&#34;12&#34;,&#34;leagueRank&#34;:&#34;4&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:20,&#34;ot&#34;:12,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:50},&#34;leagueRoadRank&#34;:&#34;3&#34;,&#34;points&#34;:112,&#34;pointsPercentage&#34;:0.6829268292682927,&#34;ppConferenceRank&#34;:&#34;2&#34;,&#34;ppDivisionRank&#34;:&#34;2&#34;,&#34;ppLeagueRank&#34;:&#34;4&#34;,&#34;row&#34;:47,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:6,&#34;link&#34;:&#34;/api/v1/teams/6&#34;,&#34;name&#34;:&#34;Boston Bruins&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;4&#34;,&#34;conferenceL10Rank&#34;:&#34;7&#34;,&#34;conferenceRank&#34;:&#34;4&#34;,&#34;conferenceRoadRank&#34;:&#34;6&#34;,&#34;divisionHomeRank&#34;:&#34;3&#34;,&#34;divisionL10Rank&#34;:&#34;2&#34;,&#34;divisionRank&#34;:&#34;3&#34;,&#34;divisionRoadRank&#34;:&#34;3&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:232,&#34;goalsScored&#34;:277,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;8&#34;,&#34;leagueL10Rank&#34;:&#34;11&#34;,&#34;leagueRank&#34;:&#34;7&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:26,&#34;ot&#34;:7,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:49},&#34;leagueRoadRank&#34;:&#34;13&#34;,&#34;points&#34;:105,&#34;pointsPercentage&#34;:0.6402439024390244,&#34;ppConferenceRank&#34;:&#34;4&#34;,&#34;ppDivisionRank&#34;:&#34;3&#34;,&#34;ppLeagueRank&#34;:&#34;7&#34;,&#34;row&#34;:42,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:10,&#34;link&#34;:&#34;/api/v1/teams/10&#34;,&#34;name&#34;:&#34;Toronto Maple Leafs&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;conferenceHomeRank&#34;:&#34;6&#34;,&#34;conferenceL10Rank&#34;:&#34;2&#34;,&#34;conferenceRank&#34;:&#34;9&#34;,&#34;conferenceRoadRank&#34;:&#34;8&#34;,&#34;divisionHomeRank&#34;:&#34;4&#34;,&#34;divisionL10Rank&#34;:&#34;1&#34;,&#34;divisionRank&#34;:&#34;4&#34;,&#34;divisionRoadRank&#34;:&#34;4&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:246,&#34;goalsScored&#34;:248,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;12&#34;,&#34;leagueL10Rank&#34;:&#34;4&#34;,&#34;leagueRank&#34;:&#34;16&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:30,&#34;ot&#34;:8,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:44},&#34;leagueRoadRank&#34;:&#34;16&#34;,&#34;points&#34;:96,&#34;pointsPercentage&#34;:0.5853658536585366,&#34;ppConferenceRank&#34;:&#34;9&#34;,&#34;ppDivisionRank&#34;:&#34;4&#34;,&#34;ppLeagueRank&#34;:&#34;16&#34;,&#34;row&#34;:41,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W5&#34;,&#34;streakNumber&#34;:5,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:13,&#34;link&#34;:&#34;/api/v1/teams/13&#34;,&#34;name&#34;:&#34;Florida Panthers&#34;},&#34;wildCardRank&#34;:&#34;3&#34;},{&#34;conferenceHomeRank&#34;:&#34;14&#34;,&#34;conferenceL10Rank&#34;:&#34;12&#34;,&#34;conferenceRank&#34;:&#34;13&#34;,&#34;conferenceRoadRank&#34;:&#34;13&#34;,&#34;divisionHomeRank&#34;:&#34;6&#34;,&#34;divisionL10Rank&#34;:&#34;5&#34;,&#34;divisionRank&#34;:&#34;5&#34;,&#34;divisionRoadRank&#34;:&#34;6&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:255,&#34;goalsScored&#34;:217,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;26&#34;,&#34;leagueL10Rank&#34;:&#34;23&#34;,&#34;leagueRank&#34;:&#34;27&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:39,&#34;ot&#34;:13,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:30},&#34;leagueRoadRank&#34;:&#34;28&#34;,&#34;points&#34;:73,&#34;pointsPercentage&#34;:0.4451219512195122,&#34;ppConferenceRank&#34;:&#34;13&#34;,&#34;ppDivisionRank&#34;:&#34;5&#34;,&#34;ppLeagueRank&#34;:&#34;27&#34;,&#34;row&#34;:25,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;OT1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;ot&#34;},&#34;team&#34;:{&#34;id&#34;:17,&#34;link&#34;:&#34;/api/v1/teams/17&#34;,&#34;name&#34;:&#34;Detroit Red Wings&#34;},&#34;wildCardRank&#34;:&#34;7&#34;},{&#34;conferenceHomeRank&#34;:&#34;11&#34;,&#34;conferenceL10Rank&#34;:&#34;13&#34;,&#34;conferenceRank&#34;:&#34;14&#34;,&#34;conferenceRoadRank&#34;:&#34;16&#34;,&#34;divisionHomeRank&#34;:&#34;5&#34;,&#34;divisionL10Rank&#34;:&#34;6&#34;,&#34;divisionRank&#34;:&#34;6&#34;,&#34;divisionRoadRank&#34;:&#34;8&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:264,&#34;goalsScored&#34;:209,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;21&#34;,&#34;leagueL10Rank&#34;:&#34;27&#34;,&#34;leagueRank&#34;:&#34;28&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:40,&#34;ot&#34;:13,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:29},&#34;leagueRoadRank&#34;:&#34;31&#34;,&#34;points&#34;:71,&#34;pointsPercentage&#34;:0.4329268292682927,&#34;ppConferenceRank&#34;:&#34;14&#34;,&#34;ppDivisionRank&#34;:&#34;6&#34;,&#34;ppLeagueRank&#34;:&#34;28&#34;,&#34;row&#34;:27,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:8,&#34;link&#34;:&#34;/api/v1/teams/8&#34;,&#34;name&#34;:&#34;Montr u00e9al Canadiens&#34;},&#34;wildCardRank&#34;:&#34;8&#34;},{&#34;conferenceHomeRank&#34;:&#34;15&#34;,&#34;conferenceL10Rank&#34;:&#34;16&#34;,&#34;conferenceRank&#34;:&#34;15&#34;,&#34;conferenceRoadRank&#34;:&#34;15&#34;,&#34;divisionHomeRank&#34;:&#34;7&#34;,&#34;divisionL10Rank&#34;:&#34;8&#34;,&#34;divisionRank&#34;:&#34;7&#34;,&#34;divisionRoadRank&#34;:&#34;7&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:291,&#34;goalsScored&#34;:221,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;29&#34;,&#34;leagueL10Rank&#34;:&#34;30&#34;,&#34;leagueRank&#34;:&#34;30&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:43,&#34;ot&#34;:11,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:28},&#34;leagueRoadRank&#34;:&#34;30&#34;,&#34;points&#34;:67,&#34;pointsPercentage&#34;:0.40853658536585363,&#34;ppConferenceRank&#34;:&#34;15&#34;,&#34;ppDivisionRank&#34;:&#34;7&#34;,&#34;ppLeagueRank&#34;:&#34;30&#34;,&#34;row&#34;:26,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L2&#34;,&#34;streakNumber&#34;:2,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:9,&#34;link&#34;:&#34;/api/v1/teams/9&#34;,&#34;name&#34;:&#34;Ottawa Senators&#34;},&#34;wildCardRank&#34;:&#34;9&#34;},{&#34;conferenceHomeRank&#34;:&#34;16&#34;,&#34;conferenceL10Rank&#34;:&#34;15&#34;,&#34;conferenceRank&#34;:&#34;16&#34;,&#34;conferenceRoadRank&#34;:&#34;12&#34;,&#34;divisionHomeRank&#34;:&#34;8&#34;,&#34;divisionL10Rank&#34;:&#34;7&#34;,&#34;divisionRank&#34;:&#34;8&#34;,&#34;divisionRoadRank&#34;:&#34;5&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:280,&#34;goalsScored&#34;:199,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;31&#34;,&#34;leagueL10Rank&#34;:&#34;29&#34;,&#34;leagueRank&#34;:&#34;31&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:45,&#34;ot&#34;:12,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:25},&#34;leagueRoadRank&#34;:&#34;25&#34;,&#34;points&#34;:62,&#34;pointsPercentage&#34;:0.3780487804878049,&#34;ppConferenceRank&#34;:&#34;16&#34;,&#34;ppDivisionRank&#34;:&#34;8&#34;,&#34;ppLeagueRank&#34;:&#34;31&#34;,&#34;row&#34;:24,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L4&#34;,&#34;streakNumber&#34;:4,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:7,&#34;link&#34;:&#34;/api/v1/teams/7&#34;,&#34;name&#34;:&#34;Buffalo Sabres&#34;},&#34;wildCardRank&#34;:&#34;10&#34;}]},{&#34;conference&#34;:{&#34;id&#34;:5,&#34;link&#34;:&#34;/api/v1/conferences/5&#34;,&#34;name&#34;:&#34;Western&#34;},&#34;division&#34;:{&#34;abbreviation&#34;:&#34;P&#34;,&#34;id&#34;:15,&#34;link&#34;:&#34;/api/v1/divisions/15&#34;,&#34;name&#34;:&#34;Pacific&#34;,&#34;nameShort&#34;:&#34;PAC&#34;},&#34;league&#34;:{&#34;id&#34;:133,&#34;link&#34;:&#34;/api/v1/league/133&#34;,&#34;name&#34;:&#34;National Hockey League&#34;},&#34;season&#34;:&#34;20032004&#34;,&#34;standingsType&#34;:&#34;regularSeason&#34;,&#34;teamRecords&#34;:[{&#34;clinchIndicator&#34;:&#34;y&#34;,&#34;conferenceHomeRank&#34;:&#34;3&#34;,&#34;conferenceL10Rank&#34;:&#34;6&#34;,&#34;conferenceRank&#34;:&#34;3&#34;,&#34;conferenceRoadRank&#34;:&#34;3&#34;,&#34;divisionHomeRank&#34;:&#34;1&#34;,&#34;divisionL10Rank&#34;:&#34;4&#34;,&#34;divisionRank&#34;:&#34;1&#34;,&#34;divisionRoadRank&#34;:&#34;2&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:228,&#34;goalsScored&#34;:272,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;5&#34;,&#34;leagueL10Rank&#34;:&#34;14&#34;,&#34;leagueRank&#34;:&#34;5&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:24,&#34;ot&#34;:7,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:51},&#34;leagueRoadRank&#34;:&#34;5&#34;,&#34;points&#34;:109,&#34;pointsPercentage&#34;:0.6646341463414634,&#34;ppConferenceRank&#34;:&#34;3&#34;,&#34;ppDivisionRank&#34;:&#34;1&#34;,&#34;ppLeagueRank&#34;:&#34;5&#34;,&#34;row&#34;:47,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L2&#34;,&#34;streakNumber&#34;:2,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:54,&#34;link&#34;:&#34;/api/v1/teams/54&#34;,&#34;name&#34;:&#34;Vegas Golden Knights&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;6&#34;,&#34;conferenceL10Rank&#34;:&#34;2&#34;,&#34;conferenceRank&#34;:&#34;5&#34;,&#34;conferenceRoadRank&#34;:&#34;8&#34;,&#34;divisionHomeRank&#34;:&#34;2&#34;,&#34;divisionL10Rank&#34;:&#34;1&#34;,&#34;divisionRank&#34;:&#34;2&#34;,&#34;divisionRoadRank&#34;:&#34;5&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:216,&#34;goalsScored&#34;:235,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;11&#34;,&#34;leagueL10Rank&#34;:&#34;2&#34;,&#34;leagueRank&#34;:&#34;9&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:25,&#34;ot&#34;:13,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:44},&#34;leagueRoadRank&#34;:&#34;14&#34;,&#34;points&#34;:101,&#34;pointsPercentage&#34;:0.6158536585365854,&#34;ppConferenceRank&#34;:&#34;5&#34;,&#34;ppDivisionRank&#34;:&#34;2&#34;,&#34;ppLeagueRank&#34;:&#34;9&#34;,&#34;row&#34;:40,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W5&#34;,&#34;streakNumber&#34;:5,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:24,&#34;link&#34;:&#34;/api/v1/teams/24&#34;,&#34;name&#34;:&#34;Anaheim Ducks&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;8&#34;,&#34;conferenceL10Rank&#34;:&#34;9&#34;,&#34;conferenceRank&#34;:&#34;6&#34;,&#34;conferenceRoadRank&#34;:&#34;5&#34;,&#34;divisionHomeRank&#34;:&#34;3&#34;,&#34;divisionL10Rank&#34;:&#34;6&#34;,&#34;divisionRank&#34;:&#34;3&#34;,&#34;divisionRoadRank&#34;:&#34;3&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:229,&#34;goalsScored&#34;:252,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;15&#34;,&#34;leagueL10Rank&#34;:&#34;18&#34;,&#34;leagueRank&#34;:&#34;11&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:27,&#34;ot&#34;:10,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:45},&#34;leagueRoadRank&#34;:&#34;10&#34;,&#34;points&#34;:100,&#34;pointsPercentage&#34;:0.6097560975609756,&#34;ppConferenceRank&#34;:&#34;6&#34;,&#34;ppDivisionRank&#34;:&#34;3&#34;,&#34;ppLeagueRank&#34;:&#34;10&#34;,&#34;row&#34;:40,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:28,&#34;link&#34;:&#34;/api/v1/teams/28&#34;,&#34;name&#34;:&#34;San Jose Sharks&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;9&#34;,&#34;conferenceL10Rank&#34;:&#34;3&#34;,&#34;conferenceRank&#34;:&#34;7&#34;,&#34;conferenceRoadRank&#34;:&#34;2&#34;,&#34;divisionHomeRank&#34;:&#34;4&#34;,&#34;divisionL10Rank&#34;:&#34;2&#34;,&#34;divisionRank&#34;:&#34;4&#34;,&#34;divisionRoadRank&#34;:&#34;1&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:203,&#34;goalsScored&#34;:239,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;18&#34;,&#34;leagueL10Rank&#34;:&#34;8&#34;,&#34;leagueRank&#34;:&#34;12&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:29,&#34;ot&#34;:8,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:45},&#34;leagueRoadRank&#34;:&#34;4&#34;,&#34;points&#34;:98,&#34;pointsPercentage&#34;:0.5975609756097561,&#34;ppConferenceRank&#34;:&#34;7&#34;,&#34;ppDivisionRank&#34;:&#34;4&#34;,&#34;ppLeagueRank&#34;:&#34;12&#34;,&#34;row&#34;:43,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:26,&#34;link&#34;:&#34;/api/v1/teams/26&#34;,&#34;name&#34;:&#34;Los Angeles Kings&#34;},&#34;wildCardRank&#34;:&#34;1&#34;},{&#34;conferenceHomeRank&#34;:&#34;14&#34;,&#34;conferenceL10Rank&#34;:&#34;15&#34;,&#34;conferenceRank&#34;:&#34;11&#34;,&#34;conferenceRoadRank&#34;:&#34;7&#34;,&#34;divisionHomeRank&#34;:&#34;7&#34;,&#34;divisionL10Rank&#34;:&#34;8&#34;,&#34;divisionRank&#34;:&#34;5&#34;,&#34;divisionRoadRank&#34;:&#34;4&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:248,&#34;goalsScored&#34;:218,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;28&#34;,&#34;leagueL10Rank&#34;:&#34;31&#34;,&#34;leagueRank&#34;:&#34;20&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:35,&#34;ot&#34;:10,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:37},&#34;leagueRoadRank&#34;:&#34;12&#34;,&#34;points&#34;:84,&#34;pointsPercentage&#34;:0.5121951219512195,&#34;ppConferenceRank&#34;:&#34;11&#34;,&#34;ppDivisionRank&#34;:&#34;5&#34;,&#34;ppLeagueRank&#34;:&#34;20&#34;,&#34;row&#34;:35,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:20,&#34;link&#34;:&#34;/api/v1/teams/20&#34;,&#34;name&#34;:&#34;Calgary Flames&#34;},&#34;wildCardRank&#34;:&#34;5&#34;},{&#34;conferenceHomeRank&#34;:&#34;11&#34;,&#34;conferenceL10Rank&#34;:&#34;10&#34;,&#34;conferenceRank&#34;:&#34;12&#34;,&#34;conferenceRoadRank&#34;:&#34;12&#34;,&#34;divisionHomeRank&#34;:&#34;5&#34;,&#34;divisionL10Rank&#34;:&#34;7&#34;,&#34;divisionRank&#34;:&#34;6&#34;,&#34;divisionRoadRank&#34;:&#34;6&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:263,&#34;goalsScored&#34;:234,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;24&#34;,&#34;leagueL10Rank&#34;:&#34;19&#34;,&#34;leagueRank&#34;:&#34;23&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:40,&#34;ot&#34;:6,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:36},&#34;leagueRoadRank&#34;:&#34;23&#34;,&#34;points&#34;:78,&#34;pointsPercentage&#34;:0.47560975609756095,&#34;ppConferenceRank&#34;:&#34;12&#34;,&#34;ppDivisionRank&#34;:&#34;6&#34;,&#34;ppLeagueRank&#34;:&#34;23&#34;,&#34;row&#34;:31,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W2&#34;,&#34;streakNumber&#34;:2,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:22,&#34;link&#34;:&#34;/api/v1/teams/22&#34;,&#34;name&#34;:&#34;Edmonton Oilers&#34;},&#34;wildCardRank&#34;:&#34;6&#34;},{&#34;conferenceHomeRank&#34;:&#34;13&#34;,&#34;conferenceL10Rank&#34;:&#34;4&#34;,&#34;conferenceRank&#34;:&#34;14&#34;,&#34;conferenceRoadRank&#34;:&#34;14&#34;,&#34;divisionHomeRank&#34;:&#34;6&#34;,&#34;divisionL10Rank&#34;:&#34;3&#34;,&#34;divisionRank&#34;:&#34;7&#34;,&#34;divisionRoadRank&#34;:&#34;7&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:264,&#34;goalsScored&#34;:218,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;27&#34;,&#34;leagueL10Rank&#34;:&#34;9&#34;,&#34;leagueRank&#34;:&#34;26&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:40,&#34;ot&#34;:11,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:31},&#34;leagueRoadRank&#34;:&#34;26&#34;,&#34;points&#34;:73,&#34;pointsPercentage&#34;:0.4451219512195122,&#34;ppConferenceRank&#34;:&#34;14&#34;,&#34;ppDivisionRank&#34;:&#34;7&#34;,&#34;ppLeagueRank&#34;:&#34;26&#34;,&#34;row&#34;:31,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;OT1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;ot&#34;},&#34;team&#34;:{&#34;id&#34;:23,&#34;link&#34;:&#34;/api/v1/teams/23&#34;,&#34;name&#34;:&#34;Vancouver Canucks&#34;},&#34;wildCardRank&#34;:&#34;8&#34;},{&#34;conferenceHomeRank&#34;:&#34;15&#34;,&#34;conferenceL10Rank&#34;:&#34;7&#34;,&#34;conferenceRank&#34;:&#34;15&#34;,&#34;conferenceRoadRank&#34;:&#34;15&#34;,&#34;divisionHomeRank&#34;:&#34;8&#34;,&#34;divisionL10Rank&#34;:&#34;5&#34;,&#34;divisionRank&#34;:&#34;8&#34;,&#34;divisionRoadRank&#34;:&#34;8&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:256,&#34;goalsScored&#34;:208,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;30&#34;,&#34;leagueL10Rank&#34;:&#34;15&#34;,&#34;leagueRank&#34;:&#34;29&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:41,&#34;ot&#34;:12,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:29},&#34;leagueRoadRank&#34;:&#34;27&#34;,&#34;points&#34;:70,&#34;pointsPercentage&#34;:0.4268292682926829,&#34;ppConferenceRank&#34;:&#34;15&#34;,&#34;ppDivisionRank&#34;:&#34;8&#34;,&#34;ppLeagueRank&#34;:&#34;29&#34;,&#34;row&#34;:27,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:53,&#34;link&#34;:&#34;/api/v1/teams/53&#34;,&#34;name&#34;:&#34;Arizona Coyotes&#34;},&#34;wildCardRank&#34;:&#34;9&#34;}]},{&#34;conference&#34;:{&#34;id&#34;:6,&#34;link&#34;:&#34;/api/v1/conferences/6&#34;,&#34;name&#34;:&#34;Eastern&#34;},&#34;division&#34;:{&#34;abbreviation&#34;:&#34;M&#34;,&#34;id&#34;:18,&#34;link&#34;:&#34;/api/v1/divisions/18&#34;,&#34;name&#34;:&#34;Metropolitan&#34;,&#34;nameShort&#34;:&#34;Metro&#34;},&#34;league&#34;:{&#34;id&#34;:133,&#34;link&#34;:&#34;/api/v1/league/133&#34;,&#34;name&#34;:&#34;National Hockey League&#34;},&#34;season&#34;:&#34;20032004&#34;,&#34;standingsType&#34;:&#34;regularSeason&#34;,&#34;teamRecords&#34;:[{&#34;clinchIndicator&#34;:&#34;y&#34;,&#34;conferenceHomeRank&#34;:&#34;5&#34;,&#34;conferenceL10Rank&#34;:&#34;1&#34;,&#34;conferenceRank&#34;:&#34;3&#34;,&#34;conferenceRoadRank&#34;:&#34;4&#34;,&#34;divisionHomeRank&#34;:&#34;2&#34;,&#34;divisionL10Rank&#34;:&#34;1&#34;,&#34;divisionRank&#34;:&#34;1&#34;,&#34;divisionRoadRank&#34;:&#34;2&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:239,&#34;goalsScored&#34;:259,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;10&#34;,&#34;leagueL10Rank&#34;:&#34;3&#34;,&#34;leagueRank&#34;:&#34;6&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:26,&#34;ot&#34;:7,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:49},&#34;leagueRoadRank&#34;:&#34;8&#34;,&#34;points&#34;:105,&#34;pointsPercentage&#34;:0.6402439024390244,&#34;ppConferenceRank&#34;:&#34;3&#34;,&#34;ppDivisionRank&#34;:&#34;1&#34;,&#34;ppLeagueRank&#34;:&#34;6&#34;,&#34;row&#34;:46,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:15,&#34;link&#34;:&#34;/api/v1/teams/15&#34;,&#34;name&#34;:&#34;Washington Capitals&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;1&#34;,&#34;conferenceL10Rank&#34;:&#34;6&#34;,&#34;conferenceRank&#34;:&#34;5&#34;,&#34;conferenceRoadRank&#34;:&#34;10&#34;,&#34;divisionHomeRank&#34;:&#34;1&#34;,&#34;divisionL10Rank&#34;:&#34;5&#34;,&#34;divisionRank&#34;:&#34;2&#34;,&#34;divisionRoadRank&#34;:&#34;6&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:250,&#34;goalsScored&#34;:272,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;2&#34;,&#34;leagueL10Rank&#34;:&#34;10&#34;,&#34;leagueRank&#34;:&#34;10&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:29,&#34;ot&#34;:6,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:47},&#34;leagueRoadRank&#34;:&#34;19&#34;,&#34;points&#34;:100,&#34;pointsPercentage&#34;:0.6097560975609756,&#34;ppConferenceRank&#34;:&#34;5&#34;,&#34;ppDivisionRank&#34;:&#34;2&#34;,&#34;ppLeagueRank&#34;:&#34;11&#34;,&#34;row&#34;:45,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W2&#34;,&#34;streakNumber&#34;:2,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:5,&#34;link&#34;:&#34;/api/v1/teams/5&#34;,&#34;name&#34;:&#34;Pittsburgh Penguins&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;8&#34;,&#34;conferenceL10Rank&#34;:&#34;4&#34;,&#34;conferenceRank&#34;:&#34;6&#34;,&#34;conferenceRoadRank&#34;:&#34;3&#34;,&#34;divisionHomeRank&#34;:&#34;4&#34;,&#34;divisionL10Rank&#34;:&#34;3&#34;,&#34;divisionRank&#34;:&#34;3&#34;,&#34;divisionRoadRank&#34;:&#34;1&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:243,&#34;goalsScored&#34;:251,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;16&#34;,&#34;leagueL10Rank&#34;:&#34;6&#34;,&#34;leagueRank&#34;:&#34;13&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:26,&#34;ot&#34;:14,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:42},&#34;leagueRoadRank&#34;:&#34;7&#34;,&#34;points&#34;:98,&#34;pointsPercentage&#34;:0.5975609756097561,&#34;ppConferenceRank&#34;:&#34;6&#34;,&#34;ppDivisionRank&#34;:&#34;3&#34;,&#34;ppLeagueRank&#34;:&#34;13&#34;,&#34;row&#34;:40,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W2&#34;,&#34;streakNumber&#34;:2,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:4,&#34;link&#34;:&#34;/api/v1/teams/4&#34;,&#34;name&#34;:&#34;Philadelphia Flyers&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;7&#34;,&#34;conferenceL10Rank&#34;:&#34;5&#34;,&#34;conferenceRank&#34;:&#34;7&#34;,&#34;conferenceRoadRank&#34;:&#34;7&#34;,&#34;divisionHomeRank&#34;:&#34;3&#34;,&#34;divisionL10Rank&#34;:&#34;4&#34;,&#34;divisionRank&#34;:&#34;4&#34;,&#34;divisionRoadRank&#34;:&#34;4&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:230,&#34;goalsScored&#34;:242,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;14&#34;,&#34;leagueL10Rank&#34;:&#34;7&#34;,&#34;leagueRank&#34;:&#34;14&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:30,&#34;ot&#34;:7,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:45},&#34;leagueRoadRank&#34;:&#34;15&#34;,&#34;points&#34;:97,&#34;pointsPercentage&#34;:0.5914634146341463,&#34;ppConferenceRank&#34;:&#34;8&#34;,&#34;ppDivisionRank&#34;:&#34;5&#34;,&#34;ppLeagueRank&#34;:&#34;15&#34;,&#34;row&#34;:39,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:29,&#34;link&#34;:&#34;/api/v1/teams/29&#34;,&#34;name&#34;:&#34;Columbus Blue Jackets&#34;},&#34;wildCardRank&#34;:&#34;1&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;9&#34;,&#34;conferenceL10Rank&#34;:&#34;3&#34;,&#34;conferenceRank&#34;:&#34;8&#34;,&#34;conferenceRoadRank&#34;:&#34;5&#34;,&#34;divisionHomeRank&#34;:&#34;5&#34;,&#34;divisionL10Rank&#34;:&#34;2&#34;,&#34;divisionRank&#34;:&#34;5&#34;,&#34;divisionRoadRank&#34;:&#34;3&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:244,&#34;goalsScored&#34;:248,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;17&#34;,&#34;leagueL10Rank&#34;:&#34;5&#34;,&#34;leagueRank&#34;:&#34;15&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:29,&#34;ot&#34;:9,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:44},&#34;leagueRoadRank&#34;:&#34;9&#34;,&#34;points&#34;:97,&#34;pointsPercentage&#34;:0.5914634146341463,&#34;ppConferenceRank&#34;:&#34;7&#34;,&#34;ppDivisionRank&#34;:&#34;4&#34;,&#34;ppLeagueRank&#34;:&#34;14&#34;,&#34;row&#34;:39,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:1,&#34;link&#34;:&#34;/api/v1/teams/1&#34;,&#34;name&#34;:&#34;New Jersey Devils&#34;},&#34;wildCardRank&#34;:&#34;2&#34;},{&#34;conferenceHomeRank&#34;:&#34;12&#34;,&#34;conferenceL10Rank&#34;:&#34;10&#34;,&#34;conferenceRank&#34;:&#34;10&#34;,&#34;conferenceRoadRank&#34;:&#34;9&#34;,&#34;divisionHomeRank&#34;:&#34;7&#34;,&#34;divisionL10Rank&#34;:&#34;6&#34;,&#34;divisionRank&#34;:&#34;6&#34;,&#34;divisionRoadRank&#34;:&#34;5&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:256,&#34;goalsScored&#34;:228,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;22&#34;,&#34;leagueL10Rank&#34;:&#34;21&#34;,&#34;leagueRank&#34;:&#34;21&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:35,&#34;ot&#34;:11,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:36},&#34;leagueRoadRank&#34;:&#34;18&#34;,&#34;points&#34;:83,&#34;pointsPercentage&#34;:0.5060975609756098,&#34;ppConferenceRank&#34;:&#34;10&#34;,&#34;ppDivisionRank&#34;:&#34;6&#34;,&#34;ppLeagueRank&#34;:&#34;21&#34;,&#34;row&#34;:33,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:12,&#34;link&#34;:&#34;/api/v1/teams/12&#34;,&#34;name&#34;:&#34;Carolina Hurricanes&#34;},&#34;wildCardRank&#34;:&#34;4&#34;},{&#34;conferenceHomeRank&#34;:&#34;13&#34;,&#34;conferenceL10Rank&#34;:&#34;11&#34;,&#34;conferenceRank&#34;:&#34;11&#34;,&#34;conferenceRoadRank&#34;:&#34;11&#34;,&#34;divisionHomeRank&#34;:&#34;8&#34;,&#34;divisionL10Rank&#34;:&#34;7&#34;,&#34;divisionRank&#34;:&#34;7&#34;,&#34;divisionRoadRank&#34;:&#34;7&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:296,&#34;goalsScored&#34;:264,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;23&#34;,&#34;leagueL10Rank&#34;:&#34;22&#34;,&#34;leagueRank&#34;:&#34;22&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:37,&#34;ot&#34;:10,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:35},&#34;leagueRoadRank&#34;:&#34;20&#34;,&#34;points&#34;:80,&#34;pointsPercentage&#34;:0.4878048780487805,&#34;ppConferenceRank&#34;:&#34;11&#34;,&#34;ppDivisionRank&#34;:&#34;7&#34;,&#34;ppLeagueRank&#34;:&#34;22&#34;,&#34;row&#34;:32,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W3&#34;,&#34;streakNumber&#34;:3,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:2,&#34;link&#34;:&#34;/api/v1/teams/2&#34;,&#34;name&#34;:&#34;New York Islanders&#34;},&#34;wildCardRank&#34;:&#34;5&#34;},{&#34;conferenceHomeRank&#34;:&#34;10&#34;,&#34;conferenceL10Rank&#34;:&#34;14&#34;,&#34;conferenceRank&#34;:&#34;12&#34;,&#34;conferenceRoadRank&#34;:&#34;14&#34;,&#34;divisionHomeRank&#34;:&#34;6&#34;,&#34;divisionL10Rank&#34;:&#34;8&#34;,&#34;divisionRank&#34;:&#34;8&#34;,&#34;divisionRoadRank&#34;:&#34;8&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:268,&#34;goalsScored&#34;:231,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;20&#34;,&#34;leagueL10Rank&#34;:&#34;28&#34;,&#34;leagueRank&#34;:&#34;24&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:39,&#34;ot&#34;:9,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:34},&#34;leagueRoadRank&#34;:&#34;29&#34;,&#34;points&#34;:77,&#34;pointsPercentage&#34;:0.4695121951219512,&#34;ppConferenceRank&#34;:&#34;12&#34;,&#34;ppDivisionRank&#34;:&#34;8&#34;,&#34;ppLeagueRank&#34;:&#34;24&#34;,&#34;row&#34;:31,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L3&#34;,&#34;streakNumber&#34;:3,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:3,&#34;link&#34;:&#34;/api/v1/teams/3&#34;,&#34;name&#34;:&#34;New York Rangers&#34;},&#34;wildCardRank&#34;:&#34;6&#34;}]}]} Standings . AttributeError Traceback (most recent call last) /vscode/ahadsblog/_notebooks/2020-02-02-api2.ipynb Cell 1 in &lt;cell line: 18&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2020-02-02-api2.ipynb#W0sdnNjb2RlLXJlbW90ZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; print(&#34;Standings&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2020-02-02-api2.ipynb#W0sdnNjb2RlLXJlbW90ZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; standing = response.json().get(&#34;id&#34;) &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2020-02-02-api2.ipynb#W0sdnNjb2RlLXJlbW90ZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; for key, value in id.items(): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2020-02-02-api2.ipynb#W0sdnNjb2RlLXJlbW90ZQ%3D%3D?line=18&#39;&gt;19&lt;/a&gt; print(key, value) AttributeError: &#39;builtin_function_or_method&#39; object has no attribute &#39;items&#39; .",
            "url": "https://ahadb63.github.io/ahadsblog/api/hockey/2020/02/02/api2.html",
            "relUrl": "/api/hockey/2020/02/02/api2.html",
            "date": " • Feb 2, 2020"
        }
        
    
  
    
        ,"post53": {
            "title": "Java Kernel Test",
            "content": "console.log(&quot;hello&quot;) . hello .",
            "url": "https://ahadb63.github.io/ahadsblog/kerneltest/2020/02/02/KernelWorking.html",
            "relUrl": "/kerneltest/2020/02/02/KernelWorking.html",
            "date": " • Feb 2, 2020"
        }
        
    
  
    
        ,"post54": {
            "title": "Final Project Design",
            "content": "Roles . ahad - devops | sabine - frontend | dash - backend | aiden - scrum master | . Our Project . Our project is a website where there will be ltos of minigames to play Minigames will be divided by category . Ex: Board games, Math games, Puzzle games | . What games are we making? . ahad - NA | sabine - NA | dash- blackjack and mario | aiden - tetris | .",
            "url": "https://ahadb63.github.io/ahadsblog/final/project/2020/02/02/Final-Project-Design.html",
            "relUrl": "/final/project/2020/02/02/Final-Project-Design.html",
            "date": " • Feb 2, 2020"
        }
        
    
  
    
        ,"post55": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://ahadb63.github.io/ahadsblog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  

  
      ,"page2": {
          "title": "About Me",
          "content": "about me . Student at DNHS | Graduating class of 2024 | .",
          "url": "https://ahadb63.github.io/ahadsblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  

  
      ,"page9": {
          "title": "Vocab and Notes",
          "content": "Vocab and Notes . Print : The print() function prints the specified message to the screen, or other standard output device. The message can be a string, or any other object, the object will be converted into a string before written to the screen. . | Kernel : The kernel is a computer program at the core of a computer’s operating system and generally has complete control over everything in the system. It is the portion of the operating system code that is always resident in memory and facilitates interactions between hardware and software components. . | Lists [] : A way of grouping data in an ordered sequence . | Dictionaries {} : A way of grouping data into in key-value relationships. Dictionaries are similar to JavaScript Object Notation (JSON). . |",
          "url": "https://ahadb63.github.io/ahadsblog/Vocab/",
          "relUrl": "/Vocab/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page17": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ahadb63.github.io/ahadsblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}