{
  
    
        "post0": {
            "title": "List and Dictionaries",
            "content": "# &quot;List and Dictionaries&quot; &gt; &quot;Customized list and dictionary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . List and Dictionaries . This section is personalized to me and shows the things I like. This uses iteration - while loop . ThingsILike = [] ThingsILike.append({ &quot;FirstName&quot;: &quot;Ahad&quot; &quot;LastName:&quot; &quot;Biabani&quot; &quot;FavoriteFood:&quot; &quot;Steak&quot;, &quot;FavoriteSport&quot;: &quot;Ice Hockey&quot;, &quot;FavoriteVideoGame&quot;: &quot;BattleField 1&quot;, &quot;FavoriteArtist&quot;: &quot;Destroy Lonely&quot;, &quot;Hobbies&quot;: &quot;Ice Hockey and Video Games&quot;, &quot;FavoriteSubject&quot;: &quot;APCSP&quot; }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;FavoriteFood:&quot;, d_rec[&quot;FavoriteFood&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;FavoriteSport:&quot;, d_rec[&quot;FavoriteSport&quot;]) print(&quot; t&quot;, &quot;FavoriteVideoGame:&quot;, d_rec[&quot;FavoriteVideoGame&quot;]) print(&quot; t&quot;, &quot;FavoriteArtist:&quot;, d_rec[&quot;FavoriteArtist&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;,d_rec[&quot;Hobbies&quot;]) print(&quot; t&quot;, &quot;FavoriteSubject: &quot;,d_rec[&quot;FavoriteSubject&quot;]) print(end= &quot;&quot;) print() print(ThingsILike) #for loop algorithm iterates on length of Things I Like def while_loop():# while loop algorithm contains an initial n and an index incrementing statement (n += 1) print(&quot;While loop output n&quot;) i = 0 while i &lt; len(ThingsILike): record = ThingsILike[i] print_data(record) i += 1 return while_loop() # while loop algorithm contains an initial n and an index incrementing statement (n += 1) . This section is also personalized to me. This section uses iteration - for loop . AboutMe = [] AboutMe.append({ &quot;FirstName&quot;: &quot;Ahad&quot;, &quot;LastName&quot;: &quot;Biabani&quot;, &quot;DOB&quot;: &quot;Sept 18&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;aobiabain@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) print() def for_loop(): print(&quot;For loop output n&quot;) for record in AboutMe: print_data(record) for_loop() . . For loop output Ahad Biabani Email: aobiabain@gmail.com Residence: San Diego Birth Day: Sept 18 Cars: None . This section is also personalized to me. This uses iteration - recursive loop . AboutMe = [] AboutMe.append({ &quot;FirstName&quot;: &quot;Ahad&quot;, &quot;LastName&quot;: &quot;Biabani&quot;, &quot;DOB&quot;: &quot;Sept 18&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;aobiabain@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) print() def recursive_loop(i): if i &lt; len(AboutMe): record = AboutMe[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) # recursion algorithm loops incrementing on each call (n + 1) until exit condition is met . . Recursive loop output Ahad Biabani Email: aobiabain@gmail.com Residence: San Diego Birth Day: Sept 18 Cars: None . This is a quiz stored in a list . questions = 4 # number of quiz questions correct = 0 # initialize number of correct answers as 0 print(&quot;This is a 4 question quiz&quot;) def question_and_answer(prompt, answer): print(&quot;Question: &quot; + prompt) # asks user a question user_input = input() # takes user&#39;s input as variable msg print(&quot;Answer: &quot; + user_input) # print user&#39;s input as Answer if answer == user_input.lower(): # convert user&#39;s input to lowercase print(&quot;Correct Answer&quot;) global correct # allows to modify variable outside of current scope correct += 1 # add 1 to correct count else: print (&quot;Incorrect Answer&quot;) return user_input question_1 = question_and_answer(&quot;What is Ahads last name?&quot;, &quot;Biabani&quot;) question_2 = question_and_answer(&quot;What sport does Ahad play&quot;, &quot;Ice Hockey&quot;) question_3 = question_and_answer(&quot;How old is Ahad&quot;, &quot;16&quot;) question_4 = question_and_answer(&quot;When is his birthday?&quot;, &quot;September 18th&quot;) if correct &lt; 3: print(&#39;You scored {correct} correct answers out of 4, ur bad&#39;) elif correct &lt; 5: print(&#39;You scored {correct} correct answers out of 4, okay&#39;) else: print(&#39;You scored {correct} correct answers out of 4, good&#39;) print(&quot;A record of your quiz:&quot;) . This is a 4 question quiz Question: What is Ahads last name? .",
            "url": "https://ahadb63.github.io/ahadsblog/markdown/2023/05/01/list-and-dictionaries.html",
            "relUrl": "/markdown/2023/05/01/list-and-dictionaries.html",
            "date": " • May 1, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "MCQ score and corrections",
            "content": ". Q15: Which of the following CANNOT be determined using only the information in the database? . A --&gt; A) This option is incorrect. The database can be filtered to identify the movies that match with each entry under the column titled Movie Title. Those rows can be compared to calculate the largest value of entries under the column titled Number of Times Purchased. .",
            "url": "https://ahadb63.github.io/ahadsblog/mcq/2023/05/01/MCQ-4.html",
            "relUrl": "/mcq/2023/05/01/MCQ-4.html",
            "date": " • May 1, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "DevOps 4/26 hacks",
            "content": "import socket # Change the following host and see what IP it prints! host = &quot;nhl.com&quot; ip = socket.gethostbyname(host) print(ip) . 104.18.17.236 . with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.connect((ip, 80)) print(&quot;Successfully connected!&quot;) . Successfully connected! . Check-In . What is an IP address? An IP (Internet Protocol) address is a numerical label assigned to every device connected to a computer network that uses the Internet Protocol for communication. It serves as a unique identifier for the device and allows it to communicate with other devices on the network. | . | What is a TCP port? In computer networking, a TCP (Transmission Control Protocol) port is a virtual communication endpoint that enables two devices to establish a connection and exchange data over the internet or a network. | . | with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.connect((ip, 80)) # Send a GET request to &quot;/&quot; s.sendall(b&quot;GET / HTTP/1.1 r n r n&quot;) # Recieve &amp; print 2048 bytes of data data = s.recv(2048) print(data.decode()) . HTTP/1.1 400 Bad Request Server: cloudflare Date: Mon, 01 May 2023 23:24:27 GMT Content-Type: text/html Content-Length: 155 Connection: close CF-RAY: - &lt;html&gt; &lt;head&gt;&lt;title&gt;400 Bad Request&lt;/title&gt;&lt;/head&gt; &lt;body&gt; &lt;center&gt;&lt;h1&gt;400 Bad Request&lt;/h1&gt;&lt;/center&gt; &lt;hr&gt;&lt;center&gt;cloudflare&lt;/center&gt; &lt;/body&gt; &lt;/html&gt; . import requests # Change the URL to whatever you&#39;d like response = requests.get(&quot;https://google.com&quot;) print(&quot;Status code:&quot;, response.status_code) print(&quot;Headers:&quot;, response.headers) print(&quot;Response text:&quot;, response.text[:100]) print(&quot;Content-Type:&quot;, response.headers) # Add a line to print the &quot;Content-Type&quot; header of the response # Try an image URL! . Status code: 200 Headers: {&#39;Date&#39;: &#39;Mon, 01 May 2023 23:25:41 GMT&#39;, &#39;Expires&#39;: &#39;-1&#39;, &#39;Cache-Control&#39;: &#39;private, max-age=0&#39;, &#39;Content-Type&#39;: &#39;text/html; charset=ISO-8859-1&#39;, &#39;Content-Security-Policy-Report-Only&#39;: &#34;object-src &#39;none&#39;;base-uri &#39;self&#39;;script-src &#39;nonce-sdjLIksrqvc0n2tPynQo2w&#39; &#39;strict-dynamic&#39; &#39;report-sample&#39; &#39;unsafe-eval&#39; &#39;unsafe-inline&#39; https: http:;report-uri https://csp.withgoogle.com/csp/gws/other-hp&#34;, &#39;P3P&#39;: &#39;CP=&#34;This is not a P3P policy! See g.co/p3phelp for more info.&#34;&#39;, &#39;Content-Encoding&#39;: &#39;gzip&#39;, &#39;Server&#39;: &#39;gws&#39;, &#39;X-XSS-Protection&#39;: &#39;0&#39;, &#39;X-Frame-Options&#39;: &#39;SAMEORIGIN&#39;, &#39;Set-Cookie&#39;: &#39;1P_JAR=2023-05-01-23; expires=Wed, 31-May-2023 23:25:41 GMT; path=/; domain=.google.com; Secure, AEC=AUEFqZdRJPsYavtkqZTPWUzDzUGf5z6krYS7TiH-MzuAoUiJ_dRuAuT1Rw; expires=Sat, 28-Oct-2023 23:25:41 GMT; path=/; domain=.google.com; Secure; HttpOnly; SameSite=lax, NID=511=UgbiJSNYjreqCbo-kQ7usTaZjwq2jxFyqE6uJX0A8ZZGZl4cMDzl3M0PSpqtZSANS2EX2DIQeyAclM6x8NBYoyY_J7oZIXtIAgliQMx2p7kaJg_u00oNnK_yH-OSjPgnyblgyWyEPNblJjYu_XJLOHkxuWxPFgR8B09tzrs55bU; expires=Tue, 31-Oct-2023 23:25:41 GMT; path=/; domain=.google.com; HttpOnly&#39;, &#39;Alt-Svc&#39;: &#39;h3=&#34;:443&#34;; ma=2592000,h3-29=&#34;:443&#34;; ma=2592000&#39;, &#39;Transfer-Encoding&#39;: &#39;chunked&#39;} Response text: &lt;!doctype html&gt;&lt;html itemscope=&#34;&#34; itemtype=&#34;http://schema.org/WebPage&#34; lang=&#34;en&#34;&gt;&lt;head&gt;&lt;meta content Content-Type: {&#39;Date&#39;: &#39;Mon, 01 May 2023 23:25:41 GMT&#39;, &#39;Expires&#39;: &#39;-1&#39;, &#39;Cache-Control&#39;: &#39;private, max-age=0&#39;, &#39;Content-Type&#39;: &#39;text/html; charset=ISO-8859-1&#39;, &#39;Content-Security-Policy-Report-Only&#39;: &#34;object-src &#39;none&#39;;base-uri &#39;self&#39;;script-src &#39;nonce-sdjLIksrqvc0n2tPynQo2w&#39; &#39;strict-dynamic&#39; &#39;report-sample&#39; &#39;unsafe-eval&#39; &#39;unsafe-inline&#39; https: http:;report-uri https://csp.withgoogle.com/csp/gws/other-hp&#34;, &#39;P3P&#39;: &#39;CP=&#34;This is not a P3P policy! See g.co/p3phelp for more info.&#34;&#39;, &#39;Content-Encoding&#39;: &#39;gzip&#39;, &#39;Server&#39;: &#39;gws&#39;, &#39;X-XSS-Protection&#39;: &#39;0&#39;, &#39;X-Frame-Options&#39;: &#39;SAMEORIGIN&#39;, &#39;Set-Cookie&#39;: &#39;1P_JAR=2023-05-01-23; expires=Wed, 31-May-2023 23:25:41 GMT; path=/; domain=.google.com; Secure, AEC=AUEFqZdRJPsYavtkqZTPWUzDzUGf5z6krYS7TiH-MzuAoUiJ_dRuAuT1Rw; expires=Sat, 28-Oct-2023 23:25:41 GMT; path=/; domain=.google.com; Secure; HttpOnly; SameSite=lax, NID=511=UgbiJSNYjreqCbo-kQ7usTaZjwq2jxFyqE6uJX0A8ZZGZl4cMDzl3M0PSpqtZSANS2EX2DIQeyAclM6x8NBYoyY_J7oZIXtIAgliQMx2p7kaJg_u00oNnK_yH-OSjPgnyblgyWyEPNblJjYu_XJLOHkxuWxPFgR8B09tzrs55bU; expires=Tue, 31-Oct-2023 23:25:41 GMT; path=/; domain=.google.com; HttpOnly&#39;, &#39;Alt-Svc&#39;: &#39;h3=&#34;:443&#34;; ma=2592000,h3-29=&#34;:443&#34;; ma=2592000&#39;, &#39;Transfer-Encoding&#39;: &#39;chunked&#39;} . aws = &quot;3.130.255.192&quot; response = requests.get(&quot;http://&quot; + aws) print(response.text) . &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Cool site&lt;/title&gt; &lt;meta name=&#34;description&#34; content=&#34;cool site for apcsp&#34;&gt; &lt;/head&gt; &lt;body&gt; Hello, this is my cool site. Check out my products: &lt;a href=&#34;/products&#34;&gt;Products!!&lt;/a&gt; &lt;/body&gt; &lt;/html&gt; . Configuration . server { // Listen on virtual &quot;port 80&quot; listen 80; listen [::]:80; server_name 3.130.255.192; location / { // Inform server about original client proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; // Forward all requests transparently to the server running on our computer proxy_pass http://localhost:9099; } } . Load Balancing . upstream example.com { server server1.example.com; server server1.example.com; } . HTTP Headers . server { add_header X-Cool-Header &quot;I love APCSP!&quot;; location /pages { add_header X-Cooler-Header &quot;This is my secret header!&quot;; } } . Check In . Research 1 HTTP header and describe, in detail, its purpose. One HTTP header that plays a critical role in web communication is the &quot;User-Agent&quot; header. The User-Agent header is an HTTP request header field that identifies the client software, including the web browser or application, that sends the HTTP request to the server. | The User-Agent header helps the web server to understand the type of device or software the client is using to request the resource, including its operating system, version, and capabilities. This information enables the server to optimize the content delivery for that specific device, such as serving a mobile-friendly version of a website to a mobile browser. . Write a line in a sample NGINX configuration that will add that specific header to the /information location from flask import Flask from flask_nginx import Nginx | app = Flask(name) nginx = Nginx(app) . @app.route(&#39;/information&#39;) def get_information(): headers = {&#39;User-Agent&#39;: &#39;My Custom User Agent&#39;} return &#39;Information page&#39;, 200, headers . if name == &#39;main&#39;: app.run() . Explain the purpose of the load balancing performed by NGINX The main purpose of load balancing performed by NGINX is to distribute incoming requests from clients across multiple backend servers to ensure that no single server becomes overloaded or a single point of failure. NGINX can balance the traffic among multiple servers based on various algorithms, including round-robin, least connections, IP hash, and more, to optimize resource utilization and reduce response times. | Modify the following code block to obtain the value of the secret header on /products of the AWS site import requests | aws = &quot;3.130.255.192&quot; . response = requests.get(&quot;http://&quot; + aws+ &quot;/products&quot;) . secret_header = response.headers.get(&quot;X-Secret-Header&quot;) . print(&quot;The secret header is:&quot;, secret_header) . aws = &quot;3.130.255.192&quot; response = requests.get(&quot;http://&quot; + aws+ &quot;/products&quot;) print(&quot;The secret header is:&quot;, &quot;...&quot;) . The secret header is: ... . import requests aws = &quot;3.130.255.192&quot; response = requests.get(&quot;http://&quot; + aws+ &quot;/products&quot;) secret_header = response.headers.get(&quot;X-Secret-Header&quot;) print(&quot;The secret header is:&quot;, secret_header) . The secret header is: None . CORS Hacks . Explain what CORS is and what it stands for CORS (Cross-Origin Resource Sharing) is a security feature implemented in web browsers that restricts web pages from making requests to a different domain than the one that served the original content. CORS is a web standard that defines a set of HTTP headers and a protocol for enabling safe cross-origin requests between different domains. | Describe how you would be able to implement CORS into your own websites To implement CORS into your own website, you need to configure your web server to send appropriate CORS headers in the response to requests from other domains. | Describe why you would want to implement CORS into your own websites Cross-domain access: CORS allows you to enable cross-domain access to your website&#39;s resources, which can be useful if you want to share data or resources with other websites or if you want to build a web application that needs to access resources from different domains. | How could use CORS to benefit yourself in the future? Cross-domain data sharing: CORS can be used to share data between different websites, which can be useful in scenarios such as social media integration or collaborative applications. | Total: 0.2 points . KASM Hacks . What is the purpose of &quot;sudo&quot; when running commands in terminal? The purpose of &quot;sudo&quot; when running commands in the terminal is to execute the command with elevated privileges, usually as the &quot;root&quot; user or a user with administrative privileges. In Unix-based operating systems like Linux and macOS, the &quot;root&quot; user is the user with the highest level of system access, and it can perform any operation on the system. | What are some commands which allow us to look at how the storage of a machine is set up as? df -h: This command shows the disk space usage on all mounted file systems in a human-readable format. It shows the total size, used space, free space, and percentage of used space for each file system. lsblk: This command lists all available block devices, such as hard drives, solid-state drives, and USB drives, and their corresponding mount points. It shows the size, type, and file system of each block device. | What do you think are some alternatives to running &quot;curl -O&quot; to get the zip file for KASM? Use wget: Instead of using curl, you can use the wget command to download the KASM zip file. The wget command is similar to curl and can be used to download files from the web. For example, you can use the command &quot;wget https://download.kasmweb.com/kasm_workspaces.zip&quot; to download the KASM zip file. | What kind of commands do you think the &quot;install.sh&quot; command has and why is it necessary to call it? Dependency checks: The script may check for the required dependencies and software packages needed for the software installation. Download and extraction: The script may download and extract the software files from a remote server or archive file. | Explain in at least 3-4 sentences how deploying KASM is related to/requires other topics talked about in the lesson and/or potential ways to add things mentioned in the lesson to this guide. Deploying KASM requires knowledge of several topics covered in the lesson, such as networking, server management, and security. Specifically, deploying KASM involves configuring a server to host the KASM application, setting up the appropriate network infrastructure to allow access to the application, and securing the server and application to prevent unauthorized access. | To add more detail to this guide, it could be useful to include sections on configuring a server for KASM deployment, setting up a network infrastructure for KASM access, and securing the KASM application and server. Additionally, information on how to troubleshoot common issues that may arise during the deployment process could be included. Finally, examples of how KASM can be used in real-world scenarios could be added to provide context and demonstrate the practical applications of KASM. Total: 0.2 points .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/05/01/DevHacks.html",
            "relUrl": "/2023/05/01/DevHacks.html",
            "date": " • May 1, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "P4-M 4/28 Binary Lesson HACKS",
            "content": "Lesson Note Taker . Fill in the blanks below during the binary presentation. You can visit our website here!^ Due to last minute deployment issues, may need to run a local server . git clone https://github.com/TheoH32/Runtime_Terror.git | run: | bundle install | bundle exec jekyll serve | . Binary . Binary is a base 2 number system. | 0 represents off and 1 represents on. | A bit is the minimum unit of binary information stored in a computer system. | Boolean Expressions . A boolean statement is a logical statement that is either TRUE or FALSE and compares data. | Truth Tables . The logical operations shown in truth tables are and, or, not, and nor. | # AND 5 &gt; 3 and 5 == 3 + 2 . True . 5 &lt; 3 and 5 == 5 . False . 5 == 5 or 5 != 5 . True . 5 &lt; 3 or 5 != 5 . False . Real Life Example using Boolean Expressions . Try changing the conditions and/or the logical operation below! Run the code to see if you are eligible to vote. . age = 18 citizen = True if age &gt;= 18 and citizen: print(&quot;You are eligible to vote.&quot;) else: print(&quot;You are not eligible to vote.&quot;) . You are eligible to vote. . Binary Conversions . Binary to Decimal . We can count in binary by using powers of 2. | In binary, we read from right to left. | 0111 has a value of 7. | Binary Search . For a binary search, the list must be sorted in ascending or descending order. | In a binary search, computers start at the middle(front,middle,end)/ | The number of steps required in a binary search follows the equation: log2(n). | Binary searches also work with a list of strings. We can sort them alphabetically. | Binary searches can be represented in flow diagrams. | Hacks . You will NOT be awarded any points for sections that are INCOMPLETE . Note Taker . Fill in all of the blanks above. | Lesson Quiz . Complete the lesson quiz | SCREENSHOT SCORE and paste it here (or paste screenshot with submission) | Binary Game . Complete the Binary game and reach a minimum score of 10! | SCREENSHOT SCORE and paste it here (or with submission) | Binary Conversions Practice . Convert the decimal number &quot;17&quot; into binary. --&gt; 10001 | Convert the binary number 1010 into decimal. --&gt; 10 | Convert the decimal number &quot;122&quot; into hexadecimal. --&gt; 7a | Convert the hexadecimal number &quot;09&quot; into binary. --&gt; 1001 | Binary Search Questions . Make a binary search tree of different the list [1,2,4,15,25,30,31] 15 . / 2 30 / / 1 4 25 31 | Put this list of strings in a order that can be used for binary search [&quot;Donut”,&quot;Cake”,&quot;Soda”,&quot;Banana”,&quot;Fruit”] [&quot;Donut”,&quot;Cake”,&quot;Soda”,&quot;Banana”,&quot;Fruit”] | Explain why Binary Search is more efficient than Sequential Search. Binary search is more efficient than sequential search because it uses a divide-and-conquer approach to search for a target value in a sorted list. | Extra Credit: . Translate the binary number, 1001010, into octal (base 8). SHOW YOUR WORK AND EXPLAIN YOUR THINKING. | . 1 0 0 1 0 1 0 64 8 2 = 74 1 1 2 64 8 2 = 74 Answer : 112( octal base) . Hacks Scoring . Hack Comments Grade . Note Taker | fill in the blanks above | 0.1 | . Lesson Quiz | under 100% = 0.1 only | 0.2 | . Binary Game | must score at least 10 points | 0.2 | . Binary Conversions Practice | if incorrect= 0.2 awarded | 0.2 | . Binary Search Questions | if incorrect= 0.2 awarded | 0.2 | . Extra Credit | MUST SHOW WORK | 0.1 | . Total | expected= 0.9/1 | 1/1 | .",
            "url": "https://ahadb63.github.io/ahadsblog/binary/lesson",
            "relUrl": "/binary/lesson",
            "date": " • Apr 28, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Data Structures Guide",
            "content": "Objectives: . Students will be able to... . Understand the concept of data structures, including lists, dictionaries, and 2D arrays | Learn how to iterate through data structures using loops | Able to visualize data structures and iteration processes | Able to apply their knowledge to build simulations/interactions using lists and iteration | Learn how to store list and dictionary content in databases | . Lesson 1: Lists and Iteration . Lists (Ethan) . Lists are a type of data structure that can store multiple items in a single variable | Lists are defined using square brackets [ ] | Each item in a list is separated by a comma | Lists are indexed, starting at 0 | . fruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;, &quot;grape&quot;] print(fruits) . [&#39;apple&#39;, &#39;banana&#39;, &#39;orange&#39;, &#39;grape&#39;] . Accessing Lists . To access individual items in a list, we use the index of the item. | Python uses zero-based indexing, which means the first item in the list has an index of 0, the second item has an index of 1, and so on. | . print(fruits[0]) print(fruits[2]) . apple orange . Slicing Lists . We can also extract a specific portion of a list using slicing. | We use the colon : operator to specify a range of indices to include. | . print(fruits[0:2]) . [&#39;apple&#39;, &#39;banana&#39;] . Modifying List Items . Lists are mutable, meaning that we can change the value of an item in a list. | To change the value of an item in a list, we can use the indexing operator (square brackets) to access the item and then assign a new value to it. | . fruits[2] = &quot;pear&quot; print(fruits) . [&#39;apple&#39;, &#39;banana&#39;, &#39;pear&#39;, &#39;grape&#39;, &#39;kiwi&#39;] . Adding and Removing List Items . Adding . Use the append() method to add an item to the end of a list. | . fruits.append(&quot;kiwi&quot;) # Adds &#39;kiwi&#39; to the end of the list print(fruits) . [&#39;apple&#39;, &#39;banana&#39;, &#39;pear&#39;, &#39;grape&#39;, &#39;kiwi&#39;, &#39;kiwi&#39;] . Use the insert() method to add an item to a specific index in a list. | . fruits.insert(1, &quot;peach&quot;) # Inserts &quot;peach&quot; at index 1 print(fruits) . [&#39;apple&#39;, &#39;peach&#39;, &#39;banana&#39;, &#39;pear&#39;, &#39;grape&#39;, &#39;kiwi&#39;, &#39;kiwi&#39;] . Removing . Use the remove() method to remove the first occurrence of an item from a list. | . fruits.remove(&#39;pear&#39;) # Removes the first occurrence of &#39;pear&#39; print(fruits) . [&#39;apple&#39;, &#39;peach&#39;, &#39;banana&#39;, &#39;grape&#39;, &#39;kiwi&#39;, &#39;kiwi&#39;] . Use the pop() method to remove the item at a specific index from a list. | . fruits.pop(2) # Removes the item at index 2 print(fruits) . [&#39;apple&#39;, &#39;peach&#39;, &#39;grape&#39;, &#39;kiwi&#39;, &#39;kiwi&#39;] . Use the clear() method to remove all items from a list. | . fruits.clear() # Removes all items from the list print(fruits) . [] . Function Explanation . InsertToList . This function is designed to insert a new item into a list at a specific index. | It first retrieves the new item to be added and the index at which to add it from the HTML document. | It checks if the retrieved values are both valid integers and if the index is within the range of the list. | If the values are valid, the function uses the splice() method to insert the new item into the list at the specified index. | In JavaScript, the splice() method modifies an array by removing, replacing, or adding elements. | The splice() method takes three arguments:the index at which to start changing the list, the number of elements to remove, and the new item to add. - The item is inserted without removing any elements, so we pass 0 as the second argument. | Finally, the function calls the visualizeList() function to display the updated list on the web page. | . // Get the value of the new item and the index where it should be inserted function insertToList() { let newItem = parseInt(document.getElementById(&quot;newItem&quot;).value); let index = parseInt(document.getElementById(&quot;index&quot;).value); if (!isNaN(newItem) &amp;&amp; !isNaN(index) &amp;&amp; index &gt;= 0 &amp;&amp; index &lt;= myList.length) { // splice() method to insert the new item into the list myList.splice(index - 1, 0, newItem); // Call the visualizeList() function to update the display of the list visualizeList(); } } . SortList . In JavaScript, sort() is a built-in method used to sort the elements of an array in place. The default sort order is ascending, but you can also specify a descending sort order. | In this case, the function sorts myList in ascending order based on their numerical value. | . // Sort myList array in ascending order function sortList() { // The function a - b is used, which subtracts the second element b from the first element a. // If the result is negative, a is sorted before b. If the result is positive, b is sorted before a. If the result is zero, the order of the elements is unchanged. myList.sort((a, b) =&gt; a - b); visualizeList(); } . Applications of Lists . Data processing: Lists are commonly used to store and process large amounts of data. In data analysis and machine learning, lists are often used to store datasets. . | Gaming: Lists are used extensively in game development to store game objects, player statistics, and game maps. . | Finance: Lists are used in finance to store and process financial data, such as stock prices and market trends. The data from these lists can also be used to calculate financial metrics and to create financial models. . | . Hacks (0.3) . Make your own list and manipulate it via accessing specific elements, adding or removing elements, etc. | Extra: Make an interactable visualization that can manipulate elements in a list such as the one demonstrated in our flask repository | . animals = [&quot;dog&quot;, &quot;cat&quot;, &quot;bird&quot;, &quot;fish&quot;, &quot;rabbit&quot;] # print the list print(&quot;Original list of animals:&quot;, animals) # access an element by index and print it print(&quot;The second animal is:&quot;, animals[1]) # add an element to the end of the list animals.append(&quot;hamster&quot;) print(&quot;List of animals after adding a new one:&quot;, animals) # insert an element at a specific position in the list animals.insert(2, &quot;snake&quot;) print(&quot;List of animals after inserting a new one:&quot;, animals) # remove an element from the list animals.remove(&quot;bird&quot;) print(&quot;List of animals after removing an animal:&quot;, animals) # slice the list and print a subset of elements print(&quot;The first three animals are:&quot;, animals[:3]) # loop through the list and print each animal print(&quot;List of animals:&quot;) for animal in animals: print(animal) . Original list of animals: [&#39;dog&#39;, &#39;cat&#39;, &#39;bird&#39;, &#39;fish&#39;, &#39;rabbit&#39;] The second animal is: cat List of animals after adding a new one: [&#39;dog&#39;, &#39;cat&#39;, &#39;bird&#39;, &#39;fish&#39;, &#39;rabbit&#39;, &#39;hamster&#39;] List of animals after inserting a new one: [&#39;dog&#39;, &#39;cat&#39;, &#39;snake&#39;, &#39;bird&#39;, &#39;fish&#39;, &#39;rabbit&#39;, &#39;hamster&#39;] List of animals after removing an animal: [&#39;dog&#39;, &#39;cat&#39;, &#39;snake&#39;, &#39;fish&#39;, &#39;rabbit&#39;, &#39;hamster&#39;] The first three animals are: [&#39;dog&#39;, &#39;cat&#39;, &#39;snake&#39;] List of animals: dog cat snake fish rabbit hamster . Iteration (Alex) . What is iteration? . In programming, iteration refers to the process of repeating a set of instructions until a specific condition is met. This can be achieved using loop structures like for loops and while loops. | . For Loops . A for loop is used to iterate over a sequence (e.g. a list, tuple, string, etc.) and execute a set of statements for each item in the sequence. Here&#39;s the basic syntax of a for loop in Python: | . sequence = [1,2,3,4,5,6,7] for variable in sequence: print(variable) . 1 2 3 4 5 6 7 . my_string = &quot;Hello, World!&quot; for character in my_string: print(character) . H e l l o , W o r l d ! . While Loops A while loop is used to repeat a set of statements as long as a condition is true. Here&#39;s the basic syntax of a while loop in Python: . num = 0 while num &lt; 5: print(num) num += 1 . 0 1 2 3 4 . Applications of Iteration . Iteration is a fundamental concept in computer programming and is used in a variety of real-life applications. Here are some examples:Data Processing . Data processing often involves iterating over large datasets to perform specific operations on each element. For example, in a data analysis task, you might iterate over a list of numbers to compute the average, or iterate over a list of strings to find the longest string. | . User Interfaces . User interfaces often involve iteration to display and handle data from various sources. For example, in a web application, you might iterate over a list of users to display their information in a table. Similarly, in a desktop application, you might iterate over a list of files to display them in a file explorer. | . Machine Learning . Machine learning algorithms often involve iterative processes to train models and improve their accuracy. For example, in a gradient descent algorithm, you might iterate over a set of training data to update the model&#39;s parameters and minimize the loss function. | . Popcorn hack (0.3) . Make a list related to your CPT project | Make a while loop that will print each term in the list | Make a for loop that will print each term in the list | . Simulation mechanics . In Python, pop() is a method that is used to remove and return an element from a list. The syntax for using pop() is as follows: | . nba_players = [&#39;LeBron James&#39;, &#39;Stephen Curry&#39;, &#39;Kevin Durant&#39;, &#39;Kawhi Leonard&#39;, &#39;Giannis Antetokounmpo&#39;, &#39;James Harden&#39;, &#39;Anthony Davis&#39;, &#39;Luka Doncic&#39;, &#39;Joel Embiid&#39;, &#39;Nikola Jokic&#39;, &#39;Damian Lillard&#39;, &#39;Kyrie Irving&#39;, &#39;Russell Westbrook&#39;, &#39;Paul George&#39;, &#39;Devin Booker&#39;, &#39;Trae Young&#39;, &#39;Chris Paul&#39;, &#39;Bradley Beal&#39;, &#39;Jimmy Butler&#39;, &#39;Donovan Mitchell&#39;] . nba_teams = [&quot;Los Angeles Lakers&quot;, &quot;Golden State Warriors&quot;, &quot;Brooklyn Nets&quot;, &quot;Milwaukee Bucks&quot;, &quot;Philadelphia 76ers&quot;, &quot;Los Angeles Clippers&quot;, &quot;Phoenix Suns&quot;, &quot;Utah Jazz&quot;, &quot;Denver Nuggets&quot;, &quot;Dallas Mavericks&quot;] # While loop to print each team in the list print(&quot;Using a while loop:&quot;) i = 0 while i &lt; len(nba_teams): print(nba_teams[i]) i += 1 # For loop to print each team in the list print(&quot; nUsing a for loop:&quot;) for team in nba_teams: print(team) . Using a while loop: Los Angeles Lakers Golden State Warriors Brooklyn Nets Milwaukee Bucks Philadelphia 76ers Los Angeles Clippers Phoenix Suns Utah Jazz Denver Nuggets Dallas Mavericks Using a for loop: Los Angeles Lakers Golden State Warriors Brooklyn Nets Milwaukee Bucks Philadelphia 76ers Los Angeles Clippers Phoenix Suns Utah Jazz Denver Nuggets Dallas Mavericks . my_list = [1, 2, 3, 4, 5] print(my_list) my_list.pop() print(my_list) my_list.pop(1) print(my_list) . [1, 2, 3, 4, 5] [1, 2, 3, 4] [1, 3, 4] . In Python, append() is a built-in method that is used to add an element to the end of a list. The syntax for using append() is as follows: . my_list = [] my_list.append(1) my_list.append(2) my_list.append(3) print(my_list) . [1, 2, 3] . Dictionary Lesson / 2D Arrays . Lesson 2: Dictionary&#39;s and 2 Dimensional Arrays . Advay Shindikar and Amay Advani . Objective: . Understand the concept of dictionaries and how they can be applied | Learn how to add, modify, and delete entries in a dictionary using the assignment operator and the del keyword | Understand the concept of 2D arrays and how they can be used to store data in rows and columns | Learn how to create a 2D array in Python using a nested list | Understand how to access values in a 2D array using row and column indices | Learn how to use indexing and slicing to access a subset of a 2D array | . . student = {&#39;name&#39;: &#39;Advay&#39;, &#39;age&#39;: 16, &#39;Sophomore&#39;} . students = [&#39;advay&#39;, &#39;amay&#39;, &#39;rohin&#39;, &#39;alex&#39;, &#39;ethan&#39;] . . Check In: . Of the above code segments, which is a list and which is a dictionary? first is list seocnd is dictionary | What is a dictionary and how is it used? In Python, a dictionary is a built-in data structure that stores a collection of key-value pairs, where each key maps to a corresponding value. Dictionaries are sometimes referred to as &quot;associative arrays&quot; or &quot;hash maps&quot; in other programming languages. Keys in a dictionary must be unique and can only be of certain immutable data types (such as strings, numbers, or tuples), while values can be of any data type. | What is a 2D Array? In Python, a 2D array (also known as a two-dimensional array or matrix) is an array of arrays, where each element in the parent array contains a separate child array. The child arrays are arranged in rows and columns, creating a grid-like structure. | How are 2D Arrays different from 1D Arrays or Lists and what can they be used for? 2D arrays are different from 1D arrays or lists in that they have an additional dimension, which allows them to store values in a grid-like format with rows and columns. In contrast, 1D arrays and lists only have a single dimension, and can only store values in a linear format. | . Manipulating Dictionaries . grocery_dict = {} # ask the user to enter grocery items and their prices while True: item = input(&quot;Enter an item for your grocery list (or &#39;done&#39; to exit): &quot;) if item == &quot;done&quot;: break else: price = float(input(&quot;Enter the price of {}: &quot;.format(item))) grocery_dict[item] = price # print the grocery list and total cost total_cost = 0 while True: print(&quot;Your grocery list:&quot;) for item, price in grocery_dict.items(): print(&quot;- {}: ${}&quot;.format(item, price)) print(&quot;Total cost: ${}&quot;.format(total_cost)) # ask the user to choose an action action = input(&quot;What would you like to do? (add/remove/done) &quot;) # add a new item to the grocery list if action == &quot;add&quot;: item = input(&quot;Enter the name of the item you would like to add: &quot;) price = float(input(&quot;Enter the price of {}: &quot;.format(item))) grocery_dict[item] = price total_cost += price # remove an item from the j item = input(&quot;Enter the name of the item you would like to remove: &quot;) if item in grocery_dict: total_cost -= grocery_dict[item] del grocery_dict[item] else: print(&quot;Item not found in grocery list!&quot;) # exit the loop and print the final grocery list and total cost elif action == &quot;done&quot;: break print(&quot;Final grocery list:&quot;) for item, price in grocery_dict.items(): print(&quot;- {}: ${}&quot;.format(item, price)) print(&quot;Total cost: ${}&quot;.format(total_cost)) . Your grocery list: - apple: $100.0 - poop: $1111.0 Total cost: $0 Final grocery list: - apple: $100.0 - poop: $1111.0 Total cost: $0 .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/04/27/P4M-DataStructures-TeamEAAR.html",
            "relUrl": "/2023/04/27/P4M-DataStructures-TeamEAAR.html",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "DevOps Lesson",
            "content": "import socket # Change the following host and see what IP it prints! host = &quot;nhl.com&quot; ip = socket.gethostbyname(host) print(ip) . 104.18.16.236 . with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.connect((ip, 80)) print(&quot;Successfully connected!&quot;) . Successfully connected! . Check-In . What is an IP address? An IP (Internet Protocol) address is a numerical label assigned to every device connected to a computer network that uses the Internet Protocol for communication. It serves as a unique identifier for the device and allows it to communicate with other devices on the network. | . | What is a TCP port? In computer networking, a TCP (Transmission Control Protocol) port is a virtual communication endpoint that enables two devices to establish a connection and exchange data over the internet or a network. | . | with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.connect((ip, 80)) # Send a GET request to &quot;/&quot; s.sendall(b&quot;GET / HTTP/1.1 r n r n&quot;) # Recieve &amp; print 2048 bytes of data data = s.recv(2048) print(data.decode()) . HTTP/1.1 400 Bad Request Server: cloudflare Date: Wed, 26 Apr 2023 21:11:39 GMT Content-Type: text/html Content-Length: 155 Connection: close CF-RAY: - &lt;html&gt; &lt;head&gt;&lt;title&gt;400 Bad Request&lt;/title&gt;&lt;/head&gt; &lt;body&gt; &lt;center&gt;&lt;h1&gt;400 Bad Request&lt;/h1&gt;&lt;/center&gt; &lt;hr&gt;&lt;center&gt;cloudflare&lt;/center&gt; &lt;/body&gt; &lt;/html&gt; . import requests # Change the URL to whatever you&#39;d like response = requests.get(&quot;https://google.com&quot;) print(&quot;Status code:&quot;, response.status_code) print(&quot;Headers:&quot;, response.headers) print(&quot;Response text:&quot;, response.text[:100]) print(&quot;Content-Type:&quot;, response.headers) # Add a line to print the &quot;Content-Type&quot; header of the response # Try an image URL! . Status code: 200 Headers: {&#39;Date&#39;: &#39;Mon, 01 May 2023 23:25:18 GMT&#39;, &#39;Expires&#39;: &#39;-1&#39;, &#39;Cache-Control&#39;: &#39;private, max-age=0&#39;, &#39;Content-Type&#39;: &#39;text/html; charset=ISO-8859-1&#39;, &#39;Content-Security-Policy-Report-Only&#39;: &#34;object-src &#39;none&#39;;base-uri &#39;self&#39;;script-src &#39;nonce-nAhoSf__B8UEP4o5zvXvUQ&#39; &#39;strict-dynamic&#39; &#39;report-sample&#39; &#39;unsafe-eval&#39; &#39;unsafe-inline&#39; https: http:;report-uri https://csp.withgoogle.com/csp/gws/other-hp&#34;, &#39;P3P&#39;: &#39;CP=&#34;This is not a P3P policy! See g.co/p3phelp for more info.&#34;&#39;, &#39;Content-Encoding&#39;: &#39;gzip&#39;, &#39;Server&#39;: &#39;gws&#39;, &#39;X-XSS-Protection&#39;: &#39;0&#39;, &#39;X-Frame-Options&#39;: &#39;SAMEORIGIN&#39;, &#39;Set-Cookie&#39;: &#39;1P_JAR=2023-05-01-23; expires=Wed, 31-May-2023 23:25:18 GMT; path=/; domain=.google.com; Secure, AEC=AUEFqZcPV8PBkY3-_kBvEwpsN_Nd7MBlasWSoLVGQ75R98YE5sktmseyQQ; expires=Sat, 28-Oct-2023 23:25:18 GMT; path=/; domain=.google.com; Secure; HttpOnly; SameSite=lax, NID=511=qGpyL2fm-WlSfhJ8OQ590LsERmI6UQr_CL8_Gf7uJM_PsTbmE-qGmCV3vIbwcZGxd1YlsPSPQvLuqke7dvl-nUQSEfRBX5o0fuyRzz8ZOQ6isVbkPdG_FW95P9JnU8TLRD_AE9VJfX03SBpW0E-vvdiFPLbfpoHciEWqOEKrsHM; expires=Tue, 31-Oct-2023 23:25:18 GMT; path=/; domain=.google.com; HttpOnly&#39;, &#39;Alt-Svc&#39;: &#39;h3=&#34;:443&#34;; ma=2592000,h3-29=&#34;:443&#34;; ma=2592000&#39;, &#39;Transfer-Encoding&#39;: &#39;chunked&#39;} Response text: &lt;!doctype html&gt;&lt;html itemscope=&#34;&#34; itemtype=&#34;http://schema.org/WebPage&#34; lang=&#34;en&#34;&gt;&lt;head&gt;&lt;meta content Content-Type: {&#39;Date&#39;: &#39;Mon, 01 May 2023 23:25:18 GMT&#39;, &#39;Expires&#39;: &#39;-1&#39;, &#39;Cache-Control&#39;: &#39;private, max-age=0&#39;, &#39;Content-Type&#39;: &#39;text/html; charset=ISO-8859-1&#39;, &#39;Content-Security-Policy-Report-Only&#39;: &#34;object-src &#39;none&#39;;base-uri &#39;self&#39;;script-src &#39;nonce-nAhoSf__B8UEP4o5zvXvUQ&#39; &#39;strict-dynamic&#39; &#39;report-sample&#39; &#39;unsafe-eval&#39; &#39;unsafe-inline&#39; https: http:;report-uri https://csp.withgoogle.com/csp/gws/other-hp&#34;, &#39;P3P&#39;: &#39;CP=&#34;This is not a P3P policy! See g.co/p3phelp for more info.&#34;&#39;, &#39;Content-Encoding&#39;: &#39;gzip&#39;, &#39;Server&#39;: &#39;gws&#39;, &#39;X-XSS-Protection&#39;: &#39;0&#39;, &#39;X-Frame-Options&#39;: &#39;SAMEORIGIN&#39;, &#39;Set-Cookie&#39;: &#39;1P_JAR=2023-05-01-23; expires=Wed, 31-May-2023 23:25:18 GMT; path=/; domain=.google.com; Secure, AEC=AUEFqZcPV8PBkY3-_kBvEwpsN_Nd7MBlasWSoLVGQ75R98YE5sktmseyQQ; expires=Sat, 28-Oct-2023 23:25:18 GMT; path=/; domain=.google.com; Secure; HttpOnly; SameSite=lax, NID=511=qGpyL2fm-WlSfhJ8OQ590LsERmI6UQr_CL8_Gf7uJM_PsTbmE-qGmCV3vIbwcZGxd1YlsPSPQvLuqke7dvl-nUQSEfRBX5o0fuyRzz8ZOQ6isVbkPdG_FW95P9JnU8TLRD_AE9VJfX03SBpW0E-vvdiFPLbfpoHciEWqOEKrsHM; expires=Tue, 31-Oct-2023 23:25:18 GMT; path=/; domain=.google.com; HttpOnly&#39;, &#39;Alt-Svc&#39;: &#39;h3=&#34;:443&#34;; ma=2592000,h3-29=&#34;:443&#34;; ma=2592000&#39;, &#39;Transfer-Encoding&#39;: &#39;chunked&#39;} . NGINX . aws = &quot;3.130.255.192&quot; response = requests.get(&quot;http://&quot; + aws) print(response.text) . &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Cool site&lt;/title&gt; &lt;meta name=&#34;description&#34; content=&#34;cool site for apcsp&#34;&gt; &lt;/head&gt; &lt;body&gt; Hello, this is my cool site. Check out my products: &lt;a href=&#34;/products&#34;&gt;Products!!&lt;/a&gt; &lt;/body&gt; &lt;/html&gt; . Configuration . server { // Listen on virtual &quot;port 80&quot; listen 80; listen [::]:80; server_name 3.130.255.192; location / { // Inform server about original client proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; // Forward all requests transparently to the server running on our computer proxy_pass http://localhost:9099; } } . Load Balancing . upstream example.com { server server1.example.com; server server1.example.com; } . HTTP Headers . server { add_header X-Cool-Header &quot;I love APCSP!&quot;; location /pages { add_header X-Cooler-Header &quot;This is my secret header!&quot;; } } . Check In . Research 1 HTTP header and describe, in detail, its purpose. | Write a line in a sample NGINX configuration that will add that specific header to the /information location | Explain the purpose of the load balancing performed by NGINX | Modify the following code block to obtain the value of the secret header on /products of the AWS site import requests | aws = &quot;3.130.255.192&quot; . response = requests.get(&quot;http://&quot; + aws+ &quot;/products&quot;) . secret_header = response.headers.get(&quot;X-Secret-Header&quot;) . print(&quot;The secret header is:&quot;, secret_header) . aws = &quot;3.130.255.192&quot; response = requests.get(&quot;http://&quot; + aws+ &quot;/products&quot;) print(&quot;The secret header is:&quot;, &quot;...&quot;) . Hacks . Complete the above check-in questions and change the hosts (0.1) | Complete the above code-segment to retrieve the secret header (0.1) | . Bonus (0.05) . Create a diagram showing the layers of abstraction that allow us to use HTTP (IP, TCP, etc.) . CORS Hacks . Explain what CORS is and what it stands for | Describe how you would be able to implement CORS into your own websites | Describe why you would want to implement CORS into your own websites | How could use CORS to benefit yourself in the future? | Total: 0.2 points . KASM Hacks . What is the purpose of &quot;sudo&quot; when running commands in terminal? | What are some commands which allow us to look at how the storage of a machine is set up as? | What do you think are some alternatives to running &quot;curl -O&quot; to get the zip file for KASM? | What kind of commands do you think the &quot;install.sh&quot; command has and why is it necessary to call it? | Explain in at least 3-4 sentences how deploying KASM is related to/requires other topics talked about in the lesson and/or potential ways to add things mentioned in the lesson to this guide. | Total: 0.2 points . AWS/RDS Hacks . See the setup post . Create your own database in the EC2 I have created (ec2-database-connect) name it with your first and last name (example: aditya-nawandhar) (0.1) | Create a table using the commands on the link provided. (0.1) | using commands from the link provided make columns and rows with test data (can be anything) (example: “name” and “class” are the columns with rows being something like “Aditya” and “Junior”). At least 4 test rows (0.1) | additional points if the data matches CPT (Bonus: 0.05) | . | . Total: 0.3 .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/04/26/devops-lesson.html",
            "relUrl": "/2023/04/26/devops-lesson.html",
            "date": " • Apr 26, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "P4-M 4/24 Big Idea 3",
            "content": "Introduction: Zeen . Hello, my name is zeen and today we will be presenting big idea 3. Our topics include 2d arrays, iteration, and lists and dictionaries. . Objectives . Master the concepts of iteration, list, 2d-arrays, Dictionaries, and APIs . Vocab . Here is some vocab during the lesson, you should be familar with them already no need for me to read these out, now I will pass the speaking off to Kush . Iteration: A process that repates itself | Array: Sometimes called a list, can keep strings and intergers inside it | 2D-Array: A collection of data elements arranged in a grid-like structure with rows and columns | Mutable: the ability to be changed or modified | Key: A Singular identifier that is associated with a certin value | . 1: 2D Array . Tic Tac Toe:Kush Sirohi . What are some examples of 2d Arrays A chessboard can be represented as an 8x8 2D array, where each square on the board is a cell in the array. | A spreadsheet is another example of a 2D array, where each cell is identified by its row and column indices, and contains a value or formula. | . | What is a modern day game that could be classified as a 2D array | Stardew Valley and ROTMG | . array = [&quot;Hello&quot;, &quot;Hi&quot;, &quot;Whats up&quot;] twoDArray = [[&quot;Name&quot;, &quot;ID&quot;, &quot;Age&quot;], [&quot;Kush&quot;, &quot;1&quot;, &quot;16&quot;], [&quot;Finn&quot;, &quot;2&quot;, &quot;16&quot;]] print(f&quot;This is a normal array: {array}&quot;) print(&quot;This is a 2D array&quot;) for row in twoDArray: print(row) . This is a normal array: [&#39;Hello&#39;, &#39;Hi&#39;, &#39;Whats up&#39;] This is a 2D array [&#39;Name&#39;, &#39;ID&#39;, &#39;Age&#39;] [&#39;Kush&#39;, &#39;1&#39;, &#39;16&#39;] [&#39;Finn&#39;, &#39;2&#39;, &#39;16&#39;] . How I used 2D Arrays (game example) . Describe a 2D array in your own words | A 2D array is a type of data structure that is organized as a grid or matrix with rows and columns. It can be thought of as a table with rows and columns, where each cell in the table holds a value. Each cell is uniquely identified by its row and column indices, which are used to access or manipulate the value in that cell. | . board = [[&#39; &#39;, &#39; &#39;, &#39; &#39;], [&#39; &#39;, &#39; &#39;, &#39; &#39;], [&#39; &#39;, &#39; &#39;, &#39; &#39;]] # Function to print the current state of the game board def print_board(): print(&quot; 0 1 2&quot;) for i in range(3): print(i, end=&#39; &#39;) for j in range(3): print(board[i][j], end=&#39; &#39;) print() # Function to check if a player has won the game def check_win(player): # Check rows for a win for i in range(3): if board[i][0] == player and board[i][1] == player and board[i][2] == player: return True # Check columns for a win for j in range(3): if board[0][j] == player and board[1][j] == player and board[2][j] == player: return True # Check diagonals for a win if board[0][0] == player and board[1][1] == player and board[2][2] == player: return True if board[0][2] == player and board[1][1] == player and board[2][0] == player: return True # If no win condition is met, return False return False # Function to check if the game is a tie def check_tie(): for i in range(3): for j in range(3): if board[i][j] == &#39; &#39;: return False return True # Function to play the game def play_game(): # Initialize player and turn counter player = &#39;X&#39; turns = 0 # Loop until the game is over while True: # Print the current state of the board print_board() # Get the player’s move row = int(input(f&quot;{player}&#39;s turn. Enter row (0-2): &quot;)) col = int(input(f&quot;{player}&#39;s turn. Enter column (0-2): &quot;)) # Check if the move is valid if board[row][col] == &#39; &#39;: board[row][col] = player turns += 1 # Check if the player has won if check_win(player): print_board() print(f&quot;{player} wins!&quot;) return # Check if the game is a tie if check_tie(): print_board() print(&quot;It&#39;s a tie!&quot;) return # Switch players player = &#39;O&#39; if player == &#39;X&#39; else &#39;X&#39; else: print(&quot;That space is already taken. Try again.&quot;) # Start the game play_game() . 0 1 2 0 1 2 . ValueError Traceback (most recent call last) /vscode/ahadsblog/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb Cell 6 in &lt;cell line: 72&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=68&#39;&gt;69&lt;/a&gt; print(&#34;That space is already taken. Try again.&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=70&#39;&gt;71&lt;/a&gt; # Start the game &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=71&#39;&gt;72&lt;/a&gt; play_game() /vscode/ahadsblog/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb Cell 6 in play_game() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=47&#39;&gt;48&lt;/a&gt; print_board() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=48&#39;&gt;49&lt;/a&gt; # Get the player’s move &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=49&#39;&gt;50&lt;/a&gt; row = int(input(f&#34;{player}&#39;s turn. Enter row (0-2): &#34;)) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=50&#39;&gt;51&lt;/a&gt; col = int(input(f&#34;{player}&#39;s turn. Enter column (0-2): &#34;)) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=51&#39;&gt;52&lt;/a&gt; # Check if the move is valid ValueError: invalid literal for int() with base 10: &#39;&#39; . 2: Iteration . Robot Game:Finn Carpenter- What is the defenition of iteration in your own words . Iteration refers to the process of repeatedly executing a set of instructions or a block of code until a specific condition is met or a desired result is achieved. | . times = 0 numbers = [1, 2, 3, 4, 5] ## Loops for i in range(5): print(&quot;hi&quot;) while times &lt;= 5: print(&quot;hello&quot;) times = times + 1 ## Function with a parameters def print_numbers(x): for num in x: print(num) print_numbers(numbers) . hi hi hi hi hi hello hello hello hello hello hello 1 2 3 4 5 . Iteration Game . Link to the game | Play the levels (only play the first 2 in class) | Explain how the game relates to itertation | | . How I used iteration (game example) . What parts of the code use iteration | The movement segments (up down right left) use nested iteration | . function run() { // Read input values from the HTML document and convert them to integers. UPinput = parseInt(document.getElementById(&quot;up&quot;).value); DOWNinput = parseInt(document.getElementById(&quot;down&quot;).value); LEFTinput = parseInt(document.getElementById(&quot;left&quot;).value); RIGHTinput = parseInt(document.getElementById(&quot;right&quot;).value); looper = parseInt(document.getElementById(&quot;loop&quot;).value); runner.style.opacity = 0; // Create an array to hold the movements. let movements = []; // Push &#39;up&#39; movements to the array. for (let l = 0; l &lt; looper; l++) { for (let k = 0; k &lt; UPinput; k++) { movements.push(up); } // Push &#39;down&#39; movements to the array. for (let i = 0; i &lt; DOWNinput; i++) { movements.push(down); } // Push &#39;left&#39; movements to the array. for (let a = 0; a &lt; LEFTinput; a++) { movements.push(left); } // Push &#39;right&#39; movements to the array. for (let c = 0; c &lt; RIGHTinput; c++) { movements.push(right); } } // Set the initial index to 0 and execute each movement in sequence with a delay of 800 milliseconds. let index = 0; let intervalId = setInterval(() =&gt; { // If the end of the movements array has been reached, stop executing movements. if (index &gt;= movements.length) { clearInterval(intervalId); win(); // Call the win function. return; } movements[index](); // Execute the movement at the current index. index++; // Increment the index. }, 800); } . Input In [10] function run() { ^ SyntaxError: invalid syntax . 3: List and Dictionaries . Scramble Game:Edwin . List = [1, 2, 3, 4, 5] Dict = { 1: &quot;Hi&quot;, 2: &quot;Hello&quot;, 3: &quot;Whats Up&quot; } # Why Do I call 0 for the first thing in a list, but 1 for Dict # print(List[0]) print(Dict[1]) . 1 Hi . How I used a dictonary to make a game . Memory Game:James- Link . | . How I used List to make a game . Explain which parts of the code use lists | Word lists is a list | Explain what list manipulation is happening in that part | The word is being scrambled and the list is edited | . import random word_list = [&quot;python&quot;, &quot;computer&quot;, &quot;programming&quot;, &quot;algorithm&quot;, &quot;database&quot;, &quot;function&quot;, &quot;variable&quot;, &quot;loop&quot;, &quot;iteration&quot;, &quot;array&quot;, &quot;mutable&quot;, &quot;insertion&quot;, &quot;deletion&quot;, &quot;key&quot;, &quot;API&quot;] word = random.choice(word_list) scrambled_word = &quot;&quot;.join(random.sample(word, len(word))) print(f&quot;Unscramble the following Computer Science Word: {scrambled_word}&quot;) hints = 1 guesses = 1 guess = &quot;&quot; while guess != word and guesses &lt;= 4: guess = input(&quot;What&#39;s the unscrambled word? &quot;).lower() if guess != word: print(&quot;Sorry, that&#39;s not the word. Try again!&quot;) if guesses == 1: guesses += 1 elif guesses == 2: print(f&quot;Hint 1: The first letter of the word is &#39;{word[0]}&#39;&quot;) guesses += 1 elif guesses == 3: print(f&quot;Hint 2: The second letter of the word is &#39;{word[1]}&#39;&quot;) guesses += 1 else: print(f&quot;All 4 Guesses have been used, you didn&#39;t unscramble the word, the word was {word}&quot;) guesses += 1 else: print(&quot;Congratulations, you unscrambled the word!&quot;) . Unscramble the following Computer Science Word: labeirav Sorry, that&#39;s not the word. Try again! Sorry, that&#39;s not the word. Try again! Hint 1: The first letter of the word is &#39;v&#39; Sorry, that&#39;s not the word. Try again! Hint 2: The second letter of the word is &#39;a&#39; Sorry, that&#39;s not the word. Try again! All 4 Guesses have been used, you didn&#39;t unscramble the word, the word was variable . Hacks: Your Score/1 . General 0.3 . Copy this noteboook into your personal fastpages | Answer all questions put the question in a new markdown block (so we can grade faster) | . | . Iteration 0.2 (can get up to 0.23) . Get to level 5 Take ScreenShots of your name inside the box an put them in your ticket | Create a code segment with iteration that does something cool | . | . 2D array 0.2 (can get up to 0.23) . Explain how the tic tac toe game works | Give 3 Examples of games that can be made from 2D arrays | . List and Dictionaries 0.2 (can get up to 0.23) . Explain the differences between Lists and Dictionaries | Make a code block that manipulates either a list or a dictionary | . my hacks . General Hacks . Tic Tac Toe:Kush Sirohi . What are some examples of 2d Arrays A chessboard can be represented as an 8x8 2D array, where each square on the board is a cell in the array. | A spradsheet is another example of a 2D array, where each cell is identified by its row and column indices, and contains a value or formula. | . | What is a modern day game that could be classified as a 2D array | Stardew Valley and ROTMG | . Describe a 2D array in your own words | A 2D array is a type of data structure that is organized as a grid or matrix with rows and columns. It can be thought of as a table with rows and columns, where each cell in the table holds a value. Each cell is uniquely identified by its row and column indices, which are used to access or manipulate the value in that cell.Robot Game:Finn Carpenter- What is the defenition of iteration in your own words . | Iteration refers to the process of repeatedly executing a set of instructions or a block of code until a specific condition is met or a desired result is achieved. . | What parts of the code use iteration . | The movement segments (up down right left) use nested iteration . | Explain which parts of the code use lists . | Word lists is a list | Explain what list manipulation is happening in that part | The word is being scrambled and the list is edited | . Iteration Hacks . for i in range(1, 11): for j in range(1, 11): print(i * j, end=&quot; t&quot;) print() # prints times table . 1 2 3 4 5 6 7 8 9 10 2 4 6 8 10 12 14 16 18 20 3 6 9 12 15 18 21 24 27 30 4 8 12 16 20 24 28 32 36 40 5 10 15 20 25 30 35 40 45 50 6 12 18 24 30 36 42 48 54 60 7 14 21 28 35 42 49 56 63 70 8 16 24 32 40 48 56 64 72 80 9 18 27 36 45 54 63 72 81 90 10 20 30 40 50 60 70 80 90 100 . 2D array Hacks . Tic-Tac-Toe - A classic two-player game that is played on a 3x3 grid of cells. Each player takes turns placing their symbol (either X or O) in an empty cell. The first player to get three of their symbols in a row (either horizontally, vertically, or diagonally) wins the game. . Minesweeper - A single-player game in which the player must clear a rectangular grid of cells that contains hidden mines. Each cell either contains a mine or a number indicating how many mines are adjacent to that cell. The player must use this information to deduce the location of the mines and clear all the safe cells without detonating any mines. . Tic Tac Toe . The play_game() function initializes the game board as a 2D array with empty cells represented by spaces. It then enters into a loop that continues until the game is over (either a win or a tie). In each iteration of the loop, it prints the current state of the board using the print_board() function and prompts the current player for their move. The player&#39;s move is represented as a row and column index on the game board. . The function then checks if the move is valid (i.e., the chosen cell is empty). If the move is valid, it updates the game board with the player&#39;s symbol and checks if the player has won using the check_win() function. If the game is not over, it checks if the game is a tie using the check_tie() function and switches to the other player&#39;s turn if the game is still ongoing. . List and Dictionaries . In summary, lists and dictionaries are both data structures in Python, but they differ in their indexing, mutability, representation, and use cases. Lists are ordered collections of elements, identified by their position or index in the list, and are useful for homogeneous data and operations such as sorting and filtering. Dictionaries are unordered collections of key-value pairs, identified by their unique key, and are useful for heterogeneous data and operations such as lookup and mapping. Lists are represented using square brackets and dictionaries using curly braces. Lists are mutable, and so are dictionaries, but keys in dictionaries must be immutable. . ages = {&#39;Alice&#39;: 25, &#39;Bob&#39;: 30, &#39;Charlie&#39;: 35} # add a new key-value pair to the dictionary ages[&#39;David&#39;] = 40 # print the updated dictionary print(ages) # Output: {&#39;Alice&#39;: 25, &#39;Bob&#39;: 30, &#39;Charlie&#39;: 35, &#39;David&#39;: 40} # remove a key-value pair from the dictionary del ages[&#39;Charlie&#39;] # print the updated dictionary print(ages) # Output: {&#39;Alice&#39;: 25, &#39;Bob&#39;: 30, &#39;David&#39;: 40} # update the value of an existing key in the dictionary ages[&#39;Bob&#39;] = 35 # print the updated dictionary print(ages) # Output: {&#39;Alice&#39;: 25, &#39;Bob&#39;: 35, &#39;David&#39;: 40} . {&#39;Alice&#39;: 25, &#39;Bob&#39;: 30, &#39;Charlie&#39;: 35, &#39;David&#39;: 40} {&#39;Alice&#39;: 25, &#39;Bob&#39;: 30, &#39;David&#39;: 40} {&#39;Alice&#39;: 25, &#39;Bob&#39;: 35, &#39;David&#39;: 40} .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/04/21/EOYPLAYGROUND.html",
            "relUrl": "/2023/04/21/EOYPLAYGROUND.html",
            "date": " • Apr 21, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "2018 CBQ Score and Corrections",
            "content": ". Corrections . Directions: For the question or incomplete statement below, two of the suggested answers are correct. For this question, you must select both correct choices to earn credit. No partial credit will be earned if only one correct choice is selected. Select the two that are best in each case.​ . Which of the following statements describe how cloud computing has affected Internet communication? . Select two answers. . Correct Answer: C and B .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/04/19/2018-CB.html",
            "relUrl": "/2023/04/19/2018-CB.html",
            "date": " • Apr 19, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Computers and Networks",
            "content": "",
            "url": "https://ahadb63.github.io/ahadsblog/2023/04/06/Network-and-Computers.html",
            "relUrl": "/2023/04/06/Network-and-Computers.html",
            "date": " • Apr 6, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Computers and Networks (Unit 4)",
            "content": "Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs aa program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieives and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer, or Computers if working as Pair/Trio . Processor GHz: 2.375 AMD Ryzen 5 4500u | Memory in GB: Installed Physical Memory - 8gb | Total Virtual Memory | . | Storage in GB: 237 gb | OS: Windows | . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. . Input devices | Output devices | Program File | Program Code | Processes | Ports | Data File | Inspect Running Code | Inspect Variables | . . The Internet . Watch/review College Board Daily Video for 4.1.1 . Essential Knowledge A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. | A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. | Bandwidth is usually measured in bits per second | . | Complete Vocabulary Matching Activity. Incorporate this into your learnings from year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. Path | Route | Computer System | Computer Device | Bandwidth | Computer Network | . | . Watch/review College Board Daily Video 4.1.2 . Complete True of False Questions . | Essential Knowledge The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprierary) communication protocols. | Access to the internet depends on the ability to connect a computing device to an internet connected device. | A protocol is an agreed-upon set of rules that specify the behavior of a system. | The protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet. | Routing on the internet is usually dynamic; it is not specified in advance | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | The internet was designed to be scalable | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. | Packets may arrive at the destination in order, out of order, or not at all | IP, TCP and UDP are common protocols used on the internet. | The world wide web is a system of linked pages, programs, and files. | HTTP is a protocol used by the world wide web | The world wide web uses the internet | . | Go over AP videos, vocabulary, and essential knowledge. Draw a diagram showing the internet and its many levels. A preferred diagram would using your knowledge of frontend, backend, deployment, etc. Picture would highligh vocabulary by illustration. The below illustration have some ideas | . . Often we draw pictures of machines communicating over the Internet with arrows. However, the real communication goes through protocol layers and the machine and then is trasported of the network. For College Board and future Computer Knowledge you should become familiar with the following … | . User Machine &lt;&gt; Frontend Server &lt;&gt; Backend Server +--+ +--+ +--+ | Browser | | GH Page | | Flask | +--+ ^ +--+ ^ +--+ | HTTP | | | HTTP | | | HTTP | +--+ | +--+ | +--+ | TCP | | | TCP | | | TCP | +--+ | +--+ | +--+ | IP | V | IP | V | IP | +--+ +--+ +--+ | Network | &lt;&gt; | Network | &lt;&gt; | Network | +--+ +--+ +--+ . The “http” layer is an application layer protocol in the TCP/IP stack, used for communication between web browsers and web servers. It is the protocol used for transmitting data over the World Wide Web. . The “transport” layer (TCP) is responsible for providing reliable data transfer between applications running on different hosts. The TCP protocol segments the data into smaller chunks called “segments”. Each segment contains a sequence number that identifies its position in the original stream of data, as well as other control information such as source and destination port numbers, and checksums for error detection. . The “ip” layer is responsible for packetizing data received from the TCP layer of the protocol stack, and then encapsulating the data into IP packets. The IP packets are then sent to the lower layers of the protocol stack for transmission over the network. . The “network” layer is responsible for routing data packets between networks using the Internet Protocol (IP). This layer handles tasks such as packet addressing and routing, fragmentation and reassembly, and network congestion control. . Fault Tolerance . Watch both Daily videos for 4.2 . Complete the network activity, summarize your understanding of fault tolerance. | . Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily vidoe 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . What is naturally Distributed in Frontend/Backend archeticture? . | Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot;. Determine if there is options are options in this command for parallel computing within the server that runs python/gunicorn. Here is an article . | . Last week we discussed parallel computing on local machine. There are many options. Here is something to get parallel computing work with a tool called Ray. . Review this article… Can you get parallel code on images to work more effectively? I have not tried Ray. | . Code example from ChatGPT using squares. This might be more interesting if nums we generated to be a lot bigger. | . import ray # define a simple function that takes a number and returns its square def square(x): return x * x # initialize Ray ray.init() # create a remote function that squares a list of numbers in parallel @ray.remote def square_list(nums): return [square(num) for num in nums] # define a list of numbers to square nums = [1, 2, 3, 4, 5] # split the list into two parts split_idx = len(nums) // 2 part1, part2 = nums[:split_idx], nums[split_idx:] # call the remote function in parallel on the two parts part1_result = square_list.remote(part1) part2_result = square_list.remote(part2) # get the results and combine them result = ray.get(part1_result) + ray.get(part2_result) # print the result print(result) .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/04/05/AP_computers_networks.html",
            "relUrl": "/2023/04/05/AP_computers_networks.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "HashMaps Hacks",
            "content": "import pprint #import library nhl_teams = { &quot;League&quot;: &quot;NHL&quot;, &quot;Country&quot;: &quot;North America&quot;, &quot;Current Season&quot;: &#39;2022-2023&#39;, &quot;Teams&quot;: { 1: &quot;Boston Bruins&quot;, 2: &quot;Chicago Blackhawks&quot;, 3: &quot;Toronto Maple Leafs&quot;, 4: &quot;Los Angeles Kings&quot;, 5: &quot;Edmonton Oliers&quot;, } } # Printing the dictionary pprint.pprint(nhl_teams) . {&#39;Country&#39;: &#39;North America&#39;, &#39;Current Season&#39;: &#39;2022-2023&#39;, &#39;League&#39;: &#39;NHL&#39;, &#39;Teams&#39;: {1: &#39;Boston Bruins&#39;, 2: &#39;Chicago Blackhawks&#39;, 3: &#39;Toronto Maple Leafs&#39;, 4: &#39;Los Angeles Kings&#39;, 5: &#39;Edmonton Oliers&#39;}} . pprint.pprint(nhl_teams.get(&#39;Teams&#39;)) . {1: &#39;Boston Bruins&#39;, 2: &#39;Chicago Blackhawks&#39;, 3: &#39;Toronto Maple Leafs&#39;, 4: &#39;Los Angeles Kings&#39;, 5: &#39;Edmonton Oliers&#39;} . pprint.pprint(nhl_teams.get(&#39;League&#39;)) . &#39;NHL&#39; . nhl_teams[&quot;Best Players&quot;] = ([&#39;David Pastarnak&#39;, &#39;Conner Mcdavid&#39;, &#39;Auston Mattphews&#39;, &#39;David Pastarnak&#39;, &#39;Linus Ullmark&#39;, &#39;Alex Ovechkin&#39;]) # What can you change to make sure there are no duplicate players? # Take out a duplicate # Make it into a set # Printing the dictionary pprint.pprint(nhl_teams) . {&#39;Best Players&#39;: [&#39;David Pastarnak&#39;, &#39;Conner Mcdavid&#39;, &#39;Auston Mattphews&#39;, &#39;David Pastarnak&#39;, &#39;Linus Ullmark&#39;, &#39;Alex Ovechkin&#39;], &#39;League&#39;: &#39;NHL&#39;, &#39;country&#39;: &#39;North America&#39;, &#39;current season&#39;: &#39;2022-2023&#39;, &#39;teams&#39;: {1: &#39;Boston Bruins&#39;, 2: &#39;Chicago Blackhawks&#39;, 3: &#39;Toronto Maple Leafs&#39;, 4: &#39;Los Angeles Kings&#39;, 5: &#39;Edmonton Oliers&#39;}} . # removing duplicate elements from the list print(&quot;Original List: &quot;, nhl_teams[&#39;Best Players&#39;]) res = [*set(nhl_teams[&#39;Best Players&#39;])] print(&quot;List after removing duplicate elements: &quot;, res) . Original List: [&#39;David Pastarnak&#39;, &#39;Conner Mcdavid&#39;, &#39;Auston Mattphews&#39;, &#39;David Pastarnak&#39;, &#39;Linus Ullmark&#39;, &#39;Alex Ovechkin&#39;] List after removing duplicate elements: [&#39;Auston Mattphews&#39;, &#39;David Pastarnak&#39;, &#39;Linus Ullmark&#39;, &#39;Alex Ovechkin&#39;, &#39;Conner Mcdavid&#39;] . nhl_teams[&quot;Teams&quot;].update({6:&quot;New York Rangers&quot;}) # How would add an additional team # use .update # filter to teams, add new number key they type team name # Printing the dictionary pprint.pprint(nhl_teams) . {&#39;Country&#39;: &#39;North America&#39;, &#39;Current Season&#39;: &#39;2022-2023&#39;, &#39;League&#39;: &#39;NHL&#39;, &#39;Teams&#39;: {1: &#39;Boston Bruins&#39;, 2: &#39;Chicago Blackhawks&#39;, 3: &#39;Toronto Maple Leafs&#39;, 4: &#39;Los Angeles Kings&#39;, 5: &#39;Edmonton Oliers&#39;, 6: &#39;New York Rangers&#39;}} . for k,v in nhl_teams.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format # use pprint library . League: NHL country: North America current season: 2022-2023 teams: {1: &#39;Boston Bruins&#39;, 2: &#39;Chicago Blackhawks&#39;, 3: &#39;Toronto Maple Leafs&#39;, 4: &#39;Los Angeles Kings&#39;, 5: &#39;Edmonton Oliers&#39;, 6: &#39;New York Rangers&#39;} Best Players: [&#39;David Pastarnak&#39;, &#39;Conner Mcdavid&#39;, &#39;Auston Mattphews&#39;, &#39;David Pastarnak&#39;, &#39;Linus Ullmark&#39;, &#39;Alex Ovechkin&#39;] . def search(): search = input(&quot;What would you like to know about the NHL? n For teams type --&gt; Teams&quot;) if nhl_teams.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: pprint.pprint(nhl_teams.get(search.lower())) search() # # . {1: &#39;Boston Bruins&#39;, 2: &#39;Chicago Blackhawks&#39;, 3: &#39;Toronto Maple Leafs&#39;, 4: &#39;Los Angeles Kings&#39;, 5: &#39;Edmonton Oliers&#39;, 6: &#39;New York Rangers&#39;} . # Define the options as a list options = [] for k,v in nhl_teams.items(): # iterate using a for loop for key and value options.append(str(k.lower())) # Define the menu function def menu(): # Display the menu options print(&#39; n Select an option from the list below:&#39;) for option in options: print(option) # user input search = input(&quot;What would you like to know about ...&quot;).lower() # Find the selected option in the options list selected_option = None for option in options: if search == str(option): selected_option = str(option) break if selected_option == &quot;Teams&quot;: print(f&#39; n Teams: {nhl_teams[options[0]]} n&#39;) elif selected_option == &quot;League&quot;: print(f&#39; n League: {nhl_teams[options[1]]} n&#39;) elif selected_option == &quot;Country&quot;: print(f&#39; n Country: {nhl_teams[options[2]]} n&#39;) elif selected_option == &quot;Teams&quot;: print(&quot; n Teams(s):&quot;) for g in nhl_teams[&#39;Teams&#39;]: print(f&quot;- {g}&quot;) else: print(&quot; n Please try again. n&quot;) # Repeat the menu menu() menu() . Select an option from the list below: league country current season teams Please try again. Select an option from the list below: league country current season teams Please try again. Select an option from the list below: league country current season teams Please try again. Select an option from the list below: league country current season teams Please try again. Select an option from the list below: league country current season teams Please try again. Select an option from the list below: league country current season teams Please try again. Select an option from the list below: league country current season teams Please try again. Select an option from the list below: league country current season teams Please try again. Select an option from the list below: league country current season teams Please try again. Select an option from the list below: league country current season teams Please try again. Select an option from the list below: league country current season teams Please try again. Select an option from the list below: league country current season teams Please try again. Select an option from the list below: league country current season teams Please try again. Select an option from the list below: league country current season teams Please try again. Select an option from the list below: league country current season teams Please try again. Select an option from the list below: league country current season teams Please try again. Select an option from the list below: league country current season teams Please try again. Select an option from the list below: league country current season teams Please try again. Select an option from the list below: league country current season teams . KeyboardInterrupt Traceback (most recent call last) /vscode/ahadsblog/_notebooks/2023-03-30-HashMap Hacks.ipynb Cell 9 in &lt;cell line: 44&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-30-HashMap%20Hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=40&#39;&gt;41&lt;/a&gt; # Repeat the menu &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-30-HashMap%20Hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=41&#39;&gt;42&lt;/a&gt; menu() &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-30-HashMap%20Hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=43&#39;&gt;44&lt;/a&gt; menu() /vscode/ahadsblog/_notebooks/2023-03-30-HashMap Hacks.ipynb Cell 9 in menu() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-30-HashMap%20Hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=38&#39;&gt;39&lt;/a&gt; print(&#34; n Please try again. n&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-30-HashMap%20Hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=40&#39;&gt;41&lt;/a&gt; # Repeat the menu &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-30-HashMap%20Hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=41&#39;&gt;42&lt;/a&gt; menu() /vscode/ahadsblog/_notebooks/2023-03-30-HashMap Hacks.ipynb Cell 9 in menu() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-30-HashMap%20Hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=38&#39;&gt;39&lt;/a&gt; print(&#34; n Please try again. n&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-30-HashMap%20Hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=40&#39;&gt;41&lt;/a&gt; # Repeat the menu &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-30-HashMap%20Hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=41&#39;&gt;42&lt;/a&gt; menu() [... skipping similar frames: menu at line 42 (15 times)] /vscode/ahadsblog/_notebooks/2023-03-30-HashMap Hacks.ipynb Cell 9 in menu() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-30-HashMap%20Hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=38&#39;&gt;39&lt;/a&gt; print(&#34; n Please try again. n&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-30-HashMap%20Hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=40&#39;&gt;41&lt;/a&gt; # Repeat the menu &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-30-HashMap%20Hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=41&#39;&gt;42&lt;/a&gt; menu() /vscode/ahadsblog/_notebooks/2023-03-30-HashMap Hacks.ipynb Cell 9 in menu() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-30-HashMap%20Hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; print(option) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-30-HashMap%20Hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; # user input &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-30-HashMap%20Hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; search = input(&#34;What would you like to know about ...&#34;).lower() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-30-HashMap%20Hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=19&#39;&gt;20&lt;/a&gt; # Find the selected option in the options list &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-30-HashMap%20Hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=20&#39;&gt;21&lt;/a&gt; selected_option = None File ~/anaconda3/lib/python3.9/site-packages/ipykernel/kernelbase.py:1075, in Kernel.raw_input(self, prompt) 1071 if not self._allow_stdin: 1072 raise StdinNotImplementedError( 1073 &#34;raw_input was called, but this frontend does not support input requests.&#34; 1074 ) -&gt; 1075 return self._input_request( 1076 str(prompt), 1077 self._parent_ident[&#34;shell&#34;], 1078 self.get_parent(&#34;shell&#34;), 1079 password=False, 1080 ) File ~/anaconda3/lib/python3.9/site-packages/ipykernel/kernelbase.py:1120, in Kernel._input_request(self, prompt, ident, parent, password) 1117 break 1118 except KeyboardInterrupt: 1119 # re-raise KeyboardInterrupt, to truncate traceback -&gt; 1120 raise KeyboardInterrupt(&#34;Interrupted by user&#34;) from None 1121 except Exception: 1122 self.log.warning(&#34;Invalid Message:&#34;, exc_info=True) KeyboardInterrupt: Interrupted by user . inforgraphic . .",
            "url": "https://ahadb63.github.io/ahadsblog/hacks/2023/03/30/HashMap-Hacks.html",
            "relUrl": "/hacks/2023/03/30/HashMap-Hacks.html",
            "date": " • Mar 30, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a Dictionary. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is 0^1 . | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # only displays each number once; didnt print duplicate values # # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # dont print duplicates # . {1, 2, 3} . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # Lists and dictionaries # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}} . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . The Man The Man . lover_album[&quot;producers&quot;] = ([&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]) # What can you change to make sure there are no duplicate producers? # Take out taylor swift # Make it into a set # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}, &#39;producers&#39;: [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]} . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) # How would add an additional genre to the dictionary, like electropop? # using append # lover_album[&quot;genre&quot;].append(&quot;electropop&quot;) would work # Printing the dictionary print(lover_album) . for k,v in lover_album.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format # # use pprint library . title: Lover artist: Taylor Swift year: 2019 genre: [&#39;Pop&#39;, &#39;Synth-pop&#39;] tracks: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} producers: [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;] . def search(): search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # use recursion to keep search continous # use pprint for better format . Invalid Search . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary . | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed . | .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/03/29/DS-hashmaps.html",
            "relUrl": "/2023/03/29/DS-hashmaps.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "3/28/23 Extra Credit Notes",
            "content": "Notes . Ambasadors are from Cal state san marcos | &#39;grades dont define you&#39; | Computer science is used in fields outside of CS majors coding is very versatile and used in many feilds | . | Cal state is the nationla leader in social mobility | Applied physics, cyber security, computer engineering; constanly updating cirriculum and classes at cal state san marcos | joining clubs is important when doing an undergrad Lots of vareity in clubs at cal state san marcos | . | Lots of internship oppurtunities at cal state networking is key to having a good career and clubs and internships are a good way to network | try to avoid unpaid internships | apply even if you feel underqualified - worse thing worse is a no | ask faculty members to read essay and ask others for help. | . | Lots of summer programs at cal state san marcos that offer pay | Grants are government money to get you to school | Scholarships are private money that helps you get to school | It is on the student to find a scholarship | Loans avoid getting loan in general | Unsubsidized loan: dont have to worry on intrest on loan, puts some intrest on loan | subsidized loan: partially funded by gov | . | Many cs majors go into military industrial complex after graduating | sometimes you get payed to go to gradute school | .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/03/28/EC-notes.html",
            "relUrl": "/2023/03/28/EC-notes.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Big Idea 2 MCQ + Corrections",
            "content": "Big Idea Quiz Score . . Corrections . Question #17 . Q: The owner of a clothing store records the following information for each transaction made at the store during a 7-day period. . The date of the transaction The method of payment used in the transaction The number of items purchased in the transaction The total amount of the transaction, in dollars . Customers can pay for purchases using cash, check, a debit card, or a credit card. . Using only the data collected during the 7-day period, which of the following statements is true? . A: D)Correct. For each transaction, the data includes the date of the transaction and the number of items purchased in the transaction. By searching the data to find all transactions that occurred on the given date, and then adding the number of items purchased in each of those transactions, the total number of items purchased on a given date can be determined. . | .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/03/26/Big-idea-2-mcw.html",
            "relUrl": "/2023/03/26/Big-idea-2-mcw.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Agile Manifesto",
            "content": ".",
            "url": "https://ahadb63.github.io/ahadsblog/2023/03/26/Agile-Manifesto.html",
            "relUrl": "/2023/03/26/Agile-Manifesto.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Data Structures- Space and Time Complexity",
            "content": "Space and Time Complexity . Space complexity refers to the amount of memory used by an algorithm to complete its execution, as a function of the size of the input. The space complexity of an algorithm can be affected by various factors such as the size of the input data, the data structures used in the algorithm, the number and size of temporary variables, and the recursion depth. Time complexity refers to the amount of time required by an algorithm to run as the input size grows. It is usually measured in terms of the &quot;Big O&quot; notation, which describes the upper bound of an algorithm&#39;s time complexity. . Why do you think a programmer should care about space and time complexity? . Dont want to exceede the amount of space the system has | Knows space and time complexity allows programmers to make the program behave in required optimal conditions leading to effeincy. | . Take a look at our lassen volcano example from the data compression tech talk. The first code block is the original image. In the second code block, change the baseWidth to rescale the image. . from IPython.display import Image, display from pathlib import Path # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) if __name__ == &quot;__main__&quot;: lassen_volcano = image_data(images=[{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano-256&quot;, &#39;file&#39;: &quot;lassen-volcano-256.jpg&quot;}]) image_display(lassen_volcano) . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def scale_image(img): #baseWidth = 625 #baseWidth = 1250 #baseWidth = 2500 baseWidth = 2500 # see the effect of doubling or halfing the baseWidth #baseWidth = 10000 #baseWidth = 20000 #baseWidth = 40000 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size image[&#39;width&#39;], image[&#39;height&#39;] = img.size image[&#39;pixels&#39;] = image[&#39;width&#39;] * image[&#39;height&#39;] # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size image[&#39;scaled_width&#39;], image[&#39;scaled_height&#39;] = img.size image[&#39;scaled_pixels&#39;] = image[&#39;scaled_width&#39;] * image[&#39;scaled_height&#39;] # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data(images = [{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano-256&quot;, &#39;file&#39;: &quot;lassen-volcano-256.jpg&quot;}]) # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;pixels&#39;]:,}&quot;) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;scaled_pixels&#39;]:,}&quot;) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) . - meta data -- Lassen Volcano-256 Peter Carolin JPEG RGB Original size: (320, 240) pixels: 76,800 Scaled size: (2500, 1875) pixels: 4,687,500 -- original image -- . Do you think this is a time complexity or space complexity or both problem? . I think this is space complexity becasue the amount of memory (space) is being changed here when the image size changes | . Big O Notation . Constant O(1) | Linear O(n) | Quadratic O(n^2) | Logarithmic O(logn) | Exponential (O(2^n)) | . numbers = list(range(1000)) print(numbers) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999] . Constant O(1) . Time . An example of a constant time algorithm is accessing a specific element in an array. It does not matter how large the array is, accessing an element in the array takes the same amount of time. Therefore, the time complexity of this operation is constant, denoted by O(1). . print(numbers[263]) ncaa_bb_ranks = {1:&quot;Alabama&quot;,2:&quot;Houston&quot;, 3:&quot;Purdue&quot;, 4:&quot;Kansas&quot;} #look up a value in a dictionary given a key print(ncaa_bb_ranks[1]) . 263 Alabama . Space . This function takes two number inputs and returns their sum. The function does not create any additional data structures or variables that are dependent on the input size, so its space complexity is constant, or O(1). Regardless of how large the input numbers are, the function will always require the same amount of memory to execute. . def sum(a, b): return a + b print(sum(90,88)) print(sum(.9,.88)) . 178 1.78 . Linear O(n) . Time . An example of a linear time algorithm is traversing a list or an array. When the size of the list or array increases, the time taken to traverse it also increases linearly with the size. Hence, the time complexity of this operation is O(n), where n is the size of the list or array being traversed. . for i in numbers: print(i) . 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 . Space . This function takes a list of elements arr as input and returns a new list with the elements in reverse order. The function creates a new list reversed_arr of the same size as arr to store the reversed elements. The size of reversed_arr depends on the size of the input arr, so the space complexity of this function is O(n). As the input size increases, the amount of memory required to execute the function also increases linearly. . def reverse_list(arr): n = len(arr) reversed_arr = [None] * n #create a list of None based on the length or arr for i in range(n): reversed_arr[n-i-1] = arr[i] #stores the value at the index of arr to the value at the index of reversed_arr starting at the beginning for arr and end for reversed_arr return reversed_arr print(numbers) print(reverse_list(numbers)) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999] [999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982, 981, 980, 979, 978, 977, 976, 975, 974, 973, 972, 971, 970, 969, 968, 967, 966, 965, 964, 963, 962, 961, 960, 959, 958, 957, 956, 955, 954, 953, 952, 951, 950, 949, 948, 947, 946, 945, 944, 943, 942, 941, 940, 939, 938, 937, 936, 935, 934, 933, 932, 931, 930, 929, 928, 927, 926, 925, 924, 923, 922, 921, 920, 919, 918, 917, 916, 915, 914, 913, 912, 911, 910, 909, 908, 907, 906, 905, 904, 903, 902, 901, 900, 899, 898, 897, 896, 895, 894, 893, 892, 891, 890, 889, 888, 887, 886, 885, 884, 883, 882, 881, 880, 879, 878, 877, 876, 875, 874, 873, 872, 871, 870, 869, 868, 867, 866, 865, 864, 863, 862, 861, 860, 859, 858, 857, 856, 855, 854, 853, 852, 851, 850, 849, 848, 847, 846, 845, 844, 843, 842, 841, 840, 839, 838, 837, 836, 835, 834, 833, 832, 831, 830, 829, 828, 827, 826, 825, 824, 823, 822, 821, 820, 819, 818, 817, 816, 815, 814, 813, 812, 811, 810, 809, 808, 807, 806, 805, 804, 803, 802, 801, 800, 799, 798, 797, 796, 795, 794, 793, 792, 791, 790, 789, 788, 787, 786, 785, 784, 783, 782, 781, 780, 779, 778, 777, 776, 775, 774, 773, 772, 771, 770, 769, 768, 767, 766, 765, 764, 763, 762, 761, 760, 759, 758, 757, 756, 755, 754, 753, 752, 751, 750, 749, 748, 747, 746, 745, 744, 743, 742, 741, 740, 739, 738, 737, 736, 735, 734, 733, 732, 731, 730, 729, 728, 727, 726, 725, 724, 723, 722, 721, 720, 719, 718, 717, 716, 715, 714, 713, 712, 711, 710, 709, 708, 707, 706, 705, 704, 703, 702, 701, 700, 699, 698, 697, 696, 695, 694, 693, 692, 691, 690, 689, 688, 687, 686, 685, 684, 683, 682, 681, 680, 679, 678, 677, 676, 675, 674, 673, 672, 671, 670, 669, 668, 667, 666, 665, 664, 663, 662, 661, 660, 659, 658, 657, 656, 655, 654, 653, 652, 651, 650, 649, 648, 647, 646, 645, 644, 643, 642, 641, 640, 639, 638, 637, 636, 635, 634, 633, 632, 631, 630, 629, 628, 627, 626, 625, 624, 623, 622, 621, 620, 619, 618, 617, 616, 615, 614, 613, 612, 611, 610, 609, 608, 607, 606, 605, 604, 603, 602, 601, 600, 599, 598, 597, 596, 595, 594, 593, 592, 591, 590, 589, 588, 587, 586, 585, 584, 583, 582, 581, 580, 579, 578, 577, 576, 575, 574, 573, 572, 571, 570, 569, 568, 567, 566, 565, 564, 563, 562, 561, 560, 559, 558, 557, 556, 555, 554, 553, 552, 551, 550, 549, 548, 547, 546, 545, 544, 543, 542, 541, 540, 539, 538, 537, 536, 535, 534, 533, 532, 531, 530, 529, 528, 527, 526, 525, 524, 523, 522, 521, 520, 519, 518, 517, 516, 515, 514, 513, 512, 511, 510, 509, 508, 507, 506, 505, 504, 503, 502, 501, 500, 499, 498, 497, 496, 495, 494, 493, 492, 491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 481, 480, 479, 478, 477, 476, 475, 474, 473, 472, 471, 470, 469, 468, 467, 466, 465, 464, 463, 462, 461, 460, 459, 458, 457, 456, 455, 454, 453, 452, 451, 450, 449, 448, 447, 446, 445, 444, 443, 442, 441, 440, 439, 438, 437, 436, 435, 434, 433, 432, 431, 430, 429, 428, 427, 426, 425, 424, 423, 422, 421, 420, 419, 418, 417, 416, 415, 414, 413, 412, 411, 410, 409, 408, 407, 406, 405, 404, 403, 402, 401, 400, 399, 398, 397, 396, 395, 394, 393, 392, 391, 390, 389, 388, 387, 386, 385, 384, 383, 382, 381, 380, 379, 378, 377, 376, 375, 374, 373, 372, 371, 370, 369, 368, 367, 366, 365, 364, 363, 362, 361, 360, 359, 358, 357, 356, 355, 354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 343, 342, 341, 340, 339, 338, 337, 336, 335, 334, 333, 332, 331, 330, 329, 328, 327, 326, 325, 324, 323, 322, 321, 320, 319, 318, 317, 316, 315, 314, 313, 312, 311, 310, 309, 308, 307, 306, 305, 304, 303, 302, 301, 300, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0] . Quadratic O(n^2) . Time . An example of a quadratic time algorithm is nested loops. When there are two nested loops that both iterate over the same collection, the time taken to complete the algorithm grows quadratically with the size of the collection. Hence, the time complexity of this operation is O(n^2), where n is the size of the collection being iterated over. . for i in numbers: for j in numbers: print(i,j) . 0 0 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 126 0 127 0 128 0 129 0 130 0 131 0 132 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 141 0 142 0 143 0 144 0 145 0 146 0 147 0 148 0 149 0 150 0 151 0 152 0 153 0 154 0 155 0 156 0 157 0 158 0 159 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 169 0 170 0 171 0 172 0 173 0 174 0 175 0 176 0 177 0 178 0 179 0 180 0 181 0 182 0 183 0 184 0 185 0 186 0 187 0 188 0 189 0 190 0 191 0 192 0 193 0 194 0 195 0 196 0 197 0 198 0 199 0 200 0 201 0 202 0 203 0 204 0 205 0 206 0 207 0 208 0 209 0 210 0 211 0 212 0 213 0 214 0 215 0 216 0 217 0 218 0 219 0 220 0 221 0 222 0 223 0 224 0 225 0 226 0 227 0 228 0 229 0 230 0 231 0 232 0 233 0 234 0 235 0 236 0 237 0 238 0 239 0 240 0 241 0 242 0 243 0 244 0 245 0 246 0 247 0 248 0 249 0 250 0 251 0 252 0 253 0 254 0 255 0 256 0 257 0 258 0 259 0 260 0 261 0 262 0 263 0 264 0 265 0 266 0 267 0 268 0 269 0 270 0 271 0 272 0 273 0 274 0 275 0 276 0 277 0 278 0 279 0 280 0 281 0 282 0 283 0 284 0 285 0 286 0 287 0 288 0 289 0 290 0 291 0 292 0 293 0 294 0 295 0 296 0 297 0 298 0 299 0 300 0 301 0 302 0 303 0 304 0 305 0 306 0 307 0 308 0 309 0 310 0 311 0 312 0 313 0 314 0 315 0 316 0 317 0 318 0 319 0 320 0 321 0 322 0 323 0 324 0 325 0 326 0 327 0 328 0 329 0 330 0 331 0 332 0 333 0 334 0 335 0 336 0 337 0 338 0 339 0 340 0 341 0 342 0 343 0 344 0 345 0 346 0 347 0 348 0 349 0 350 0 351 0 352 0 353 0 354 0 355 0 356 0 357 0 358 0 359 0 360 0 361 0 362 0 363 0 364 0 365 0 366 0 367 0 368 0 369 0 370 0 371 0 372 0 373 0 374 0 375 0 376 0 377 0 378 0 379 0 380 0 381 0 382 0 383 0 384 0 385 0 386 0 387 0 388 0 389 0 390 0 391 0 392 0 393 0 394 0 395 0 396 0 397 0 398 0 399 0 400 0 401 0 402 0 403 0 404 0 405 0 406 0 407 0 408 0 409 0 410 0 411 0 412 0 413 0 414 0 415 0 416 0 417 0 418 0 419 0 420 0 421 0 422 0 423 0 424 0 425 0 426 0 427 0 428 0 429 0 430 0 431 0 432 0 433 0 434 0 435 0 436 0 437 0 438 0 439 0 440 0 441 0 442 0 443 0 444 0 445 0 446 0 447 0 448 0 449 0 450 0 451 0 452 0 453 0 454 0 455 0 456 0 457 0 458 0 459 0 460 0 461 0 462 0 463 0 464 0 465 0 466 0 467 0 468 0 469 0 470 0 471 0 472 0 473 0 474 0 475 0 476 0 477 0 478 0 479 0 480 0 481 0 482 0 483 0 484 0 485 0 486 0 487 0 488 0 489 0 490 0 491 0 492 0 493 0 494 0 495 0 496 0 497 0 498 0 499 0 500 0 501 0 502 0 503 0 504 0 505 0 506 0 507 0 508 0 509 0 510 0 511 0 512 0 513 0 514 0 515 0 516 0 517 0 518 0 519 0 520 0 521 0 522 0 523 0 524 0 525 0 526 0 527 0 528 0 529 0 530 0 531 0 532 0 533 0 534 0 535 0 536 0 537 0 538 0 539 0 540 0 541 0 542 0 543 0 544 0 545 0 546 0 547 0 548 0 549 0 550 0 551 0 552 0 553 0 554 0 555 0 556 0 557 0 558 0 559 0 560 0 561 0 562 0 563 0 564 0 565 0 566 0 567 0 568 0 569 0 570 0 571 0 572 0 573 0 574 0 575 0 576 0 577 0 578 0 579 0 580 0 581 0 582 0 583 0 584 0 585 0 586 0 587 0 588 0 589 0 590 0 591 0 592 0 593 0 594 0 595 0 596 0 597 0 598 0 599 0 600 0 601 0 602 0 603 0 604 0 605 0 606 0 607 0 608 0 609 0 610 0 611 0 612 0 613 0 614 0 615 0 616 0 617 0 618 0 619 0 620 0 621 0 622 0 623 0 624 0 625 0 626 0 627 0 628 0 629 0 630 0 631 0 632 0 633 0 634 0 635 0 636 0 637 0 638 0 639 0 640 0 641 0 642 0 643 0 644 0 645 0 646 0 647 0 648 0 649 0 650 0 651 0 652 0 653 0 654 0 655 0 656 0 657 0 658 0 659 0 660 0 661 0 662 0 663 0 664 0 665 0 666 0 667 0 668 0 669 0 670 0 671 0 672 0 673 0 674 0 675 0 676 0 677 0 678 0 679 0 680 0 681 0 682 0 683 0 684 0 685 0 686 0 687 0 688 0 689 0 690 0 691 0 692 0 693 0 694 0 695 0 696 0 697 0 698 0 699 0 700 0 701 0 702 0 703 0 704 0 705 0 706 0 707 0 708 0 709 0 710 0 711 0 712 0 713 0 714 0 715 0 716 0 717 0 718 0 719 0 720 0 721 0 722 0 723 0 724 0 725 0 726 0 727 0 728 0 729 0 730 0 731 0 732 0 733 0 734 0 735 0 736 0 737 0 738 0 739 0 740 0 741 0 742 0 743 0 744 0 745 0 746 0 747 0 748 0 749 0 750 0 751 0 752 0 753 0 754 0 755 0 756 0 757 0 758 0 759 0 760 0 761 0 762 0 763 0 764 0 765 0 766 0 767 0 768 0 769 0 770 0 771 0 772 0 773 0 774 0 775 0 776 0 777 0 778 0 779 0 780 0 781 0 782 0 783 0 784 0 785 0 786 0 787 0 788 0 789 0 790 0 791 0 792 0 793 0 794 0 795 0 796 0 797 0 798 0 799 0 800 0 801 0 802 0 803 0 804 0 805 0 806 0 807 0 808 0 809 0 810 0 811 0 812 0 813 0 814 0 815 0 816 0 817 0 818 0 819 0 820 0 821 0 822 0 823 0 824 0 825 0 826 0 827 0 828 0 829 0 830 0 831 0 832 0 833 0 834 0 835 0 836 0 837 0 838 0 839 0 840 0 841 0 842 0 843 0 844 0 845 0 846 0 847 0 848 0 849 0 850 0 851 0 852 0 853 0 854 0 855 0 856 0 857 0 858 0 859 0 860 0 861 0 862 0 863 0 864 0 865 0 866 0 867 0 868 0 869 0 870 0 871 0 872 0 873 0 874 0 875 0 876 0 877 0 878 0 879 0 880 0 881 0 882 0 883 0 884 0 885 0 886 0 887 0 888 0 889 0 890 0 891 0 892 0 893 0 894 0 895 0 896 0 897 0 898 0 899 0 900 0 901 0 902 0 903 0 904 0 905 0 906 0 907 0 908 0 909 0 910 0 911 0 912 0 913 0 914 0 915 0 916 0 917 0 918 0 919 0 920 0 921 0 922 0 923 0 924 0 925 0 926 0 927 0 928 0 929 0 930 0 931 0 932 0 933 0 934 0 935 0 936 0 937 0 938 0 939 0 940 0 941 0 942 0 943 0 944 0 945 0 946 0 947 0 948 0 949 0 950 0 951 0 952 0 953 0 954 0 955 0 956 0 957 0 958 0 959 0 960 0 961 0 962 0 963 0 964 0 965 0 966 0 967 0 968 0 969 0 970 0 971 0 972 0 973 0 974 0 975 0 976 0 977 0 978 0 979 0 980 0 981 0 982 0 983 0 984 0 985 0 986 0 987 0 988 0 989 0 990 0 991 0 992 0 993 0 994 0 995 0 996 0 997 0 998 0 999 1 0 1 1 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 10 1 11 1 12 1 13 1 14 1 15 1 16 1 17 1 18 1 19 1 20 1 21 1 22 1 23 1 24 1 25 1 26 1 27 1 28 1 29 1 30 1 31 1 32 1 33 1 34 1 35 1 36 1 37 1 38 1 39 1 40 1 41 1 42 1 43 1 44 1 45 1 46 1 47 1 48 1 49 1 50 1 51 1 52 1 53 1 54 1 55 1 56 1 57 1 58 1 59 1 60 1 61 1 62 1 63 1 64 1 65 1 66 1 67 1 68 1 69 1 70 1 71 1 72 1 73 1 74 1 75 1 76 1 77 1 78 1 79 1 80 1 81 1 82 1 83 1 84 1 85 1 86 1 87 1 88 1 89 1 90 1 91 1 92 1 93 1 94 1 95 1 96 1 97 1 98 1 99 1 100 1 101 1 102 1 103 1 104 1 105 1 106 1 107 1 108 1 109 1 110 1 111 1 112 1 113 1 114 1 115 1 116 1 117 1 118 1 119 1 120 1 121 1 122 1 123 1 124 1 125 1 126 1 127 1 128 1 129 1 130 1 131 1 132 1 133 1 134 1 135 1 136 1 137 1 138 1 139 1 140 1 141 1 142 1 143 1 144 1 145 1 146 1 147 1 148 1 149 1 150 1 151 1 152 1 153 1 154 1 155 1 156 1 157 1 158 1 159 1 160 1 161 1 162 1 163 1 164 1 165 1 166 1 167 1 168 1 169 1 170 1 171 1 172 1 173 1 174 1 175 1 176 1 177 1 178 1 179 1 180 1 181 1 182 1 183 1 184 1 185 1 186 1 187 1 188 1 189 1 190 1 191 1 192 1 193 1 194 1 195 1 196 1 197 1 198 1 199 1 200 1 201 1 202 1 203 1 204 1 205 1 206 1 207 1 208 1 209 1 210 1 211 1 212 1 213 1 214 1 215 1 216 1 217 1 218 1 219 1 220 1 221 1 222 1 223 1 224 1 225 1 226 1 227 1 228 1 229 1 230 1 231 1 232 1 233 1 234 1 235 1 236 1 237 1 238 1 239 1 240 1 241 1 242 1 243 1 244 1 245 1 246 1 247 1 248 1 249 1 250 1 251 1 252 1 253 1 254 1 255 1 256 1 257 1 258 1 259 1 260 1 261 1 262 1 263 1 264 1 265 1 266 1 267 1 268 1 269 1 270 1 271 1 272 1 273 1 274 1 275 1 276 1 277 1 278 1 279 1 280 1 281 1 282 1 283 1 284 1 285 1 286 1 287 1 288 1 289 1 290 1 291 1 292 1 293 1 294 1 295 1 296 1 297 1 298 1 299 1 300 1 301 1 302 1 303 1 304 1 305 1 306 1 307 1 308 1 309 1 310 1 311 1 312 1 313 1 314 1 315 1 316 1 317 1 318 1 319 1 320 1 321 1 322 1 323 1 324 1 325 1 326 1 327 1 328 1 329 1 330 1 331 1 332 1 333 1 334 1 335 1 336 1 337 1 338 1 339 1 340 1 341 1 342 1 343 1 344 1 345 1 346 1 347 1 348 1 349 1 350 1 351 1 352 1 353 1 354 1 355 1 356 1 357 1 358 1 359 1 360 1 361 1 362 1 363 1 364 1 365 1 366 1 367 1 368 1 369 1 370 1 371 1 372 1 373 1 374 1 375 1 376 1 377 1 378 1 379 1 380 1 381 1 382 1 383 1 384 1 385 1 386 1 387 1 388 1 389 1 390 1 391 1 392 1 393 1 394 1 395 1 396 1 397 1 398 1 399 1 400 1 401 1 402 1 403 1 404 1 405 1 406 1 407 1 408 1 409 1 410 1 411 1 412 1 413 1 414 1 415 1 416 1 417 1 418 1 419 1 420 1 421 1 422 1 423 1 424 1 425 1 426 1 427 1 428 1 429 1 430 1 431 1 432 1 433 1 434 1 435 1 436 1 437 1 438 1 439 1 440 1 441 1 442 1 443 1 444 1 445 1 446 1 447 1 448 1 449 1 450 1 451 1 452 1 453 1 454 1 455 1 456 1 457 1 458 1 459 1 460 1 461 1 462 1 463 1 464 1 465 1 466 1 467 1 468 1 469 1 470 1 471 1 472 1 473 1 474 1 475 1 476 1 477 1 478 1 479 1 480 1 481 1 482 1 483 1 484 1 485 1 486 1 487 1 488 1 489 1 490 1 491 1 492 1 493 1 494 1 495 1 496 1 497 1 498 1 499 1 500 1 501 1 502 1 503 1 504 1 505 1 506 1 507 1 508 1 509 1 510 1 511 1 512 1 513 1 514 1 515 1 516 1 517 1 518 1 519 1 520 1 521 1 522 1 523 1 524 1 525 1 526 1 527 1 528 1 529 1 530 1 531 1 532 1 533 1 534 1 535 1 536 1 537 1 538 1 539 1 540 1 541 1 542 1 543 1 544 1 545 1 546 1 547 1 548 1 549 1 550 1 551 1 552 1 553 1 554 1 555 1 556 1 557 1 558 1 559 1 560 1 561 1 562 1 563 1 564 1 565 1 566 1 567 1 568 1 569 1 570 1 571 1 572 1 573 1 574 1 575 1 576 1 577 1 578 1 579 1 580 1 581 1 582 1 583 1 584 1 585 1 586 1 587 1 588 1 589 1 590 1 591 1 592 1 593 1 594 1 595 1 596 1 597 1 598 1 599 1 600 1 601 1 602 1 603 1 604 1 605 1 606 1 607 1 608 1 609 1 610 1 611 1 612 1 613 1 614 1 615 1 616 1 617 1 618 1 619 1 620 1 621 1 622 1 623 1 624 1 625 1 626 1 627 1 628 1 629 1 630 1 631 1 632 1 633 1 634 1 635 1 636 1 637 1 638 1 639 1 640 1 641 1 642 1 643 1 644 1 645 1 646 1 647 1 648 1 649 1 650 1 651 1 652 1 653 1 654 1 655 1 656 1 657 1 658 1 659 1 660 1 661 1 662 1 663 1 664 1 665 1 666 1 667 1 668 1 669 1 670 1 671 1 672 1 673 1 674 1 675 1 676 1 677 1 678 1 679 1 680 1 681 1 682 1 683 1 684 1 685 1 686 1 687 1 688 1 689 1 690 1 691 1 692 1 693 1 694 1 695 1 696 1 697 1 698 1 699 1 700 1 701 1 702 1 703 1 704 1 705 1 706 1 707 1 708 1 709 1 710 1 711 1 712 1 713 1 714 1 715 1 716 1 717 1 718 1 719 1 720 1 721 1 722 1 723 1 724 1 725 1 726 1 727 1 728 1 729 1 730 1 731 1 732 1 733 1 734 1 735 1 736 1 737 1 738 1 739 1 740 1 741 1 742 1 743 1 744 1 745 1 746 1 747 1 748 1 749 1 750 1 751 1 752 1 753 1 754 1 755 1 756 1 757 1 758 1 759 1 760 1 761 1 762 1 763 1 764 1 765 1 766 1 767 1 768 1 769 1 770 1 771 1 772 1 773 1 774 1 775 1 776 1 777 1 778 1 779 1 780 1 781 1 782 1 783 1 784 1 785 1 786 1 787 1 788 1 789 1 790 1 791 1 792 1 793 1 794 1 795 1 796 1 797 1 798 1 799 1 800 1 801 1 802 1 803 1 804 1 805 1 806 1 807 1 808 1 809 1 810 1 811 1 812 1 813 1 814 1 815 1 816 1 817 1 818 1 819 1 820 1 821 1 822 1 823 1 824 1 825 1 826 1 827 1 828 1 829 1 830 1 831 1 832 1 833 1 834 1 835 1 836 1 837 1 838 1 839 1 840 1 841 1 842 1 843 1 844 1 845 1 846 1 847 1 848 1 849 1 850 1 851 1 852 1 853 1 854 1 855 1 856 1 857 1 858 1 859 1 860 1 861 1 862 1 863 1 864 1 865 1 866 1 867 1 868 1 869 1 870 1 871 1 872 1 873 1 874 1 875 1 876 1 877 1 878 1 879 1 880 1 881 1 882 1 883 1 884 1 885 1 886 1 887 1 888 1 889 1 890 1 891 1 892 1 893 1 894 1 895 1 896 1 897 1 898 1 899 1 900 1 901 1 902 1 903 1 904 1 905 1 906 1 907 1 908 1 909 1 910 1 911 1 912 1 913 1 914 1 915 1 916 1 917 1 918 1 919 1 920 1 921 1 922 1 923 1 924 1 925 1 926 1 927 1 928 1 929 1 930 1 931 1 932 1 933 1 934 1 935 1 936 1 937 1 938 1 939 1 940 1 941 1 942 1 943 1 944 1 945 1 946 1 947 1 948 1 949 1 950 1 951 1 952 1 953 1 954 1 955 1 956 1 957 1 958 1 959 1 960 1 961 1 962 1 963 1 964 1 965 1 966 1 967 1 968 1 969 1 970 1 971 1 972 1 973 1 974 1 975 1 976 1 977 1 978 1 979 1 980 1 981 1 982 1 983 1 984 1 985 1 986 1 987 1 988 1 989 1 990 1 991 1 992 1 993 1 994 1 995 1 996 1 997 1 998 1 999 2 0 2 1 2 2 2 3 2 4 2 5 2 6 2 7 2 8 2 9 2 10 2 11 2 12 2 13 2 14 2 15 2 16 2 17 2 18 2 19 2 20 2 21 2 22 2 23 2 24 2 25 2 26 2 27 2 28 2 29 2 30 2 31 2 32 2 33 2 34 2 35 2 36 2 37 2 38 2 39 2 40 2 41 2 42 2 43 2 44 2 45 2 46 2 47 2 48 2 49 2 50 2 51 2 52 2 53 2 54 2 55 2 56 2 57 2 58 2 59 2 60 2 61 2 62 2 63 2 64 2 65 2 66 2 67 2 68 2 69 2 70 2 71 2 72 2 73 2 74 2 75 2 76 2 77 2 78 2 79 2 80 2 81 2 82 2 83 2 84 2 85 2 86 2 87 2 88 2 89 2 90 2 91 2 92 2 93 2 94 2 95 2 96 2 97 2 98 2 99 2 100 2 101 2 102 2 103 2 104 2 105 2 106 2 107 2 108 2 109 2 110 2 111 2 112 2 113 2 114 2 115 2 116 2 117 2 118 2 119 2 120 2 121 2 122 2 123 2 124 2 125 2 126 2 127 2 128 2 129 2 130 2 131 2 132 2 133 2 134 2 135 2 136 2 137 2 138 2 139 2 140 2 141 2 142 2 143 2 144 2 145 2 146 2 147 2 148 2 149 2 150 2 151 2 152 2 153 2 154 2 155 2 156 2 157 2 158 2 159 2 160 2 161 2 162 2 163 2 164 2 165 2 166 2 167 2 168 2 169 2 170 2 171 2 172 2 173 2 174 2 175 2 176 2 177 2 178 2 179 2 180 2 181 2 182 2 183 2 184 2 185 2 186 2 187 2 188 2 189 2 190 2 191 2 192 2 193 2 194 2 195 2 196 2 197 2 198 2 199 2 200 2 201 2 202 2 203 2 204 2 205 2 206 2 207 2 208 2 209 2 210 2 211 2 212 2 213 2 214 2 215 2 216 2 217 2 218 2 219 2 220 2 221 2 222 2 223 2 224 2 225 2 226 2 227 2 228 2 229 2 230 2 231 2 232 2 233 2 234 2 235 2 236 2 237 2 238 2 239 2 240 2 241 2 242 2 243 2 244 2 245 2 246 2 247 2 248 2 249 2 250 2 251 2 252 2 253 2 254 2 255 2 256 2 257 2 258 2 259 2 260 2 261 2 262 2 263 2 264 2 265 2 266 2 267 2 268 2 269 2 270 2 271 2 272 2 273 2 274 2 275 2 276 2 277 2 278 2 279 2 280 2 281 2 282 2 283 2 284 2 285 2 286 2 287 2 288 2 289 2 290 2 291 2 292 2 293 2 294 2 295 2 296 2 297 2 298 2 299 2 300 2 301 2 302 2 303 2 304 2 305 2 306 2 307 2 308 2 309 2 310 2 311 2 312 2 313 2 314 2 315 2 316 2 317 2 318 2 319 2 320 2 321 2 322 2 323 2 324 2 325 2 326 2 327 2 328 2 329 2 330 2 331 2 332 2 333 2 334 2 335 2 336 2 337 2 338 2 339 2 340 2 341 2 342 2 343 2 344 2 345 2 346 2 347 2 348 2 349 2 350 2 351 2 352 2 353 2 354 2 355 2 356 2 357 2 358 2 359 2 360 2 361 2 362 2 363 2 364 2 365 2 366 2 367 2 368 2 369 2 370 2 371 2 372 2 373 2 374 2 375 2 376 2 377 2 378 2 379 2 380 2 381 2 382 2 383 2 384 2 385 2 386 2 387 2 388 2 389 2 390 2 391 2 392 2 393 2 394 2 395 2 396 2 397 2 398 2 399 2 400 2 401 2 402 2 403 2 404 2 405 2 406 2 407 2 408 2 409 2 410 2 411 2 412 2 413 2 414 2 415 2 416 2 417 2 418 2 419 2 420 2 421 2 422 2 423 2 424 2 425 2 426 2 427 2 428 2 429 2 430 2 431 2 432 2 433 2 434 2 435 2 436 2 437 2 438 2 439 2 440 2 441 2 442 2 443 2 444 2 445 2 446 2 447 2 448 2 449 2 450 2 451 2 452 2 453 2 454 2 455 2 456 2 457 2 458 2 459 2 460 2 461 2 462 2 463 2 464 2 465 2 466 2 467 2 468 2 469 2 470 2 471 2 472 2 473 2 474 2 475 2 476 2 477 2 478 2 479 2 480 2 481 2 482 2 483 2 484 2 485 2 486 2 487 2 488 2 489 2 490 2 491 2 492 2 493 2 494 2 495 2 496 2 497 2 498 2 499 2 500 2 501 2 502 2 503 2 504 2 505 2 506 2 507 2 508 2 509 2 510 2 511 2 512 2 513 2 514 2 515 2 516 2 517 2 518 2 519 2 520 2 521 2 522 2 523 2 524 2 525 2 526 2 527 2 528 2 529 2 530 2 531 2 532 2 533 2 534 2 535 2 536 2 537 2 538 2 539 2 540 2 541 2 542 2 543 2 544 2 545 2 546 2 547 2 548 2 549 2 550 2 551 2 552 2 553 2 554 2 555 2 556 2 557 2 558 2 559 2 560 2 561 2 562 2 563 2 564 2 565 2 566 2 567 2 568 2 569 2 570 2 571 2 572 2 573 2 574 2 575 2 576 2 577 2 578 2 579 2 580 2 581 2 582 2 583 2 584 2 585 2 586 2 587 2 588 2 589 2 590 2 591 2 592 2 593 2 594 2 595 2 596 2 597 2 598 2 599 2 600 2 601 2 602 2 603 2 604 2 605 2 606 2 607 2 608 2 609 2 610 2 611 2 612 2 613 2 614 2 615 2 616 2 617 2 618 2 619 2 620 2 621 2 622 2 623 2 624 2 625 2 626 2 627 2 628 2 629 2 630 2 631 2 632 2 633 2 634 2 635 2 636 2 637 2 638 2 639 2 640 2 641 2 642 2 643 2 644 2 645 2 646 2 647 2 648 2 649 2 650 2 651 2 652 2 653 2 654 2 655 2 656 2 657 2 658 2 659 2 660 2 661 2 662 2 663 2 664 2 665 2 666 2 667 2 668 2 669 2 670 2 671 2 672 2 673 2 674 2 675 2 676 2 677 2 678 2 679 2 680 2 681 2 682 2 683 2 684 2 685 2 686 2 687 2 688 2 689 2 690 2 691 2 692 2 693 2 694 2 695 2 696 2 697 2 698 2 699 2 700 2 701 2 702 2 703 2 704 2 705 2 706 2 707 2 708 2 709 2 710 2 711 2 712 2 713 2 714 2 715 2 716 2 717 2 718 2 719 2 720 2 721 2 722 2 723 2 724 2 725 2 726 2 727 2 728 2 729 2 730 2 731 2 732 2 733 2 734 2 735 2 736 2 737 2 738 2 739 2 740 2 741 2 742 2 743 2 744 2 745 2 746 2 747 2 748 2 749 2 750 2 751 2 752 2 753 2 754 2 755 2 756 2 757 2 758 2 759 2 760 2 761 2 762 2 763 2 764 2 765 2 766 2 767 2 768 2 769 2 770 2 771 2 772 2 773 2 774 2 775 2 776 2 777 2 778 2 779 2 780 2 781 2 782 2 783 2 784 2 785 2 786 2 787 2 788 2 789 2 790 2 791 2 792 2 793 2 794 2 795 2 796 2 797 2 798 2 799 2 800 2 801 2 802 2 803 2 804 2 805 2 806 2 807 2 808 2 809 2 810 2 811 2 812 2 813 2 814 2 815 2 816 2 817 2 818 2 819 2 820 2 821 2 822 2 823 2 824 2 825 2 826 2 827 2 828 2 829 2 830 2 831 2 832 2 833 2 834 2 835 2 836 2 837 2 838 2 839 2 840 2 841 2 842 2 843 2 844 2 845 2 846 2 847 2 848 2 849 2 850 2 851 2 852 2 853 2 854 2 855 2 856 2 857 2 858 2 859 2 860 2 861 2 862 2 863 2 864 2 865 2 866 2 867 2 868 2 869 2 870 2 871 2 872 2 873 2 874 2 875 2 876 2 877 2 878 2 879 2 880 2 881 2 882 2 883 2 884 2 885 2 886 2 887 2 888 2 889 2 890 2 891 2 892 2 893 2 894 2 895 2 896 2 897 2 898 2 899 2 900 2 901 2 902 2 903 2 904 2 905 2 906 2 907 2 908 2 909 2 910 2 911 2 912 2 913 2 914 2 915 2 916 2 917 2 918 2 919 2 920 2 921 2 922 2 923 2 924 2 925 2 926 2 927 2 928 2 929 2 930 2 931 2 932 2 933 2 934 2 935 2 936 2 937 2 938 2 939 2 940 2 941 2 942 2 943 2 944 2 945 2 946 2 947 2 948 2 949 2 950 2 951 2 952 2 953 2 954 2 955 2 956 2 957 2 958 2 959 2 960 2 961 2 962 2 963 2 964 2 965 2 966 2 967 2 968 2 969 2 970 2 971 2 972 2 973 2 974 2 975 2 976 2 977 2 978 2 979 2 980 2 981 2 982 2 983 2 984 2 985 2 986 2 987 2 988 2 989 2 990 2 991 2 992 2 993 2 994 2 995 2 996 2 997 2 998 2 999 3 0 3 1 3 2 3 3 3 4 3 5 3 6 3 7 3 8 3 9 3 10 3 11 3 12 3 13 3 14 3 15 3 16 3 17 3 18 3 19 3 20 3 21 3 22 3 23 3 24 3 25 3 26 3 27 3 28 3 29 3 30 3 31 3 32 3 33 3 34 3 35 3 36 3 37 3 38 3 39 3 40 3 41 3 42 3 43 3 44 3 45 3 46 3 47 3 48 3 49 3 50 3 51 3 52 3 53 3 54 3 55 3 56 3 57 3 58 3 59 3 60 3 61 3 62 3 63 3 64 3 65 3 66 3 67 3 68 3 69 3 70 3 71 3 72 3 73 3 74 3 75 3 76 3 77 3 78 3 79 3 80 3 81 3 82 3 83 3 84 3 85 3 86 3 87 3 88 3 89 3 90 3 91 3 92 3 93 3 94 3 95 3 96 3 97 3 98 3 99 3 100 3 101 3 102 3 103 3 104 3 105 3 106 3 107 3 108 3 109 3 110 3 111 3 112 3 113 3 114 3 115 3 116 3 117 3 118 3 119 3 120 3 121 3 122 3 123 3 124 3 125 3 126 3 127 3 128 3 129 3 130 3 131 3 132 3 133 3 134 3 135 3 136 3 137 3 138 3 139 3 140 3 141 3 142 3 143 3 144 3 145 3 146 3 147 3 148 3 149 3 150 3 151 3 152 3 153 3 154 3 155 3 156 3 157 3 158 3 159 3 160 3 161 3 162 3 163 3 164 3 165 3 166 3 167 3 168 3 169 3 170 3 171 3 172 3 173 3 174 3 175 3 176 3 177 3 178 3 179 3 180 3 181 3 182 3 183 3 184 3 185 3 186 3 187 3 188 3 189 3 190 3 191 3 192 3 193 3 194 3 195 3 196 3 197 3 198 3 199 3 200 3 201 3 202 3 203 3 204 3 205 3 206 3 207 3 208 3 209 3 210 3 211 3 212 3 213 3 214 3 215 3 216 3 217 3 218 3 219 3 220 3 221 3 222 3 223 3 224 3 225 3 226 3 227 3 228 3 229 3 230 3 231 3 232 3 233 3 234 3 235 3 236 3 237 3 238 3 239 3 240 3 241 3 242 3 243 3 244 3 245 3 246 3 247 3 248 3 249 3 250 3 251 3 252 3 253 3 254 3 255 3 256 3 257 3 258 3 259 3 260 3 261 3 262 3 263 3 264 3 265 3 266 3 267 3 268 3 269 3 270 3 271 3 272 3 273 3 274 3 275 3 276 3 277 3 278 3 279 3 280 3 281 3 282 3 283 3 284 3 285 3 286 3 287 3 288 3 289 3 290 3 291 3 292 3 293 3 294 3 295 3 296 3 297 3 298 3 299 3 300 3 301 3 302 3 303 3 304 3 305 3 306 3 307 3 308 3 309 3 310 3 311 3 312 3 313 3 314 3 315 3 316 3 317 3 318 3 319 3 320 3 321 3 322 3 323 3 324 3 325 3 326 3 327 3 328 3 329 3 330 3 331 3 332 3 333 3 334 3 335 3 336 3 337 3 338 3 339 3 340 3 341 3 342 3 343 3 344 3 345 3 346 3 347 3 348 3 349 3 350 3 351 3 352 3 353 3 354 3 355 3 356 3 357 3 358 3 359 3 360 3 361 3 362 3 363 3 364 3 365 3 366 3 367 3 368 3 369 3 370 3 371 3 372 3 373 3 374 3 375 3 376 3 377 3 378 3 379 3 380 3 381 3 382 3 383 3 384 3 385 3 386 3 387 3 388 3 389 3 390 3 391 3 392 3 393 3 394 3 395 3 396 3 397 3 398 3 399 3 400 3 401 3 402 3 403 3 404 3 405 3 406 3 407 3 408 3 409 3 410 3 411 3 412 3 413 3 414 3 415 3 416 3 417 3 418 3 419 3 420 3 421 3 422 3 423 3 424 3 425 3 426 3 427 3 428 3 429 3 430 3 431 3 432 3 433 3 434 3 435 3 436 3 437 3 438 3 439 3 440 3 441 3 442 3 443 3 444 3 445 3 446 3 447 3 448 3 449 3 450 3 451 3 452 3 453 3 454 3 455 3 456 3 457 3 458 3 459 3 460 3 461 3 462 3 463 3 464 3 465 3 466 3 467 3 468 3 469 3 470 3 471 3 472 3 473 3 474 3 475 3 476 3 477 3 478 3 479 3 480 3 481 3 482 3 483 3 484 3 485 3 486 3 487 3 488 3 489 3 490 3 491 3 492 3 493 3 494 3 495 3 496 3 497 3 498 3 499 3 500 3 501 3 502 3 503 3 504 3 505 3 506 3 507 3 508 3 509 3 510 3 511 3 512 3 513 3 514 3 515 3 516 3 517 3 518 3 519 3 520 3 521 3 522 3 523 3 524 3 525 3 526 3 527 3 528 3 529 3 530 3 531 3 532 3 533 3 534 3 535 3 536 3 537 3 538 3 539 3 540 3 541 3 542 3 543 3 544 3 545 3 546 3 547 3 548 3 549 3 550 3 551 3 552 3 553 3 554 3 555 3 556 3 557 3 558 3 559 3 560 3 561 3 562 3 563 3 564 3 565 3 566 3 567 3 568 3 569 3 570 3 571 3 572 3 573 3 574 3 575 3 576 3 577 3 578 3 579 3 580 3 581 3 582 3 583 3 584 3 585 3 586 3 587 3 588 3 589 3 590 3 591 3 592 3 593 3 594 3 595 3 596 3 597 3 598 3 599 3 600 3 601 3 602 3 603 3 604 3 605 3 606 3 607 3 608 3 609 3 610 3 611 3 612 3 613 3 614 3 615 3 616 3 617 3 618 3 619 3 620 3 621 3 622 3 623 3 624 3 625 3 626 3 627 3 628 3 629 3 630 3 631 3 632 3 633 3 634 3 635 3 636 3 637 3 638 3 639 3 640 3 641 3 642 3 643 3 644 3 645 3 646 3 647 3 648 3 649 3 650 3 651 3 652 3 653 3 654 3 655 3 656 3 657 3 658 3 659 3 660 3 661 3 662 3 663 3 664 3 665 3 666 3 667 3 668 3 669 3 670 3 671 3 672 3 673 3 674 3 675 3 676 3 677 3 678 3 679 3 680 3 681 3 682 3 683 3 684 3 685 3 686 3 687 3 688 3 689 3 690 3 691 3 692 3 693 3 694 3 695 3 696 3 697 3 698 3 699 3 700 3 701 3 702 3 703 3 704 3 705 3 706 3 707 3 708 3 709 3 710 3 711 3 712 3 713 3 714 3 715 3 716 3 717 3 718 3 719 3 720 3 721 3 722 3 723 3 724 3 725 3 726 3 727 3 728 3 729 3 730 3 731 3 732 3 733 3 734 3 735 3 736 3 737 3 738 3 739 3 740 3 741 3 742 3 743 3 744 3 745 3 746 3 747 3 748 3 749 3 750 3 751 3 752 3 753 3 754 3 755 3 756 3 757 3 758 3 759 3 760 3 761 3 762 3 763 3 764 3 765 3 766 3 767 3 768 3 769 3 770 3 771 3 772 3 773 3 774 3 775 3 776 3 777 3 778 3 779 3 780 3 781 3 782 3 783 3 784 3 785 3 786 3 787 3 788 3 789 3 790 3 791 3 792 3 793 3 794 3 795 3 796 3 797 3 798 3 799 3 800 3 801 3 802 3 803 3 804 3 805 3 806 3 807 3 808 3 809 3 810 3 811 3 812 3 813 3 814 3 815 3 816 3 817 3 818 3 819 3 820 3 821 3 822 3 823 3 824 3 825 3 826 3 827 3 828 3 829 3 830 3 831 3 832 3 833 3 834 3 835 3 836 3 837 3 838 3 839 3 840 3 841 3 842 3 843 3 844 3 845 3 846 3 847 3 848 3 849 3 850 3 851 3 852 3 853 3 854 3 855 3 856 3 857 3 858 3 859 3 860 3 861 3 862 3 863 3 864 3 865 3 866 3 867 3 868 3 869 3 870 3 871 3 872 3 873 3 874 3 875 3 876 3 877 3 878 3 879 3 880 3 881 3 882 3 883 3 884 3 885 3 886 3 887 3 888 3 889 3 890 3 891 3 892 3 893 3 894 3 895 3 896 3 897 3 898 3 899 3 900 3 901 3 902 3 903 3 904 3 905 3 906 3 907 3 908 3 909 3 910 3 911 3 912 3 913 3 914 3 915 3 916 3 917 3 918 3 919 3 920 3 921 3 922 3 923 3 924 3 925 3 926 3 927 3 928 3 929 3 930 3 931 3 932 3 933 3 934 3 935 3 936 3 937 3 938 3 939 3 940 3 941 3 942 3 943 3 944 3 945 3 946 3 947 3 948 3 949 3 950 3 951 3 952 3 953 3 954 3 955 3 956 3 957 3 958 3 959 3 960 3 961 3 962 3 963 3 964 3 965 3 966 3 967 3 968 3 969 3 970 3 971 3 972 3 973 3 974 3 975 3 976 3 977 3 978 3 979 3 980 3 981 3 982 3 983 3 984 3 985 3 986 3 987 3 988 3 989 3 990 3 991 3 992 3 993 3 994 3 995 3 996 3 997 3 998 3 999 4 0 4 1 4 2 4 3 4 4 4 5 4 6 4 7 4 8 4 9 4 10 4 11 4 12 4 13 4 14 4 15 4 16 4 17 4 18 4 19 4 20 4 21 4 22 4 23 4 24 4 25 4 26 4 27 4 28 4 29 4 30 4 31 4 32 4 33 4 34 4 35 4 36 4 37 4 38 4 39 4 40 4 41 4 42 4 43 4 44 4 45 4 46 4 47 4 48 4 49 4 50 4 51 4 52 4 53 4 54 4 55 4 56 4 57 4 58 4 59 4 60 4 61 4 62 4 63 4 64 4 65 4 66 4 67 4 68 4 69 4 70 4 71 4 72 4 73 4 74 4 75 4 76 4 77 4 78 4 79 4 80 4 81 4 82 4 83 4 84 4 85 4 86 4 87 4 88 4 89 4 90 4 91 4 92 4 93 4 94 4 95 4 96 4 97 4 98 4 99 4 100 4 101 4 102 4 103 4 104 4 105 4 106 4 107 4 108 4 109 4 110 4 111 4 112 4 113 4 114 4 115 4 116 4 117 4 118 4 119 4 120 4 121 4 122 4 123 4 124 4 125 4 126 4 127 4 128 4 129 4 130 4 131 4 132 4 133 4 134 4 135 4 136 4 137 4 138 4 139 4 140 4 141 4 142 4 143 4 144 4 145 4 146 4 147 4 148 4 149 4 150 4 151 4 152 4 153 4 154 4 155 4 156 4 157 4 158 4 159 4 160 4 161 4 162 4 163 4 164 4 165 4 166 4 167 4 168 4 169 4 170 4 171 4 172 4 173 4 174 4 175 4 176 4 177 4 178 4 179 4 180 4 181 4 182 4 183 4 184 4 185 4 186 4 187 4 188 4 189 4 190 4 191 4 192 4 193 4 194 4 195 4 196 4 197 4 198 4 199 4 200 4 201 4 202 4 203 4 204 4 205 4 206 4 207 4 208 4 209 4 210 4 211 4 212 4 213 4 214 4 215 4 216 4 217 4 218 4 219 4 220 4 221 4 222 4 223 4 224 4 225 4 226 4 227 4 228 4 229 4 230 4 231 4 232 4 233 4 234 4 235 4 236 4 237 4 238 4 239 4 240 4 241 4 242 4 243 4 244 4 245 4 246 4 247 4 248 4 249 4 250 4 251 4 252 4 253 4 254 4 255 4 256 4 257 4 258 4 259 4 260 4 261 4 262 4 263 4 264 4 265 4 266 4 267 4 268 4 269 4 270 4 271 4 272 4 273 4 274 4 275 4 276 4 277 4 278 4 279 4 280 4 281 4 282 4 283 4 284 4 285 4 286 4 287 4 288 4 289 4 290 4 291 4 292 4 293 4 294 4 295 4 296 4 297 4 298 4 299 4 300 4 301 4 302 4 303 4 304 4 305 4 306 4 307 4 308 4 309 4 310 4 311 4 312 4 313 4 314 4 315 4 316 4 317 4 318 4 319 4 320 4 321 4 322 4 323 4 324 4 325 4 326 4 327 4 328 4 329 4 330 4 331 4 332 4 333 4 334 4 335 4 336 4 337 4 338 4 339 4 340 4 341 4 342 4 343 4 344 4 345 4 346 4 347 4 348 4 349 4 350 4 351 4 352 4 353 4 354 4 355 4 356 4 357 4 358 4 359 4 360 4 361 4 362 4 363 4 364 4 365 4 366 4 367 4 368 4 369 4 370 4 371 4 372 4 373 4 374 4 375 4 376 4 377 4 378 4 379 4 380 4 381 4 382 4 383 4 384 4 385 4 386 4 387 4 388 4 389 4 390 4 391 4 392 4 393 4 394 4 395 4 396 4 397 4 398 4 399 4 400 4 401 4 402 4 403 4 404 4 405 4 406 4 407 4 408 4 409 4 410 4 411 4 412 4 413 4 414 4 415 4 416 4 417 4 418 4 419 4 420 4 421 4 422 4 423 4 424 4 425 4 426 4 427 4 428 4 429 4 430 4 431 4 432 4 433 4 434 4 435 4 436 4 437 4 438 4 439 4 440 4 441 4 442 4 443 4 444 4 445 4 446 4 447 4 448 4 449 4 450 4 451 4 452 4 453 4 454 4 455 4 456 4 457 4 458 4 459 4 460 4 461 4 462 4 463 4 464 4 465 4 466 4 467 4 468 4 469 4 470 4 471 4 472 4 473 4 474 4 475 4 476 4 477 4 478 4 479 4 480 4 481 4 482 4 483 4 484 4 485 4 486 4 487 4 488 4 489 4 490 4 491 4 492 4 493 4 494 4 495 4 496 4 497 4 498 4 499 4 500 4 501 4 502 4 503 4 504 4 505 4 506 4 507 4 508 4 509 4 510 4 511 4 512 4 513 4 514 4 515 4 516 4 517 4 518 4 519 4 520 4 521 4 522 4 523 4 524 4 525 4 526 4 527 4 528 4 529 4 530 4 531 4 532 4 533 4 534 4 535 4 536 4 537 4 538 4 539 4 540 4 541 4 542 4 543 4 544 4 545 4 546 4 547 4 548 4 549 4 550 4 551 4 552 4 553 4 554 4 555 4 556 4 557 4 558 4 559 4 560 4 561 4 562 4 563 4 564 4 565 4 566 4 567 4 568 4 569 4 570 4 571 4 572 4 573 4 574 4 575 4 576 4 577 4 578 4 579 4 580 4 581 4 582 4 583 4 584 4 585 4 586 4 587 4 588 4 589 4 590 4 591 4 592 4 593 4 594 4 595 4 596 4 597 4 598 4 599 4 600 4 601 4 602 4 603 4 604 4 605 4 606 4 607 4 608 4 609 4 610 4 611 4 612 4 613 4 614 4 615 4 616 4 617 4 618 4 619 4 620 4 621 4 622 4 623 4 624 4 625 4 626 4 627 4 628 4 629 4 630 4 631 4 632 4 633 4 634 4 635 4 636 4 637 4 638 4 639 4 640 4 641 4 642 4 643 4 644 4 645 4 646 4 647 4 648 4 649 4 650 4 651 4 652 4 653 4 654 4 655 4 656 4 657 4 658 4 659 4 660 4 661 4 662 4 663 4 664 4 665 4 666 4 667 4 668 4 669 4 670 4 671 4 672 4 673 4 674 4 675 4 676 4 677 4 678 4 679 4 680 4 681 4 682 4 683 4 684 4 685 4 686 4 687 4 688 4 689 4 690 4 691 4 692 4 693 4 694 4 695 4 696 4 697 4 698 4 699 4 700 4 701 4 702 4 703 4 704 4 705 4 706 4 707 4 708 4 709 4 710 4 711 4 712 4 713 4 714 4 715 4 716 4 717 4 718 4 719 4 720 4 721 4 722 4 723 4 724 4 725 4 726 4 727 4 728 4 729 4 730 4 731 4 732 4 733 4 734 4 735 4 736 4 737 4 738 4 739 4 740 4 741 4 742 4 743 4 744 4 745 4 746 4 747 4 748 4 749 4 750 4 751 4 752 4 753 4 754 4 755 4 756 4 757 4 758 4 759 4 760 4 761 4 762 4 763 4 764 4 765 4 766 4 767 4 768 4 769 4 770 4 771 4 772 4 773 4 774 4 775 4 776 4 777 4 778 4 779 4 780 4 781 4 782 4 783 4 784 4 785 4 786 4 787 4 788 4 789 4 790 4 791 4 792 4 793 4 794 4 795 4 796 4 797 4 798 4 799 4 800 4 801 4 802 4 803 4 804 4 805 4 806 4 807 4 808 4 809 4 810 4 811 4 812 4 813 4 814 4 815 4 816 4 817 4 818 4 819 4 820 4 821 4 822 4 823 4 824 4 825 4 826 4 827 4 828 4 829 4 830 4 831 4 832 4 833 4 834 4 835 4 836 4 837 4 838 4 839 4 840 4 841 4 842 4 843 4 844 4 845 4 846 4 847 4 848 4 849 4 850 4 851 4 852 4 853 4 854 4 855 4 856 4 857 4 858 4 859 4 860 4 861 4 862 4 863 4 864 4 865 4 866 4 867 4 868 4 869 4 870 4 871 4 872 4 873 4 874 4 875 4 876 4 877 4 878 4 879 4 880 4 881 4 882 4 883 4 884 4 885 4 886 4 887 4 888 4 889 4 890 4 891 4 892 4 893 4 894 4 895 4 896 4 897 4 898 4 899 4 900 4 901 4 902 4 903 4 904 4 905 4 906 4 907 4 908 4 909 4 910 4 911 4 912 4 913 4 914 4 915 4 916 4 917 4 918 4 919 4 920 4 921 4 922 4 923 4 924 4 925 4 926 4 927 4 928 4 929 4 930 4 931 4 932 4 933 4 934 4 935 4 936 4 937 4 938 4 939 4 940 4 941 4 942 4 943 4 944 4 945 4 946 4 947 4 948 4 949 4 950 4 951 4 952 4 953 4 954 4 955 4 956 4 957 4 958 4 959 4 960 4 961 4 962 4 963 4 964 4 965 4 966 4 967 4 968 4 969 4 970 4 971 4 972 4 973 4 974 4 975 4 976 4 977 4 978 4 979 4 980 4 981 4 982 4 983 4 984 4 985 4 986 4 987 4 988 4 989 4 990 4 991 4 992 4 993 4 994 4 995 4 996 4 997 4 998 4 999 5 0 5 1 5 2 5 3 5 4 5 5 5 6 5 7 5 8 5 9 5 10 5 11 5 12 5 13 5 14 5 15 5 16 5 17 5 18 5 19 5 20 5 21 5 22 5 23 5 24 5 25 5 26 5 27 5 28 5 29 5 30 5 31 5 32 5 33 5 34 5 35 5 36 5 37 5 38 5 39 5 40 5 41 5 42 5 43 5 44 5 45 5 46 5 47 5 48 5 49 5 50 5 51 5 52 5 53 5 54 5 55 5 56 5 57 5 58 5 59 5 60 5 61 5 62 5 63 5 64 5 65 5 66 5 67 5 68 5 69 5 70 5 71 5 72 5 73 5 74 5 75 5 76 5 77 5 78 5 79 5 80 5 81 5 82 5 83 5 84 5 85 5 86 5 87 5 88 5 89 5 90 5 91 5 92 5 93 5 94 5 95 5 96 5 97 5 98 5 99 5 100 5 101 5 102 5 103 5 104 5 105 5 106 5 107 5 108 5 109 5 110 5 111 5 112 5 113 5 114 5 115 5 116 5 117 5 118 5 119 5 120 5 121 5 122 5 123 5 124 5 125 5 126 5 127 5 128 5 129 5 130 5 131 5 132 5 133 5 134 5 135 5 136 5 137 5 138 5 139 5 140 5 141 5 142 5 143 5 144 5 145 5 146 5 147 5 148 5 149 5 150 5 151 5 152 5 153 5 154 5 155 5 156 5 157 5 158 5 159 5 160 5 161 5 162 5 163 5 164 5 165 5 166 5 167 5 168 5 169 5 170 5 171 5 172 5 173 5 174 5 175 5 176 5 177 5 178 5 179 5 180 5 181 5 182 5 183 5 184 5 185 5 186 5 187 5 188 5 189 5 190 5 191 5 192 5 193 5 194 5 195 5 196 5 197 5 198 5 199 5 200 5 201 5 202 5 203 5 204 5 205 5 206 5 207 5 208 5 209 5 210 5 211 5 212 5 213 5 214 5 215 5 216 5 217 5 218 5 219 5 220 5 221 5 222 5 223 5 224 5 225 5 226 5 227 5 228 5 229 5 230 5 231 5 232 5 233 5 234 5 235 5 236 5 237 5 238 5 239 5 240 5 241 5 242 5 243 5 244 5 245 5 246 5 247 5 248 5 249 5 250 5 251 5 252 5 253 5 254 5 255 5 256 5 257 5 258 5 259 5 260 5 261 5 262 5 263 5 264 5 265 5 266 5 267 5 268 5 269 5 270 5 271 5 272 5 273 5 274 5 275 5 276 5 277 5 278 5 279 5 280 5 281 5 282 5 283 5 284 5 285 5 286 5 287 5 288 5 289 5 290 5 291 5 292 5 293 5 294 5 295 5 296 5 297 5 298 5 299 5 300 5 301 5 302 5 303 5 304 5 305 5 306 5 307 5 308 5 309 5 310 5 311 5 312 5 313 5 314 5 315 5 316 5 317 5 318 5 319 5 320 5 321 5 322 5 323 5 324 5 325 5 326 5 327 5 328 5 329 5 330 5 331 5 332 5 333 5 334 5 335 5 336 5 337 5 338 5 339 5 340 5 341 5 342 5 343 5 344 5 345 5 346 5 347 5 348 5 349 5 350 5 351 5 352 5 353 5 354 5 355 5 356 5 357 5 358 5 359 5 360 5 361 5 362 5 363 5 364 5 365 5 366 5 367 5 368 5 369 5 370 5 371 5 372 5 373 5 374 5 375 5 376 5 377 5 378 5 379 5 380 5 381 5 382 5 383 5 384 5 385 5 386 5 387 5 388 5 389 5 390 5 391 5 392 5 393 5 394 5 395 5 396 5 397 5 398 5 399 5 400 5 401 5 402 5 403 5 404 5 405 5 406 5 407 5 408 5 409 5 410 5 411 5 412 5 413 5 414 5 415 5 416 5 417 5 418 5 419 5 420 5 421 5 422 5 423 5 424 5 425 5 426 5 427 5 428 5 429 5 430 5 431 5 432 5 433 5 434 5 435 5 436 5 437 5 438 5 439 5 440 5 441 5 442 5 443 5 444 5 445 5 446 5 447 5 448 5 449 5 450 5 451 5 452 5 453 5 454 5 455 5 456 5 457 5 458 5 459 5 460 5 461 5 462 5 463 5 464 5 465 5 466 5 467 5 468 5 469 5 470 5 471 5 472 5 473 5 474 5 475 5 476 5 477 5 478 5 479 5 480 5 481 5 482 5 483 5 484 5 485 5 486 5 487 5 488 5 489 5 490 5 491 5 492 5 493 5 494 5 495 5 496 5 497 5 498 5 499 5 500 5 501 5 502 5 503 5 504 5 505 5 506 5 507 5 508 5 509 5 510 5 511 5 512 5 513 5 514 5 515 5 516 5 517 5 518 5 519 5 520 5 521 5 522 5 523 5 524 5 525 5 526 5 527 5 528 5 529 5 530 5 531 5 532 5 533 5 534 5 535 5 536 5 537 5 538 5 539 5 540 5 541 5 542 5 543 5 544 5 545 5 546 5 547 5 548 5 549 5 550 5 551 5 552 5 553 5 554 5 555 5 556 5 557 5 558 5 559 5 560 5 561 5 562 5 563 5 564 5 565 5 566 5 567 5 568 5 569 5 570 5 571 5 572 5 573 5 574 5 575 5 576 5 577 5 578 5 579 5 580 5 581 5 582 5 583 5 584 5 585 5 586 5 587 5 588 5 589 5 590 5 591 5 592 5 593 5 594 5 595 5 596 5 597 5 598 5 599 5 600 5 601 5 602 5 603 5 604 5 605 5 606 5 607 5 608 5 609 5 610 5 611 5 612 5 613 5 614 5 615 5 616 5 617 5 618 5 619 5 620 5 621 5 622 5 623 5 624 5 625 5 626 5 627 5 628 5 629 5 630 5 631 5 632 5 633 5 634 5 635 5 636 5 637 5 638 5 639 5 640 5 641 5 642 5 643 5 644 5 645 5 646 5 647 5 648 5 649 5 650 5 651 5 652 5 653 5 654 5 655 5 656 5 657 5 658 5 659 5 660 5 661 5 662 5 663 5 664 5 665 5 666 5 667 5 668 5 669 5 670 5 671 5 672 5 673 5 674 5 675 5 676 5 677 5 678 5 679 5 680 5 681 5 682 5 683 5 684 5 685 5 686 5 687 5 688 5 689 5 690 5 691 5 692 5 693 5 694 5 695 5 696 5 697 5 698 5 699 5 700 5 701 5 702 5 703 5 704 5 705 5 706 5 707 5 708 5 709 5 710 5 711 5 712 5 713 5 714 5 715 5 716 5 717 5 718 5 719 5 720 5 721 5 722 5 723 5 724 5 725 5 726 5 727 5 728 5 729 5 730 5 731 5 732 5 733 5 734 5 735 5 736 5 737 5 738 5 739 5 740 5 741 5 742 5 743 5 744 5 745 5 746 5 747 5 748 5 749 5 750 5 751 5 752 5 753 5 754 5 755 5 756 5 757 5 758 5 759 5 760 5 761 5 762 5 763 5 764 5 765 5 766 5 767 5 768 5 769 5 770 5 771 5 772 5 773 5 774 5 775 5 776 5 777 5 778 5 779 5 780 5 781 5 782 5 783 5 784 5 785 5 786 5 787 5 788 5 789 5 790 5 791 5 792 5 793 5 794 5 795 5 796 5 797 5 798 5 799 5 800 5 801 5 802 5 803 5 804 5 805 5 806 5 807 5 808 5 809 5 810 5 811 5 812 5 813 5 814 5 815 5 816 5 817 5 818 5 819 5 820 5 821 5 822 5 823 5 824 5 825 5 826 5 827 5 828 5 829 5 830 5 831 5 832 5 833 5 834 5 835 5 836 5 837 5 838 5 839 5 840 5 841 5 842 5 843 5 844 5 845 5 846 5 847 5 848 5 849 5 850 5 851 5 852 5 853 5 854 5 855 5 856 5 857 5 858 5 859 5 860 5 861 5 862 5 863 5 864 5 865 5 866 5 867 5 868 5 869 5 870 5 871 5 872 5 873 5 874 5 875 5 876 5 877 5 878 5 879 5 880 5 881 5 882 5 883 5 884 5 885 5 886 5 887 5 888 5 889 5 890 5 891 5 892 5 893 5 894 5 895 5 896 5 897 5 898 5 899 5 900 5 901 5 902 5 903 5 904 5 905 5 906 5 907 5 908 5 909 5 910 5 911 5 912 5 913 5 914 5 915 5 916 5 917 5 918 5 919 5 920 5 921 5 922 5 923 5 924 5 925 5 926 5 927 5 928 5 929 5 930 5 931 5 932 5 933 5 934 5 935 5 936 5 937 5 938 5 939 5 940 5 941 5 942 5 943 5 944 5 945 5 946 5 947 5 948 5 949 5 950 5 951 5 952 5 953 5 954 5 955 5 956 5 957 5 958 5 959 5 960 5 961 5 962 5 963 5 964 5 965 5 966 5 967 5 968 5 969 5 970 5 971 5 972 5 973 5 974 5 975 5 976 5 977 5 978 5 979 5 980 5 981 5 982 5 983 5 984 5 985 5 986 5 987 5 988 5 989 5 990 5 991 5 992 5 993 5 994 5 995 5 996 5 997 5 998 5 999 6 0 6 1 6 2 6 3 6 4 6 5 6 6 6 7 6 8 6 9 6 10 6 11 6 12 6 13 6 14 6 15 6 16 6 17 6 18 6 19 6 20 6 21 6 22 6 23 6 24 6 25 6 26 6 27 6 28 6 29 6 30 6 31 6 32 6 33 6 34 6 35 6 36 6 37 6 38 6 39 6 40 6 41 6 42 6 43 6 44 6 45 6 46 6 47 6 48 6 49 6 50 6 51 6 52 6 53 6 54 6 55 6 56 6 57 6 58 6 59 6 60 6 61 6 62 6 63 6 64 6 65 6 66 6 67 6 68 6 69 6 70 6 71 6 72 6 73 6 74 6 75 6 76 6 77 6 78 6 79 6 80 6 81 6 82 6 83 6 84 6 85 6 86 6 87 6 88 6 89 6 90 6 91 6 92 6 93 6 94 6 95 6 96 6 97 6 98 6 99 6 100 6 101 6 102 6 103 6 104 6 105 6 106 6 107 6 108 6 109 6 110 6 111 6 112 6 113 6 114 6 115 6 116 6 117 6 118 6 119 6 120 6 121 6 122 6 123 6 124 6 125 6 126 6 127 6 128 6 129 6 130 6 131 6 132 6 133 6 134 6 135 6 136 6 137 6 138 6 139 6 140 6 141 6 142 6 143 6 144 6 145 6 146 6 147 6 148 6 149 6 150 6 151 6 152 6 153 6 154 6 155 6 156 6 157 6 158 6 159 6 160 6 161 6 162 6 163 6 164 6 165 6 166 6 167 6 168 6 169 6 170 6 171 6 172 6 173 6 174 6 175 6 176 6 177 6 178 6 179 6 180 6 181 6 182 6 183 6 184 6 185 6 186 6 187 6 188 6 189 6 190 6 191 6 192 6 193 6 194 6 195 6 196 6 197 6 198 6 199 6 200 6 201 6 202 6 203 6 204 6 205 6 206 6 207 6 208 6 209 6 210 6 211 6 212 6 213 6 214 6 215 6 216 6 217 6 218 6 219 6 220 6 221 6 222 6 223 6 224 6 225 6 226 6 227 6 228 6 229 6 230 6 231 6 232 6 233 6 234 6 235 6 236 6 237 6 238 6 239 6 240 6 241 6 242 6 243 6 244 6 245 6 246 6 247 6 248 6 249 6 250 6 251 6 252 6 253 6 254 6 255 6 256 6 257 6 258 6 259 6 260 6 261 6 262 6 263 6 264 6 265 6 266 6 267 6 268 6 269 6 270 6 271 6 272 6 273 6 274 6 275 6 276 6 277 6 278 6 279 6 280 6 281 6 282 6 283 6 284 6 285 6 286 6 287 6 288 6 289 6 290 6 291 6 292 6 293 6 294 6 295 6 296 6 297 6 298 6 299 6 300 6 301 6 302 6 303 6 304 6 305 6 306 6 307 6 308 6 309 6 310 6 311 6 312 6 313 6 314 6 315 6 316 6 317 6 318 6 319 6 320 6 321 6 322 6 323 6 324 6 325 6 326 6 327 6 328 6 329 6 330 6 331 6 332 6 333 6 334 6 335 6 336 6 337 6 338 6 339 6 340 6 341 6 342 6 343 6 344 6 345 6 346 6 347 6 348 6 349 6 350 6 351 6 352 6 353 6 354 6 355 6 356 6 357 6 358 6 359 6 360 6 361 6 362 6 363 6 364 6 365 6 366 6 367 6 368 6 369 6 370 6 371 6 372 6 373 6 374 6 375 6 376 6 377 6 378 6 379 6 380 6 381 6 382 6 383 6 384 6 385 6 386 6 387 6 388 6 389 6 390 6 391 6 392 6 393 6 394 6 395 6 396 6 397 6 398 6 399 6 400 6 401 6 402 6 403 6 404 6 405 6 406 6 407 6 408 6 409 6 410 6 411 6 412 6 413 6 414 6 415 6 416 6 417 6 418 6 419 6 420 6 421 6 422 6 423 6 424 6 425 6 426 6 427 6 428 6 429 6 430 6 431 6 432 6 433 6 434 6 435 6 436 6 437 6 438 6 439 6 440 6 441 6 442 6 443 6 444 6 445 6 446 6 447 6 448 6 449 6 450 6 451 6 452 6 453 6 454 6 455 6 456 6 457 6 458 6 459 6 460 6 461 6 462 6 463 6 464 6 465 6 466 6 467 6 468 6 469 6 470 6 471 6 472 6 473 6 474 6 475 6 476 6 477 6 478 6 479 6 480 6 481 6 482 6 483 6 484 6 485 6 486 6 487 6 488 6 489 6 490 6 491 6 492 6 493 6 494 6 495 6 496 6 497 6 498 6 499 6 500 6 501 6 502 6 503 6 504 6 505 6 506 6 507 6 508 6 509 6 510 6 511 6 512 6 513 6 514 6 515 6 516 6 517 6 518 6 519 6 520 6 521 6 522 6 523 6 524 6 525 6 526 6 527 6 528 6 529 6 530 6 531 6 532 6 533 6 534 6 535 6 536 6 537 6 538 6 539 6 540 6 541 6 542 6 543 6 544 6 545 6 546 6 547 6 548 6 549 6 550 6 551 6 552 6 553 6 554 6 555 6 556 6 557 6 558 6 559 6 560 6 561 6 562 6 563 6 564 6 565 6 566 6 567 6 568 6 569 6 570 6 571 6 572 6 573 6 574 6 575 6 576 6 577 6 578 6 579 6 580 6 581 6 582 6 583 6 584 6 585 6 586 6 587 6 588 6 589 6 590 6 591 6 592 6 593 6 594 6 595 6 596 6 597 6 598 6 599 6 600 6 601 6 602 6 603 6 604 6 605 6 606 6 607 6 608 6 609 6 610 6 611 6 612 6 613 6 614 6 615 6 616 6 617 6 618 6 619 6 620 6 621 6 622 6 623 6 624 6 625 6 626 6 627 6 628 6 629 6 630 6 631 6 632 6 633 6 634 6 635 6 636 6 637 6 638 6 639 6 640 6 641 6 642 6 643 6 644 6 645 6 646 6 647 6 648 6 649 6 650 6 651 6 652 6 653 6 654 6 655 6 656 6 657 6 658 6 659 6 660 6 661 6 662 6 663 6 664 6 665 6 666 6 667 6 668 6 669 6 670 6 671 6 672 6 673 6 674 6 675 6 676 6 677 6 678 6 679 6 680 6 681 6 682 6 683 6 684 6 685 6 686 6 687 6 688 6 689 6 690 6 691 6 692 6 693 6 694 6 695 6 696 6 697 6 698 6 699 6 700 6 701 6 702 6 703 6 704 6 705 6 706 6 707 6 708 6 709 6 710 6 711 6 712 6 713 6 714 6 715 6 716 6 717 6 718 6 719 6 720 6 721 6 722 6 723 6 724 6 725 6 726 6 727 6 728 6 729 6 730 6 731 6 732 6 733 6 734 6 735 6 736 6 737 6 738 6 739 6 740 6 741 6 742 6 743 6 744 6 745 6 746 6 747 6 748 6 749 6 750 6 751 6 752 6 753 6 754 6 755 6 756 6 757 6 758 6 759 6 760 6 761 6 762 6 763 6 764 6 765 6 766 6 767 6 768 6 769 6 770 6 771 6 772 6 773 6 774 6 775 6 776 6 777 6 778 6 779 6 780 6 781 6 782 6 783 6 784 6 785 6 786 6 787 6 788 6 789 6 790 6 791 6 792 6 793 6 794 6 795 6 796 6 797 6 798 6 799 6 800 6 801 6 802 6 803 6 804 6 805 6 806 6 807 6 808 6 809 6 810 6 811 6 812 6 813 6 814 6 815 6 816 6 817 6 818 6 819 6 820 6 821 6 822 6 823 6 824 6 825 6 826 6 827 6 828 6 829 6 830 6 831 6 832 6 833 6 834 6 835 6 836 6 837 6 838 6 839 6 840 6 841 6 842 6 843 6 844 6 845 6 846 6 847 6 848 6 849 6 850 6 851 6 852 6 853 6 854 6 855 6 856 6 857 6 858 6 859 6 860 6 861 6 862 6 863 6 864 6 865 6 866 6 867 6 868 6 869 6 870 6 871 6 872 6 873 6 874 6 875 6 876 6 877 6 878 6 879 6 880 6 881 6 882 6 883 6 884 6 885 6 886 6 887 6 888 6 889 6 890 6 891 6 892 6 893 6 894 6 895 6 896 6 897 6 898 6 899 6 900 6 901 6 902 6 903 6 904 6 905 6 906 6 907 6 908 6 909 6 910 6 911 6 912 6 913 6 914 6 915 6 916 6 917 6 918 6 919 6 920 6 921 6 922 6 923 6 924 6 925 6 926 6 927 6 928 6 929 6 930 6 931 6 932 6 933 6 934 6 935 6 936 6 937 6 938 6 939 6 940 6 941 6 942 6 943 6 944 6 945 6 946 6 947 6 948 6 949 6 950 6 951 6 952 6 953 6 954 6 955 6 956 6 957 6 958 6 959 6 960 6 961 6 962 6 963 6 964 6 965 6 966 6 967 6 968 6 969 6 970 6 971 6 972 6 973 6 974 6 975 6 976 6 977 6 978 6 979 6 980 6 981 6 982 6 983 6 984 6 985 6 986 6 987 6 988 6 989 6 990 6 991 6 992 6 993 6 994 6 995 6 996 6 997 6 998 6 999 7 0 7 1 7 2 7 3 7 4 7 5 7 6 7 7 7 8 7 9 7 10 7 11 7 12 7 13 7 14 7 15 7 16 7 17 7 18 7 19 7 20 7 21 7 22 7 23 7 24 7 25 7 26 7 27 7 28 7 29 7 30 7 31 7 32 7 33 7 34 7 35 7 36 7 37 7 38 7 39 7 40 7 41 7 42 7 43 7 44 7 45 7 46 7 47 7 48 7 49 7 50 7 51 7 52 7 53 7 54 7 55 7 56 7 57 7 58 7 59 7 60 7 61 7 62 7 63 7 64 7 65 7 66 7 67 7 68 7 69 7 70 7 71 7 72 7 73 7 74 7 75 7 76 7 77 7 78 7 79 7 80 7 81 7 82 7 83 7 84 7 85 7 86 7 87 7 88 7 89 7 90 7 91 7 92 7 93 7 94 7 95 7 96 7 97 7 98 7 99 7 100 7 101 7 102 7 103 7 104 7 105 7 106 7 107 7 108 7 109 7 110 7 111 7 112 7 113 7 114 7 115 7 116 7 117 7 118 7 119 7 120 7 121 7 122 7 123 7 124 7 125 7 126 7 127 7 128 7 129 7 130 7 131 7 132 7 133 7 134 7 135 7 136 7 137 7 138 7 139 7 140 7 141 7 142 7 143 7 144 7 145 7 146 7 147 7 148 7 149 7 150 7 151 7 152 7 153 7 154 7 155 7 156 7 157 7 158 7 159 7 160 7 161 7 162 7 163 7 164 7 165 7 166 7 167 7 168 7 169 7 170 7 171 7 172 7 173 7 174 7 175 7 176 7 177 7 178 7 179 7 180 7 181 7 182 7 183 7 184 7 185 7 186 7 187 7 188 7 189 7 190 7 191 7 192 7 193 7 194 7 195 7 196 7 197 7 198 7 199 7 200 7 201 7 202 7 203 7 204 7 205 7 206 7 207 7 208 7 209 7 210 7 211 7 212 7 213 7 214 7 215 7 216 7 217 7 218 7 219 7 220 7 221 7 222 7 223 7 224 7 225 7 226 7 227 7 228 7 229 7 230 7 231 7 232 7 233 7 234 7 235 7 236 7 237 7 238 7 239 7 240 7 241 7 242 7 243 7 244 7 245 7 246 7 247 7 248 7 249 7 250 7 251 7 252 7 253 7 254 7 255 7 256 7 257 7 258 7 259 7 260 7 261 7 262 7 263 7 264 7 265 7 266 7 267 7 268 7 269 7 270 7 271 7 272 7 273 7 274 7 275 7 276 7 277 7 278 7 279 7 280 7 281 7 282 7 283 7 284 7 285 7 286 7 287 7 288 7 289 7 290 7 291 7 292 7 293 7 294 7 295 7 296 7 297 7 298 7 299 7 300 7 301 7 302 7 303 7 304 7 305 7 306 7 307 7 308 7 309 7 310 7 311 7 312 7 313 7 314 7 315 7 316 7 317 7 318 7 319 7 320 7 321 7 322 7 323 7 324 7 325 7 326 7 327 7 328 7 329 7 330 7 331 7 332 7 333 7 334 7 335 7 336 7 337 7 338 7 339 7 340 7 341 7 342 7 343 7 344 7 345 7 346 7 347 7 348 7 349 7 350 7 351 7 352 7 353 7 354 7 355 7 356 7 357 7 358 7 359 7 360 7 361 7 362 7 363 7 364 7 365 7 366 7 367 7 368 7 369 7 370 7 371 7 372 7 373 7 374 7 375 7 376 7 377 7 378 7 379 7 380 7 381 7 382 7 383 7 384 7 385 7 386 7 387 7 388 7 389 7 390 7 391 7 392 7 393 7 394 7 395 7 396 7 397 7 398 7 399 7 400 7 401 7 402 7 403 7 404 7 405 7 406 7 407 7 408 7 409 7 410 7 411 7 412 7 413 7 414 7 415 7 416 7 417 7 418 7 419 7 420 7 421 7 422 7 423 7 424 7 425 7 426 7 427 7 428 7 429 7 430 7 431 7 432 7 433 7 434 7 435 7 436 7 437 7 438 7 439 7 440 7 441 7 442 7 443 7 444 7 445 7 446 7 447 7 448 7 449 7 450 7 451 7 452 7 453 7 454 7 455 7 456 7 457 7 458 7 459 7 460 7 461 7 462 7 463 7 464 7 465 7 466 7 467 7 468 7 469 7 470 7 471 7 472 7 473 7 474 7 475 7 476 7 477 7 478 7 479 7 480 7 481 7 482 7 483 7 484 7 485 7 486 7 487 7 488 7 489 7 490 7 491 7 492 7 493 7 494 7 495 7 496 7 497 7 498 7 499 7 500 7 501 7 502 7 503 7 504 7 505 7 506 7 507 7 508 7 509 7 510 7 511 7 512 7 513 7 514 7 515 7 516 7 517 7 518 7 519 7 520 7 521 7 522 7 523 7 524 7 525 7 526 7 527 7 528 7 529 7 530 7 531 7 532 7 533 7 534 7 535 7 536 7 537 7 538 7 539 7 540 7 541 7 542 7 543 7 544 7 545 7 546 7 547 7 548 7 549 7 550 7 551 7 552 7 553 7 554 7 555 7 556 7 557 7 558 7 559 7 560 7 561 7 562 7 563 7 564 7 565 7 566 7 567 7 568 7 569 7 570 7 571 7 572 7 573 7 574 7 575 7 576 7 577 7 578 7 579 7 580 7 581 7 582 7 583 7 584 7 585 7 586 7 587 7 588 7 589 7 590 7 591 7 592 7 593 7 594 7 595 7 596 7 597 7 598 7 599 7 600 7 601 7 602 7 603 7 604 7 605 7 606 7 607 7 608 7 609 7 610 7 611 7 612 7 613 7 614 7 615 7 616 7 617 7 618 7 619 7 620 7 621 7 622 7 623 7 624 7 625 7 626 7 627 7 628 7 629 7 630 7 631 7 632 7 633 7 634 7 635 7 636 7 637 7 638 7 639 7 640 7 641 7 642 7 643 7 644 7 645 7 646 7 647 7 648 7 649 7 650 7 651 7 652 7 653 7 654 7 655 7 656 7 657 7 658 7 659 7 660 7 661 7 662 7 663 7 664 7 665 7 666 7 667 7 668 7 669 7 670 7 671 7 672 7 673 7 674 7 675 7 676 7 677 7 678 7 679 7 680 7 681 7 682 7 683 7 684 7 685 7 686 7 687 7 688 7 689 7 690 7 691 7 692 7 693 7 694 7 695 7 696 7 697 7 698 7 699 7 700 7 701 7 702 7 703 7 704 7 705 7 706 7 707 7 708 7 709 7 710 7 711 7 712 7 713 7 714 7 715 7 716 7 717 7 718 7 719 7 720 7 721 7 722 7 723 7 724 7 725 7 726 7 727 7 728 7 729 7 730 7 731 7 732 7 733 7 734 7 735 7 736 7 737 7 738 7 739 7 740 7 741 7 742 7 743 7 744 7 745 7 746 7 747 7 748 7 749 7 750 7 751 7 752 7 753 7 754 7 755 7 756 7 757 7 758 7 759 7 760 7 761 7 762 7 763 7 764 7 765 7 766 7 767 7 768 7 769 7 770 7 771 7 772 7 773 7 774 7 775 7 776 7 777 7 778 7 779 7 780 7 781 7 782 7 783 7 784 7 785 7 786 7 787 7 788 7 789 7 790 7 791 7 792 7 793 7 794 7 795 7 796 7 797 7 798 7 799 7 800 7 801 7 802 7 803 7 804 7 805 7 806 7 807 7 808 7 809 7 810 7 811 7 812 7 813 7 814 7 815 7 816 7 817 7 818 7 819 7 820 7 821 7 822 7 823 7 824 7 825 7 826 7 827 7 828 7 829 7 830 7 831 7 832 7 833 7 834 7 835 7 836 7 837 7 838 7 839 7 840 7 841 7 842 7 843 7 844 7 845 7 846 7 847 7 848 7 849 7 850 7 851 7 852 7 853 7 854 7 855 7 856 7 857 7 858 7 859 7 860 7 861 7 862 7 863 7 864 7 865 7 866 7 867 7 868 7 869 7 870 7 871 7 872 7 873 7 874 7 875 7 876 7 877 7 878 7 879 7 880 7 881 7 882 7 883 7 884 7 885 7 886 7 887 7 888 7 889 7 890 7 891 7 892 7 893 7 894 7 895 7 896 7 897 7 898 7 899 7 900 7 901 7 902 7 903 7 904 7 905 7 906 7 907 7 908 7 909 7 910 7 911 7 912 7 913 7 914 7 915 7 916 7 917 7 918 7 919 7 920 7 921 7 922 7 923 7 924 7 925 7 926 7 927 7 928 7 929 7 930 7 931 7 932 7 933 7 934 7 935 7 936 7 937 7 938 7 939 7 940 7 941 7 942 7 943 7 944 7 945 7 946 7 947 7 948 7 949 7 950 7 951 7 952 7 953 7 954 7 955 7 956 7 957 7 958 7 959 7 960 7 961 7 962 7 963 7 964 7 965 7 966 7 967 7 968 7 969 7 970 7 971 7 972 7 973 7 974 7 975 7 976 7 977 7 978 7 979 7 980 7 981 7 982 7 983 7 984 7 985 7 986 7 987 7 988 7 989 7 990 7 991 7 992 7 993 7 994 7 995 7 996 7 997 7 998 7 999 8 0 8 1 8 2 8 3 8 4 8 5 8 6 8 7 8 8 8 9 8 10 8 11 8 12 8 13 8 14 8 15 8 16 8 17 8 18 8 19 8 20 8 21 8 22 8 23 8 24 8 25 8 26 8 27 8 28 8 29 8 30 8 31 8 32 8 33 8 34 8 35 8 36 8 37 8 38 8 39 8 40 8 41 8 42 8 43 8 44 8 45 8 46 8 47 8 48 8 49 8 50 8 51 8 52 8 53 8 54 8 55 8 56 8 57 8 58 8 59 8 60 8 61 8 62 8 63 8 64 8 65 8 66 8 67 8 68 8 69 8 70 8 71 8 72 8 73 8 74 8 75 8 76 8 77 8 78 8 79 8 80 8 81 8 82 8 83 8 84 8 85 8 86 8 87 8 88 8 89 8 90 8 91 8 92 8 93 8 94 8 95 8 96 8 97 8 98 8 99 8 100 8 101 8 102 8 103 8 104 8 105 8 106 8 107 8 108 8 109 8 110 8 111 8 112 8 113 8 114 8 115 8 116 8 117 8 118 8 119 8 120 8 121 8 122 8 123 8 124 8 125 8 126 8 127 8 128 8 129 8 130 8 131 8 132 8 133 8 134 8 135 8 136 8 137 8 138 8 139 8 140 8 141 8 142 8 143 8 144 8 145 8 146 8 147 8 148 8 149 8 150 8 151 8 152 8 153 8 154 8 155 8 156 8 157 8 158 8 159 8 160 8 161 8 162 8 163 8 164 8 165 8 166 8 167 8 168 8 169 8 170 8 171 8 172 8 173 8 174 8 175 8 176 8 177 8 178 8 179 8 180 8 181 8 182 8 183 8 184 8 185 8 186 8 187 8 188 8 189 8 190 8 191 8 192 8 193 8 194 8 195 8 196 8 197 8 198 8 199 8 200 8 201 8 202 8 203 8 204 8 205 8 206 8 207 8 208 8 209 8 210 8 211 8 212 8 213 8 214 8 215 8 216 8 217 8 218 8 219 8 220 8 221 8 222 8 223 8 224 8 225 8 226 8 227 8 228 8 229 8 230 8 231 8 232 8 233 8 234 8 235 8 236 8 237 8 238 8 239 8 240 8 241 8 242 8 243 8 244 8 245 8 246 8 247 8 248 8 249 8 250 8 251 8 252 8 253 8 254 8 255 8 256 8 257 8 258 8 259 8 260 8 261 8 262 8 263 8 264 8 265 8 266 8 267 8 268 8 269 8 270 8 271 8 272 8 273 8 274 8 275 8 276 8 277 8 278 8 279 8 280 8 281 8 282 8 283 8 284 8 285 8 286 8 287 8 288 8 289 8 290 8 291 8 292 8 293 8 294 8 295 8 296 8 297 8 298 8 299 8 300 8 301 8 302 8 303 8 304 8 305 8 306 8 307 8 308 8 309 8 310 8 311 8 312 8 313 8 314 8 315 8 316 8 317 8 318 8 319 8 320 8 321 8 322 8 323 8 324 8 325 8 326 8 327 8 328 8 329 8 330 8 331 8 332 8 333 8 334 8 335 8 336 8 337 8 338 8 339 8 340 8 341 8 342 8 343 8 344 8 345 8 346 8 347 8 348 8 349 8 350 8 351 8 352 8 353 8 354 8 355 8 356 8 357 8 358 8 359 8 360 8 361 8 362 8 363 8 364 8 365 8 366 8 367 8 368 8 369 8 370 8 371 8 372 8 373 8 374 8 375 8 376 8 377 8 378 8 379 8 380 8 381 8 382 8 383 8 384 8 385 8 386 8 387 8 388 8 389 8 390 8 391 8 392 8 393 8 394 8 395 8 396 8 397 8 398 8 399 8 400 8 401 8 402 8 403 8 404 8 405 8 406 8 407 8 408 8 409 8 410 8 411 8 412 8 413 8 414 8 415 8 416 8 417 8 418 8 419 8 420 8 421 8 422 8 423 8 424 8 425 8 426 8 427 8 428 8 429 8 430 8 431 8 432 8 433 8 434 8 435 8 436 8 437 8 438 8 439 8 440 8 441 8 442 8 443 8 444 8 445 8 446 8 447 8 448 8 449 8 450 8 451 8 452 8 453 8 454 8 455 8 456 8 457 8 458 8 459 8 460 8 461 8 462 8 463 8 464 8 465 8 466 8 467 8 468 8 469 8 470 8 471 8 472 8 473 8 474 8 475 8 476 8 477 8 478 8 479 8 480 8 481 8 482 8 483 8 484 8 485 8 486 8 487 8 488 8 489 8 490 8 491 8 492 8 493 8 494 8 495 8 496 8 497 8 498 8 499 8 500 8 501 8 502 8 503 8 504 8 505 8 506 8 507 8 508 8 509 8 510 8 511 8 512 8 513 8 514 8 515 8 516 8 517 8 518 8 519 8 520 8 521 8 522 8 523 8 524 8 525 8 526 8 527 8 528 8 529 8 530 8 531 8 532 8 533 8 534 8 535 8 536 8 537 8 538 8 539 8 540 8 541 8 542 8 543 8 544 8 545 8 546 8 547 8 548 8 549 8 550 8 551 8 552 8 553 8 554 8 555 8 556 8 557 8 558 8 559 8 560 8 561 8 562 8 563 8 564 8 565 8 566 8 567 8 568 8 569 8 570 8 571 8 572 8 573 8 574 8 575 8 576 8 577 8 578 8 579 8 580 8 581 8 582 8 583 8 584 8 585 8 586 8 587 8 588 8 589 8 590 8 591 8 592 8 593 8 594 8 595 8 596 8 597 8 598 8 599 8 600 8 601 8 602 8 603 8 604 8 605 8 606 8 607 8 608 8 609 8 610 8 611 8 612 8 613 8 614 8 615 8 616 8 617 8 618 8 619 8 620 8 621 8 622 8 623 8 624 8 625 8 626 8 627 8 628 8 629 8 630 8 631 8 632 8 633 8 634 8 635 8 636 8 637 8 638 8 639 8 640 8 641 8 642 8 643 8 644 8 645 8 646 8 647 8 648 8 649 8 650 8 651 8 652 8 653 8 654 8 655 8 656 8 657 8 658 8 659 8 660 8 661 8 662 8 663 8 664 8 665 8 666 8 667 8 668 8 669 8 670 8 671 8 672 8 673 8 674 8 675 8 676 8 677 8 678 8 679 8 680 8 681 8 682 8 683 8 684 8 685 8 686 8 687 8 688 8 689 8 690 8 691 8 692 8 693 8 694 8 695 8 696 8 697 8 698 8 699 8 700 8 701 8 702 8 703 8 704 8 705 8 706 8 707 8 708 8 709 8 710 8 711 8 712 8 713 8 714 8 715 8 716 8 717 8 718 8 719 8 720 8 721 8 722 8 723 8 724 8 725 8 726 8 727 8 728 8 729 8 730 8 731 8 732 8 733 8 734 8 735 8 736 8 737 8 738 8 739 8 740 8 741 8 742 8 743 8 744 8 745 8 746 8 747 8 748 8 749 8 750 8 751 8 752 8 753 8 754 8 755 8 756 8 757 8 758 8 759 8 760 8 761 8 762 8 763 8 764 8 765 8 766 8 767 8 768 8 769 8 770 8 771 8 772 8 773 8 774 8 775 8 776 8 777 8 778 8 779 8 780 8 781 8 782 8 783 8 784 8 785 8 786 8 787 8 788 8 789 8 790 8 791 8 792 8 793 8 794 8 795 8 796 8 797 8 798 8 799 8 800 8 801 8 802 8 803 8 804 8 805 8 806 8 807 8 808 8 809 8 810 8 811 8 812 8 813 8 814 8 815 8 816 8 817 8 818 8 819 8 820 8 821 8 822 8 823 8 824 8 825 8 826 8 827 8 828 8 829 8 830 8 831 8 832 8 833 8 834 8 835 8 836 8 837 8 838 8 839 8 840 8 841 8 842 8 843 8 844 8 845 8 846 8 847 8 848 8 849 8 850 8 851 8 852 8 853 8 854 8 855 8 856 8 857 8 858 8 859 8 860 8 861 8 862 8 863 8 864 8 865 8 866 8 867 8 868 8 869 8 870 8 871 8 872 8 873 8 874 8 875 8 876 8 877 8 878 8 879 8 880 8 881 8 882 8 883 8 884 8 885 8 886 8 887 8 888 8 889 8 890 8 891 8 892 8 893 8 894 8 895 8 896 8 897 8 898 8 899 8 900 8 901 8 902 8 903 8 904 8 905 8 906 8 907 8 908 8 909 8 910 8 911 8 912 8 913 8 914 8 915 8 916 8 917 8 918 8 919 8 920 8 921 8 922 8 923 8 924 8 925 8 926 8 927 8 928 8 929 8 930 8 931 8 932 8 933 8 934 8 935 8 936 8 937 8 938 8 939 8 940 8 941 8 942 8 943 8 944 8 945 8 946 8 947 8 948 8 949 8 950 8 951 8 952 8 953 8 954 8 955 8 956 8 957 8 958 8 959 8 960 8 961 8 962 8 963 8 964 8 965 8 966 8 967 8 968 8 969 8 970 8 971 8 972 8 973 8 974 8 975 8 976 8 977 8 978 8 979 8 980 8 981 8 982 8 983 8 984 8 985 8 986 8 987 8 988 8 989 8 990 8 991 8 992 8 993 8 994 8 995 8 996 8 997 8 998 8 999 9 0 9 1 9 2 9 3 9 4 9 5 9 6 9 7 9 8 9 9 9 10 9 11 9 12 9 13 9 14 9 15 9 16 9 17 9 18 9 19 9 20 9 21 9 22 9 23 9 24 9 25 9 26 9 27 9 28 9 29 9 30 9 31 9 32 9 33 9 34 9 35 9 36 9 37 9 38 9 39 9 40 9 41 9 42 9 43 9 44 9 45 9 46 9 47 9 48 9 49 9 50 9 51 9 52 9 53 9 54 9 55 9 56 9 57 9 58 9 59 9 60 9 61 9 62 9 63 9 64 9 65 9 66 9 67 9 68 9 69 9 70 9 71 9 72 9 73 9 74 9 75 9 76 9 77 9 78 9 79 9 80 9 81 9 82 9 83 9 84 9 85 9 86 9 87 9 88 9 89 9 90 9 91 9 92 9 93 9 94 9 95 9 96 9 97 9 98 9 99 9 100 9 101 9 102 9 103 9 104 9 105 9 106 9 107 9 108 9 109 9 110 9 111 9 112 9 113 9 114 9 115 9 116 9 117 9 118 9 119 9 120 9 121 9 122 9 123 9 124 9 125 9 126 9 127 9 128 9 129 9 130 9 131 9 132 9 133 9 134 9 135 9 136 9 137 9 138 9 139 9 140 9 141 9 142 9 143 9 144 9 145 9 146 9 147 9 148 9 149 9 150 9 151 9 152 9 153 9 154 9 155 9 156 9 157 9 158 9 159 9 160 9 161 9 162 9 163 9 164 9 165 9 166 9 167 9 168 9 169 9 170 9 171 9 172 9 173 9 174 9 175 9 176 9 177 9 178 9 179 9 180 9 181 9 182 9 183 9 184 9 185 9 186 9 187 9 188 9 189 9 190 9 191 9 192 9 193 9 194 9 195 9 196 9 197 9 198 9 199 9 200 9 201 9 202 9 203 9 204 9 205 9 206 9 207 9 208 9 209 9 210 9 211 9 212 9 213 9 214 9 215 9 216 9 217 9 218 9 219 9 220 9 221 9 222 9 223 9 224 9 225 9 226 9 227 9 228 9 229 9 230 9 231 9 232 9 233 9 234 9 235 9 236 9 237 9 238 9 239 9 240 9 241 9 242 9 243 9 244 9 245 9 246 9 247 9 248 9 249 9 250 9 251 9 252 9 253 9 254 9 255 9 256 9 257 9 258 9 259 9 260 9 261 9 262 9 263 9 264 9 265 9 266 9 267 9 268 9 269 9 270 9 271 9 272 9 273 9 274 9 275 9 276 9 277 9 278 9 279 9 280 9 281 9 282 9 283 9 284 9 285 9 286 9 287 9 288 9 289 9 290 9 291 9 292 9 293 9 294 9 295 9 296 9 297 9 298 9 299 9 300 9 301 9 302 9 303 9 304 9 305 9 306 9 307 9 308 9 309 9 310 9 311 9 312 9 313 9 314 9 315 9 316 9 317 9 318 9 319 9 320 9 321 9 322 9 323 9 324 9 325 9 326 9 327 9 328 9 329 9 330 9 331 9 332 9 333 9 334 9 335 9 336 9 337 9 338 9 339 9 340 9 341 9 342 9 343 9 344 9 345 9 346 9 347 9 348 9 349 9 350 9 351 9 352 9 353 9 354 9 355 9 356 9 357 9 358 9 359 9 360 9 361 9 362 9 363 9 364 9 365 9 366 9 367 9 368 9 369 9 370 9 371 9 372 9 373 9 374 9 375 9 376 9 377 9 378 9 379 9 380 9 381 9 382 9 383 9 384 9 385 9 386 9 387 9 388 9 389 9 390 9 391 9 392 9 393 9 394 9 395 9 396 9 397 9 398 9 399 9 400 9 401 9 402 9 403 9 404 9 405 9 406 9 407 9 408 9 409 9 410 9 411 9 412 9 413 9 414 9 415 9 416 9 417 9 418 9 419 9 420 9 421 9 422 9 423 9 424 9 425 9 426 9 427 9 428 9 429 9 430 9 431 9 432 9 433 9 434 9 435 9 436 9 437 9 438 9 439 9 440 9 441 9 442 9 443 9 444 9 445 9 446 9 447 9 448 9 449 9 450 9 451 9 452 9 453 9 454 9 455 9 456 9 457 9 458 9 459 9 460 9 461 9 462 9 463 9 464 9 465 9 466 9 467 9 468 9 469 9 470 9 471 9 472 9 473 9 474 9 475 9 476 9 477 9 478 9 479 9 480 9 481 9 482 9 483 9 484 9 485 9 486 9 487 9 488 9 489 9 490 9 491 9 492 9 493 9 494 9 495 9 496 9 497 9 498 9 499 9 500 9 501 9 502 9 503 9 504 9 505 9 506 9 507 9 508 9 509 9 510 9 511 9 512 9 513 9 514 9 515 9 516 9 517 9 518 9 519 9 520 9 521 9 522 9 523 9 524 9 525 9 526 9 527 9 528 9 529 9 530 9 531 9 532 9 533 9 534 9 535 9 536 9 537 9 538 9 539 9 540 9 541 9 542 9 543 9 544 9 545 9 546 9 547 9 548 9 549 9 550 9 551 9 552 9 553 9 554 9 555 9 556 9 557 9 558 9 559 9 560 9 561 9 562 9 563 9 564 9 565 9 566 9 567 9 568 9 569 9 570 9 571 9 572 9 573 9 574 9 575 9 576 9 577 9 578 9 579 9 580 9 581 9 582 9 583 9 584 9 585 9 586 9 587 9 588 9 589 9 590 9 591 9 592 9 593 9 594 9 595 9 596 9 597 9 598 9 599 9 600 9 601 9 602 9 603 9 604 9 605 9 606 9 607 9 608 9 609 9 610 9 611 9 612 9 613 9 614 9 615 9 616 9 617 9 618 9 619 9 620 9 621 9 622 9 623 9 624 9 625 9 626 9 627 9 628 9 629 9 630 9 631 9 632 9 633 9 634 9 635 9 636 9 637 9 638 9 639 9 640 9 641 9 642 9 643 9 644 9 645 9 646 9 647 9 648 9 649 9 650 9 651 9 652 9 653 9 654 9 655 9 656 9 657 9 658 9 659 9 660 9 661 9 662 9 663 9 664 9 665 9 666 9 667 9 668 9 669 9 670 9 671 9 672 9 673 9 674 9 675 9 676 9 677 9 678 9 679 9 680 9 681 9 682 9 683 9 684 9 685 9 686 9 687 9 688 9 689 9 690 9 691 9 692 9 693 9 694 9 695 9 696 9 697 9 698 9 699 9 700 9 701 9 702 9 703 9 704 9 705 9 706 9 707 9 708 9 709 9 710 9 711 9 712 9 713 9 714 9 715 9 716 9 717 9 718 9 719 9 720 9 721 9 722 9 723 9 724 9 725 9 726 9 727 9 728 9 729 9 730 9 731 9 732 9 733 9 734 9 735 9 736 9 737 9 738 9 739 9 740 9 741 9 742 9 743 9 744 9 745 9 746 9 747 9 748 9 749 9 750 9 751 9 752 9 753 9 754 9 755 9 756 9 757 9 758 9 759 9 760 9 761 9 762 9 763 9 764 9 765 9 766 9 767 9 768 9 769 9 770 9 771 9 772 9 773 9 774 9 775 9 776 9 777 9 778 9 779 9 780 9 781 9 782 9 783 9 784 9 785 9 786 9 787 9 788 9 789 9 790 9 791 9 792 9 793 9 794 9 795 9 796 9 797 9 798 9 799 9 800 9 801 9 802 9 803 9 804 9 805 9 806 9 807 9 808 9 809 9 810 9 811 9 812 9 813 9 814 9 815 9 816 9 817 9 818 9 819 9 820 9 821 9 822 9 823 9 824 9 825 9 826 9 827 9 828 9 829 9 830 9 831 9 832 9 833 9 834 9 835 9 836 9 837 9 838 9 839 9 840 9 841 9 842 9 843 9 844 9 845 9 846 9 847 9 848 9 849 9 850 9 851 9 852 9 853 9 854 9 855 9 856 9 857 9 858 9 859 9 860 9 861 9 862 9 863 9 864 9 865 9 866 9 867 9 868 9 869 9 870 9 871 9 872 9 873 9 874 9 875 9 876 9 877 9 878 9 879 9 880 9 881 9 882 9 883 9 884 9 885 9 886 9 887 9 888 9 889 9 890 9 891 9 892 9 893 9 894 9 895 9 896 9 897 9 898 9 899 9 900 9 901 9 902 9 903 9 904 9 905 9 906 9 907 9 908 9 909 9 910 9 911 9 912 9 913 9 914 9 915 9 916 9 917 9 918 9 919 9 920 9 921 9 922 9 923 9 924 9 925 9 926 9 927 9 928 9 929 9 930 9 931 9 932 9 933 9 934 9 935 9 936 9 937 9 938 9 939 9 940 9 941 9 942 9 943 9 944 9 945 9 946 9 947 9 948 9 949 9 950 9 951 9 952 9 953 9 954 9 955 9 956 9 957 9 958 9 959 9 960 9 961 9 962 9 963 9 964 9 965 9 966 9 967 9 968 9 969 9 970 9 971 9 972 9 973 9 974 9 975 9 976 9 977 9 978 9 979 9 980 9 981 9 982 9 983 9 984 9 985 9 986 9 987 9 988 9 989 9 990 9 991 9 992 9 993 9 994 9 995 9 996 9 997 9 998 9 999 10 0 10 1 10 2 10 3 10 4 10 5 10 6 10 7 10 8 10 9 10 10 10 11 10 12 10 13 10 14 10 15 10 16 10 17 10 18 10 19 10 20 10 21 10 22 10 23 10 24 10 25 10 26 10 27 10 28 10 29 10 30 10 31 10 32 10 33 10 34 10 35 10 36 10 37 10 38 10 39 10 40 10 41 10 42 10 43 10 44 10 45 10 46 10 47 10 48 10 49 10 50 10 51 10 52 10 53 10 54 10 55 10 56 10 57 10 58 10 59 10 60 10 61 10 62 10 63 10 64 10 65 10 66 10 67 10 68 10 69 10 70 10 71 10 72 10 73 10 74 10 75 10 76 10 77 10 78 10 79 10 80 10 81 10 82 10 83 10 84 10 85 10 86 10 87 10 88 10 89 10 90 10 91 10 92 10 93 10 94 10 95 10 96 10 97 10 98 10 99 10 100 10 101 10 102 10 103 10 104 10 105 10 106 10 107 10 108 10 109 10 110 10 111 10 112 10 113 10 114 10 115 10 116 10 117 10 118 10 119 10 120 10 121 10 122 10 123 10 124 10 125 10 126 10 127 10 128 10 129 10 130 10 131 10 132 10 133 10 134 10 135 10 136 10 137 10 138 10 139 10 140 10 141 10 142 10 143 10 144 10 145 10 146 10 147 10 148 10 149 10 150 10 151 10 152 10 153 10 154 10 155 10 156 10 157 10 158 10 159 10 160 10 161 10 162 10 163 10 164 10 165 10 166 10 167 10 168 10 169 10 170 10 171 10 172 10 173 10 174 10 175 10 176 10 177 10 178 10 179 10 180 10 181 10 182 10 183 10 184 10 185 10 186 10 187 10 188 10 189 10 190 10 191 10 192 10 193 10 194 10 195 10 196 10 197 10 198 10 199 10 200 10 201 10 202 10 203 10 204 10 205 10 206 10 207 10 208 10 209 10 210 10 211 10 212 10 213 10 214 10 215 10 216 10 217 10 218 10 219 10 220 10 221 10 222 10 223 10 224 10 225 10 226 10 227 10 228 10 229 10 230 10 231 10 232 10 233 10 234 10 235 10 236 10 237 10 238 10 239 10 240 10 241 10 242 10 243 10 244 10 245 10 246 10 247 10 248 10 249 10 250 10 251 10 252 10 253 10 254 10 255 10 256 10 257 10 258 10 259 10 260 10 261 10 262 10 263 10 264 10 265 10 266 10 267 10 268 10 269 10 270 10 271 10 272 10 273 10 274 10 275 10 276 10 277 10 278 10 279 10 280 10 281 10 282 10 283 10 284 10 285 10 286 10 287 10 288 10 289 10 290 10 291 10 292 10 293 10 294 10 295 10 296 10 297 10 298 10 299 10 300 10 301 10 302 10 303 10 304 10 305 10 306 10 307 10 308 10 309 10 310 10 311 10 312 10 313 10 314 10 315 10 316 10 317 10 318 10 319 10 320 10 321 10 322 10 323 10 324 10 325 10 326 10 327 10 328 10 329 10 330 10 331 10 332 10 333 10 334 10 335 10 336 10 337 10 338 10 339 10 340 10 341 10 342 10 343 10 344 10 345 10 346 10 347 10 348 10 349 10 350 10 351 10 352 10 353 10 354 10 355 10 356 10 357 10 358 10 359 10 360 10 361 10 362 10 363 10 364 10 365 10 366 10 367 10 368 10 369 10 370 10 371 10 372 10 373 10 374 10 375 10 376 10 377 10 378 10 379 10 380 10 381 10 382 10 383 10 384 10 385 10 386 10 387 10 388 10 389 10 390 10 391 10 392 10 393 10 394 10 395 10 396 10 397 10 398 10 399 10 400 10 401 10 402 10 403 10 404 10 405 10 406 10 407 10 408 10 409 10 410 10 411 10 412 10 413 10 414 10 415 10 416 10 417 10 418 10 419 10 420 10 421 10 422 10 423 10 424 10 425 10 426 10 427 10 428 10 429 10 430 10 431 10 432 10 433 10 434 10 435 10 436 10 437 10 438 10 439 10 440 10 441 10 442 10 443 10 444 10 445 10 446 10 447 10 448 10 449 10 450 10 451 10 452 10 453 10 454 10 455 10 456 10 457 10 458 10 459 10 460 10 461 10 462 10 463 10 464 10 465 10 466 10 467 10 468 10 469 10 470 10 471 10 472 10 473 10 474 10 475 10 476 10 477 10 478 10 479 10 480 10 481 10 482 10 483 10 484 10 485 10 486 10 487 10 488 10 489 10 490 10 491 10 492 10 493 10 494 10 495 10 496 10 497 10 498 10 499 10 500 10 501 10 502 10 503 10 504 10 505 10 506 10 507 10 508 10 509 10 510 10 511 10 512 10 513 10 514 10 515 10 516 10 517 10 518 10 519 10 520 10 521 10 522 10 523 10 524 10 525 10 526 10 527 10 528 10 529 10 530 10 531 10 532 10 533 10 534 10 535 10 536 10 537 10 538 10 539 10 540 10 541 10 542 10 543 10 544 10 545 10 546 10 547 10 548 10 549 10 550 10 551 10 552 10 553 10 554 10 555 10 556 10 557 10 558 10 559 10 560 10 561 10 562 10 563 10 564 10 565 10 566 10 567 10 568 10 569 10 570 10 571 10 572 10 573 10 574 10 575 10 576 10 577 10 578 10 579 10 580 10 581 10 582 10 583 10 584 10 585 10 586 10 587 10 588 10 589 10 590 10 591 10 592 10 593 10 594 10 595 10 596 10 597 10 598 10 599 10 600 10 601 10 602 10 603 10 604 10 605 10 606 10 607 10 608 10 609 10 610 10 611 10 612 10 613 10 614 10 615 10 616 10 617 10 618 10 619 10 620 10 621 10 622 10 623 10 624 10 625 10 626 10 627 10 628 10 629 10 630 10 631 10 632 10 633 10 634 10 635 10 636 10 637 10 638 10 639 10 640 10 641 10 642 10 643 10 644 10 645 10 646 10 647 10 648 10 649 10 650 10 651 10 652 10 653 10 654 10 655 10 656 10 657 10 658 10 659 10 660 10 661 10 662 10 663 10 664 10 665 10 666 10 667 10 668 10 669 10 670 10 671 10 672 10 673 10 674 10 675 10 676 10 677 10 678 10 679 10 680 10 681 10 682 10 683 10 684 10 685 10 686 10 687 10 688 10 689 10 690 10 691 10 692 10 693 10 694 10 695 10 696 10 697 10 698 10 699 10 700 10 701 10 702 10 703 10 704 10 705 10 706 10 707 10 708 10 709 10 710 10 711 10 712 10 713 10 714 10 715 10 716 10 717 10 718 10 719 10 720 10 721 10 722 10 723 10 724 10 725 10 726 10 727 10 728 10 729 10 730 10 731 10 732 10 733 10 734 10 735 10 736 10 737 10 738 10 739 10 740 10 741 10 742 10 743 10 744 10 745 10 746 10 747 10 748 10 749 10 750 10 751 10 752 10 753 10 754 10 755 10 756 10 757 10 758 10 759 10 760 10 761 10 762 10 763 10 764 10 765 10 766 10 767 10 768 10 769 10 770 10 771 10 772 10 773 10 774 10 775 10 776 10 777 10 778 10 779 10 780 10 781 10 782 10 783 10 784 10 785 10 786 10 787 10 788 10 789 10 790 10 791 10 792 10 793 10 794 10 795 10 796 10 797 10 798 10 799 10 800 10 801 10 802 10 803 10 804 10 805 10 806 10 807 10 808 10 809 10 810 10 811 10 812 10 813 10 814 10 815 10 816 10 817 10 818 10 819 10 820 10 821 10 822 10 823 10 824 10 825 10 826 10 827 10 828 10 829 10 830 10 831 10 832 10 833 10 834 10 835 10 836 10 837 10 838 10 839 10 840 10 841 10 842 10 843 10 844 10 845 10 846 10 847 10 848 10 849 10 850 10 851 10 852 10 853 10 854 10 855 10 856 10 857 10 858 10 859 10 860 10 861 10 862 10 863 10 864 10 865 10 866 10 867 10 868 10 869 10 870 10 871 10 872 10 873 10 874 10 875 10 876 10 877 10 878 10 879 10 880 10 881 10 882 10 883 10 884 10 885 10 886 10 887 10 888 10 889 10 890 10 891 10 892 10 893 10 894 10 895 10 896 10 897 10 898 10 899 10 900 10 901 10 902 10 903 10 904 10 905 10 906 10 907 10 908 10 909 10 910 10 911 10 912 10 913 10 914 10 915 10 916 10 917 10 918 10 919 10 920 10 921 10 922 10 923 10 924 10 925 10 926 10 927 10 928 10 929 10 930 10 931 10 932 10 933 10 934 10 935 10 936 10 937 10 938 10 939 10 940 10 941 10 942 10 943 10 944 10 945 10 946 10 947 10 948 10 949 10 950 10 951 10 952 10 953 10 954 10 955 10 956 10 957 10 958 10 959 10 960 10 961 10 962 10 963 10 964 10 965 10 966 10 967 10 968 10 969 10 970 10 971 10 972 10 973 10 974 10 975 10 976 10 977 10 978 10 979 10 980 10 981 10 982 10 983 10 984 10 985 10 986 10 987 10 988 10 989 10 990 10 991 10 992 10 993 10 994 10 995 10 996 10 997 10 998 10 999 11 0 11 1 11 2 11 3 11 4 11 5 11 6 11 7 11 8 11 9 11 10 11 11 11 12 11 13 11 14 11 15 11 16 11 17 11 18 11 19 11 20 11 21 11 22 11 23 11 24 11 25 11 26 11 27 11 28 11 29 11 30 11 31 11 32 11 33 11 34 11 35 11 36 11 37 11 38 11 39 11 40 11 41 11 42 11 43 11 44 11 45 11 46 11 47 11 48 11 49 11 50 11 51 11 52 11 53 11 54 11 55 11 56 11 57 11 58 11 59 11 60 11 61 11 62 11 63 11 64 11 65 11 66 11 67 11 68 11 69 11 70 11 71 11 72 11 73 11 74 11 75 11 76 11 77 11 78 11 79 11 80 11 81 11 82 11 83 11 84 11 85 11 86 11 87 11 88 11 89 11 90 11 91 11 92 11 93 11 94 11 95 11 96 11 97 11 98 11 99 11 100 11 101 11 102 11 103 11 104 11 105 11 106 11 107 11 108 11 109 11 110 11 111 11 112 11 113 11 114 11 115 11 116 11 117 11 118 11 119 11 120 11 121 11 122 11 123 11 124 11 125 11 126 11 127 11 128 11 129 11 130 11 131 11 132 11 133 11 134 11 135 11 136 11 137 11 138 11 139 11 140 11 141 11 142 11 143 11 144 11 145 11 146 11 147 11 148 11 149 11 150 11 151 11 152 11 153 11 154 11 155 11 156 11 157 11 158 11 159 11 160 11 161 11 162 11 163 11 164 11 165 11 166 11 167 11 168 11 169 11 170 11 171 11 172 11 173 11 174 11 175 11 176 11 177 11 178 11 179 11 180 11 181 11 182 11 183 11 184 11 185 11 186 11 187 11 188 11 189 11 190 11 191 11 192 11 193 11 194 11 195 11 196 11 197 11 198 11 199 11 200 11 201 11 202 11 203 11 204 11 205 11 206 11 207 11 208 11 209 11 210 11 211 11 212 11 213 11 214 11 215 11 216 11 217 11 218 11 219 11 220 11 221 11 222 11 223 11 224 11 225 11 226 11 227 11 228 11 229 11 230 11 231 11 232 11 233 11 234 11 235 11 236 11 237 11 238 11 239 11 240 11 241 11 242 11 243 11 244 11 245 11 246 11 247 11 248 11 249 11 250 11 251 11 252 11 253 11 254 11 255 11 256 11 257 11 258 11 259 11 260 11 261 11 262 11 263 11 264 11 265 11 266 11 267 11 268 11 269 11 270 11 271 11 272 11 273 11 274 11 275 11 276 11 277 11 278 11 279 11 280 11 281 11 282 11 283 11 284 11 285 11 286 11 287 11 288 11 289 11 290 11 291 11 292 11 293 11 294 11 295 11 296 11 297 11 298 11 299 11 300 11 301 11 302 11 303 11 304 11 305 11 306 11 307 11 308 11 309 11 310 11 311 11 312 11 313 11 314 11 315 11 316 11 317 11 318 11 319 11 320 11 321 11 322 11 323 11 324 11 325 11 326 11 327 11 328 11 329 11 330 11 331 11 332 11 333 11 334 11 335 11 336 11 337 11 338 11 339 11 340 11 341 11 342 11 343 11 344 11 345 11 346 11 347 11 348 11 349 11 350 11 351 11 352 11 353 11 354 11 355 11 356 11 357 11 358 11 359 11 360 11 361 11 362 11 363 11 364 11 365 11 366 11 367 11 368 11 369 11 370 11 371 11 372 11 373 11 374 11 375 11 376 11 377 11 378 11 379 11 380 11 381 11 382 11 383 11 384 11 385 11 386 11 387 11 388 11 389 11 390 11 391 11 392 11 393 11 394 11 395 11 396 11 397 11 398 11 399 11 400 11 401 11 402 11 403 11 404 11 405 11 406 11 407 11 408 11 409 11 410 11 411 11 412 11 413 11 414 11 415 11 416 11 417 11 418 11 419 11 420 11 421 11 422 11 423 11 424 11 425 11 426 11 427 11 428 11 429 11 430 11 431 11 432 11 433 11 434 11 435 11 436 11 437 11 438 11 439 11 440 11 441 11 442 11 443 11 444 11 445 11 446 11 447 11 448 11 449 11 450 11 451 11 452 11 453 11 454 11 455 11 456 11 457 11 458 11 459 11 460 11 461 11 462 11 463 11 464 11 465 11 466 11 467 11 468 11 469 11 470 11 471 11 472 11 473 11 474 11 475 11 476 11 477 11 478 11 479 11 480 11 481 11 482 11 483 11 484 11 485 11 486 11 487 11 488 11 489 11 490 11 491 11 492 11 493 11 494 11 495 11 496 11 497 11 498 11 499 11 500 11 501 11 502 11 503 11 504 11 505 11 506 11 507 11 508 11 509 11 510 11 511 11 512 11 513 11 514 11 515 11 516 11 517 11 518 11 519 11 520 11 521 11 522 11 523 11 524 11 525 11 526 11 527 11 528 11 529 11 530 11 531 11 532 11 533 11 534 11 535 11 536 11 537 11 538 11 539 11 540 11 541 11 542 11 543 11 544 11 545 11 546 11 547 11 548 11 549 11 550 11 551 11 552 11 553 11 554 11 555 11 556 11 557 11 558 11 559 11 560 11 561 11 562 11 563 11 564 11 565 11 566 11 567 11 568 11 569 11 570 11 571 11 572 11 573 11 574 11 575 11 576 11 577 11 578 11 579 11 580 11 581 11 582 11 583 11 584 11 585 11 586 11 587 11 588 11 589 11 590 11 591 11 592 11 593 11 594 11 595 11 596 11 597 11 598 11 599 11 600 11 601 11 602 11 603 11 604 11 605 11 606 11 607 11 608 11 609 11 610 11 611 11 612 11 613 11 614 11 615 11 616 11 617 11 618 11 619 11 620 11 621 11 622 11 623 11 624 11 625 11 626 11 627 11 628 11 629 11 630 11 631 11 632 11 633 11 634 11 635 11 636 11 637 11 638 11 639 11 640 11 641 11 642 11 643 11 644 11 645 11 646 11 647 11 648 11 649 11 650 11 651 11 652 11 653 11 654 11 655 11 656 11 657 11 658 11 659 11 660 11 661 11 662 11 663 11 664 11 665 11 666 11 667 11 668 11 669 11 670 11 671 11 672 11 673 11 674 11 675 11 676 11 677 11 678 11 679 11 680 11 681 11 682 11 683 11 684 11 685 11 686 11 687 11 688 11 689 11 690 11 691 11 692 11 693 11 694 11 695 11 696 11 697 11 698 11 699 11 700 11 701 11 702 11 703 11 704 11 705 11 706 11 707 11 708 11 709 11 710 11 711 11 712 11 713 11 714 11 715 11 716 11 717 11 718 11 719 11 720 11 721 11 722 11 723 11 724 11 725 11 726 11 727 11 728 11 729 11 730 11 731 11 732 11 733 11 734 11 735 11 736 11 737 11 738 11 739 11 740 11 741 11 742 11 743 11 744 11 745 11 746 11 747 11 748 11 749 11 750 11 751 11 752 11 753 11 754 11 755 11 756 11 757 11 758 11 759 11 760 11 761 11 762 11 763 11 764 11 765 11 766 11 767 11 768 11 769 11 770 11 771 11 772 11 773 11 774 11 775 11 776 11 777 11 778 11 779 11 780 11 781 11 782 11 783 11 784 11 785 11 786 11 787 11 788 11 789 11 790 11 791 11 792 11 793 11 794 11 795 11 796 11 797 11 798 11 799 11 800 11 801 11 802 11 803 11 804 11 805 11 806 11 807 11 808 11 809 11 810 11 811 11 812 11 813 11 814 11 815 11 816 11 817 11 818 11 819 11 820 11 821 11 822 11 823 11 824 11 825 11 826 11 827 11 828 11 829 11 830 11 831 11 832 11 833 11 834 11 835 11 836 11 837 11 838 11 839 11 840 11 841 11 842 11 843 11 844 11 845 11 846 11 847 11 848 11 849 11 850 11 851 11 852 11 853 11 854 11 855 11 856 11 857 11 858 11 859 11 860 11 861 11 862 11 863 11 864 11 865 11 866 11 867 11 868 11 869 11 870 11 871 11 872 11 873 11 874 11 875 11 876 11 877 11 878 11 879 11 880 11 881 11 882 11 883 11 884 11 885 11 886 11 887 11 888 11 889 11 890 11 891 11 892 11 893 11 894 11 895 11 896 11 897 11 898 11 899 11 900 11 901 11 902 11 903 11 904 11 905 11 906 11 907 11 908 11 909 11 910 11 911 11 912 11 913 11 914 11 915 11 916 11 917 11 918 11 919 11 920 11 921 11 922 11 923 11 924 11 925 11 926 11 927 11 928 11 929 11 930 11 931 11 932 11 933 11 934 11 935 11 936 11 937 11 938 11 939 11 940 11 941 11 942 11 943 11 944 11 945 11 946 11 947 11 948 11 949 11 950 11 951 11 952 11 953 11 954 11 955 11 956 11 957 11 958 11 959 11 960 11 961 11 962 11 963 11 964 11 965 11 966 11 967 11 968 11 969 11 970 11 971 11 972 11 973 11 974 11 975 11 976 11 977 11 978 11 979 11 980 11 981 11 982 11 983 11 984 11 985 11 986 11 987 11 988 11 989 11 990 11 991 11 992 11 993 11 994 11 995 11 996 11 997 11 998 11 999 12 0 12 1 12 2 12 3 12 4 12 5 12 6 12 7 12 8 12 9 12 10 12 11 12 12 12 13 12 14 12 15 12 16 12 17 12 18 12 19 12 20 12 21 12 22 12 23 12 24 12 25 12 26 12 27 12 28 12 29 12 30 12 31 12 32 12 33 12 34 12 35 12 36 12 37 12 38 12 39 12 40 12 41 12 42 12 43 12 44 12 45 12 46 12 47 12 48 12 49 12 50 12 51 12 52 12 53 12 54 12 55 12 56 12 57 12 58 12 59 12 60 12 61 12 62 12 63 12 64 12 65 12 66 12 67 12 68 12 69 12 70 12 71 12 72 12 73 12 74 12 75 12 76 12 77 12 78 12 79 12 80 12 81 12 82 12 83 12 84 12 85 12 86 12 87 12 88 12 89 12 90 12 91 12 92 12 93 12 94 12 95 12 96 12 97 12 98 12 99 12 100 12 101 12 102 12 103 12 104 12 105 12 106 12 107 12 108 12 109 12 110 12 111 12 112 12 113 12 114 12 115 12 116 12 117 12 118 12 119 12 120 12 121 12 122 12 123 12 124 12 125 12 126 12 127 12 128 12 129 12 130 12 131 12 132 12 133 12 134 12 135 12 136 12 137 12 138 12 139 12 140 12 141 12 142 12 143 12 144 12 145 12 146 12 147 12 148 12 149 12 150 12 151 12 152 12 153 12 154 12 155 12 156 12 157 12 158 12 159 12 160 12 161 12 162 12 163 12 164 12 165 12 166 12 167 12 168 12 169 12 170 12 171 12 172 12 173 12 174 12 175 12 176 12 177 12 178 12 179 12 180 12 181 12 182 12 183 12 184 12 185 12 186 12 187 12 188 12 189 12 190 12 191 12 192 12 193 12 194 12 195 12 196 12 197 12 198 12 199 12 200 12 201 12 202 12 203 12 204 12 205 12 206 12 207 12 208 12 209 12 210 12 211 12 212 12 213 12 214 12 215 12 216 12 217 12 218 12 219 12 220 12 221 12 222 12 223 12 224 12 225 12 226 12 227 12 228 12 229 12 230 12 231 12 232 12 233 12 234 12 235 12 236 12 237 12 238 12 239 12 240 12 241 12 242 12 243 12 244 12 245 12 246 12 247 12 248 12 249 12 250 12 251 12 252 12 253 12 254 12 255 12 256 12 257 12 258 12 259 12 260 12 261 12 262 12 263 12 264 12 265 12 266 12 267 12 268 12 269 12 270 12 271 12 272 12 273 12 274 12 275 12 276 12 277 12 278 12 279 12 280 12 281 12 282 12 283 12 284 12 285 12 286 12 287 12 288 12 289 12 290 12 291 12 292 12 293 12 294 12 295 12 296 12 297 12 298 12 299 12 300 12 301 12 302 12 303 12 304 12 305 12 306 12 307 12 308 12 309 12 310 12 311 12 312 12 313 12 314 12 315 12 316 12 317 12 318 12 319 12 320 12 321 12 322 12 323 12 324 12 325 12 326 12 327 12 328 12 329 12 330 12 331 12 332 12 333 12 334 12 335 12 336 12 337 12 338 12 339 12 340 12 341 12 342 12 343 12 344 12 345 12 346 12 347 12 348 12 349 12 350 12 351 12 352 12 353 12 354 12 355 12 356 12 357 12 358 12 359 12 360 12 361 12 362 12 363 12 364 12 365 12 366 12 367 12 368 12 369 12 370 12 371 12 372 12 373 12 374 12 375 12 376 12 377 12 378 12 379 12 380 12 381 12 382 12 383 12 384 12 385 12 386 12 387 12 388 12 389 12 390 12 391 12 392 12 393 12 394 12 395 12 396 12 397 12 398 12 399 12 400 12 401 12 402 12 403 12 404 12 405 12 406 12 407 12 408 12 409 12 410 12 411 12 412 12 413 12 414 12 415 12 416 12 417 12 418 12 419 12 420 12 421 12 422 12 423 12 424 12 425 12 426 12 427 12 428 12 429 12 430 12 431 12 432 12 433 12 434 12 435 12 436 12 437 12 438 12 439 12 440 12 441 12 442 12 443 12 444 12 445 12 446 12 447 12 448 12 449 12 450 12 451 12 452 12 453 12 454 12 455 12 456 12 457 12 458 12 459 12 460 12 461 12 462 12 463 12 464 12 465 12 466 12 467 12 468 12 469 12 470 12 471 12 472 12 473 12 474 12 475 12 476 12 477 12 478 12 479 12 480 12 481 12 482 12 483 12 484 12 485 12 486 12 487 12 488 12 489 12 490 12 491 12 492 12 493 12 494 12 495 12 496 12 497 12 498 12 499 12 500 12 501 12 502 12 503 12 504 12 505 12 506 12 507 12 508 12 509 12 510 12 511 12 512 12 513 12 514 12 515 12 516 12 517 12 518 12 519 12 520 12 521 12 522 12 523 12 524 12 525 12 526 12 527 12 528 12 529 12 530 12 531 12 532 12 533 12 534 12 535 12 536 12 537 12 538 12 539 12 540 12 541 12 542 12 543 12 544 12 545 12 546 12 547 12 548 12 549 12 550 12 551 12 552 12 553 12 554 12 555 12 556 12 557 12 558 12 559 12 560 12 561 12 562 12 563 12 564 12 565 12 566 12 567 12 568 12 569 12 570 12 571 12 572 12 573 12 574 12 575 12 576 12 577 12 578 12 579 12 580 12 581 12 582 12 583 12 584 12 585 12 586 12 587 12 588 12 589 12 590 12 591 12 592 12 593 12 594 12 595 12 596 12 597 12 598 12 599 12 600 12 601 12 602 12 603 12 604 12 605 12 606 12 607 12 608 12 609 12 610 12 611 12 612 12 613 12 614 12 615 12 616 12 617 12 618 12 619 12 620 12 621 12 622 12 623 12 624 12 625 12 626 12 627 12 628 12 629 12 630 12 631 12 632 12 633 12 634 12 635 12 636 12 637 12 638 12 639 12 640 12 641 12 642 12 643 12 644 12 645 12 646 12 647 12 648 12 649 12 650 12 651 12 652 12 653 12 654 12 655 12 656 12 657 12 658 12 659 12 660 12 661 12 662 12 663 12 664 12 665 12 666 12 667 12 668 12 669 12 670 12 671 12 672 12 673 12 674 12 675 12 676 12 677 12 678 12 679 12 680 12 681 12 682 12 683 12 684 12 685 12 686 12 687 12 688 12 689 12 690 12 691 12 692 12 693 12 694 12 695 12 696 12 697 12 698 12 699 12 700 12 701 12 702 12 703 12 704 12 705 12 706 12 707 12 708 12 709 12 710 12 711 12 712 12 713 12 714 12 715 12 716 12 717 12 718 12 719 12 720 12 721 12 722 12 723 12 724 12 725 12 726 12 727 12 728 12 729 12 730 12 731 12 732 12 733 12 734 12 735 12 736 12 737 12 738 12 739 12 740 12 741 12 742 12 743 12 744 12 745 12 746 12 747 12 748 12 749 12 750 12 751 12 752 12 753 12 754 12 755 12 756 12 757 12 758 12 759 12 760 12 761 12 762 12 763 12 764 12 765 12 766 12 767 12 768 12 769 12 770 12 771 12 772 12 773 12 774 12 775 12 776 12 777 12 778 12 779 12 780 12 781 12 782 12 783 12 784 12 785 12 786 12 787 12 788 12 789 12 790 12 791 12 792 12 793 12 794 12 795 12 796 12 797 12 798 12 799 12 800 12 801 12 802 12 803 12 804 12 805 12 806 12 807 12 808 12 809 12 810 12 811 12 812 12 813 12 814 12 815 12 816 12 817 12 818 12 819 12 820 12 821 12 822 12 823 12 824 12 825 12 826 12 827 12 828 12 829 12 830 12 831 12 832 12 833 12 834 12 835 12 836 12 837 12 838 12 839 12 840 12 841 12 842 12 843 12 844 12 845 12 846 12 847 12 848 12 849 12 850 12 851 12 852 12 853 12 854 12 855 12 856 12 857 12 858 12 859 12 860 12 861 12 862 12 863 12 864 12 865 12 866 12 867 12 868 12 869 12 870 12 871 12 872 12 873 12 874 12 875 12 876 12 877 12 878 12 879 12 880 12 881 12 882 12 883 12 884 12 885 12 886 12 887 12 888 12 889 12 890 12 891 12 892 12 893 12 894 12 895 12 896 12 897 12 898 12 899 12 900 12 901 12 902 12 903 12 904 12 905 12 906 12 907 12 908 12 909 12 910 12 911 12 912 12 913 12 914 12 915 12 916 12 917 12 918 12 919 12 920 12 921 12 922 12 923 12 924 12 925 12 926 12 927 12 928 12 929 12 930 12 931 12 932 12 933 12 934 12 935 12 936 12 937 12 938 12 939 12 940 12 941 12 942 12 943 12 944 12 945 12 946 12 947 12 948 12 949 12 950 12 951 12 952 12 953 12 954 12 955 12 956 12 957 12 958 12 959 12 960 12 961 12 962 12 963 12 964 12 965 12 966 12 967 12 968 12 969 12 970 12 971 12 972 12 973 12 974 12 975 12 976 12 977 12 978 12 979 12 980 12 981 12 982 12 983 12 984 12 985 12 986 12 987 12 988 12 989 12 990 12 991 12 992 12 993 12 994 12 995 12 996 12 997 12 998 12 999 13 0 13 1 13 2 13 3 13 4 13 5 13 6 13 7 13 8 13 9 13 10 13 11 13 12 13 13 13 14 13 15 13 16 13 17 13 18 13 19 13 20 13 21 13 22 13 23 13 24 13 25 13 26 13 27 13 28 13 29 13 30 13 31 13 32 13 33 13 34 13 35 13 36 13 37 13 38 13 39 13 40 13 41 13 42 13 43 13 44 13 45 13 46 13 47 13 48 13 49 13 50 13 51 13 52 13 53 13 54 13 55 13 56 13 57 13 58 13 59 13 60 13 61 13 62 13 63 13 64 13 65 13 66 13 67 13 68 13 69 13 70 13 71 13 72 13 73 13 74 13 75 13 76 13 77 13 78 13 79 13 80 13 81 13 82 13 83 13 84 13 85 13 86 13 87 13 88 13 89 13 90 13 91 13 92 13 93 13 94 13 95 13 96 13 97 13 98 13 99 13 100 13 101 13 102 13 103 13 104 13 105 13 106 13 107 13 108 13 109 13 110 13 111 13 112 13 113 13 114 13 115 13 116 13 117 13 118 13 119 13 120 13 121 13 122 13 123 13 124 13 125 13 126 13 127 13 128 13 129 13 130 13 131 13 132 13 133 13 134 13 135 13 136 13 137 13 138 13 139 13 140 13 141 13 142 13 143 13 144 13 145 13 146 13 147 13 148 13 149 13 150 13 151 13 152 13 153 13 154 13 155 13 156 13 157 13 158 13 159 13 160 13 161 13 162 13 163 13 164 13 165 13 166 13 167 13 168 13 169 13 170 13 171 13 172 13 173 13 174 13 175 13 176 13 177 13 178 13 179 13 180 13 181 13 182 13 183 13 184 13 185 13 186 13 187 13 188 13 189 13 190 13 191 13 192 13 193 13 194 13 195 13 196 13 197 13 198 13 199 13 200 13 201 13 202 13 203 13 204 13 205 13 206 13 207 13 208 13 209 13 210 13 211 13 212 13 213 13 214 13 215 13 216 13 217 13 218 13 219 13 220 13 221 13 222 13 223 13 224 13 225 13 226 13 227 13 228 13 229 13 230 13 231 13 232 13 233 13 234 13 235 13 236 13 237 13 238 13 239 13 240 13 241 13 242 13 243 13 244 13 245 13 246 13 247 13 248 13 249 13 250 13 251 13 252 13 253 13 254 13 255 13 256 13 257 13 258 13 259 13 260 13 261 13 262 13 263 13 264 13 265 13 266 13 267 13 268 13 269 13 270 13 271 13 272 13 273 13 274 13 275 13 276 13 277 13 278 13 279 13 280 13 281 13 282 13 283 13 284 13 285 13 286 13 287 13 288 13 289 13 290 13 291 13 292 13 293 13 294 13 295 13 296 13 297 13 298 13 299 13 300 13 301 13 302 13 303 13 304 13 305 13 306 13 307 13 308 13 309 13 310 13 311 13 312 13 313 13 314 13 315 13 316 13 317 13 318 13 319 13 320 13 321 13 322 13 323 13 324 13 325 13 326 13 327 13 328 13 329 13 330 13 331 13 332 13 333 13 334 13 335 13 336 13 337 13 338 13 339 13 340 13 341 13 342 13 343 13 344 13 345 13 346 13 347 13 348 13 349 13 350 13 351 13 352 13 353 13 354 13 355 13 356 13 357 13 358 13 359 13 360 13 361 13 362 13 363 13 364 13 365 13 366 13 367 13 368 13 369 13 370 13 371 13 372 13 373 13 374 13 375 13 376 13 377 13 378 13 379 13 380 13 381 13 382 13 383 13 384 13 385 13 386 13 387 13 388 13 389 13 390 13 391 13 392 13 393 13 394 13 395 13 396 13 397 13 398 13 399 13 400 13 401 13 402 13 403 13 404 13 405 13 406 13 407 13 408 13 409 13 410 13 411 13 412 13 413 13 414 13 415 13 416 13 417 13 418 13 419 13 420 13 421 13 422 13 423 13 424 13 425 13 426 13 427 13 428 13 429 13 430 13 431 13 432 13 433 13 434 13 435 13 436 13 437 13 438 13 439 13 440 13 441 13 442 13 443 13 444 13 445 13 446 13 447 13 448 13 449 13 450 13 451 13 452 13 453 13 454 13 455 13 456 13 457 13 458 13 459 13 460 13 461 13 462 13 463 13 464 13 465 13 466 13 467 13 468 13 469 13 470 13 471 13 472 13 473 13 474 13 475 13 476 13 477 13 478 13 479 13 480 13 481 13 482 13 483 13 484 13 485 13 486 13 487 13 488 13 489 13 490 13 491 13 492 13 493 13 494 13 495 13 496 13 497 13 498 13 499 13 500 13 501 13 502 13 503 13 504 13 505 13 506 13 507 13 508 13 509 13 510 13 511 13 512 13 513 13 514 13 515 13 516 13 517 13 518 13 519 13 520 13 521 13 522 13 523 13 524 13 525 13 526 13 527 13 528 13 529 13 530 13 531 13 532 13 533 13 534 13 535 13 536 13 537 13 538 13 539 13 540 13 541 13 542 13 543 13 544 13 545 13 546 13 547 13 548 13 549 13 550 13 551 13 552 13 553 13 554 13 555 13 556 13 557 13 558 13 559 13 560 13 561 13 562 13 563 13 564 13 565 13 566 13 567 13 568 13 569 13 570 13 571 13 572 13 573 13 574 13 575 13 576 13 577 13 578 13 579 13 580 13 581 13 582 13 583 13 584 13 585 13 586 13 587 13 588 13 589 13 590 13 591 13 592 13 593 13 594 13 595 13 596 13 597 13 598 13 599 13 600 13 601 13 602 13 603 13 604 13 605 13 606 13 607 13 608 13 609 13 610 13 611 13 612 13 613 13 614 13 615 13 616 13 617 13 618 13 619 13 620 13 621 13 622 13 623 13 624 13 625 13 626 13 627 13 628 13 629 13 630 13 631 13 632 13 633 13 634 13 635 13 636 13 637 13 638 13 639 13 640 13 641 13 642 13 643 13 644 13 645 13 646 13 647 13 648 13 649 13 650 13 651 13 652 13 653 13 654 13 655 13 656 13 657 13 658 13 659 13 660 13 661 13 662 13 663 13 664 13 665 13 666 13 667 13 668 13 669 13 670 13 671 13 672 13 673 13 674 13 675 13 676 13 677 13 678 13 679 13 680 13 681 13 682 13 683 13 684 13 685 13 686 13 687 13 688 13 689 13 690 13 691 13 692 13 693 13 694 13 695 13 696 13 697 13 698 13 699 13 700 13 701 13 702 13 703 13 704 13 705 13 706 13 707 13 708 13 709 13 710 13 711 13 712 13 713 13 714 13 715 13 716 13 717 13 718 13 719 13 720 13 721 13 722 13 723 13 724 13 725 13 726 13 727 13 728 13 729 13 730 13 731 13 732 13 733 13 734 13 735 13 736 13 737 13 738 13 739 13 740 13 741 13 742 13 743 13 744 13 745 13 746 13 747 13 748 13 749 13 750 13 751 13 752 13 753 13 754 13 755 13 756 13 757 13 758 13 759 13 760 13 761 13 762 13 763 13 764 13 765 13 766 13 767 13 768 13 769 13 770 13 771 13 772 13 773 13 774 13 775 13 776 13 777 13 778 13 779 13 780 13 781 13 782 13 783 13 784 13 785 13 786 13 787 13 788 13 789 13 790 13 791 13 792 13 793 13 794 13 795 13 796 13 797 13 798 13 799 13 800 13 801 13 802 13 803 13 804 13 805 13 806 13 807 13 808 13 809 13 810 13 811 13 812 13 813 13 814 13 815 13 816 13 817 13 818 13 819 13 820 13 821 13 822 13 823 13 824 13 825 13 826 13 827 13 828 13 829 13 830 13 831 13 832 13 833 13 834 13 835 13 836 13 837 13 838 13 839 13 840 13 841 13 842 13 843 13 844 13 845 13 846 13 847 13 848 13 849 13 850 13 851 13 852 13 853 13 854 13 855 13 856 13 857 13 858 13 859 13 860 13 861 13 862 13 863 13 864 13 865 13 866 13 867 13 868 13 869 13 870 13 871 13 872 13 873 13 874 13 875 13 876 13 877 13 878 13 879 13 880 13 881 13 882 13 883 13 884 13 885 13 886 13 887 13 888 13 889 13 890 13 891 13 892 13 893 13 894 13 895 13 896 13 897 13 898 13 899 13 900 13 901 13 902 13 903 13 904 13 905 13 906 13 907 13 908 13 909 13 910 13 911 13 912 13 913 13 914 13 915 13 916 13 917 13 918 13 919 13 920 13 921 13 922 13 923 13 924 13 925 13 926 13 927 13 928 13 929 13 930 13 931 13 932 13 933 13 934 13 935 13 936 13 937 13 938 13 939 13 940 13 941 13 942 13 943 13 944 13 945 13 946 13 947 13 948 13 949 13 950 13 951 13 952 13 953 13 954 13 955 13 956 13 957 13 958 13 959 13 960 13 961 13 962 13 963 13 964 13 965 13 966 13 967 13 968 13 969 13 970 13 971 13 972 13 973 13 974 13 975 13 976 13 977 13 978 13 979 13 980 13 981 13 982 13 983 13 984 13 985 13 986 13 987 13 988 13 989 13 990 13 991 13 992 13 993 13 994 13 995 13 996 13 997 13 998 13 999 14 0 14 1 14 2 14 3 14 4 14 5 14 6 14 7 14 8 14 9 14 10 14 11 14 12 14 13 14 14 14 15 14 16 14 17 14 18 14 19 14 20 14 21 14 22 14 23 14 24 14 25 14 26 14 27 14 28 14 29 14 30 14 31 14 32 14 33 14 34 14 35 14 36 14 37 14 38 14 39 14 40 14 41 14 42 14 43 14 44 14 45 14 46 14 47 14 48 14 49 14 50 14 51 14 52 14 53 14 54 14 55 14 56 14 57 14 58 14 59 14 60 14 61 14 62 14 63 14 64 14 65 14 66 14 67 14 68 14 69 14 70 14 71 14 72 14 73 14 74 14 75 14 76 14 77 14 78 14 79 14 80 14 81 14 82 14 83 14 84 14 85 14 86 14 87 14 88 14 89 14 90 14 91 14 92 14 93 14 94 14 95 14 96 14 97 14 98 14 99 14 100 14 101 14 102 14 103 14 104 14 105 14 106 14 107 14 108 14 109 14 110 14 111 14 112 14 113 14 114 14 115 14 116 14 117 14 118 14 119 14 120 14 121 14 122 14 123 14 124 14 125 14 126 14 127 14 128 14 129 14 130 14 131 14 132 14 133 14 134 14 135 14 136 14 137 14 138 14 139 14 140 14 141 14 142 14 143 14 144 14 145 14 146 14 147 14 148 14 149 14 150 14 151 14 152 14 153 14 154 14 155 14 156 14 157 14 158 14 159 14 160 14 161 14 162 14 163 14 164 14 165 14 166 14 167 14 168 14 169 14 170 14 171 14 172 14 173 14 174 14 175 14 176 14 177 14 178 14 179 14 180 14 181 14 182 14 183 14 184 14 185 14 186 14 187 14 188 14 189 14 190 14 191 14 192 14 193 14 194 14 195 14 196 14 197 14 198 14 199 14 200 14 201 14 202 14 203 14 204 14 205 14 206 14 207 14 208 14 209 14 210 14 211 14 212 14 213 14 214 14 215 14 216 14 217 14 218 14 219 14 220 14 221 14 222 14 223 14 224 14 225 14 226 14 227 14 228 14 229 14 230 14 231 14 232 14 233 14 234 14 235 14 236 14 237 14 238 14 239 14 240 14 241 14 242 14 243 14 244 14 245 14 246 14 247 14 248 14 249 14 250 14 251 14 252 14 253 14 254 14 255 14 256 14 257 14 258 14 259 14 260 14 261 14 262 14 263 14 264 14 265 14 266 14 267 14 268 14 269 14 270 14 271 14 272 14 273 14 274 14 275 14 276 14 277 14 278 14 279 14 280 14 281 14 282 14 283 14 284 14 285 14 286 14 287 14 288 14 289 14 290 14 291 14 292 14 293 14 294 14 295 14 296 14 297 14 298 14 299 14 300 14 301 14 302 14 303 14 304 14 305 14 306 14 307 14 308 14 309 14 310 14 311 14 312 14 313 14 314 14 315 14 316 14 317 14 318 14 319 14 320 14 321 14 322 14 323 14 324 14 325 14 326 14 327 14 328 14 329 14 330 14 331 14 332 14 333 14 334 14 335 14 336 14 337 14 338 14 339 14 340 14 341 14 342 14 343 14 344 14 345 14 346 14 347 14 348 14 349 14 350 14 351 14 352 14 353 14 354 14 355 14 356 14 357 14 358 14 359 14 360 14 361 14 362 14 363 14 364 14 365 14 366 14 367 14 368 14 369 14 370 14 371 14 372 14 373 14 374 14 375 14 376 14 377 14 378 14 379 14 380 14 381 14 382 14 383 14 384 14 385 14 386 14 387 14 388 14 389 14 390 14 391 14 392 14 393 14 394 14 395 14 396 14 397 14 398 14 399 14 400 14 401 14 402 14 403 14 404 14 405 14 406 14 407 14 408 14 409 14 410 14 411 14 412 14 413 14 414 14 415 14 416 14 417 14 418 14 419 14 420 14 421 14 422 14 423 14 424 14 425 14 426 14 427 14 428 14 429 14 430 14 431 14 432 14 433 14 434 14 435 14 436 14 437 14 438 14 439 14 440 14 441 14 442 14 443 14 444 14 445 14 446 14 447 14 448 14 449 14 450 14 451 14 452 14 453 14 454 14 455 14 456 14 457 14 458 14 459 14 460 14 461 14 462 14 463 14 464 14 465 14 466 14 467 14 468 14 469 14 470 14 471 14 472 14 473 14 474 14 475 14 476 14 477 14 478 14 479 14 480 14 481 14 482 14 483 14 484 14 485 14 486 14 487 14 488 14 489 14 490 14 491 14 492 14 493 14 494 14 495 14 496 14 497 14 498 14 499 14 500 14 501 14 502 14 503 14 504 14 505 14 506 14 507 14 508 14 509 14 510 14 511 14 512 14 513 14 514 14 515 14 516 14 517 14 518 14 519 14 520 14 521 14 522 14 523 14 524 14 525 14 526 14 527 14 528 14 529 14 530 14 531 14 532 14 533 14 534 14 535 14 536 14 537 14 538 14 539 14 540 14 541 14 542 14 543 14 544 14 545 14 546 14 547 14 548 14 549 14 550 14 551 14 552 14 553 14 554 14 555 14 556 14 557 14 558 14 559 14 560 14 561 14 562 14 563 14 564 14 565 14 566 14 567 14 568 14 569 14 570 14 571 14 572 14 573 14 574 14 575 14 576 14 577 14 578 14 579 14 580 14 581 14 582 14 583 14 584 14 585 14 586 14 587 14 588 14 589 14 590 14 591 14 592 14 593 14 594 14 595 14 596 14 597 14 598 14 599 14 600 14 601 14 602 14 603 14 604 14 605 14 606 14 607 14 608 14 609 14 610 14 611 14 612 14 613 14 614 14 615 14 616 14 617 14 618 14 619 14 620 14 621 14 622 14 623 14 624 14 625 14 626 14 627 14 628 14 629 14 630 14 631 14 632 14 633 14 634 14 635 14 636 14 637 14 638 14 639 14 640 14 641 14 642 14 643 14 644 14 645 14 646 14 647 14 648 14 649 14 650 14 651 14 652 14 653 14 654 14 655 14 656 14 657 14 658 14 659 14 660 14 661 14 662 14 663 14 664 14 665 14 666 14 667 14 668 14 669 14 670 14 671 14 672 14 673 14 674 14 675 14 676 14 677 14 678 14 679 14 680 14 681 14 682 14 683 14 684 14 685 14 686 14 687 14 688 14 689 14 690 14 691 14 692 14 693 14 694 14 695 14 696 14 697 14 698 14 699 14 700 14 701 14 702 14 703 14 704 14 705 14 706 14 707 14 708 14 709 14 710 14 711 14 712 14 713 14 714 14 715 14 716 14 717 14 718 14 719 14 720 14 721 14 722 14 723 14 724 14 725 14 726 14 727 14 728 14 729 14 730 14 731 14 732 14 733 14 734 14 735 14 736 14 737 14 738 14 739 14 740 14 741 14 742 14 743 14 744 14 745 14 746 14 747 14 748 14 749 14 750 14 751 14 752 14 753 14 754 14 755 14 756 14 757 14 758 14 759 14 760 14 761 14 762 14 763 14 764 14 765 14 766 14 767 14 768 14 769 14 770 14 771 14 772 14 773 14 774 14 775 14 776 14 777 14 778 14 779 14 780 14 781 14 782 14 783 14 784 14 785 14 786 14 787 14 788 14 789 14 790 14 791 14 792 14 793 14 794 14 795 14 796 14 797 14 798 14 799 14 800 14 801 14 802 14 803 14 804 14 805 14 806 14 807 14 808 14 809 14 810 14 811 14 812 14 813 14 814 14 815 14 816 14 817 14 818 14 819 14 820 14 821 14 822 14 823 14 824 14 825 14 826 14 827 14 828 14 829 14 830 14 831 14 832 14 833 14 834 14 835 14 836 14 837 14 838 14 839 14 840 14 841 14 842 14 843 14 844 14 845 14 846 14 847 14 848 14 849 14 850 14 851 14 852 14 853 14 854 14 855 14 856 14 857 14 858 14 859 14 860 14 861 14 862 14 863 14 864 14 865 14 866 14 867 14 868 14 869 14 870 14 871 14 872 14 873 14 874 14 875 14 876 14 877 14 878 14 879 14 880 14 881 14 882 14 883 14 884 14 885 14 886 14 887 14 888 14 889 14 890 14 891 14 892 14 893 14 894 14 895 14 896 14 897 14 898 14 899 14 900 14 901 14 902 14 903 14 904 14 905 14 906 14 907 14 908 14 909 14 910 14 911 14 912 14 913 14 914 14 915 14 916 14 917 14 918 14 919 14 920 14 921 14 922 14 923 14 924 14 925 14 926 14 927 14 928 14 929 14 930 14 931 14 932 14 933 14 934 14 935 14 936 14 937 14 938 14 939 14 940 14 941 14 942 14 943 14 944 14 945 14 946 14 947 14 948 14 949 14 950 14 951 14 952 14 953 14 954 14 955 14 956 14 957 14 958 14 959 14 960 14 961 14 962 14 963 14 964 14 965 14 966 14 967 14 968 14 969 14 970 14 971 14 972 14 973 14 974 14 975 14 976 14 977 14 978 14 979 14 980 14 981 14 982 14 983 14 984 14 985 14 986 14 987 14 988 14 989 14 990 14 991 14 992 14 993 14 994 14 995 14 996 14 997 14 998 14 999 15 0 15 1 15 2 15 3 15 4 15 5 15 6 15 7 15 8 15 9 15 10 15 11 15 12 15 13 15 14 15 15 15 16 15 17 15 18 15 19 15 20 15 21 15 22 15 23 15 24 15 25 15 26 15 27 15 28 15 29 15 30 15 31 15 32 15 33 15 34 15 35 15 36 15 37 15 38 15 39 15 40 15 41 15 42 15 43 15 44 15 45 15 46 15 47 15 48 15 49 15 50 15 51 15 52 15 53 15 54 15 55 15 56 15 57 15 58 15 59 15 60 15 61 15 62 15 63 15 64 15 65 15 66 15 67 15 68 15 69 15 70 15 71 15 72 15 73 15 74 15 75 15 76 15 77 15 78 15 79 15 80 15 81 15 82 15 83 15 84 15 85 15 86 15 87 15 88 15 89 15 90 15 91 15 92 15 93 15 94 15 95 15 96 15 97 15 98 15 99 15 100 15 101 15 102 15 103 15 104 15 105 15 106 15 107 15 108 15 109 15 110 15 111 15 112 15 113 15 114 15 115 15 116 15 117 15 118 15 119 15 120 15 121 15 122 15 123 15 124 15 125 15 126 15 127 15 128 15 129 15 130 15 131 15 132 15 133 15 134 15 135 15 136 15 137 15 138 15 139 15 140 15 141 15 142 15 143 15 144 15 145 15 146 15 147 15 148 15 149 15 150 15 151 15 152 15 153 15 154 15 155 15 156 15 157 15 158 15 159 15 160 15 161 15 162 15 163 15 164 15 165 15 166 15 167 15 168 15 169 15 170 15 171 15 172 15 173 15 174 15 175 15 176 15 177 15 178 15 179 15 180 15 181 15 182 15 183 15 184 15 185 15 186 15 187 15 188 15 189 15 190 15 191 15 192 15 193 15 194 15 195 15 196 15 197 15 198 15 199 15 200 15 201 15 202 15 203 15 204 15 205 15 206 15 207 15 208 15 209 15 210 15 211 15 212 15 213 15 214 15 215 15 216 15 217 15 218 15 219 15 220 15 221 15 222 15 223 15 224 15 225 15 226 15 227 15 228 15 229 15 230 15 231 15 232 15 233 15 234 15 235 15 236 15 237 15 238 15 239 15 240 15 241 15 242 15 243 15 244 15 245 15 246 15 247 15 248 15 249 15 250 15 251 15 252 15 253 15 254 15 255 15 256 15 257 15 258 15 259 15 260 15 261 15 262 15 263 15 264 15 265 15 266 15 267 15 268 15 269 15 270 15 271 15 272 15 273 15 274 15 275 15 276 15 277 15 278 15 279 15 280 15 281 15 282 15 283 15 284 15 285 15 286 15 287 15 288 15 289 15 290 15 291 15 292 15 293 15 294 15 295 15 296 15 297 15 298 15 299 15 300 15 301 15 302 15 303 15 304 15 305 15 306 15 307 15 308 15 309 15 310 15 311 15 312 15 313 15 314 15 315 15 316 15 317 15 318 15 319 15 320 15 321 15 322 15 323 15 324 15 325 15 326 15 327 15 328 15 329 15 330 15 331 15 332 15 333 15 334 15 335 15 336 15 337 15 338 15 339 15 340 15 341 15 342 15 343 15 344 15 345 15 346 15 347 15 348 15 349 15 350 15 351 15 352 15 353 15 354 15 355 15 356 15 357 15 358 15 359 15 360 15 361 15 362 15 363 15 364 15 365 15 366 15 367 15 368 15 369 15 370 15 371 15 372 15 373 15 374 15 375 15 376 15 377 15 378 15 379 15 380 15 381 15 382 15 383 15 384 15 385 15 386 15 387 15 388 15 389 15 390 15 391 15 392 15 393 15 394 15 395 15 396 15 397 15 398 15 399 15 400 15 401 15 402 15 403 15 404 15 405 15 406 15 407 15 408 15 409 15 410 15 411 15 412 15 413 15 414 15 415 15 416 15 417 15 418 15 419 15 420 15 421 15 422 15 423 15 424 15 425 15 426 15 427 15 428 15 429 15 430 15 431 15 432 15 433 15 434 15 435 15 436 15 437 15 438 15 439 15 440 15 441 15 442 15 443 15 444 15 445 15 446 15 447 15 448 15 449 15 450 15 451 15 452 15 453 15 454 15 455 15 456 15 457 15 458 15 459 15 460 15 461 15 462 15 463 15 464 15 465 15 466 15 467 15 468 15 469 15 470 15 471 15 472 15 473 15 474 15 475 15 476 15 477 15 478 15 479 15 480 15 481 15 482 15 483 15 484 15 485 15 486 15 487 15 488 15 489 15 490 15 491 15 492 15 493 15 494 15 495 15 496 15 497 15 498 15 499 15 500 15 501 15 502 15 503 15 504 15 505 15 506 15 507 15 508 15 509 15 510 15 511 15 512 15 513 15 514 15 515 15 516 15 517 15 518 15 519 15 520 15 521 15 522 15 523 15 524 15 525 15 526 15 527 15 528 15 529 15 530 15 531 15 532 15 533 15 534 15 535 15 536 15 537 15 538 15 539 15 540 15 541 15 542 15 543 15 544 15 545 15 546 15 547 15 548 15 549 15 550 15 551 15 552 15 553 15 554 15 555 15 556 15 557 15 558 15 559 15 560 15 561 15 562 15 563 15 564 15 565 15 566 15 567 15 568 15 569 15 570 15 571 15 572 15 573 15 574 15 575 15 576 15 577 15 578 15 579 15 580 15 581 15 582 15 583 15 584 15 585 15 586 15 587 15 588 15 589 15 590 15 591 15 592 15 593 15 594 15 595 15 596 15 597 15 598 15 599 15 600 15 601 15 602 15 603 15 604 15 605 15 606 15 607 15 608 15 609 15 610 15 611 15 612 15 613 15 614 15 615 15 616 15 617 15 618 15 619 15 620 15 621 15 622 15 623 15 624 15 625 15 626 15 627 15 628 15 629 15 630 15 631 15 632 15 633 15 634 15 635 15 636 15 637 15 638 15 639 15 640 15 641 15 642 15 643 15 644 15 645 15 646 15 647 15 648 15 649 15 650 15 651 15 652 15 653 15 654 15 655 15 656 15 657 15 658 15 659 15 660 15 661 15 662 15 663 15 664 15 665 15 666 15 667 15 668 15 669 15 670 15 671 15 672 15 673 15 674 15 675 15 676 15 677 15 678 15 679 15 680 15 681 15 682 15 683 15 684 15 685 15 686 15 687 15 688 15 689 15 690 15 691 15 692 15 693 15 694 15 695 15 696 15 697 15 698 15 699 15 700 15 701 15 702 15 703 15 704 15 705 15 706 15 707 15 708 15 709 15 710 15 711 15 712 15 713 15 714 15 715 15 716 15 717 15 718 15 719 15 720 15 721 15 722 15 723 15 724 15 725 15 726 15 727 15 728 15 729 15 730 15 731 15 732 15 733 15 734 15 735 15 736 15 737 15 738 15 739 15 740 15 741 15 742 15 743 15 744 15 745 15 746 15 747 15 748 15 749 15 750 15 751 15 752 15 753 15 754 15 755 15 756 15 757 15 758 15 759 15 760 15 761 15 762 15 763 15 764 15 765 15 766 15 767 15 768 15 769 15 770 15 771 15 772 15 773 15 774 15 775 15 776 15 777 15 778 15 779 15 780 15 781 15 782 15 783 15 784 15 785 15 786 15 787 15 788 15 789 15 790 15 791 15 792 15 793 15 794 15 795 15 796 15 797 15 798 15 799 15 800 15 801 15 802 15 803 15 804 15 805 15 806 15 807 15 808 15 809 15 810 15 811 15 812 15 813 15 814 15 815 15 816 15 817 15 818 15 819 15 820 15 821 15 822 15 823 15 824 15 825 15 826 15 827 15 828 15 829 15 830 15 831 15 832 15 833 15 834 15 835 15 836 15 837 15 838 15 839 15 840 15 841 15 842 15 843 15 844 15 845 15 846 15 847 15 848 15 849 15 850 15 851 15 852 15 853 15 854 15 855 15 856 15 857 15 858 15 859 15 860 15 861 15 862 15 863 15 864 15 865 15 866 15 867 15 868 15 869 15 870 15 871 15 872 15 873 15 874 15 875 15 876 15 877 15 878 15 879 15 880 15 881 15 882 15 883 15 884 15 885 15 886 15 887 15 888 15 889 15 890 15 891 15 892 15 893 15 894 15 895 15 896 15 897 15 898 15 899 15 900 15 901 15 902 15 903 15 904 15 905 15 906 15 907 15 908 15 909 15 910 15 911 15 912 15 913 15 914 15 915 15 916 15 917 15 918 15 919 15 920 15 921 15 922 15 923 15 924 15 925 15 926 15 927 15 928 15 929 15 930 15 931 15 932 15 933 15 934 15 935 15 936 15 937 15 938 15 939 15 940 15 941 15 942 15 943 15 944 15 945 15 946 15 947 15 948 15 949 15 950 15 951 15 952 15 953 15 954 15 955 15 956 15 957 15 958 15 959 15 960 15 961 15 962 15 963 15 964 15 965 15 966 15 967 15 968 15 969 15 970 15 971 15 972 15 973 15 974 15 975 15 976 15 977 15 978 15 979 15 980 15 981 15 982 15 983 15 984 15 985 15 986 15 987 15 988 15 989 15 990 15 991 15 992 15 993 15 994 15 995 15 996 15 997 15 998 15 999 16 0 16 1 16 2 16 3 16 4 16 5 16 6 16 7 16 8 16 9 16 10 16 11 16 12 16 13 16 14 16 15 16 16 16 17 16 18 16 19 16 20 16 21 16 22 16 23 16 24 16 25 16 26 16 27 16 28 16 29 16 30 16 31 16 32 16 33 16 34 16 35 16 36 16 37 16 38 16 39 16 40 16 41 16 42 16 43 16 44 16 45 16 46 16 47 16 48 16 49 16 50 16 51 16 52 16 53 16 54 16 55 16 56 16 57 16 58 16 59 16 60 16 61 16 62 16 63 16 64 16 65 16 66 16 67 16 68 16 69 16 70 16 71 16 72 16 73 16 74 16 75 16 76 16 77 16 78 16 79 16 80 16 81 16 82 16 83 16 84 16 85 16 86 16 87 16 88 16 89 16 90 16 91 16 92 16 93 16 94 16 95 16 96 16 97 16 98 16 99 16 100 16 101 16 102 16 103 16 104 16 105 16 106 16 107 16 108 16 109 16 110 16 111 16 112 16 113 16 114 16 115 16 116 16 117 16 118 16 119 16 120 16 121 16 122 16 123 16 124 16 125 16 126 16 127 16 128 16 129 16 130 16 131 16 132 16 133 16 134 16 135 16 136 16 137 16 138 16 139 16 140 16 141 16 142 16 143 16 144 16 145 16 146 16 147 16 148 16 149 16 150 16 151 16 152 16 153 16 154 16 155 16 156 16 157 16 158 16 159 16 160 16 161 16 162 16 163 16 164 16 165 16 166 16 167 16 168 16 169 16 170 16 171 16 172 16 173 16 174 16 175 16 176 16 177 16 178 16 179 16 180 16 181 16 182 16 183 16 184 16 185 16 186 16 187 16 188 16 189 16 190 16 191 16 192 16 193 16 194 16 195 16 196 16 197 16 198 16 199 16 200 16 201 16 202 16 203 16 204 16 205 16 206 16 207 16 208 16 209 16 210 16 211 16 212 16 213 16 214 16 215 16 216 16 217 16 218 16 219 16 220 16 221 16 222 16 223 16 224 16 225 16 226 16 227 16 228 16 229 16 230 16 231 16 232 16 233 16 234 16 235 16 236 16 237 16 238 16 239 16 240 16 241 16 242 16 243 16 244 16 245 16 246 16 247 16 248 16 249 16 250 16 251 16 252 16 253 16 254 16 255 16 256 16 257 16 258 16 259 16 260 16 261 16 262 16 263 16 264 16 265 16 266 16 267 16 268 16 269 16 270 16 271 16 272 16 273 16 274 16 275 16 276 16 277 16 278 16 279 16 280 16 281 16 282 16 283 16 284 16 285 16 286 16 287 16 288 16 289 16 290 16 291 16 292 16 293 16 294 16 295 16 296 16 297 16 298 16 299 16 300 16 301 16 302 16 303 16 304 16 305 16 306 16 307 16 308 16 309 16 310 16 311 16 312 16 313 16 314 16 315 16 316 16 317 16 318 16 319 16 320 16 321 16 322 16 323 16 324 16 325 16 326 16 327 16 328 16 329 16 330 16 331 16 332 16 333 16 334 16 335 16 336 16 337 16 338 16 339 16 340 16 341 16 342 16 343 16 344 16 345 16 346 16 347 16 348 16 349 16 350 16 351 16 352 16 353 16 354 16 355 16 356 16 357 16 358 16 359 16 360 16 361 16 362 16 363 16 364 16 365 16 366 16 367 16 368 16 369 16 370 16 371 16 372 16 373 16 374 16 375 16 376 16 377 16 378 16 379 16 380 16 381 16 382 16 383 16 384 16 385 16 386 16 387 16 388 16 389 16 390 16 391 16 392 16 393 16 394 16 395 16 396 16 397 16 398 16 399 16 400 16 401 16 402 16 403 16 404 16 405 16 406 16 407 16 408 16 409 16 410 16 411 16 412 16 413 16 414 16 415 16 416 16 417 16 418 16 419 16 420 16 421 16 422 16 423 16 424 16 425 16 426 16 427 16 428 16 429 16 430 16 431 16 432 16 433 16 434 16 435 16 436 16 437 16 438 16 439 16 440 16 441 16 442 16 443 16 444 16 445 16 446 16 447 16 448 16 449 16 450 16 451 16 452 16 453 16 454 16 455 16 456 16 457 16 458 16 459 16 460 16 461 16 462 16 463 16 464 16 465 16 466 16 467 16 468 16 469 16 470 16 471 16 472 16 473 16 474 16 475 16 476 16 477 16 478 16 479 16 480 16 481 16 482 16 483 16 484 16 485 16 486 16 487 16 488 16 489 16 490 16 491 16 492 16 493 16 494 16 495 16 496 16 497 16 498 16 499 16 500 16 501 16 502 16 503 16 504 16 505 16 506 16 507 16 508 16 509 16 510 16 511 16 512 16 513 16 514 16 515 16 516 16 517 16 518 16 519 16 520 16 521 16 522 16 523 16 524 16 525 16 526 16 527 16 528 16 529 16 530 16 531 16 532 16 533 16 534 16 535 16 536 16 537 16 538 16 539 16 540 16 541 16 542 16 543 16 544 16 545 16 546 16 547 16 548 16 549 16 550 16 551 16 552 16 553 16 554 16 555 16 556 16 557 16 558 16 559 16 560 16 561 16 562 16 563 16 564 16 565 16 566 16 567 16 568 16 569 16 570 16 571 16 572 16 573 16 574 16 575 16 576 16 577 16 578 16 579 16 580 16 581 16 582 16 583 16 584 16 585 16 586 16 587 16 588 16 589 16 590 16 591 16 592 16 593 16 594 16 595 16 596 16 597 16 598 16 599 16 600 16 601 16 602 16 603 16 604 16 605 16 606 16 607 16 608 16 609 16 610 16 611 16 612 16 613 16 614 16 615 16 616 16 617 16 618 16 619 16 620 16 621 16 622 16 623 16 624 16 625 16 626 16 627 16 628 16 629 16 630 16 631 16 632 16 633 16 634 16 635 16 636 16 637 16 638 16 639 16 640 16 641 16 642 16 643 16 644 16 645 16 646 16 647 16 648 16 649 16 650 16 651 16 652 16 653 16 654 16 655 16 656 16 657 16 658 16 659 16 660 16 661 16 662 16 663 16 664 16 665 16 666 16 667 16 668 16 669 16 670 16 671 16 672 16 673 16 674 16 675 16 676 16 677 16 678 16 679 16 680 16 681 16 682 16 683 16 684 16 685 16 686 16 687 16 688 16 689 16 690 16 691 16 692 16 693 16 694 16 695 16 696 16 697 16 698 16 699 16 700 16 701 16 702 16 703 16 704 16 705 16 706 16 707 16 708 16 709 16 710 16 711 16 712 16 713 16 714 16 715 16 716 16 717 16 718 16 719 16 720 16 721 16 722 16 723 16 724 16 725 16 726 16 727 16 728 16 729 16 730 16 731 16 732 16 733 16 734 16 735 16 736 16 737 16 738 16 739 16 740 16 741 16 742 16 743 16 744 16 745 16 746 16 747 16 748 16 749 16 750 16 751 16 752 16 753 16 754 16 755 16 756 16 757 16 758 16 759 16 760 16 761 16 762 16 763 16 764 16 765 16 766 16 767 16 768 16 769 16 770 16 771 16 772 16 773 16 774 16 775 16 776 16 777 16 778 16 779 16 780 16 781 16 782 16 783 16 784 16 785 16 786 16 787 16 788 16 789 16 790 16 791 16 792 16 793 16 794 16 795 16 796 16 797 16 798 16 799 16 800 16 801 16 802 16 803 16 804 16 805 16 806 16 807 16 808 16 809 16 810 16 811 16 812 16 813 16 814 16 815 16 816 16 817 16 818 16 819 16 820 16 821 16 822 16 823 16 824 16 825 16 826 16 827 16 828 16 829 16 830 16 831 16 832 16 833 16 834 16 835 16 836 16 837 16 838 16 839 16 840 16 841 16 842 16 843 16 844 16 845 16 846 16 847 16 848 16 849 16 850 16 851 16 852 16 853 16 854 16 855 16 856 16 857 16 858 16 859 16 860 16 861 16 862 16 863 16 864 16 865 16 866 16 867 16 868 16 869 16 870 16 871 16 872 16 873 16 874 16 875 16 876 16 877 16 878 16 879 16 880 16 881 16 882 16 883 16 884 16 885 16 886 16 887 16 888 16 889 16 890 16 891 16 892 16 893 16 894 16 895 16 896 16 897 16 898 16 899 16 900 16 901 16 902 16 903 16 904 16 905 16 906 16 907 16 908 16 909 16 910 16 911 16 912 16 913 16 914 16 915 16 916 16 917 16 918 16 919 16 920 16 921 16 922 16 923 16 924 16 925 16 926 16 927 16 928 16 929 16 930 16 931 16 932 16 933 16 934 16 935 16 936 16 937 16 938 16 939 16 940 16 941 16 942 16 943 16 944 16 945 16 946 16 947 16 948 16 949 16 950 16 951 16 952 16 953 16 954 16 955 16 956 16 957 16 958 16 959 16 960 16 961 16 962 16 963 16 964 16 965 16 966 16 967 16 968 16 969 16 970 16 971 16 972 16 973 16 974 16 975 16 976 16 977 16 978 16 979 16 980 16 981 16 982 16 983 16 984 16 985 16 986 16 987 16 988 16 989 16 990 16 991 16 992 16 993 16 994 16 995 16 996 16 997 16 998 16 999 17 0 17 1 17 2 17 3 17 4 17 5 17 6 17 7 17 8 17 9 17 10 17 11 17 12 17 13 17 14 17 15 17 16 17 17 17 18 17 19 17 20 17 21 17 22 17 23 17 24 17 25 17 26 17 27 17 28 17 29 17 30 17 31 17 32 17 33 17 34 17 35 17 36 17 37 17 38 17 39 17 40 17 41 17 42 17 43 17 44 17 45 17 46 17 47 17 48 17 49 17 50 17 51 17 52 17 53 17 54 17 55 17 56 17 57 17 58 17 59 17 60 17 61 17 62 17 63 17 64 17 65 17 66 17 67 17 68 17 69 17 70 17 71 17 72 17 73 17 74 17 75 17 76 17 77 17 78 17 79 17 80 17 81 17 82 17 83 17 84 17 85 17 86 17 87 17 88 17 89 17 90 17 91 17 92 17 93 17 94 17 95 17 96 17 97 17 98 17 99 17 100 17 101 17 102 17 103 17 104 17 105 17 106 17 107 17 108 17 109 17 110 17 111 17 112 17 113 17 114 17 115 17 116 17 117 17 118 17 119 17 120 17 121 17 122 17 123 17 124 17 125 17 126 17 127 17 128 17 129 17 130 17 131 17 132 17 133 17 134 17 135 17 136 17 137 17 138 17 139 17 140 17 141 17 142 17 143 17 144 17 145 17 146 17 147 17 148 17 149 17 150 17 151 17 152 17 153 17 154 17 155 17 156 17 157 17 158 17 159 17 160 17 161 17 162 17 163 17 164 17 165 17 166 17 167 17 168 17 169 17 170 17 171 17 172 17 173 17 174 17 175 17 176 17 177 17 178 17 179 17 180 17 181 17 182 17 183 17 184 17 185 17 186 17 187 17 188 17 189 17 190 17 191 17 192 17 193 17 194 17 195 17 196 17 197 17 198 17 199 17 200 17 201 17 202 17 203 17 204 17 205 17 206 17 207 17 208 17 209 17 210 17 211 17 212 17 213 17 214 17 215 17 216 17 217 17 218 17 219 17 220 17 221 17 222 17 223 17 224 17 225 17 226 17 227 17 228 17 229 17 230 17 231 17 232 17 233 17 234 17 235 17 236 17 237 17 238 17 239 17 240 17 241 17 242 17 243 17 244 17 245 17 246 17 247 17 248 17 249 17 250 17 251 17 252 17 253 17 254 17 255 17 256 17 257 17 258 17 259 17 260 17 261 17 262 17 263 17 264 17 265 17 266 17 267 17 268 17 269 17 270 17 271 17 272 17 273 17 274 17 275 17 276 17 277 17 278 17 279 17 280 17 281 17 282 17 283 17 284 17 285 17 286 17 287 17 288 17 289 17 290 17 291 17 292 17 293 17 294 17 295 17 296 17 297 17 298 17 299 17 300 17 301 17 302 17 303 17 304 17 305 17 306 17 307 17 308 17 309 17 310 17 311 17 312 17 313 17 314 17 315 17 316 17 317 17 318 17 319 17 320 17 321 17 322 17 323 17 324 17 325 17 326 17 327 17 328 17 329 17 330 17 331 17 332 17 333 17 334 17 335 17 336 17 337 17 338 17 339 17 340 17 341 17 342 17 343 17 344 17 345 17 346 17 347 17 348 17 349 17 350 17 351 17 352 17 353 17 354 17 355 17 356 17 357 17 358 17 359 17 360 17 361 17 362 17 363 17 364 17 365 17 366 17 367 17 368 17 369 17 370 17 371 17 372 17 373 17 374 17 375 17 376 17 377 17 378 17 379 17 380 17 381 17 382 17 383 17 384 17 385 17 386 17 387 17 388 17 389 17 390 17 391 17 392 17 393 17 394 17 395 17 396 17 397 17 398 17 399 17 400 17 401 17 402 17 403 17 404 17 405 17 406 17 407 17 408 17 409 17 410 17 411 17 412 17 413 17 414 17 415 17 416 17 417 17 418 17 419 17 420 17 421 17 422 17 423 17 424 17 425 17 426 17 427 17 428 17 429 17 430 17 431 17 432 17 433 17 434 17 435 17 436 17 437 17 438 17 439 17 440 17 441 17 442 17 443 17 444 17 445 17 446 17 447 17 448 17 449 17 450 17 451 17 452 17 453 17 454 17 455 17 456 17 457 17 458 17 459 17 460 17 461 17 462 17 463 17 464 17 465 17 466 17 467 17 468 17 469 17 470 17 471 17 472 17 473 17 474 17 475 17 476 17 477 17 478 17 479 17 480 17 481 17 482 17 483 17 484 17 485 17 486 17 487 17 488 17 489 17 490 17 491 17 492 17 493 17 494 17 495 17 496 17 497 17 498 17 499 17 500 17 501 17 502 17 503 17 504 17 505 17 506 17 507 17 508 17 509 17 510 17 511 17 512 17 513 17 514 17 515 17 516 17 517 17 518 17 519 17 520 17 521 17 522 17 523 17 524 17 525 17 526 17 527 17 528 17 529 17 530 17 531 17 532 17 533 17 534 17 535 17 536 17 537 17 538 17 539 17 540 17 541 17 542 17 543 17 544 17 545 17 546 17 547 17 548 17 549 17 550 17 551 17 552 17 553 17 554 17 555 17 556 17 557 17 558 17 559 17 560 17 561 17 562 17 563 17 564 17 565 17 566 17 567 17 568 17 569 17 570 17 571 17 572 17 573 17 574 17 575 17 576 17 577 17 578 17 579 17 580 17 581 17 582 17 583 17 584 17 585 17 586 17 587 17 588 17 589 17 590 17 591 17 592 17 593 17 594 17 595 17 596 17 597 17 598 17 599 17 600 17 601 17 602 17 603 17 604 17 605 17 606 17 607 17 608 17 609 17 610 17 611 17 612 17 613 17 614 17 615 17 616 17 617 17 618 17 619 17 620 17 621 17 622 17 623 17 624 17 625 17 626 17 627 17 628 17 629 17 630 17 631 17 632 17 633 17 634 17 635 17 636 17 637 17 638 17 639 17 640 17 641 17 642 17 643 17 644 17 645 17 646 17 647 17 648 17 649 17 650 17 651 17 652 17 653 17 654 17 655 17 656 17 657 17 658 17 659 17 660 17 661 17 662 17 663 17 664 17 665 17 666 17 667 17 668 17 669 17 670 17 671 17 672 17 673 17 674 17 675 17 676 17 677 17 678 17 679 17 680 17 681 17 682 17 683 17 684 17 685 17 686 17 687 17 688 17 689 17 690 17 691 17 692 17 693 17 694 17 695 17 696 17 697 17 698 17 699 17 700 17 701 17 702 17 703 17 704 17 705 17 706 17 707 17 708 17 709 17 710 17 711 17 712 17 713 17 714 17 715 17 716 17 717 17 718 17 719 17 720 17 721 17 722 17 723 17 724 17 725 17 726 17 727 17 728 17 729 17 730 17 731 17 732 17 733 17 734 17 735 17 736 17 737 17 738 17 739 17 740 17 741 17 742 17 743 17 744 17 745 17 746 17 747 17 748 17 749 17 750 17 751 17 752 17 753 17 754 17 755 17 756 17 757 17 758 17 759 17 760 17 761 17 762 17 763 17 764 17 765 17 766 17 767 17 768 17 769 17 770 17 771 17 772 17 773 17 774 17 775 17 776 17 777 17 778 17 779 17 780 17 781 17 782 17 783 17 784 17 785 17 786 17 787 17 788 17 789 17 790 17 791 17 792 17 793 17 794 17 795 17 796 17 797 17 798 17 799 17 800 17 801 17 802 17 803 17 804 17 805 17 806 17 807 17 808 17 809 17 810 17 811 17 812 17 813 17 814 17 815 17 816 17 817 17 818 17 819 17 820 17 821 17 822 17 823 17 824 17 825 17 826 17 827 17 828 17 829 17 830 17 831 17 832 17 833 17 834 17 835 17 836 17 837 17 838 17 839 17 840 17 841 17 842 17 843 17 844 17 845 17 846 17 847 17 848 17 849 17 850 17 851 17 852 17 853 17 854 17 855 17 856 17 857 17 858 17 859 17 860 17 861 17 862 17 863 17 864 17 865 17 866 17 867 17 868 17 869 17 870 17 871 17 872 17 873 17 874 17 875 17 876 17 877 17 878 17 879 17 880 17 881 17 882 17 883 17 884 17 885 17 886 17 887 17 888 17 889 17 890 17 891 17 892 17 893 17 894 17 895 17 896 17 897 17 898 17 899 17 900 17 901 17 902 17 903 17 904 17 905 17 906 17 907 17 908 17 909 17 910 17 911 17 912 17 913 17 914 17 915 17 916 17 917 17 918 17 919 17 920 17 921 17 922 17 923 17 924 17 925 17 926 17 927 17 928 17 929 17 930 17 931 17 932 17 933 17 934 17 935 17 936 17 937 17 938 17 939 17 940 17 941 17 942 17 943 17 944 17 945 17 946 17 947 17 948 17 949 17 950 17 951 17 952 17 953 17 954 17 955 17 956 17 957 17 958 17 959 17 960 17 961 17 962 17 963 17 964 17 965 17 966 17 967 17 968 17 969 17 970 17 971 17 972 17 973 17 974 17 975 17 976 17 977 17 978 17 979 17 980 17 981 17 982 17 983 17 984 17 985 17 986 17 987 17 988 17 989 17 990 17 991 17 992 17 993 17 994 17 995 17 996 17 997 17 998 17 999 18 0 18 1 18 2 18 3 18 4 18 5 18 6 18 7 18 8 18 9 18 10 18 11 18 12 18 13 18 14 18 15 18 16 18 17 18 18 18 19 18 20 18 21 18 22 18 23 18 24 18 25 18 26 18 27 18 28 18 29 18 30 18 31 18 32 18 33 18 34 18 35 18 36 18 37 18 38 18 39 18 40 18 41 18 42 18 43 18 44 18 45 18 46 18 47 18 48 18 49 18 50 18 51 18 52 18 53 18 54 18 55 18 56 18 57 18 58 18 59 18 60 18 61 18 62 18 63 18 64 18 65 18 66 18 67 18 68 18 69 18 70 18 71 18 72 18 73 18 74 18 75 18 76 18 77 18 78 18 79 18 80 18 81 18 82 18 83 18 84 18 85 18 86 18 87 18 88 18 89 18 90 18 91 18 92 18 93 18 94 18 95 18 96 18 97 18 98 18 99 18 100 18 101 18 102 18 103 18 104 18 105 18 106 18 107 18 108 18 109 18 110 18 111 18 112 18 113 18 114 18 115 18 116 18 117 18 118 18 119 18 120 18 121 18 122 18 123 18 124 18 125 18 126 18 127 18 128 18 129 18 130 18 131 18 132 18 133 18 134 18 135 18 136 18 137 18 138 18 139 18 140 18 141 18 142 18 143 18 144 18 145 18 146 18 147 18 148 18 149 18 150 18 151 18 152 18 153 18 154 18 155 18 156 18 157 18 158 18 159 18 160 18 161 18 162 18 163 18 164 18 165 18 166 18 167 18 168 18 169 18 170 18 171 18 172 18 173 18 174 18 175 18 176 18 177 18 178 18 179 18 180 18 181 18 182 18 183 18 184 18 185 18 186 18 187 18 188 18 189 18 190 18 191 18 192 18 193 18 194 18 195 18 196 18 197 18 198 18 199 18 200 18 201 18 202 18 203 18 204 18 205 18 206 18 207 18 208 18 209 18 210 18 211 18 212 18 213 18 214 18 215 18 216 18 217 18 218 18 219 18 220 18 221 18 222 18 223 18 224 18 225 18 226 18 227 18 228 18 229 18 230 18 231 18 232 18 233 18 234 18 235 18 236 18 237 18 238 18 239 18 240 18 241 18 242 18 243 18 244 18 245 18 246 18 247 18 248 18 249 18 250 18 251 18 252 18 253 18 254 18 255 18 256 18 257 18 258 18 259 18 260 18 261 18 262 18 263 18 264 18 265 18 266 18 267 18 268 18 269 18 270 18 271 18 272 18 273 18 274 18 275 18 276 18 277 18 278 18 279 18 280 18 281 18 282 18 283 18 284 18 285 18 286 18 287 18 288 18 289 18 290 18 291 18 292 18 293 18 294 18 295 18 296 18 297 18 298 18 299 18 300 18 301 18 302 18 303 18 304 18 305 18 306 18 307 18 308 18 309 18 310 18 311 18 312 18 313 18 314 18 315 18 316 18 317 18 318 18 319 18 320 18 321 18 322 18 323 18 324 18 325 18 326 18 327 18 328 18 329 18 330 18 331 18 332 18 333 18 334 18 335 18 336 18 337 18 338 18 339 18 340 18 341 18 342 18 343 18 344 18 345 18 346 18 347 18 348 18 349 18 350 18 351 18 352 18 353 18 354 18 355 18 356 18 357 18 358 18 359 18 360 18 361 18 362 18 363 18 364 18 365 18 366 18 367 18 368 18 369 18 370 18 371 18 372 18 373 18 374 18 375 18 376 18 377 18 378 18 379 18 380 18 381 18 382 18 383 18 384 18 385 18 386 18 387 18 388 18 389 18 390 18 391 18 392 18 393 18 394 18 395 18 396 18 397 18 398 18 399 18 400 18 401 18 402 18 403 18 404 18 405 18 406 18 407 18 408 18 409 18 410 18 411 18 412 18 413 18 414 18 415 18 416 18 417 18 418 18 419 18 420 18 421 18 422 18 423 18 424 18 425 18 426 18 427 18 428 18 429 18 430 18 431 18 432 18 433 18 434 18 435 18 436 18 437 18 438 18 439 18 440 18 441 18 442 18 443 18 444 18 445 18 446 18 447 18 448 18 449 18 450 18 451 18 452 18 453 18 454 18 455 18 456 18 457 18 458 18 459 18 460 18 461 18 462 18 463 18 464 18 465 18 466 18 467 18 468 18 469 18 470 18 471 18 472 18 473 18 474 18 475 18 476 18 477 18 478 18 479 18 480 18 481 18 482 18 483 18 484 18 485 18 486 18 487 18 488 18 489 18 490 18 491 18 492 18 493 18 494 18 495 18 496 18 497 18 498 18 499 18 500 18 501 18 502 18 503 18 504 18 505 18 506 18 507 18 508 18 509 18 510 18 511 18 512 18 513 18 514 18 515 18 516 18 517 18 518 18 519 18 520 18 521 18 522 18 523 18 524 18 525 18 526 18 527 18 528 18 529 18 530 18 531 18 532 18 533 18 534 18 535 18 536 18 537 18 538 18 539 18 540 18 541 18 542 18 543 18 544 18 545 18 546 18 547 18 548 18 549 18 550 18 551 18 552 18 553 18 554 18 555 18 556 18 557 18 558 18 559 18 560 18 561 18 562 18 563 18 564 18 565 18 566 18 567 18 568 18 569 18 570 18 571 18 572 18 573 18 574 18 575 18 576 18 577 18 578 18 579 18 580 18 581 18 582 18 583 18 584 18 585 18 586 18 587 18 588 18 589 18 590 18 591 18 592 18 593 18 594 18 595 18 596 18 597 18 598 18 599 18 600 18 601 18 602 18 603 18 604 18 605 18 606 18 607 18 608 18 609 18 610 18 611 18 612 18 613 18 614 18 615 18 616 18 617 18 618 18 619 18 620 18 621 18 622 18 623 18 624 18 625 18 626 18 627 18 628 18 629 18 630 18 631 18 632 18 633 18 634 18 635 18 636 18 637 18 638 18 639 18 640 18 641 18 642 18 643 18 644 18 645 18 646 18 647 18 648 18 649 18 650 18 651 18 652 18 653 18 654 18 655 18 656 18 657 18 658 18 659 18 660 18 661 18 662 18 663 18 664 18 665 18 666 18 667 18 668 18 669 18 670 18 671 18 672 18 673 18 674 18 675 18 676 18 677 18 678 18 679 18 680 18 681 18 682 18 683 18 684 18 685 18 686 18 687 18 688 18 689 18 690 18 691 18 692 18 693 18 694 18 695 18 696 18 697 18 698 18 699 18 700 18 701 18 702 18 703 18 704 18 705 18 706 18 707 18 708 18 709 18 710 18 711 18 712 18 713 18 714 18 715 18 716 18 717 18 718 18 719 18 720 18 721 18 722 18 723 18 724 18 725 18 726 18 727 18 728 18 729 18 730 18 731 18 732 18 733 18 734 18 735 18 736 18 737 18 738 18 739 18 740 18 741 18 742 18 743 18 744 18 745 18 746 18 747 18 748 18 749 18 750 18 751 18 752 18 753 18 754 18 755 18 756 18 757 18 758 18 759 18 760 18 761 18 762 18 763 18 764 18 765 18 766 18 767 18 768 18 769 18 770 18 771 18 772 18 773 18 774 18 775 18 776 18 777 18 778 18 779 18 780 18 781 18 782 18 783 18 784 18 785 18 786 18 787 18 788 18 789 18 790 18 791 18 792 18 793 18 794 18 795 18 796 18 797 18 798 18 799 18 800 18 801 18 802 18 803 18 804 18 805 18 806 18 807 18 808 18 809 18 810 18 811 18 812 18 813 18 814 18 815 18 816 18 817 18 818 18 819 18 820 18 821 18 822 18 823 18 824 18 825 18 826 18 827 18 828 18 829 18 830 18 831 18 832 18 833 18 834 18 835 18 836 18 837 18 838 18 839 18 840 18 841 18 842 18 843 18 844 18 845 18 846 18 847 18 848 18 849 18 850 18 851 18 852 18 853 18 854 18 855 18 856 18 857 18 858 18 859 18 860 18 861 18 862 18 863 18 864 18 865 18 866 18 867 18 868 18 869 18 870 18 871 18 872 18 873 18 874 18 875 18 876 18 877 18 878 18 879 18 880 18 881 18 882 18 883 18 884 18 885 18 886 18 887 18 888 18 889 18 890 18 891 18 892 18 893 18 894 18 895 18 896 18 897 18 898 18 899 18 900 18 901 18 902 18 903 18 904 18 905 18 906 18 907 18 908 18 909 18 910 18 911 18 912 18 913 18 914 18 915 18 916 18 917 18 918 18 919 18 920 18 921 18 922 18 923 18 924 18 925 18 926 18 927 18 928 18 929 18 930 18 931 18 932 18 933 18 934 18 935 18 936 18 937 18 938 18 939 18 940 18 941 18 942 18 943 18 944 18 945 18 946 18 947 18 948 18 949 18 950 18 951 18 952 18 953 18 954 18 955 18 956 18 957 18 958 18 959 18 960 18 961 18 962 18 963 18 964 18 965 18 966 18 967 18 968 18 969 18 970 18 971 18 972 18 973 18 974 18 975 18 976 18 977 18 978 18 979 18 980 18 981 18 982 18 983 18 984 18 985 18 986 18 987 18 988 18 989 18 990 18 991 18 992 18 993 18 994 18 995 18 996 18 997 18 998 18 999 19 0 19 1 19 2 19 3 19 4 19 5 19 6 19 7 19 8 19 9 19 10 19 11 19 12 19 13 19 14 19 15 19 16 19 17 19 18 19 19 19 20 19 21 19 22 19 23 19 24 19 25 19 26 19 27 19 28 19 29 19 30 19 31 19 32 19 33 19 34 19 35 19 36 19 37 19 38 19 39 19 40 19 41 19 42 19 43 19 44 19 45 19 46 19 47 19 48 19 49 19 50 19 51 19 52 19 53 19 54 19 55 19 56 19 57 19 58 19 59 19 60 19 61 19 62 19 63 19 64 19 65 19 66 19 67 19 68 19 69 19 70 19 71 19 72 19 73 19 74 19 75 19 76 19 77 19 78 19 79 19 80 19 81 19 82 19 83 19 84 19 85 19 86 19 87 19 88 19 89 19 90 19 91 19 92 19 93 19 94 19 95 19 96 19 97 19 98 19 99 19 100 19 101 19 102 19 103 19 104 19 105 19 106 19 107 19 108 19 109 19 110 19 111 19 112 19 113 19 114 19 115 19 116 19 117 19 118 19 119 19 120 19 121 19 122 19 123 19 124 19 125 19 126 19 127 19 128 19 129 19 130 19 131 19 132 19 133 19 134 19 135 19 136 19 137 19 138 19 139 19 140 19 141 19 142 19 143 19 144 19 145 19 146 19 147 19 148 19 149 19 150 19 151 19 152 19 153 19 154 19 155 19 156 19 157 19 158 19 159 19 160 19 161 19 162 19 163 19 164 19 165 19 166 19 167 19 168 19 169 19 170 19 171 19 172 19 173 19 174 19 175 19 176 19 177 19 178 19 179 19 180 19 181 19 182 19 183 19 184 19 185 19 186 19 187 19 188 19 189 19 190 19 191 19 192 19 193 19 194 19 195 19 196 19 197 19 198 19 199 19 200 19 201 19 202 19 203 19 204 19 205 19 206 19 207 19 208 19 209 19 210 19 211 19 212 19 213 19 214 19 215 19 216 19 217 19 218 19 219 19 220 19 221 19 222 19 223 19 224 19 225 19 226 19 227 19 228 19 229 19 230 19 231 19 232 19 233 19 234 19 235 19 236 19 237 19 238 19 239 19 240 19 241 19 242 19 243 19 244 19 245 19 246 19 247 19 248 19 249 19 250 19 251 19 252 19 253 19 254 19 255 19 256 19 257 19 258 19 259 19 260 19 261 19 262 19 263 19 264 19 265 19 266 19 267 19 268 19 269 19 270 19 271 19 272 19 273 19 274 19 275 19 276 19 277 19 278 19 279 19 280 19 281 19 282 19 283 19 284 19 285 19 286 19 287 19 288 19 289 19 290 19 291 19 292 19 293 19 294 19 295 19 296 19 297 19 298 19 299 19 300 19 301 19 302 19 303 19 304 19 305 19 306 19 307 19 308 19 309 19 310 19 311 19 312 19 313 19 314 19 315 19 316 19 317 19 318 19 319 19 320 19 321 19 322 19 323 19 324 19 325 19 326 19 327 19 328 19 329 19 330 19 331 19 332 19 333 19 334 19 335 19 336 19 337 19 338 19 339 19 340 19 341 19 342 19 343 19 344 19 345 19 346 19 347 19 348 19 349 19 350 19 351 19 352 19 353 19 354 19 355 19 356 19 357 19 358 19 359 19 360 19 361 19 362 19 363 19 364 19 365 19 366 19 367 19 368 19 369 19 370 19 371 19 372 19 373 19 374 19 375 19 376 19 377 19 378 19 379 19 380 19 381 19 382 19 383 19 384 19 385 19 386 19 387 19 388 19 389 19 390 19 391 19 392 19 393 19 394 19 395 19 396 19 397 19 398 19 399 19 400 19 401 19 402 19 403 19 404 19 405 19 406 19 407 19 408 19 409 19 410 19 411 19 412 19 413 19 414 19 415 19 416 19 417 19 418 19 419 19 420 19 421 19 422 19 423 19 424 19 425 19 426 19 427 19 428 19 429 19 430 19 431 19 432 19 433 19 434 19 435 19 436 19 437 19 438 19 439 19 440 19 441 19 442 19 443 19 444 19 445 19 446 19 447 19 448 19 449 19 450 19 451 19 452 19 453 19 454 19 455 19 456 19 457 19 458 19 459 19 460 19 461 19 462 19 463 19 464 19 465 19 466 19 467 19 468 19 469 19 470 19 471 19 472 19 473 19 474 19 475 19 476 19 477 19 478 19 479 19 480 19 481 19 482 19 483 19 484 19 485 19 486 19 487 19 488 19 489 19 490 19 491 19 492 19 493 19 494 19 495 19 496 19 497 19 498 19 499 19 500 19 501 19 502 19 503 19 504 19 505 19 506 19 507 19 508 19 509 19 510 19 511 19 512 19 513 19 514 19 515 19 516 19 517 19 518 19 519 19 520 19 521 19 522 19 523 19 524 19 525 19 526 19 527 19 528 19 529 19 530 19 531 19 532 19 533 19 534 19 535 19 536 19 537 19 538 19 539 19 540 19 541 19 542 19 543 19 544 19 545 19 546 19 547 19 548 19 549 19 550 19 551 19 552 19 553 19 554 19 555 19 556 19 557 19 558 19 559 19 560 19 561 19 562 19 563 19 564 19 565 19 566 19 567 19 568 19 569 19 570 19 571 19 572 19 573 19 574 19 575 19 576 19 577 19 578 19 579 19 580 19 581 19 582 19 583 19 584 19 585 19 586 19 587 19 588 19 589 19 590 19 591 19 592 19 593 19 594 19 595 19 596 19 597 19 598 19 599 19 600 19 601 19 602 19 603 19 604 19 605 19 606 19 607 19 608 19 609 19 610 19 611 19 612 19 613 19 614 19 615 19 616 19 617 19 618 19 619 19 620 19 621 19 622 19 623 19 624 19 625 19 626 19 627 19 628 19 629 19 630 19 631 19 632 19 633 19 634 19 635 19 636 19 637 19 638 19 639 19 640 19 641 19 642 19 643 19 644 19 645 19 646 19 647 19 648 19 649 19 650 19 651 19 652 19 653 19 654 19 655 19 656 19 657 19 658 19 659 19 660 19 661 19 662 19 663 19 664 19 665 19 666 19 667 19 668 19 669 19 670 19 671 19 672 19 673 19 674 19 675 19 676 19 677 19 678 19 679 19 680 19 681 19 682 19 683 19 684 19 685 19 686 19 687 19 688 19 689 19 690 19 691 19 692 19 693 19 694 19 695 19 696 19 697 19 698 19 699 19 700 19 701 19 702 19 703 19 704 19 705 19 706 19 707 19 708 19 709 19 710 19 711 19 712 19 713 19 714 19 715 19 716 19 717 19 718 19 719 19 720 19 721 19 722 19 723 19 724 19 725 19 726 19 727 19 728 19 729 19 730 19 731 19 732 19 733 19 734 19 735 19 736 19 737 19 738 19 739 19 740 19 741 19 742 19 743 19 744 19 745 19 746 19 747 19 748 19 749 19 750 19 751 19 752 19 753 19 754 19 755 19 756 19 757 19 758 19 759 19 760 19 761 19 762 19 763 19 764 19 765 19 766 19 767 19 768 19 769 19 770 19 771 19 772 19 773 19 774 19 775 19 776 19 777 19 778 19 779 19 780 19 781 19 782 19 783 19 784 19 785 19 786 19 787 19 788 19 789 19 790 19 791 19 792 19 793 19 794 19 795 19 796 19 797 19 798 19 799 19 800 19 801 19 802 19 803 19 804 19 805 19 806 19 807 19 808 19 809 19 810 19 811 19 812 19 813 19 814 19 815 19 816 19 817 19 818 19 819 19 820 19 821 19 822 19 823 19 824 19 825 19 826 19 827 19 828 19 829 19 830 19 831 19 832 19 833 19 834 19 835 19 836 19 837 19 838 19 839 19 840 19 841 19 842 19 843 19 844 19 845 19 846 19 847 19 848 19 849 19 850 19 851 19 852 19 853 19 854 19 855 19 856 19 857 19 858 19 859 19 860 19 861 19 862 19 863 19 864 19 865 19 866 19 867 19 868 19 869 19 870 19 871 19 872 19 873 19 874 19 875 19 876 19 877 19 878 19 879 19 880 19 881 19 882 19 883 19 884 19 885 19 886 19 887 19 888 19 889 19 890 19 891 19 892 19 893 19 894 19 895 19 896 19 897 19 898 19 899 19 900 19 901 19 902 19 903 19 904 19 905 19 906 19 907 19 908 19 909 19 910 19 911 19 912 19 913 19 914 19 915 19 916 19 917 19 918 19 919 19 920 19 921 19 922 19 923 19 924 19 925 19 926 19 927 19 928 19 929 19 930 19 931 19 932 19 933 19 934 19 935 19 936 19 937 19 938 19 939 19 940 19 941 19 942 19 943 19 944 19 945 19 946 19 947 19 948 19 949 19 950 19 951 19 952 19 953 19 954 19 955 19 956 19 957 19 958 19 959 19 960 19 961 19 962 19 963 19 964 19 965 19 966 19 967 19 968 19 969 19 970 19 971 19 972 19 973 19 974 19 975 19 976 19 977 19 978 19 979 19 980 19 981 19 982 19 983 19 984 19 985 19 986 19 987 19 988 19 989 19 990 19 991 19 992 19 993 19 994 19 995 19 996 19 997 19 998 19 999 20 0 20 1 20 2 20 3 20 4 20 5 20 6 20 7 20 8 20 9 20 10 20 11 20 12 20 13 20 14 20 15 20 16 20 17 20 18 20 19 20 20 20 21 20 22 20 23 20 24 20 25 20 26 20 27 20 28 20 29 20 30 20 31 20 32 20 33 20 34 20 35 20 36 20 37 20 38 20 39 20 40 20 41 20 42 20 43 20 44 20 45 20 46 20 47 20 48 20 49 20 50 20 51 20 52 20 53 20 54 20 55 20 56 20 57 20 58 20 59 20 60 20 61 20 62 20 63 20 64 20 65 20 66 20 67 20 68 20 69 20 70 20 71 20 72 20 73 20 74 20 75 20 76 20 77 20 78 20 79 20 80 20 81 20 82 20 83 20 84 20 85 20 86 20 87 20 88 20 89 20 90 20 91 20 92 20 93 20 94 20 95 20 96 20 97 20 98 20 99 20 100 20 101 20 102 20 103 20 104 20 105 20 106 20 107 20 108 20 109 20 110 20 111 20 112 20 113 20 114 20 115 20 116 20 117 20 118 20 119 20 120 20 121 20 122 20 123 20 124 20 125 20 126 20 127 20 128 20 129 20 130 20 131 20 132 20 133 20 134 20 135 20 136 20 137 20 138 20 139 20 140 20 141 20 142 20 143 20 144 20 145 20 146 20 147 20 148 20 149 20 150 20 151 20 152 20 153 20 154 20 155 20 156 20 157 20 158 20 159 20 160 20 161 20 162 20 163 20 164 20 165 20 166 20 167 20 168 20 169 20 170 20 171 20 172 20 173 20 174 20 175 20 176 20 177 20 178 20 179 20 180 20 181 20 182 20 183 20 184 20 185 20 186 20 187 20 188 20 189 20 190 20 191 20 192 20 193 20 194 20 195 20 196 20 197 20 198 20 199 20 200 20 201 20 202 20 203 20 204 20 205 20 206 20 207 20 208 20 209 20 210 20 211 20 212 20 213 20 214 20 215 20 216 20 217 20 218 20 219 20 220 20 221 20 222 20 223 20 224 20 225 20 226 20 227 20 228 20 229 20 230 20 231 20 232 20 233 20 234 20 235 20 236 20 237 20 238 20 239 20 240 20 241 20 242 20 243 20 244 20 245 20 246 20 247 20 248 20 249 20 250 20 251 20 252 20 253 20 254 20 255 20 256 20 257 20 258 20 259 20 260 20 261 20 262 20 263 20 264 20 265 20 266 20 267 20 268 20 269 20 270 20 271 20 272 20 273 20 274 20 275 20 276 20 277 20 278 20 279 20 280 20 281 20 282 20 283 20 284 20 285 20 286 20 287 20 288 20 289 20 290 20 291 20 292 20 293 20 294 20 295 20 296 20 297 20 298 20 299 20 300 20 301 20 302 20 303 20 304 20 305 20 306 20 307 20 308 20 309 20 310 20 311 20 312 20 313 20 314 20 315 20 316 20 317 20 318 20 319 20 320 20 321 20 322 20 323 20 324 20 325 20 326 20 327 20 328 20 329 20 330 20 331 20 332 20 333 20 334 20 335 20 336 20 337 20 338 20 339 20 340 20 341 20 342 20 343 20 344 20 345 20 346 20 347 20 348 20 349 20 350 20 351 20 352 20 353 20 354 20 355 20 356 20 357 20 358 20 359 20 360 20 361 20 362 20 363 20 364 20 365 20 366 20 367 20 368 20 369 20 370 20 371 20 372 20 373 20 374 20 375 20 376 20 377 20 378 20 379 20 380 20 381 20 382 20 383 20 384 20 385 20 386 20 387 20 388 20 389 20 390 20 391 20 392 20 393 20 394 20 395 20 396 20 397 20 398 20 399 20 400 20 401 20 402 20 403 20 404 20 405 20 406 20 407 20 408 20 409 20 410 20 411 20 412 20 413 20 414 20 415 20 416 20 417 20 418 20 419 20 420 20 421 20 422 20 423 20 424 20 425 20 426 20 427 20 428 20 429 20 430 20 431 20 432 20 433 20 434 20 435 20 436 20 437 20 438 20 439 20 440 20 441 20 442 20 443 20 444 20 445 20 446 20 447 20 448 20 449 20 450 20 451 20 452 20 453 20 454 20 455 20 456 20 457 20 458 20 459 20 460 20 461 20 462 20 463 20 464 20 465 20 466 20 467 20 468 20 469 20 470 20 471 20 472 20 473 20 474 20 475 20 476 20 477 20 478 20 479 20 480 20 481 20 482 20 483 20 484 20 485 20 486 20 487 20 488 20 489 20 490 20 491 20 492 20 493 20 494 20 495 20 496 20 497 20 498 20 499 20 500 20 501 20 502 20 503 20 504 20 505 20 506 20 507 20 508 20 509 20 510 20 511 20 512 20 513 20 514 20 515 20 516 20 517 20 518 20 519 20 520 20 521 20 522 20 523 20 524 20 525 20 526 20 527 20 528 20 529 20 530 20 531 20 532 20 533 20 534 20 535 20 536 20 537 20 538 20 539 20 540 20 541 20 542 20 543 20 544 20 545 20 546 20 547 20 548 20 549 20 550 20 551 20 552 20 553 20 554 20 555 20 556 20 557 20 558 20 559 20 560 20 561 20 562 20 563 20 564 20 565 20 566 20 567 20 568 20 569 20 570 20 571 20 572 20 573 20 574 20 575 20 576 20 577 20 578 20 579 20 580 20 581 20 582 20 583 20 584 20 585 20 586 20 587 20 588 20 589 20 590 20 591 20 592 20 593 20 594 20 595 20 596 20 597 20 598 20 599 20 600 20 601 20 602 20 603 20 604 20 605 20 606 20 607 20 608 20 609 20 610 20 611 20 612 20 613 20 614 20 615 20 616 20 617 20 618 20 619 20 620 20 621 20 622 20 623 20 624 20 625 20 626 20 627 20 628 20 629 20 630 20 631 20 632 20 633 20 634 20 635 20 636 20 637 20 638 20 639 20 640 20 641 20 642 20 643 20 644 20 645 20 646 20 647 20 648 20 649 20 650 20 651 20 652 20 653 20 654 20 655 20 656 20 657 20 658 20 659 20 660 20 661 20 662 20 663 20 664 20 665 20 666 20 667 20 668 20 669 20 670 20 671 20 672 20 673 20 674 20 675 20 676 20 677 20 678 20 679 20 680 20 681 20 682 20 683 20 684 20 685 20 686 20 687 20 688 20 689 20 690 20 691 20 692 20 693 20 694 20 695 20 696 20 697 20 698 20 699 20 700 20 701 20 702 20 703 20 704 20 705 20 706 20 707 20 708 20 709 20 710 20 711 20 712 20 713 20 714 20 715 20 716 20 717 20 718 20 719 20 720 20 721 20 722 20 723 20 724 20 725 20 726 20 727 20 728 20 729 20 730 20 731 20 732 20 733 20 734 20 735 20 736 20 737 20 738 20 739 20 740 20 741 20 742 20 743 20 744 20 745 20 746 20 747 20 748 20 749 20 750 20 751 20 752 20 753 20 754 20 755 20 756 20 757 20 758 20 759 20 760 20 761 20 762 20 763 20 764 20 765 20 766 20 767 20 768 20 769 20 770 20 771 20 772 20 773 20 774 20 775 20 776 20 777 20 778 20 779 20 780 20 781 20 782 20 783 20 784 20 785 20 786 20 787 20 788 20 789 20 790 20 791 20 792 20 793 20 794 20 795 20 796 20 797 20 798 20 799 20 800 20 801 20 802 20 803 20 804 20 805 20 806 20 807 20 808 20 809 20 810 20 811 20 812 20 813 20 814 20 815 20 816 20 817 20 818 20 819 20 820 20 821 20 822 20 823 20 824 20 825 20 826 20 827 20 828 20 829 20 830 20 831 20 832 20 833 20 834 20 835 20 836 20 837 20 838 20 839 20 840 20 841 20 842 20 843 20 844 20 845 20 846 20 847 20 848 20 849 20 850 20 851 20 852 20 853 20 854 20 855 20 856 20 857 20 858 20 859 20 860 20 861 20 862 20 863 20 864 20 865 20 866 20 867 20 868 20 869 20 870 20 871 20 872 20 873 20 874 20 875 20 876 20 877 20 878 20 879 20 880 20 881 20 882 20 883 20 884 20 885 20 886 20 887 20 888 20 889 20 890 20 891 20 892 20 893 20 894 20 895 20 896 20 897 20 898 20 899 20 900 20 901 20 902 20 903 20 904 20 905 20 906 20 907 20 908 20 909 20 910 20 911 20 912 20 913 20 914 20 915 20 916 20 917 20 918 20 919 20 920 20 921 20 922 20 923 20 924 20 925 20 926 20 927 20 928 20 929 20 930 20 931 20 932 20 933 20 934 20 935 20 936 20 937 20 938 20 939 20 940 20 941 20 942 20 943 20 944 20 945 20 946 20 947 20 948 20 949 20 950 20 951 20 952 20 953 20 954 20 955 20 956 20 957 20 958 20 959 20 960 20 961 20 962 20 963 20 964 20 965 20 966 20 967 20 968 20 969 20 970 20 971 20 972 20 973 20 974 20 975 20 976 20 977 20 978 20 979 20 980 20 981 20 982 20 983 20 984 20 985 20 986 20 987 20 988 20 989 20 990 20 991 20 992 20 993 20 994 20 995 20 996 20 997 20 998 20 999 21 0 21 1 21 2 21 3 21 4 21 5 21 6 21 7 21 8 21 9 21 10 21 11 21 12 21 13 21 14 21 15 21 16 21 17 21 18 21 19 21 20 21 21 21 22 21 23 21 24 21 25 21 26 21 27 21 28 21 29 21 30 21 31 21 32 21 33 21 34 21 35 21 36 21 37 21 38 21 39 21 40 21 41 21 42 21 43 21 44 21 45 21 46 21 47 21 48 21 49 21 50 21 51 21 52 21 53 21 54 21 55 21 56 21 57 21 58 21 59 21 60 21 61 21 62 21 63 21 64 21 65 21 66 21 67 21 68 21 69 21 70 21 71 21 72 21 73 21 74 21 75 21 76 21 77 21 78 21 79 21 80 21 81 21 82 21 83 21 84 21 85 21 86 21 87 21 88 21 89 21 90 21 91 21 92 21 93 21 94 21 95 21 96 21 97 21 98 21 99 21 100 21 101 21 102 21 103 21 104 21 105 21 106 21 107 21 108 21 109 21 110 21 111 21 112 21 113 21 114 21 115 21 116 21 117 21 118 21 119 21 120 21 121 21 122 21 123 21 124 21 125 21 126 21 127 21 128 21 129 21 130 21 131 21 132 21 133 21 134 21 135 21 136 21 137 21 138 21 139 21 140 21 141 21 142 21 143 21 144 21 145 21 146 21 147 21 148 21 149 21 150 21 151 21 152 21 153 21 154 21 155 21 156 21 157 21 158 21 159 21 160 21 161 21 162 21 163 21 164 21 165 21 166 21 167 21 168 21 169 21 170 21 171 21 172 21 173 21 174 21 175 21 176 21 177 21 178 21 179 21 180 21 181 21 182 21 183 21 184 21 185 21 186 21 187 21 188 21 189 21 190 21 191 21 192 21 193 21 194 21 195 21 196 21 197 21 198 21 199 21 200 21 201 21 202 21 203 21 204 21 205 21 206 21 207 21 208 21 209 21 210 21 211 21 212 21 213 21 214 21 215 21 216 21 217 21 218 21 219 21 220 21 221 21 222 21 223 21 224 21 225 21 226 21 227 21 228 21 229 21 230 21 231 21 232 21 233 21 234 21 235 21 236 21 237 21 238 21 239 21 240 21 241 21 242 21 243 21 244 21 245 21 246 21 247 21 248 21 249 21 250 21 251 21 252 21 253 21 254 21 255 21 256 21 257 21 258 21 259 21 260 21 261 21 262 21 263 21 264 21 265 21 266 21 267 21 268 21 269 21 270 21 271 21 272 21 273 21 274 21 275 21 276 21 277 21 278 21 279 21 280 21 281 21 282 21 283 21 284 21 285 21 286 21 287 21 288 21 289 21 290 21 291 21 292 21 293 21 294 21 295 21 296 21 297 21 298 21 299 21 300 21 301 21 302 21 303 21 304 21 305 21 306 21 307 21 308 21 309 21 310 21 311 21 312 21 313 21 314 21 315 21 316 21 317 21 318 21 319 21 320 21 321 21 322 21 323 21 324 21 325 21 326 21 327 21 328 21 329 21 330 21 331 21 332 21 333 21 334 21 335 21 336 21 337 21 338 21 339 21 340 21 341 21 342 21 343 21 344 21 345 21 346 21 347 21 348 21 349 21 350 21 351 21 352 21 353 21 354 21 355 21 356 21 357 21 358 21 359 21 360 21 361 21 362 21 363 21 364 21 365 21 366 21 367 21 368 21 369 21 370 21 371 21 372 21 373 21 374 21 375 21 376 21 377 21 378 21 379 21 380 21 381 21 382 21 383 21 384 21 385 21 386 21 387 21 388 21 389 21 390 21 391 21 392 21 393 21 394 21 395 21 396 21 397 21 398 21 399 21 400 21 401 21 402 21 403 21 404 21 405 21 406 21 407 21 408 21 409 21 410 21 411 21 412 21 413 21 414 21 415 21 416 21 417 21 418 21 419 21 420 21 421 21 422 21 423 21 424 21 425 21 426 21 427 21 428 21 429 21 430 21 431 21 432 21 433 21 434 21 435 21 436 21 437 21 438 21 439 21 440 21 441 21 442 21 443 21 444 21 445 21 446 21 447 21 448 21 449 21 450 21 451 21 452 21 453 21 454 21 455 21 456 21 457 21 458 21 459 21 460 21 461 21 462 21 463 21 464 21 465 21 466 21 467 21 468 21 469 21 470 21 471 21 472 21 473 21 474 21 475 21 476 21 477 21 478 21 479 21 480 21 481 21 482 21 483 21 484 21 485 21 486 21 487 21 488 21 489 21 490 21 491 21 492 21 493 21 494 21 495 21 496 21 497 21 498 21 499 21 500 21 501 21 502 21 503 21 504 21 505 21 506 21 507 21 508 21 509 21 510 21 511 21 512 21 513 21 514 21 515 21 516 21 517 21 518 21 519 21 520 21 521 21 522 21 523 21 524 21 525 21 526 21 527 21 528 21 529 21 530 21 531 21 532 21 533 21 534 21 535 21 536 21 537 21 538 21 539 21 540 21 541 21 542 21 543 21 544 21 545 21 546 21 547 21 548 21 549 21 550 21 551 21 552 21 553 21 554 21 555 21 556 21 557 21 558 21 559 21 560 21 561 21 562 21 563 21 564 21 565 21 566 21 567 21 568 21 569 21 570 21 571 21 572 21 573 21 574 21 575 21 576 21 577 21 578 21 579 21 580 21 581 21 582 21 583 21 584 21 585 21 586 21 587 21 588 21 589 21 590 21 591 21 592 21 593 21 594 21 595 21 596 21 597 21 598 21 599 21 600 21 601 21 602 21 603 21 604 21 605 21 606 21 607 21 608 21 609 21 610 21 611 21 612 21 613 21 614 21 615 21 616 21 617 21 618 21 619 21 620 21 621 21 622 21 623 21 624 21 625 21 626 21 627 21 628 21 629 21 630 21 631 21 632 21 633 21 634 21 635 21 636 21 637 21 638 21 639 21 640 21 641 21 642 21 643 21 644 21 645 21 646 21 647 21 648 21 649 21 650 21 651 21 652 21 653 21 654 21 655 21 656 21 657 21 658 21 659 21 660 21 661 21 662 21 663 21 664 21 665 21 666 21 667 21 668 21 669 21 670 21 671 21 672 21 673 21 674 21 675 21 676 21 677 21 678 21 679 21 680 21 681 21 682 21 683 21 684 21 685 21 686 21 687 21 688 21 689 21 690 21 691 21 692 21 693 21 694 21 695 21 696 21 697 21 698 21 699 21 700 21 701 21 702 21 703 21 704 21 705 21 706 21 707 21 708 21 709 21 710 21 711 21 712 21 713 21 714 21 715 21 716 21 717 21 718 21 719 21 720 21 721 21 722 21 723 21 724 21 725 21 726 21 727 21 728 21 729 21 730 21 731 21 732 21 733 21 734 21 735 21 736 21 737 21 738 21 739 21 740 21 741 21 742 21 743 21 744 21 745 21 746 21 747 21 748 21 749 21 750 21 751 21 752 21 753 21 754 21 755 21 756 21 757 21 758 21 759 21 760 21 761 21 762 21 763 21 764 21 765 21 766 21 767 21 768 21 769 21 770 21 771 21 772 21 773 21 774 21 775 21 776 21 777 21 778 21 779 21 780 21 781 21 782 21 783 21 784 21 785 21 786 21 787 21 788 21 789 21 790 21 791 21 792 21 793 21 794 21 795 21 796 21 797 21 798 21 799 21 800 21 801 21 802 21 803 21 804 21 805 21 806 21 807 21 808 21 809 21 810 21 811 21 812 21 813 21 814 21 815 21 816 21 817 21 818 21 819 21 820 21 821 21 822 21 823 21 824 21 825 21 826 21 827 21 828 21 829 21 830 21 831 21 832 21 833 21 834 21 835 21 836 21 837 21 838 21 839 21 840 21 841 21 842 21 843 21 844 21 845 21 846 21 847 21 848 21 849 21 850 21 851 21 852 21 853 21 854 21 855 21 856 21 857 21 858 21 859 21 860 21 861 21 862 21 863 21 864 21 865 21 866 21 867 21 868 21 869 21 870 21 871 21 872 21 873 21 874 21 875 21 876 21 877 21 878 21 879 21 880 21 881 21 882 21 883 21 884 21 885 21 886 21 887 21 888 21 889 21 890 21 891 21 892 21 893 21 894 21 895 21 896 21 897 21 898 21 899 21 900 21 901 21 902 21 903 21 904 21 905 21 906 21 907 21 908 21 909 21 910 21 911 21 912 21 913 21 914 21 915 21 916 21 917 21 918 21 919 21 920 21 921 21 922 21 923 21 924 21 925 21 926 21 927 21 928 21 929 21 930 21 931 21 932 21 933 21 934 21 935 21 936 21 937 21 938 21 939 21 940 21 941 21 942 21 943 21 944 21 945 21 946 21 947 21 948 21 949 21 950 21 951 21 952 21 953 21 954 21 955 21 956 21 957 21 958 21 959 21 960 21 961 21 962 21 963 21 964 21 965 21 966 21 967 21 968 21 969 21 970 21 971 21 972 21 973 21 974 21 975 21 976 21 977 21 978 21 979 21 980 21 981 21 982 21 983 21 984 21 985 21 986 21 987 21 988 21 989 21 990 21 991 21 992 21 993 21 994 21 995 21 996 21 997 21 998 21 999 22 0 22 1 22 2 22 3 22 4 22 5 22 6 22 7 22 8 22 9 22 10 22 11 22 12 22 13 22 14 22 15 22 16 22 17 22 18 22 19 22 20 22 21 22 22 22 23 22 24 22 25 22 26 22 27 22 28 22 29 22 30 22 31 22 32 22 33 22 34 22 35 22 36 22 37 22 38 22 39 22 40 22 41 22 42 22 43 22 44 22 45 22 46 22 47 22 48 22 49 22 50 22 51 22 52 22 53 22 54 22 55 22 56 22 57 22 58 22 59 22 60 22 61 22 62 22 63 22 64 22 65 22 66 22 67 22 68 22 69 22 70 22 71 22 72 22 73 22 74 22 75 22 76 22 77 22 78 22 79 22 80 22 81 22 82 22 83 22 84 22 85 22 86 22 87 22 88 22 89 22 90 22 91 22 92 22 93 22 94 22 95 22 96 22 97 22 98 22 99 22 100 22 101 22 102 22 103 22 104 22 105 22 106 22 107 22 108 22 109 22 110 22 111 22 112 22 113 22 114 22 115 22 116 22 117 22 118 22 119 22 120 22 121 22 122 22 123 22 124 22 125 22 126 22 127 22 128 22 129 22 130 22 131 22 132 22 133 22 134 22 135 22 136 22 137 22 138 22 139 22 140 22 141 22 142 22 143 22 144 22 145 22 146 22 147 22 148 22 149 22 150 22 151 22 152 22 153 22 154 22 155 22 156 22 157 22 158 22 159 22 160 22 161 22 162 22 163 22 164 22 165 22 166 22 167 22 168 22 169 22 170 22 171 22 172 22 173 22 174 22 175 22 176 22 177 22 178 22 179 22 180 22 181 22 182 22 183 22 184 22 185 22 186 22 187 22 188 22 189 22 190 22 191 22 192 22 193 22 194 22 195 22 196 22 197 22 198 22 199 22 200 22 201 22 202 22 203 22 204 22 205 22 206 22 207 22 208 22 209 22 210 22 211 22 212 22 213 22 214 22 215 22 216 22 217 22 218 22 219 22 220 22 221 22 222 22 223 22 224 22 225 22 226 22 227 22 228 22 229 22 230 22 231 22 232 22 233 22 234 22 235 22 236 22 237 22 238 22 239 22 240 22 241 22 242 22 243 22 244 22 245 22 246 22 247 22 248 22 249 22 250 22 251 22 252 22 253 22 254 22 255 22 256 22 257 22 258 22 259 22 260 22 261 22 262 22 263 22 264 22 265 22 266 22 267 22 268 22 269 22 270 22 271 22 272 22 273 22 274 22 275 22 276 22 277 22 278 22 279 22 280 22 281 22 282 22 283 22 284 22 285 22 286 22 287 22 288 22 289 22 290 22 291 22 292 22 293 22 294 22 295 22 296 22 297 22 298 22 299 22 300 22 301 22 302 22 303 22 304 22 305 22 306 22 307 22 308 22 309 22 310 22 311 22 312 22 313 22 314 22 315 22 316 22 317 22 318 22 319 22 320 22 321 22 322 22 323 22 324 22 325 22 326 22 327 22 328 22 329 22 330 22 331 22 332 22 333 22 334 22 335 22 336 22 337 22 338 22 339 22 340 22 341 22 342 22 343 22 344 22 345 22 346 22 347 22 348 22 349 22 350 22 351 22 352 22 353 22 354 22 355 22 356 22 357 22 358 22 359 22 360 22 361 22 362 22 363 22 364 22 365 22 366 22 367 22 368 22 369 22 370 22 371 22 372 22 373 22 374 22 375 22 376 22 377 22 378 22 379 22 380 22 381 22 382 22 383 22 384 22 385 22 386 22 387 22 388 22 389 22 390 22 391 22 392 22 393 22 394 22 395 22 396 22 397 22 398 22 399 22 400 22 401 22 402 22 403 22 404 22 405 22 406 22 407 22 408 22 409 22 410 22 411 22 412 22 413 22 414 22 415 22 416 22 417 22 418 22 419 22 420 22 421 22 422 22 423 22 424 22 425 22 426 22 427 22 428 22 429 22 430 22 431 22 432 22 433 22 434 22 435 22 436 22 437 22 438 22 439 22 440 22 441 22 442 22 443 22 444 22 445 22 446 22 447 22 448 22 449 22 450 22 451 22 452 22 453 22 454 22 455 22 456 22 457 22 458 22 459 22 460 22 461 22 462 22 463 22 464 22 465 22 466 22 467 22 468 22 469 22 470 22 471 22 472 22 473 22 474 22 475 22 476 22 477 22 478 22 479 22 480 22 481 22 482 22 483 22 484 22 485 22 486 22 487 22 488 22 489 22 490 22 491 22 492 22 493 22 494 22 495 22 496 22 497 22 498 22 499 22 500 22 501 22 502 22 503 22 504 22 505 22 506 22 507 22 508 22 509 22 510 22 511 22 512 22 513 22 514 22 515 22 516 22 517 22 518 22 519 22 520 22 521 22 522 22 523 22 524 22 525 22 526 22 527 22 528 22 529 22 530 22 531 22 532 22 533 22 534 22 535 22 536 22 537 22 538 22 539 22 540 22 541 22 542 22 543 22 544 22 545 22 546 22 547 22 548 22 549 22 550 22 551 22 552 22 553 22 554 22 555 22 556 22 557 22 558 22 559 22 560 22 561 22 562 22 563 22 564 22 565 22 566 22 567 22 568 22 569 22 570 22 571 22 572 22 573 22 574 22 575 22 576 22 577 22 578 22 579 22 580 22 581 22 582 22 583 22 584 22 585 22 586 22 587 22 588 22 589 22 590 22 591 22 592 22 593 22 594 22 595 22 596 22 597 22 598 22 599 22 600 22 601 22 602 22 603 22 604 22 605 22 606 22 607 22 608 22 609 22 610 22 611 22 612 22 613 22 614 22 615 22 616 22 617 22 618 22 619 22 620 22 621 22 622 22 623 22 624 22 625 22 626 22 627 22 628 22 629 22 630 22 631 22 632 22 633 22 634 22 635 22 636 22 637 22 638 22 639 22 640 22 641 22 642 22 643 22 644 22 645 22 646 22 647 22 648 22 649 22 650 22 651 22 652 22 653 22 654 22 655 22 656 22 657 22 658 22 659 22 660 22 661 22 662 22 663 22 664 22 665 22 666 22 667 22 668 22 669 22 670 22 671 22 672 22 673 22 674 22 675 22 676 22 677 22 678 22 679 22 680 22 681 22 682 22 683 22 684 22 685 22 686 22 687 22 688 22 689 22 690 22 691 22 692 22 693 22 694 22 695 22 696 22 697 22 698 22 699 22 700 22 701 22 702 22 703 22 704 22 705 22 706 22 707 22 708 22 709 22 710 22 711 22 712 22 713 22 714 22 715 22 716 22 717 22 718 22 719 22 720 22 721 22 722 22 723 22 724 22 725 22 726 22 727 22 728 22 729 22 730 22 731 22 732 22 733 22 734 22 735 22 736 22 737 22 738 22 739 22 740 22 741 22 742 22 743 22 744 22 745 22 746 22 747 22 748 22 749 22 750 22 751 22 752 22 753 22 754 22 755 22 756 22 757 22 758 22 759 22 760 22 761 22 762 22 763 22 764 22 765 22 766 22 767 22 768 22 769 22 770 22 771 22 772 22 773 22 774 22 775 22 776 22 777 22 778 22 779 22 780 22 781 22 782 22 783 22 784 22 785 22 786 22 787 22 788 22 789 22 790 22 791 22 792 22 793 22 794 22 795 22 796 22 797 22 798 22 799 22 800 22 801 22 802 22 803 22 804 22 805 22 806 22 807 22 808 22 809 22 810 22 811 22 812 22 813 22 814 22 815 22 816 22 817 22 818 22 819 22 820 22 821 22 822 22 823 22 824 22 825 22 826 22 827 22 828 22 829 22 830 22 831 22 832 22 833 22 834 22 835 22 836 22 837 22 838 22 839 22 840 22 841 22 842 22 843 22 844 22 845 22 846 22 847 22 848 22 849 22 850 22 851 22 852 22 853 22 854 22 855 22 856 22 857 22 858 22 859 22 860 22 861 22 862 22 863 22 864 22 865 22 866 22 867 22 868 22 869 22 870 22 871 22 872 22 873 22 874 22 875 22 876 22 877 22 878 22 879 22 880 22 881 22 882 22 883 22 884 22 885 22 886 22 887 22 888 22 889 22 890 22 891 22 892 22 893 22 894 22 895 22 896 22 897 22 898 22 899 22 900 22 901 22 902 22 903 22 904 22 905 22 906 22 907 22 908 22 909 22 910 22 911 22 912 22 913 22 914 22 915 22 916 22 917 22 918 22 919 22 920 22 921 22 922 22 923 22 924 22 925 22 926 22 927 22 928 22 929 22 930 22 931 22 932 22 933 22 934 22 935 22 936 22 937 22 938 22 939 22 940 22 941 22 942 22 943 22 944 22 945 22 946 22 947 22 948 22 949 22 950 22 951 22 952 22 953 22 954 22 955 22 956 22 957 22 958 22 959 22 960 22 961 22 962 22 963 22 964 22 965 22 966 22 967 22 968 22 969 22 970 22 971 22 972 22 973 22 974 22 975 22 976 22 977 22 978 22 979 22 980 22 981 22 982 22 983 22 984 22 985 22 986 22 987 22 988 22 989 22 990 22 991 22 992 22 993 22 994 22 995 22 996 22 997 22 998 22 999 23 0 23 1 23 2 23 3 23 4 23 5 23 6 23 7 23 8 23 9 23 10 23 11 23 12 23 13 23 14 23 15 23 16 23 17 23 18 23 19 23 20 23 21 23 22 23 23 23 24 23 25 23 26 23 27 23 28 23 29 23 30 23 31 23 32 23 33 23 34 23 35 23 36 23 37 23 38 23 39 23 40 23 41 23 42 23 43 23 44 23 45 23 46 23 47 23 48 23 49 23 50 23 51 23 52 23 53 23 54 23 55 23 56 23 57 23 58 23 59 23 60 23 61 23 62 23 63 23 64 23 65 23 66 23 67 23 68 23 69 23 70 23 71 23 72 23 73 23 74 23 75 23 76 23 77 23 78 23 79 23 80 23 81 23 82 23 83 23 84 23 85 23 86 23 87 23 88 23 89 23 90 23 91 23 92 23 93 23 94 23 95 23 96 23 97 23 98 23 99 23 100 23 101 23 102 23 103 23 104 23 105 23 106 23 107 23 108 23 109 23 110 23 111 23 112 23 113 23 114 23 115 23 116 23 117 23 118 23 119 23 120 23 121 23 122 23 123 23 124 23 125 23 126 23 127 23 128 23 129 23 130 23 131 23 132 23 133 23 134 23 135 23 136 23 137 23 138 23 139 23 140 23 141 23 142 23 143 23 144 23 145 23 146 23 147 23 148 23 149 23 150 23 151 23 152 23 153 23 154 23 155 23 156 23 157 23 158 23 159 23 160 23 161 23 162 23 163 23 164 23 165 23 166 23 167 23 168 23 169 23 170 23 171 23 172 23 173 23 174 23 175 23 176 23 177 23 178 23 179 23 180 23 181 23 182 23 183 23 184 23 185 23 186 23 187 23 188 23 189 23 190 23 191 23 192 23 193 23 194 23 195 23 196 23 197 23 198 23 199 23 200 23 201 23 202 23 203 23 204 23 205 23 206 23 207 23 208 23 209 23 210 23 211 23 212 23 213 23 214 23 215 23 216 23 217 23 218 23 219 23 220 23 221 23 222 23 223 23 224 23 225 23 226 23 227 23 228 23 229 23 230 23 231 23 232 23 233 23 234 23 235 23 236 23 237 23 238 23 239 23 240 23 241 23 242 23 243 23 244 23 245 23 246 23 247 23 248 23 249 23 250 23 251 23 252 23 253 23 254 23 255 23 256 23 257 23 258 23 259 23 260 23 261 23 262 23 263 23 264 23 265 23 266 23 267 23 268 23 269 23 270 23 271 23 272 23 273 23 274 23 275 23 276 23 277 23 278 23 279 23 280 23 281 23 282 23 283 23 284 23 285 23 286 23 287 23 288 23 289 23 290 23 291 23 292 23 293 23 294 23 295 23 296 23 297 23 298 23 299 23 300 23 301 23 302 23 303 23 304 23 305 23 306 23 307 23 308 23 309 23 310 23 311 23 312 23 313 23 314 23 315 23 316 23 317 23 318 23 319 23 320 23 321 23 322 23 323 23 324 23 325 23 326 23 327 23 328 23 329 23 330 23 331 23 332 23 333 23 334 23 335 23 336 23 337 23 338 23 339 23 340 23 341 23 342 23 343 23 344 23 345 23 346 23 347 23 348 23 349 23 350 23 351 23 352 23 353 23 354 23 355 23 356 23 357 23 358 23 359 23 360 23 361 23 362 23 363 23 364 23 365 23 366 23 367 23 368 23 369 23 370 23 371 23 372 23 373 23 374 23 375 23 376 23 377 23 378 23 379 23 380 23 381 23 382 23 383 23 384 23 385 23 386 23 387 23 388 23 389 23 390 23 391 23 392 23 393 23 394 23 395 23 396 23 397 23 398 23 399 23 400 23 401 23 402 23 403 23 404 23 405 23 406 23 407 23 408 23 409 23 410 23 411 23 412 23 413 23 414 23 415 23 416 23 417 23 418 23 419 23 420 23 421 23 422 23 423 23 424 23 425 23 426 23 427 23 428 23 429 23 430 23 431 23 432 23 433 23 434 23 435 23 436 23 437 23 438 23 439 23 440 23 441 23 442 23 443 23 444 23 445 23 446 23 447 23 448 23 449 23 450 23 451 23 452 23 453 23 454 23 455 23 456 23 457 23 458 23 459 23 460 23 461 23 462 23 463 23 464 23 465 23 466 23 467 23 468 23 469 23 470 23 471 23 472 23 473 23 474 23 475 23 476 23 477 23 478 23 479 23 480 23 481 23 482 23 483 23 484 23 485 23 486 23 487 23 488 23 489 23 490 23 491 23 492 23 493 23 494 23 495 23 496 23 497 23 498 23 499 23 500 23 501 23 502 23 503 23 504 23 505 23 506 23 507 23 508 23 509 23 510 23 511 23 512 23 513 23 514 23 515 23 516 23 517 23 518 23 519 23 520 23 521 23 522 23 523 23 524 23 525 23 526 23 527 23 528 23 529 23 530 23 531 23 532 23 533 23 534 23 535 23 536 23 537 23 538 23 539 23 540 23 541 23 542 23 543 23 544 23 545 23 546 23 547 23 548 23 549 23 550 23 551 23 552 23 553 23 554 23 555 23 556 23 557 23 558 23 559 23 560 23 561 23 562 23 563 23 564 23 565 23 566 23 567 23 568 23 569 23 570 23 571 23 572 23 573 23 574 23 575 23 576 23 577 23 578 23 579 23 580 23 581 23 582 23 583 23 584 23 585 23 586 23 587 23 588 23 589 23 590 23 591 23 592 23 593 23 594 23 595 23 596 23 597 23 598 23 599 23 600 23 601 23 602 23 603 23 604 23 605 23 606 23 607 23 608 23 609 23 610 23 611 23 612 23 613 23 614 23 615 23 616 23 617 23 618 23 619 23 620 23 621 23 622 23 623 23 624 23 625 23 626 23 627 23 628 23 629 23 630 23 631 23 632 23 633 23 634 23 635 23 636 23 637 23 638 23 639 23 640 23 641 23 642 23 643 23 644 23 645 23 646 23 647 23 648 23 649 23 650 23 651 23 652 23 653 23 654 23 655 23 656 23 657 23 658 23 659 23 660 23 661 23 662 23 663 23 664 23 665 23 666 23 667 23 668 23 669 23 670 23 671 23 672 23 673 23 674 23 675 23 676 23 677 23 678 23 679 23 680 23 681 23 682 23 683 23 684 23 685 23 686 23 687 23 688 23 689 23 690 23 691 23 692 23 693 23 694 23 695 23 696 23 697 23 698 23 699 23 700 23 701 23 702 23 703 23 704 23 705 23 706 23 707 23 708 23 709 23 710 23 711 23 712 23 713 23 714 23 715 23 716 23 717 23 718 23 719 23 720 23 721 23 722 23 723 23 724 23 725 23 726 23 727 23 728 23 729 23 730 23 731 23 732 23 733 23 734 23 735 23 736 23 737 23 738 23 739 23 740 23 741 23 742 23 743 23 744 23 745 23 746 23 747 23 748 23 749 23 750 23 751 23 752 23 753 23 754 23 755 23 756 23 757 23 758 23 759 23 760 23 761 23 762 23 763 23 764 23 765 23 766 23 767 23 768 23 769 23 770 23 771 23 772 23 773 23 774 23 775 23 776 23 777 23 778 23 779 23 780 23 781 23 782 23 783 23 784 23 785 23 786 23 787 23 788 23 789 23 790 23 791 23 792 23 793 23 794 23 795 23 796 23 797 23 798 23 799 23 800 23 801 23 802 23 803 23 804 23 805 23 806 23 807 23 808 23 809 23 810 23 811 23 812 23 813 23 814 23 815 23 816 23 817 23 818 23 819 23 820 23 821 23 822 23 823 23 824 23 825 23 826 23 827 23 828 23 829 23 830 23 831 23 832 23 833 23 834 23 835 23 836 23 837 23 838 23 839 23 840 23 841 23 842 23 843 23 844 23 845 23 846 23 847 23 848 23 849 23 850 23 851 23 852 23 853 23 854 23 855 23 856 23 857 23 858 23 859 23 860 23 861 23 862 23 863 23 864 23 865 23 866 23 867 23 868 23 869 23 870 23 871 23 872 23 873 23 874 23 875 23 876 23 877 23 878 23 879 23 880 23 881 23 882 23 883 23 884 23 885 23 886 23 887 23 888 23 889 23 890 23 891 23 892 23 893 23 894 23 895 23 896 23 897 23 898 23 899 23 900 23 901 23 902 23 903 23 904 23 905 23 906 23 907 23 908 23 909 23 910 23 911 23 912 23 913 23 914 23 915 23 916 23 917 23 918 23 919 23 920 23 921 23 922 23 923 23 924 23 925 23 926 23 927 23 928 23 929 23 930 23 931 23 932 23 933 23 934 23 935 23 936 23 937 23 938 23 939 23 940 23 941 23 942 23 943 23 944 23 945 23 946 23 947 23 948 23 949 23 950 23 951 23 952 23 953 23 954 23 955 23 956 23 957 23 958 23 959 23 960 23 961 23 962 23 963 23 964 23 965 23 966 23 967 23 968 23 969 23 970 23 971 23 972 23 973 23 974 23 975 23 976 23 977 23 978 23 979 23 980 23 981 23 982 23 983 23 984 23 985 23 986 23 987 23 988 23 989 23 990 23 991 23 992 23 993 23 994 23 995 23 996 23 997 23 998 23 999 24 0 24 1 24 2 24 3 24 4 24 5 24 6 24 7 24 8 24 9 24 10 24 11 24 12 24 13 24 14 24 15 24 16 24 17 24 18 24 19 24 20 24 21 24 22 24 23 24 24 24 25 24 26 24 27 24 28 24 29 24 30 24 31 24 32 24 33 24 34 24 35 24 36 24 37 24 38 24 39 24 40 24 41 24 42 24 43 24 44 24 45 24 46 24 47 24 48 24 49 24 50 24 51 24 52 24 53 24 54 24 55 24 56 24 57 24 58 24 59 24 60 24 61 24 62 24 63 24 64 24 65 24 66 24 67 24 68 24 69 24 70 24 71 24 72 24 73 24 74 24 75 24 76 24 77 24 78 24 79 24 80 24 81 24 82 24 83 24 84 24 85 24 86 24 87 24 88 24 89 24 90 24 91 24 92 24 93 24 94 24 95 24 96 24 97 24 98 24 99 24 100 24 101 24 102 24 103 24 104 24 105 24 106 24 107 24 108 24 109 24 110 24 111 24 112 24 113 24 114 24 115 24 116 24 117 24 118 24 119 24 120 24 121 24 122 24 123 24 124 24 125 24 126 24 127 24 128 24 129 24 130 24 131 24 132 24 133 24 134 24 135 24 136 24 137 24 138 24 139 24 140 24 141 24 142 24 143 24 144 24 145 24 146 24 147 24 148 24 149 24 150 24 151 24 152 24 153 24 154 24 155 24 156 24 157 24 158 24 159 24 160 24 161 24 162 24 163 24 164 24 165 24 166 24 167 24 168 24 169 24 170 24 171 24 172 24 173 24 174 24 175 24 176 24 177 24 178 24 179 24 180 24 181 24 182 24 183 24 184 24 185 24 186 24 187 24 188 24 189 24 190 24 191 24 192 24 193 24 194 24 195 24 196 24 197 24 198 24 199 24 200 24 201 24 202 24 203 24 204 24 205 24 206 24 207 24 208 24 209 24 210 24 211 24 212 24 213 24 214 24 215 24 216 24 217 24 218 24 219 24 220 24 221 24 222 24 223 24 224 24 225 24 226 24 227 24 228 24 229 24 230 24 231 24 232 24 233 24 234 24 235 24 236 24 237 24 238 24 239 24 240 24 241 24 242 24 243 24 244 24 245 24 246 24 247 24 248 24 249 24 250 24 251 24 252 24 253 24 254 24 255 24 256 24 257 24 258 24 259 24 260 24 261 24 262 24 263 24 264 24 265 24 266 24 267 24 268 24 269 24 270 24 271 24 272 24 273 24 274 24 275 24 276 24 277 24 278 24 279 24 280 24 281 24 282 24 283 24 284 24 285 24 286 24 287 24 288 24 289 24 290 24 291 24 292 24 293 24 294 24 295 24 296 24 297 24 298 24 299 24 300 24 301 24 302 24 303 24 304 24 305 24 306 24 307 24 308 24 309 24 310 24 311 24 312 24 313 24 314 24 315 24 316 24 317 24 318 24 319 24 320 24 321 24 322 24 323 24 324 24 325 24 326 24 327 24 328 24 329 24 330 24 331 24 332 24 333 24 334 24 335 24 336 24 337 24 338 24 339 24 340 24 341 24 342 24 343 24 344 24 345 24 346 24 347 24 348 24 349 24 350 24 351 24 352 24 353 24 354 24 355 24 356 24 357 24 358 24 359 24 360 24 361 24 362 24 363 24 364 24 365 24 366 24 367 24 368 24 369 24 370 24 371 24 372 24 373 24 374 24 375 24 376 24 377 24 378 24 379 24 380 24 381 24 382 24 383 24 384 24 385 24 386 24 387 24 388 24 389 24 390 24 391 24 392 24 393 24 394 24 395 24 396 24 397 24 398 24 399 24 400 24 401 24 402 24 403 24 404 24 405 24 406 24 407 24 408 24 409 24 410 24 411 24 412 24 413 24 414 24 415 24 416 24 417 24 418 24 419 24 420 24 421 24 422 24 423 24 424 24 425 24 426 24 427 24 428 24 429 24 430 24 431 24 432 24 433 24 434 24 435 24 436 24 437 24 438 24 439 24 440 24 441 24 442 24 443 24 444 24 445 24 446 24 447 24 448 24 449 24 450 24 451 24 452 24 453 24 454 24 455 24 456 24 457 24 458 24 459 24 460 24 461 24 462 24 463 24 464 24 465 24 466 24 467 24 468 24 469 24 470 24 471 24 472 24 473 24 474 24 475 24 476 24 477 24 478 24 479 24 480 24 481 24 482 24 483 24 484 24 485 24 486 24 487 24 488 24 489 24 490 24 491 24 492 24 493 24 494 24 495 24 496 24 497 24 498 24 499 24 500 24 501 24 502 24 503 24 504 24 505 24 506 24 507 24 508 24 509 24 510 24 511 24 512 24 513 24 514 24 515 24 516 24 517 24 518 24 519 24 520 24 521 24 522 24 523 24 524 24 525 24 526 24 527 24 528 24 529 24 530 24 531 24 532 24 533 24 534 24 535 24 536 24 537 24 538 24 539 24 540 24 541 24 542 24 543 24 544 24 545 24 546 24 547 24 548 24 549 24 550 24 551 24 552 24 553 24 554 24 555 24 556 24 557 24 558 24 559 24 560 24 561 24 562 24 563 24 564 24 565 24 566 24 567 24 568 24 569 24 570 24 571 24 572 24 573 24 574 24 575 24 576 24 577 24 578 24 579 24 580 24 581 24 582 24 583 24 584 24 585 24 586 24 587 24 588 24 589 24 590 24 591 24 592 24 593 24 594 24 595 24 596 24 597 24 598 24 599 24 600 24 601 24 602 24 603 24 604 24 605 24 606 24 607 24 608 24 609 24 610 24 611 24 612 24 613 24 614 24 615 24 616 24 617 24 618 24 619 24 620 24 621 24 622 24 623 24 624 24 625 24 626 24 627 24 628 24 629 24 630 24 631 24 632 24 633 24 634 24 635 24 636 24 637 24 638 24 639 24 640 24 641 24 642 24 643 24 644 24 645 24 646 24 647 24 648 24 649 24 650 24 651 24 652 24 653 24 654 24 655 24 656 24 657 24 658 24 659 24 660 24 661 24 662 24 663 24 664 24 665 24 666 24 667 24 668 24 669 24 670 24 671 24 672 24 673 24 674 24 675 24 676 24 677 24 678 24 679 24 680 24 681 24 682 24 683 24 684 24 685 24 686 24 687 24 688 24 689 24 690 24 691 24 692 24 693 24 694 24 695 24 696 24 697 24 698 24 699 24 700 24 701 24 702 24 703 24 704 24 705 24 706 24 707 24 708 24 709 24 710 24 711 24 712 24 713 24 714 24 715 24 716 24 717 24 718 24 719 24 720 24 721 24 722 24 723 24 724 24 725 24 726 24 727 24 728 24 729 24 730 24 731 24 732 24 733 24 734 24 735 24 736 24 737 24 738 24 739 24 740 24 741 24 742 24 743 24 744 24 745 24 746 24 747 24 748 24 749 24 750 24 751 24 752 24 753 24 754 24 755 24 756 24 757 24 758 24 759 24 760 24 761 24 762 24 763 24 764 24 765 24 766 24 767 24 768 24 769 24 770 24 771 24 772 24 773 24 774 24 775 24 776 24 777 24 778 24 779 24 780 24 781 24 782 24 783 24 784 24 785 24 786 24 787 24 788 24 789 24 790 24 791 24 792 24 793 24 794 24 795 24 796 24 797 24 798 24 799 24 800 24 801 24 802 24 803 24 804 24 805 24 806 24 807 24 808 24 809 24 810 24 811 24 812 24 813 24 814 24 815 24 816 24 817 24 818 24 819 24 820 24 821 24 822 24 823 24 824 24 825 24 826 24 827 24 828 24 829 24 830 24 831 24 832 24 833 24 834 24 835 24 836 24 837 24 838 24 839 24 840 24 841 24 842 24 843 24 844 24 845 24 846 24 847 24 848 24 849 24 850 24 851 24 852 24 853 24 854 24 855 24 856 24 857 24 858 24 859 24 860 24 861 24 862 24 863 24 864 24 865 24 866 24 867 24 868 24 869 24 870 24 871 24 872 24 873 24 874 24 875 24 876 24 877 24 878 24 879 24 880 24 881 24 882 24 883 24 884 24 885 24 886 24 887 24 888 24 889 24 890 24 891 24 892 24 893 24 894 24 895 24 896 24 897 24 898 24 899 24 900 24 901 24 902 24 903 24 904 24 905 24 906 24 907 24 908 24 909 24 910 24 911 24 912 24 913 24 914 24 915 24 916 24 917 24 918 24 919 24 920 24 921 24 922 24 923 24 924 24 925 24 926 24 927 24 928 24 929 24 930 24 931 24 932 24 933 24 934 24 935 24 936 24 937 24 938 24 939 24 940 24 941 24 942 24 943 24 944 24 945 24 946 24 947 24 948 24 949 24 950 24 951 24 952 24 953 24 954 24 955 24 956 24 957 24 958 24 959 24 960 24 961 24 962 24 963 24 964 24 965 24 966 24 967 24 968 24 969 24 970 24 971 24 972 24 973 24 974 24 975 24 976 24 977 24 978 24 979 24 980 24 981 24 982 24 983 24 984 24 985 24 986 24 987 24 988 24 989 24 990 24 991 24 992 24 993 24 994 24 995 24 996 24 997 24 998 24 999 25 0 25 1 25 2 25 3 25 4 25 5 25 6 25 7 25 8 25 9 25 10 25 11 25 12 25 13 25 14 25 15 25 16 25 17 25 18 25 19 25 20 25 21 25 22 25 23 25 24 25 25 25 26 25 27 25 28 25 29 25 30 25 31 25 32 25 33 25 34 25 35 25 36 25 37 25 38 25 39 25 40 25 41 25 42 25 43 25 44 25 45 25 46 25 47 25 48 25 49 25 50 25 51 25 52 25 53 25 54 25 55 25 56 25 57 25 58 25 59 25 60 25 61 25 62 25 63 25 64 25 65 25 66 25 67 25 68 25 69 25 70 25 71 25 72 25 73 25 74 25 75 25 76 25 77 25 78 25 79 25 80 25 81 25 82 25 83 25 84 25 85 25 86 25 87 25 88 25 89 25 90 25 91 25 92 25 93 25 94 25 95 25 96 25 97 25 98 25 99 25 100 25 101 25 102 25 103 25 104 25 105 25 106 25 107 25 108 25 109 25 110 25 111 25 112 25 113 25 114 25 115 25 116 25 117 25 118 25 119 25 120 25 121 25 122 25 123 25 124 25 125 25 126 25 127 25 128 25 129 25 130 25 131 25 132 25 133 25 134 25 135 25 136 25 137 25 138 25 139 25 140 25 141 25 142 25 143 25 144 25 145 25 146 25 147 25 148 25 149 25 150 25 151 25 152 25 153 25 154 25 155 25 156 25 157 25 158 25 159 25 160 25 161 25 162 25 163 25 164 25 165 25 166 25 167 25 168 25 169 25 170 25 171 25 172 25 173 25 174 25 175 25 176 25 177 25 178 25 179 25 180 25 181 25 182 25 183 25 184 25 185 25 186 25 187 25 188 25 189 25 190 25 191 25 192 25 193 25 194 25 195 25 196 25 197 25 198 25 199 25 200 25 201 25 202 25 203 25 204 25 205 25 206 25 207 25 208 25 209 25 210 25 211 25 212 25 213 25 214 25 215 25 216 25 217 25 218 25 219 25 220 25 221 25 222 25 223 25 224 25 225 25 226 25 227 25 228 25 229 25 230 25 231 25 232 25 233 25 234 25 235 25 236 25 237 25 238 25 239 25 240 25 241 25 242 25 243 25 244 25 245 25 246 25 247 25 248 25 249 25 250 25 251 25 252 25 253 25 254 25 255 25 256 25 257 25 258 25 259 25 260 25 261 25 262 25 263 25 264 25 265 25 266 25 267 25 268 25 269 25 270 25 271 25 272 25 273 25 274 25 275 25 276 25 277 25 278 25 279 25 280 25 281 25 282 25 283 25 284 25 285 25 286 25 287 25 288 25 289 25 290 25 291 25 292 25 293 25 294 25 295 25 296 25 297 25 298 25 299 25 300 25 301 25 302 25 303 25 304 25 305 25 306 25 307 25 308 25 309 25 310 25 311 25 312 25 313 25 314 25 315 25 316 25 317 25 318 25 319 25 320 25 321 25 322 25 323 25 324 25 325 25 326 25 327 25 328 25 329 25 330 25 331 25 332 25 333 25 334 25 335 25 336 25 337 25 338 25 339 25 340 25 341 25 342 25 343 25 344 25 345 25 346 25 347 25 348 25 349 25 350 25 351 25 352 25 353 25 354 25 355 25 356 25 357 25 358 25 359 25 360 25 361 25 362 25 363 25 364 25 365 25 366 25 367 25 368 25 369 25 370 25 371 25 372 25 373 25 374 25 375 25 376 25 377 25 378 25 379 25 380 25 381 25 382 25 383 25 384 25 385 25 386 25 387 25 388 25 389 25 390 25 391 25 392 25 393 25 394 25 395 25 396 25 397 25 398 25 399 25 400 25 401 25 402 25 403 25 404 25 405 25 406 25 407 25 408 25 409 25 410 25 411 25 412 25 413 25 414 25 415 25 416 25 417 25 418 25 419 25 420 25 421 25 422 25 423 25 424 25 425 25 426 25 427 25 428 25 429 25 430 25 431 25 432 25 433 25 434 25 435 25 436 25 437 25 438 25 439 25 440 25 441 25 442 25 443 25 444 25 445 25 446 25 447 25 448 25 449 25 450 25 451 25 452 25 453 25 454 25 455 25 456 25 457 25 458 25 459 25 460 25 461 25 462 25 463 25 464 25 465 25 466 25 467 25 468 25 469 25 470 25 471 25 472 25 473 25 474 25 475 25 476 25 477 25 478 25 479 25 480 25 481 25 482 25 483 25 484 25 485 25 486 25 487 25 488 25 489 25 490 25 491 25 492 25 493 25 494 25 495 25 496 25 497 25 498 25 499 25 500 25 501 25 502 25 503 25 504 25 505 25 506 25 507 25 508 25 509 25 510 25 511 25 512 25 513 25 514 25 515 25 516 25 517 25 518 25 519 25 520 25 521 25 522 25 523 25 524 25 525 25 526 25 527 25 528 25 529 25 530 25 531 25 532 25 533 25 534 25 535 25 536 25 537 25 538 25 539 25 540 25 541 25 542 25 543 25 544 25 545 25 546 25 547 25 548 25 549 25 550 25 551 25 552 25 553 25 554 25 555 25 556 25 557 25 558 25 559 25 560 25 561 25 562 25 563 25 564 25 565 25 566 25 567 25 568 25 569 25 570 25 571 25 572 25 573 25 574 25 575 25 576 25 577 25 578 25 579 25 580 25 581 25 582 25 583 25 584 25 585 25 586 25 587 25 588 25 589 25 590 25 591 25 592 25 593 25 594 25 595 25 596 25 597 25 598 25 599 25 600 25 601 25 602 25 603 25 604 25 605 25 606 25 607 25 608 25 609 25 610 25 611 25 612 25 613 25 614 25 615 25 616 25 617 25 618 25 619 25 620 25 621 25 622 25 623 25 624 25 625 25 626 25 627 25 628 25 629 25 630 25 631 25 632 25 633 25 634 25 635 25 636 25 637 25 638 25 639 25 640 25 641 25 642 25 643 25 644 25 645 25 646 25 647 25 648 25 649 25 650 25 651 25 652 25 653 25 654 25 655 25 656 25 657 25 658 25 659 25 660 25 661 25 662 25 663 25 664 25 665 25 666 25 667 25 668 25 669 25 670 25 671 25 672 25 673 25 674 25 675 25 676 25 677 25 678 25 679 25 680 25 681 25 682 25 683 25 684 25 685 25 686 25 687 25 688 25 689 25 690 25 691 25 692 25 693 25 694 25 695 25 696 25 697 25 698 25 699 25 700 25 701 25 702 25 703 25 704 25 705 25 706 25 707 25 708 25 709 25 710 25 711 25 712 25 713 25 714 25 715 25 716 25 717 25 718 25 719 25 720 25 721 25 722 25 723 25 724 25 725 25 726 25 727 25 728 25 729 25 730 25 731 25 732 25 733 25 734 25 735 25 736 25 737 25 738 25 739 25 740 25 741 25 742 25 743 25 744 25 745 25 746 25 747 25 748 25 749 25 750 25 751 25 752 25 753 25 754 25 755 25 756 25 757 25 758 25 759 25 760 25 761 25 762 25 763 25 764 25 765 25 766 25 767 25 768 25 769 25 770 25 771 25 772 25 773 25 774 25 775 25 776 25 777 25 778 25 779 25 780 25 781 25 782 25 783 25 784 25 785 25 786 25 787 25 788 25 789 25 790 25 791 25 792 25 793 25 794 25 795 25 796 25 797 25 798 25 799 25 800 25 801 25 802 25 803 25 804 25 805 25 806 25 807 25 808 25 809 25 810 25 811 25 812 25 813 25 814 25 815 25 816 25 817 25 818 25 819 25 820 25 821 25 822 25 823 25 824 25 825 25 826 25 827 25 828 25 829 25 830 25 831 25 832 25 833 25 834 25 835 25 836 25 837 25 838 25 839 25 840 25 841 25 842 25 843 25 844 25 845 25 846 25 847 25 848 25 849 25 850 25 851 25 852 25 853 25 854 25 855 25 856 25 857 25 858 25 859 25 860 25 861 25 862 25 863 25 864 25 865 25 866 25 867 25 868 25 869 25 870 25 871 25 872 25 873 25 874 25 875 25 876 25 877 25 878 25 879 25 880 25 881 25 882 25 883 25 884 25 885 25 886 25 887 25 888 25 889 25 890 25 891 25 892 25 893 25 894 25 895 25 896 25 897 25 898 25 899 25 900 25 901 25 902 25 903 25 904 25 905 25 906 25 907 25 908 25 909 25 910 25 911 25 912 25 913 25 914 25 915 25 916 25 917 25 918 25 919 25 920 25 921 25 922 25 923 25 924 25 925 25 926 25 927 25 928 25 929 25 930 25 931 25 932 25 933 25 934 25 935 25 936 25 937 25 938 25 939 25 940 25 941 25 942 25 943 25 944 25 945 25 946 25 947 25 948 25 949 25 950 25 951 25 952 25 953 25 954 25 955 25 956 25 957 25 958 25 959 25 960 25 961 25 962 25 963 25 964 25 965 25 966 25 967 25 968 25 969 25 970 25 971 25 972 25 973 25 974 25 975 25 976 25 977 25 978 25 979 25 980 25 981 25 982 25 983 25 984 25 985 25 986 25 987 25 988 25 989 25 990 25 991 25 992 25 993 25 994 25 995 25 996 25 997 25 998 25 999 26 0 26 1 26 2 26 3 26 4 26 5 26 6 26 7 26 8 26 9 26 10 26 11 26 12 26 13 26 14 26 15 26 16 26 17 26 18 26 19 26 20 26 21 26 22 26 23 26 24 26 25 26 26 26 27 26 28 26 29 26 30 26 31 26 32 26 33 26 34 26 35 26 36 26 37 26 38 26 39 26 40 26 41 26 42 26 43 26 44 26 45 26 46 26 47 26 48 26 49 26 50 26 51 26 52 26 53 26 54 26 55 26 56 26 57 26 58 26 59 26 60 26 61 26 62 26 63 26 64 26 65 26 66 26 67 26 68 26 69 26 70 26 71 26 72 26 73 26 74 26 75 26 76 26 77 26 78 26 79 26 80 26 81 26 82 26 83 26 84 26 85 26 86 26 87 26 88 26 89 26 90 26 91 26 92 26 93 26 94 26 95 26 96 26 97 26 98 26 99 26 100 26 101 26 102 26 103 26 104 26 105 26 106 26 107 26 108 26 109 26 110 26 111 26 112 26 113 26 114 26 115 26 116 26 117 26 118 26 119 26 120 26 121 26 122 26 123 26 124 26 125 26 126 26 127 26 128 26 129 26 130 26 131 26 132 26 133 26 134 26 135 26 136 26 137 26 138 26 139 26 140 26 141 26 142 26 143 26 144 26 145 26 146 26 147 26 148 26 149 26 150 26 151 26 152 26 153 26 154 26 155 26 156 26 157 26 158 26 159 26 160 26 161 26 162 26 163 26 164 26 165 26 166 26 167 26 168 26 169 26 170 26 171 26 172 26 173 26 174 26 175 26 176 26 177 26 178 26 179 26 180 26 181 26 182 26 183 26 184 26 185 26 186 26 187 26 188 26 189 26 190 26 191 26 192 26 193 26 194 26 195 26 196 26 197 26 198 26 199 26 200 26 201 26 202 26 203 26 204 26 205 26 206 26 207 26 208 26 209 26 210 26 211 26 212 26 213 26 214 26 215 26 216 26 217 26 218 26 219 26 220 26 221 26 222 26 223 26 224 26 225 26 226 26 227 26 228 26 229 26 230 26 231 26 232 26 233 26 234 26 235 26 236 26 237 26 238 26 239 26 240 26 241 26 242 26 243 26 244 26 245 26 246 26 247 26 248 26 249 26 250 26 251 26 252 26 253 26 254 26 255 26 256 26 257 26 258 26 259 26 260 26 261 26 262 26 263 26 264 26 265 26 266 26 267 26 268 26 269 26 270 26 271 26 272 26 273 26 274 26 275 26 276 26 277 26 278 26 279 26 280 26 281 26 282 26 283 26 284 26 285 26 286 26 287 26 288 26 289 26 290 26 291 26 292 26 293 26 294 26 295 26 296 26 297 26 298 26 299 26 300 26 301 26 302 26 303 26 304 26 305 26 306 26 307 26 308 26 309 26 310 26 311 26 312 26 313 26 314 26 315 26 316 26 317 26 318 26 319 26 320 26 321 26 322 26 323 26 324 26 325 26 326 26 327 26 328 26 329 26 330 26 331 26 332 26 333 26 334 26 335 26 336 26 337 26 338 26 339 26 340 26 341 26 342 26 343 26 344 26 345 26 346 26 347 26 348 26 349 26 350 26 351 26 352 26 353 26 354 26 355 26 356 26 357 26 358 26 359 26 360 26 361 26 362 26 363 26 364 26 365 26 366 26 367 26 368 26 369 26 370 26 371 26 372 26 373 26 374 26 375 26 376 26 377 26 378 26 379 26 380 26 381 26 382 26 383 26 384 26 385 26 386 26 387 26 388 26 389 26 390 26 391 26 392 26 393 26 394 26 395 26 396 26 397 26 398 26 399 26 400 26 401 26 402 26 403 26 404 26 405 26 406 26 407 26 408 26 409 26 410 26 411 26 412 26 413 26 414 26 415 26 416 26 417 26 418 26 419 26 420 26 421 26 422 26 423 26 424 26 425 26 426 26 427 26 428 26 429 26 430 26 431 26 432 26 433 26 434 26 435 26 436 26 437 26 438 26 439 26 440 26 441 26 442 26 443 26 444 26 445 26 446 26 447 26 448 26 449 26 450 26 451 26 452 26 453 26 454 26 455 26 456 26 457 26 458 26 459 26 460 26 461 26 462 26 463 26 464 26 465 26 466 26 467 26 468 26 469 26 470 26 471 26 472 26 473 26 474 26 475 26 476 26 477 26 478 26 479 26 480 26 481 26 482 26 483 26 484 26 485 26 486 26 487 26 488 26 489 26 490 26 491 26 492 26 493 26 494 26 495 26 496 26 497 26 498 26 499 26 500 26 501 26 502 26 503 26 504 26 505 26 506 26 507 26 508 26 509 26 510 26 511 26 512 26 513 26 514 26 515 26 516 26 517 26 518 26 519 26 520 26 521 26 522 26 523 26 524 26 525 26 526 26 527 26 528 26 529 26 530 26 531 26 532 26 533 26 534 26 535 26 536 26 537 26 538 26 539 26 540 26 541 26 542 26 543 26 544 26 545 26 546 26 547 26 548 26 549 26 550 26 551 26 552 26 553 26 554 26 555 26 556 26 557 26 558 26 559 26 560 26 561 26 562 26 563 26 564 26 565 26 566 26 567 26 568 26 569 26 570 26 571 26 572 26 573 26 574 26 575 26 576 26 577 26 578 26 579 26 580 26 581 26 582 26 583 26 584 26 585 26 586 26 587 26 588 26 589 26 590 26 591 26 592 26 593 26 594 26 595 26 596 26 597 26 598 26 599 26 600 26 601 26 602 26 603 26 604 26 605 26 606 26 607 26 608 26 609 26 610 26 611 26 612 26 613 26 614 26 615 26 616 26 617 26 618 26 619 26 620 26 621 26 622 26 623 26 624 26 625 26 626 26 627 26 628 26 629 26 630 26 631 26 632 26 633 26 634 26 635 26 636 26 637 26 638 26 639 26 640 26 641 26 642 26 643 26 644 26 645 26 646 26 647 26 648 26 649 26 650 26 651 26 652 26 653 26 654 26 655 26 656 26 657 26 658 26 659 26 660 26 661 26 662 26 663 26 664 26 665 26 666 26 667 26 668 26 669 26 670 26 671 26 672 26 673 26 674 26 675 26 676 26 677 26 678 26 679 26 680 26 681 26 682 26 683 26 684 26 685 26 686 26 687 26 688 26 689 26 690 26 691 26 692 26 693 26 694 26 695 26 696 26 697 26 698 26 699 26 700 26 701 26 702 26 703 26 704 26 705 26 706 26 707 26 708 26 709 26 710 26 711 26 712 26 713 26 714 26 715 26 716 26 717 26 718 26 719 26 720 26 721 26 722 26 723 26 724 26 725 26 726 26 727 26 728 26 729 26 730 26 731 26 732 26 733 26 734 26 735 26 736 26 737 26 738 26 739 26 740 26 741 26 742 26 743 26 744 26 745 26 746 26 747 26 748 26 749 26 750 26 751 26 752 26 753 26 754 26 755 26 756 26 757 26 758 26 759 26 760 26 761 26 762 26 763 26 764 26 765 26 766 26 767 26 768 26 769 26 770 26 771 26 772 26 773 26 774 26 775 26 776 26 777 26 778 26 779 26 780 26 781 26 782 26 783 26 784 26 785 26 786 26 787 26 788 26 789 26 790 26 791 26 792 26 793 26 794 26 795 26 796 26 797 26 798 26 799 26 800 26 801 26 802 26 803 26 804 26 805 26 806 26 807 26 808 26 809 26 810 26 811 26 812 26 813 26 814 26 815 26 816 26 817 26 818 26 819 26 820 26 821 26 822 26 823 26 824 26 825 26 826 26 827 26 828 26 829 26 830 26 831 26 832 26 833 26 834 26 835 26 836 26 837 26 838 26 839 26 840 26 841 26 842 26 843 26 844 26 845 26 846 26 847 26 848 26 849 26 850 26 851 26 852 26 853 26 854 26 855 26 856 26 857 26 858 26 859 26 860 26 861 26 862 26 863 26 864 26 865 26 866 26 867 26 868 26 869 26 870 26 871 26 872 26 873 26 874 26 875 26 876 26 877 26 878 26 879 26 880 26 881 26 882 26 883 26 884 26 885 26 886 26 887 26 888 26 889 26 890 26 891 26 892 26 893 26 894 26 895 26 896 26 897 26 898 26 899 26 900 26 901 26 902 26 903 26 904 26 905 26 906 26 907 26 908 26 909 26 910 26 911 26 912 26 913 26 914 26 915 26 916 26 917 26 918 26 919 26 920 26 921 26 922 26 923 26 924 26 925 26 926 26 927 26 928 26 929 26 930 26 931 26 932 26 933 26 934 26 935 26 936 26 937 26 938 26 939 26 940 26 941 26 942 26 943 26 944 26 945 26 946 26 947 26 948 26 949 26 950 26 951 26 952 26 953 26 954 26 955 26 956 26 957 26 958 26 959 26 960 26 961 26 962 26 963 26 964 26 965 26 966 26 967 26 968 26 969 26 970 26 971 26 972 26 973 26 974 26 975 26 976 26 977 26 978 26 979 26 980 26 981 26 982 26 983 26 984 26 985 26 986 26 987 26 988 26 989 26 990 26 991 26 992 26 993 26 994 26 995 26 996 26 997 26 998 26 999 27 0 27 1 27 2 27 3 27 4 27 5 27 6 27 7 27 8 27 9 27 10 27 11 27 12 27 13 27 14 27 15 27 16 27 17 27 18 27 19 27 20 27 21 27 22 27 23 27 24 27 25 27 26 27 27 27 28 27 29 27 30 27 31 27 32 27 33 27 34 27 35 27 36 27 37 27 38 27 39 27 40 27 41 27 42 27 43 27 44 27 45 27 46 27 47 27 48 27 49 27 50 27 51 27 52 27 53 27 54 27 55 27 56 27 57 27 58 27 59 27 60 27 61 27 62 27 63 27 64 27 65 27 66 27 67 27 68 27 69 27 70 27 71 27 72 27 73 27 74 27 75 27 76 27 77 27 78 27 79 27 80 27 81 27 82 27 83 27 84 27 85 27 86 27 87 27 88 27 89 27 90 27 91 27 92 27 93 27 94 27 95 27 96 27 97 27 98 27 99 27 100 27 101 27 102 27 103 27 104 27 105 27 106 27 107 27 108 27 109 27 110 27 111 27 112 27 113 27 114 27 115 27 116 27 117 27 118 27 119 27 120 27 121 27 122 27 123 27 124 27 125 27 126 27 127 27 128 27 129 27 130 27 131 27 132 27 133 27 134 27 135 27 136 27 137 27 138 27 139 27 140 27 141 27 142 27 143 27 144 27 145 27 146 27 147 27 148 27 149 27 150 27 151 27 152 27 153 27 154 27 155 27 156 27 157 27 158 27 159 27 160 27 161 27 162 27 163 27 164 27 165 27 166 27 167 27 168 27 169 27 170 27 171 27 172 27 173 27 174 27 175 27 176 27 177 27 178 27 179 27 180 27 181 27 182 27 183 27 184 27 185 27 186 27 187 27 188 27 189 27 190 27 191 27 192 27 193 27 194 27 195 27 196 27 197 27 198 27 199 27 200 27 201 27 202 27 203 27 204 27 205 27 206 27 207 27 208 27 209 27 210 27 211 27 212 27 213 27 214 27 215 27 216 27 217 27 218 27 219 27 220 27 221 27 222 27 223 27 224 27 225 27 226 27 227 27 228 27 229 27 230 27 231 27 232 27 233 27 234 27 235 27 236 27 237 27 238 27 239 27 240 27 241 27 242 27 243 27 244 27 245 27 246 27 247 27 248 27 249 27 250 27 251 27 252 27 253 27 254 27 255 27 256 27 257 27 258 27 259 27 260 27 261 27 262 27 263 27 264 27 265 27 266 27 267 27 268 27 269 27 270 27 271 27 272 27 273 27 274 27 275 27 276 27 277 27 278 27 279 27 280 27 281 27 282 27 283 27 284 27 285 27 286 27 287 27 288 27 289 27 290 27 291 27 292 27 293 27 294 27 295 27 296 27 297 27 298 27 299 27 300 27 301 27 302 27 303 27 304 27 305 27 306 27 307 27 308 27 309 27 310 27 311 27 312 27 313 27 314 27 315 27 316 27 317 27 318 27 319 27 320 27 321 27 322 27 323 27 324 27 325 27 326 27 327 27 328 27 329 27 330 27 331 27 332 27 333 27 334 27 335 27 336 27 337 27 338 27 339 27 340 27 341 27 342 27 343 27 344 27 345 27 346 27 347 27 348 27 349 27 350 27 351 27 352 27 353 27 354 27 355 27 356 27 357 27 358 27 359 27 360 27 361 27 362 27 363 27 364 27 365 27 366 27 367 27 368 27 369 27 370 27 371 27 372 27 373 27 374 27 375 27 376 27 377 27 378 27 379 27 380 27 381 27 382 27 383 27 384 27 385 27 386 27 387 27 388 27 389 27 390 27 391 27 392 27 393 27 394 27 395 27 396 27 397 27 398 27 399 27 400 27 401 27 402 27 403 27 404 27 405 27 406 27 407 27 408 27 409 27 410 27 411 27 412 27 413 27 414 27 415 27 416 27 417 27 418 27 419 27 420 27 421 27 422 27 423 27 424 27 425 27 426 27 427 27 428 27 429 27 430 27 431 27 432 27 433 27 434 27 435 27 436 27 437 27 438 27 439 27 440 27 441 27 442 27 443 27 444 27 445 27 446 27 447 27 448 27 449 27 450 27 451 27 452 27 453 27 454 27 455 27 456 27 457 27 458 27 459 27 460 27 461 27 462 27 463 27 464 27 465 27 466 27 467 27 468 27 469 27 470 27 471 27 472 27 473 27 474 27 475 27 476 27 477 27 478 27 479 27 480 27 481 27 482 27 483 27 484 27 485 27 486 27 487 27 488 27 489 27 490 27 491 27 492 27 493 27 494 27 495 27 496 27 497 27 498 27 499 27 500 27 501 27 502 27 503 27 504 27 505 27 506 27 507 27 508 27 509 27 510 27 511 27 512 27 513 27 514 27 515 27 516 27 517 27 518 27 519 27 520 27 521 27 522 27 523 27 524 27 525 27 526 27 527 27 528 27 529 27 530 27 531 27 532 27 533 27 534 27 535 27 536 27 537 27 538 27 539 27 540 27 541 27 542 27 543 27 544 27 545 27 546 27 547 27 548 27 549 27 550 27 551 27 552 27 553 27 554 27 555 27 556 27 557 27 558 27 559 27 560 27 561 27 562 27 563 27 564 27 565 27 566 27 567 27 568 27 569 27 570 27 571 27 572 27 573 27 574 27 575 27 576 27 577 27 578 27 579 27 580 27 581 27 582 27 583 27 584 27 585 27 586 27 587 27 588 27 589 27 590 27 591 27 592 27 593 27 594 27 595 27 596 27 597 27 598 27 599 27 600 27 601 27 602 27 603 27 604 27 605 27 606 27 607 27 608 27 609 27 610 27 611 27 612 27 613 27 614 27 615 27 616 27 617 27 618 27 619 27 620 27 621 27 622 27 623 27 624 27 625 27 626 27 627 27 628 27 629 27 630 27 631 27 632 27 633 27 634 27 635 27 636 27 637 27 638 27 639 27 640 27 641 27 642 27 643 27 644 27 645 27 646 27 647 27 648 27 649 27 650 27 651 27 652 27 653 27 654 27 655 27 656 27 657 27 658 27 659 27 660 27 661 27 662 27 663 27 664 27 665 27 666 27 667 27 668 27 669 27 670 27 671 27 672 27 673 27 674 27 675 27 676 27 677 27 678 27 679 27 680 27 681 27 682 27 683 27 684 27 685 27 686 27 687 27 688 27 689 27 690 27 691 27 692 27 693 27 694 27 695 27 696 27 697 27 698 27 699 27 700 27 701 27 702 27 703 27 704 27 705 27 706 27 707 27 708 27 709 27 710 27 711 27 712 27 713 27 714 27 715 27 716 27 717 27 718 27 719 27 720 27 721 27 722 27 723 27 724 27 725 27 726 27 727 27 728 27 729 27 730 27 731 27 732 27 733 27 734 27 735 27 736 27 737 27 738 27 739 27 740 27 741 27 742 27 743 27 744 27 745 27 746 27 747 27 748 27 749 27 750 27 751 27 752 27 753 27 754 27 755 27 756 27 757 27 758 27 759 27 760 27 761 27 762 27 763 27 764 27 765 27 766 27 767 27 768 27 769 27 770 27 771 27 772 27 773 27 774 27 775 27 776 27 777 27 778 27 779 27 780 27 781 27 782 27 783 27 784 27 785 27 786 27 787 27 788 27 789 27 790 27 791 27 792 27 793 27 794 27 795 27 796 27 797 27 798 27 799 27 800 27 801 27 802 27 803 27 804 27 805 27 806 27 807 27 808 27 809 27 810 27 811 27 812 27 813 27 814 27 815 27 816 27 817 27 818 27 819 27 820 27 821 27 822 27 823 27 824 27 825 27 826 27 827 27 828 27 829 27 830 27 831 27 832 27 833 27 834 27 835 27 836 27 837 27 838 27 839 27 840 27 841 27 842 27 843 27 844 27 845 27 846 27 847 27 848 27 849 27 850 27 851 27 852 27 853 27 854 27 855 27 856 27 857 27 858 27 859 27 860 27 861 27 862 27 863 27 864 27 865 27 866 27 867 27 868 27 869 27 870 27 871 27 872 27 873 27 874 27 875 27 876 27 877 27 878 27 879 27 880 27 881 27 882 27 883 27 884 27 885 27 886 27 887 27 888 27 889 27 890 27 891 27 892 27 893 27 894 27 895 27 896 27 897 27 898 27 899 27 900 27 901 27 902 27 903 27 904 27 905 27 906 27 907 27 908 27 909 27 910 27 911 27 912 27 913 27 914 27 915 27 916 27 917 27 918 27 919 27 920 27 921 27 922 27 923 27 924 27 925 27 926 27 927 27 928 27 929 27 930 27 931 27 932 27 933 27 934 27 935 27 936 27 937 27 938 27 939 27 940 27 941 27 942 27 943 27 944 27 945 27 946 27 947 27 948 27 949 27 950 27 951 27 952 27 953 27 954 27 955 27 956 27 957 27 958 27 959 27 960 27 961 27 962 27 963 27 964 27 965 27 966 27 967 27 968 27 969 27 970 27 971 27 972 27 973 27 974 27 975 27 976 27 977 27 978 27 979 27 980 27 981 27 982 27 983 27 984 27 985 27 986 27 987 27 988 27 989 27 990 27 991 27 992 27 993 27 994 27 995 27 996 27 997 27 998 27 999 28 0 28 1 28 2 28 3 28 4 28 5 28 6 28 7 28 8 28 9 28 10 28 11 28 12 28 13 28 14 28 15 28 16 28 17 28 18 28 19 28 20 28 21 28 22 28 23 28 24 28 25 28 26 28 27 28 28 28 29 28 30 28 31 28 32 28 33 28 34 28 35 28 36 28 37 28 38 28 39 28 40 28 41 28 42 28 43 28 44 28 45 28 46 28 47 28 48 28 49 28 50 28 51 28 52 28 53 28 54 28 55 28 56 28 57 28 58 28 59 28 60 28 61 28 62 28 63 28 64 28 65 28 66 28 67 28 68 28 69 28 70 28 71 28 72 28 73 28 74 28 75 28 76 28 77 28 78 28 79 28 80 28 81 28 82 28 83 28 84 28 85 28 86 28 87 28 88 28 89 28 90 28 91 28 92 28 93 28 94 28 95 28 96 28 97 28 98 28 99 28 100 28 101 28 102 28 103 28 104 28 105 28 106 28 107 28 108 28 109 28 110 28 111 28 112 28 113 28 114 28 115 28 116 28 117 28 118 28 119 28 120 28 121 28 122 28 123 28 124 28 125 28 126 28 127 28 128 28 129 28 130 28 131 28 132 28 133 28 134 28 135 28 136 28 137 28 138 28 139 28 140 28 141 28 142 28 143 28 144 28 145 28 146 28 147 28 148 28 149 28 150 28 151 28 152 28 153 28 154 28 155 28 156 28 157 28 158 28 159 28 160 28 161 28 162 28 163 28 164 28 165 28 166 28 167 28 168 28 169 28 170 28 171 28 172 28 173 28 174 28 175 28 176 28 177 28 178 28 179 28 180 28 181 28 182 28 183 28 184 28 185 28 186 28 187 28 188 28 189 28 190 28 191 28 192 28 193 28 194 28 195 28 196 28 197 28 198 28 199 28 200 28 201 28 202 28 203 28 204 28 205 28 206 28 207 28 208 28 209 28 210 28 211 28 212 28 213 28 214 28 215 28 216 28 217 28 218 28 219 28 220 28 221 28 222 28 223 28 224 28 225 28 226 28 227 28 228 28 229 28 230 28 231 28 232 28 233 28 234 28 235 28 236 28 237 28 238 28 239 28 240 28 241 28 242 28 243 28 244 28 245 28 246 28 247 28 248 28 249 28 250 28 251 28 252 28 253 28 254 28 255 28 256 28 257 28 258 28 259 28 260 28 261 28 262 28 263 28 264 28 265 28 266 28 267 28 268 28 269 28 270 28 271 28 272 28 273 28 274 28 275 28 276 28 277 28 278 28 279 28 280 28 281 28 282 28 283 28 284 28 285 28 286 28 287 28 288 28 289 28 290 28 291 28 292 28 293 28 294 28 295 28 296 28 297 28 298 28 299 28 300 28 301 28 302 28 303 28 304 28 305 28 306 28 307 28 308 28 309 28 310 28 311 28 312 28 313 28 314 28 315 28 316 28 317 28 318 28 319 28 320 28 321 28 322 28 323 28 324 28 325 28 326 28 327 28 328 28 329 28 330 28 331 28 332 28 333 28 334 28 335 28 336 28 337 28 338 28 339 28 340 28 341 28 342 28 343 28 344 28 345 28 346 28 347 28 348 28 349 28 350 28 351 28 352 28 353 28 354 28 355 28 356 28 357 28 358 28 359 28 360 28 361 28 362 28 363 28 364 28 365 28 366 28 367 28 368 28 369 28 370 28 371 28 372 28 373 28 374 28 375 28 376 28 377 28 378 28 379 28 380 28 381 28 382 28 383 28 384 28 385 28 386 28 387 28 388 28 389 28 390 28 391 28 392 28 393 28 394 28 395 28 396 28 397 28 398 28 399 28 400 28 401 28 402 28 403 28 404 28 405 28 406 28 407 28 408 28 409 28 410 28 411 28 412 28 413 28 414 28 415 28 416 28 417 28 418 28 419 28 420 28 421 28 422 28 423 28 424 28 425 28 426 28 427 28 428 28 429 28 430 28 431 28 432 28 433 28 434 28 435 28 436 28 437 28 438 28 439 28 440 28 441 28 442 28 443 28 444 28 445 28 446 28 447 28 448 28 449 28 450 28 451 28 452 28 453 28 454 28 455 28 456 28 457 28 458 28 459 28 460 28 461 28 462 28 463 28 464 28 465 28 466 28 467 28 468 28 469 28 470 28 471 28 472 28 473 28 474 28 475 28 476 28 477 28 478 28 479 28 480 28 481 28 482 28 483 28 484 28 485 28 486 28 487 28 488 28 489 28 490 28 491 28 492 28 493 28 494 28 495 28 496 28 497 28 498 28 499 28 500 28 501 28 502 28 503 28 504 28 505 28 506 28 507 28 508 28 509 28 510 28 511 28 512 28 513 28 514 28 515 28 516 28 517 28 518 28 519 28 520 28 521 28 522 28 523 28 524 28 525 28 526 28 527 28 528 28 529 28 530 28 531 28 532 28 533 28 534 28 535 28 536 28 537 28 538 28 539 28 540 28 541 28 542 28 543 28 544 28 545 28 546 28 547 28 548 28 549 28 550 28 551 28 552 28 553 28 554 28 555 28 556 28 557 28 558 28 559 28 560 28 561 28 562 28 563 28 564 28 565 28 566 28 567 28 568 28 569 28 570 28 571 28 572 28 573 28 574 28 575 28 576 28 577 28 578 28 579 28 580 28 581 28 582 28 583 28 584 28 585 28 586 28 587 28 588 28 589 28 590 28 591 28 592 28 593 28 594 28 595 28 596 28 597 28 598 28 599 28 600 28 601 28 602 28 603 28 604 28 605 28 606 28 607 28 608 28 609 28 610 28 611 28 612 28 613 28 614 28 615 28 616 28 617 28 618 28 619 28 620 28 621 28 622 28 623 28 624 28 625 28 626 28 627 28 628 28 629 28 630 28 631 28 632 28 633 28 634 28 635 28 636 28 637 28 638 28 639 28 640 28 641 28 642 28 643 28 644 28 645 28 646 28 647 28 648 28 649 28 650 28 651 28 652 28 653 28 654 28 655 28 656 28 657 28 658 28 659 28 660 28 661 28 662 28 663 28 664 28 665 28 666 28 667 28 668 28 669 28 670 28 671 28 672 28 673 28 674 28 675 28 676 28 677 28 678 28 679 28 680 28 681 28 682 28 683 28 684 28 685 28 686 28 687 28 688 28 689 28 690 28 691 28 692 28 693 28 694 28 695 28 696 28 697 28 698 28 699 28 700 28 701 28 702 28 703 28 704 28 705 28 706 28 707 28 708 28 709 28 710 28 711 28 712 28 713 28 714 28 715 28 716 28 717 28 718 28 719 28 720 28 721 28 722 28 723 28 724 28 725 28 726 28 727 28 728 28 729 28 730 28 731 28 732 28 733 28 734 28 735 28 736 28 737 28 738 28 739 28 740 28 741 28 742 28 743 28 744 28 745 28 746 28 747 28 748 28 749 28 750 28 751 28 752 28 753 28 754 28 755 28 756 28 757 28 758 28 759 28 760 28 761 28 762 28 763 28 764 28 765 28 766 28 767 28 768 28 769 28 770 28 771 28 772 28 773 28 774 28 775 28 776 28 777 28 778 28 779 28 780 28 781 28 782 28 783 28 784 28 785 28 786 28 787 28 788 28 789 28 790 28 791 28 792 28 793 28 794 28 795 28 796 28 797 28 798 28 799 28 800 28 801 28 802 28 803 28 804 28 805 28 806 28 807 28 808 28 809 28 810 28 811 28 812 28 813 28 814 28 815 28 816 28 817 28 818 28 819 28 820 28 821 28 822 28 823 28 824 28 825 28 826 28 827 28 828 28 829 28 830 28 831 28 832 28 833 28 834 28 835 28 836 28 837 28 838 28 839 28 840 28 841 28 842 28 843 28 844 28 845 28 846 28 847 28 848 28 849 28 850 28 851 28 852 28 853 28 854 28 855 28 856 28 857 28 858 28 859 28 860 28 861 28 862 28 863 28 864 28 865 28 866 28 867 28 868 28 869 28 870 28 871 28 872 28 873 28 874 28 875 28 876 28 877 28 878 28 879 28 880 28 881 28 882 28 883 28 884 28 885 28 886 28 887 28 888 28 889 28 890 28 891 28 892 28 893 28 894 28 895 28 896 28 897 28 898 28 899 28 900 28 901 28 902 28 903 28 904 28 905 28 906 28 907 28 908 28 909 28 910 28 911 28 912 28 913 28 914 28 915 28 916 28 917 28 918 28 919 28 920 28 921 28 922 28 923 28 924 28 925 28 926 28 927 28 928 28 929 28 930 28 931 28 932 28 933 28 934 28 935 28 936 28 937 28 938 28 939 28 940 28 941 28 942 28 943 28 944 28 945 28 946 28 947 28 948 28 949 28 950 28 951 28 952 28 953 28 954 28 955 28 956 28 957 28 958 28 959 28 960 28 961 28 962 28 963 28 964 28 965 28 966 28 967 28 968 28 969 28 970 28 971 28 972 28 973 28 974 28 975 28 976 28 977 28 978 28 979 28 980 28 981 28 982 28 983 28 984 28 985 28 986 28 987 28 988 28 989 28 990 28 991 28 992 28 993 28 994 28 995 28 996 28 997 28 998 28 999 29 0 29 1 29 2 29 3 29 4 29 5 29 6 29 7 29 8 29 9 29 10 29 11 29 12 29 13 29 14 29 15 29 16 29 17 29 18 29 19 29 20 29 21 29 22 29 23 29 24 29 25 29 26 29 27 29 28 29 29 29 30 29 31 29 32 29 33 29 34 29 35 29 36 29 37 29 38 29 39 29 40 29 41 29 42 29 43 29 44 29 45 29 46 29 47 29 48 29 49 29 50 29 51 29 52 29 53 29 54 29 55 29 56 29 57 29 58 29 59 29 60 29 61 29 62 29 63 29 64 29 65 29 66 29 67 29 68 29 69 29 70 29 71 29 72 29 73 29 74 29 75 29 76 29 77 29 78 29 79 29 80 29 81 29 82 29 83 29 84 29 85 29 86 29 87 29 88 29 89 29 90 29 91 29 92 29 93 29 94 29 95 29 96 29 97 29 98 29 99 29 100 29 101 29 102 29 103 29 104 29 105 29 106 29 107 29 108 29 109 29 110 29 111 29 112 29 113 29 114 29 115 29 116 29 117 29 118 29 119 29 120 29 121 29 122 29 123 29 124 29 125 29 126 29 127 29 128 29 129 29 130 29 131 29 132 29 133 29 134 29 135 29 136 29 137 29 138 29 139 29 140 29 141 29 142 29 143 29 144 29 145 29 146 29 147 29 148 29 149 29 150 29 151 29 152 29 153 29 154 29 155 29 156 29 157 29 158 29 159 29 160 29 161 29 162 29 163 29 164 29 165 29 166 29 167 29 168 29 169 29 170 29 171 29 172 29 173 29 174 29 175 29 176 29 177 29 178 29 179 29 180 29 181 29 182 29 183 29 184 29 185 29 186 29 187 29 188 29 189 29 190 29 191 29 192 29 193 29 194 29 195 29 196 29 197 29 198 29 199 29 200 29 201 29 202 29 203 29 204 29 205 29 206 29 207 29 208 29 209 29 210 29 211 29 212 29 213 29 214 29 215 29 216 29 217 29 218 29 219 29 220 29 221 29 222 29 223 29 224 29 225 29 226 29 227 29 228 29 229 29 230 29 231 29 232 29 233 29 234 29 235 29 236 29 237 29 238 29 239 29 240 29 241 29 242 29 243 29 244 29 245 29 246 29 247 29 248 29 249 29 250 29 251 29 252 29 253 29 254 29 255 29 256 29 257 29 258 29 259 29 260 29 261 29 262 29 263 29 264 29 265 29 266 29 267 29 268 29 269 29 270 29 271 29 272 29 273 29 274 29 275 29 276 29 277 29 278 29 279 29 280 29 281 29 282 29 283 29 284 29 285 29 286 29 287 29 288 29 289 29 290 29 291 29 292 29 293 29 294 29 295 29 296 29 297 29 298 29 299 29 300 29 301 29 302 29 303 29 304 29 305 29 306 29 307 29 308 29 309 29 310 29 311 29 312 29 313 29 314 29 315 29 316 29 317 29 318 29 319 29 320 29 321 29 322 29 323 29 324 29 325 29 326 29 327 29 328 29 329 29 330 29 331 29 332 29 333 29 334 29 335 29 336 29 337 29 338 29 339 29 340 29 341 29 342 29 343 29 344 29 345 29 346 29 347 29 348 29 349 29 350 29 351 29 352 29 353 29 354 29 355 29 356 29 357 29 358 29 359 29 360 29 361 29 362 29 363 29 364 29 365 29 366 29 367 29 368 29 369 29 370 29 371 29 372 29 373 29 374 29 375 29 376 29 377 29 378 29 379 29 380 29 381 29 382 29 383 29 384 29 385 29 386 29 387 29 388 29 389 29 390 29 391 29 392 29 393 29 394 29 395 29 396 29 397 29 398 29 399 29 400 29 401 29 402 29 403 29 404 29 405 29 406 29 407 29 408 29 409 29 410 29 411 29 412 29 413 29 414 29 415 29 416 29 417 29 418 29 419 29 420 29 421 29 422 29 423 29 424 29 425 29 426 29 427 29 428 29 429 29 430 29 431 29 432 29 433 29 434 29 435 29 436 29 437 29 438 29 439 29 440 29 441 29 442 29 443 29 444 29 445 29 446 29 447 29 448 29 449 29 450 29 451 29 452 29 453 29 454 29 455 29 456 29 457 29 458 29 459 29 460 29 461 29 462 29 463 29 464 29 465 29 466 29 467 29 468 29 469 29 470 29 471 29 472 29 473 29 474 29 475 29 476 29 477 29 478 29 479 29 480 29 481 29 482 29 483 29 484 29 485 29 486 29 487 29 488 29 489 29 490 29 491 29 492 29 493 29 494 29 495 29 496 29 497 29 498 29 499 29 500 29 501 29 502 29 503 29 504 29 505 29 506 29 507 29 508 29 509 29 510 29 511 29 512 29 513 29 514 29 515 29 516 29 517 29 518 29 519 29 520 29 521 29 522 29 523 29 524 29 525 29 526 29 527 29 528 29 529 29 530 29 531 29 532 29 533 29 534 29 535 29 536 29 537 29 538 29 539 29 540 29 541 29 542 29 543 29 544 29 545 29 546 29 547 29 548 29 549 29 550 29 551 29 552 29 553 29 554 29 555 29 556 29 557 29 558 29 559 29 560 29 561 29 562 29 563 29 564 29 565 29 566 29 567 29 568 29 569 29 570 29 571 29 572 29 573 29 574 29 575 29 576 29 577 29 578 29 579 29 580 29 581 29 582 29 583 29 584 29 585 29 586 29 587 29 588 29 589 29 590 29 591 29 592 29 593 29 594 29 595 29 596 29 597 29 598 29 599 29 600 29 601 29 602 29 603 29 604 29 605 29 606 29 607 29 608 29 609 29 610 29 611 29 612 29 613 29 614 29 615 29 616 29 617 29 618 29 619 29 620 29 621 29 622 29 623 29 624 29 625 29 626 29 627 29 628 29 629 29 630 29 631 29 632 29 633 29 634 29 635 29 636 29 637 29 638 29 639 29 640 29 641 29 642 29 643 29 644 29 645 29 646 29 647 29 648 29 649 29 650 29 651 29 652 29 653 29 654 29 655 29 656 29 657 29 658 29 659 29 660 29 661 29 662 29 663 29 664 29 665 29 666 29 667 29 668 29 669 29 670 29 671 29 672 29 673 29 674 29 675 29 676 29 677 29 678 29 679 29 680 29 681 29 682 29 683 29 684 29 685 29 686 29 687 29 688 29 689 29 690 29 691 29 692 29 693 29 694 29 695 29 696 29 697 29 698 29 699 29 700 29 701 29 702 29 703 29 704 29 705 29 706 29 707 29 708 29 709 29 710 29 711 29 712 29 713 29 714 29 715 29 716 29 717 29 718 29 719 29 720 29 721 29 722 29 723 29 724 29 725 29 726 29 727 29 728 29 729 29 730 29 731 29 732 29 733 29 734 29 735 29 736 29 737 29 738 29 739 29 740 29 741 29 742 29 743 29 744 29 745 29 746 29 747 29 748 29 749 29 750 29 751 29 752 29 753 29 754 29 755 29 756 29 757 29 758 29 759 29 760 29 761 29 762 29 763 29 764 29 765 29 766 29 767 29 768 29 769 29 770 29 771 29 772 29 773 29 774 29 775 29 776 29 777 29 778 29 779 29 780 29 781 29 782 29 783 29 784 29 785 29 786 29 787 29 788 29 789 29 790 29 791 29 792 29 793 29 794 29 795 29 796 29 797 29 798 29 799 29 800 29 801 29 802 29 803 29 804 29 805 29 806 29 807 29 808 29 809 29 810 29 811 29 812 29 813 29 814 29 815 29 816 29 817 29 818 29 819 29 820 29 821 29 822 29 823 29 824 29 825 29 826 29 827 29 828 29 829 29 830 29 831 29 832 29 833 29 834 29 835 29 836 29 837 29 838 29 839 29 840 29 841 29 842 29 843 29 844 29 845 29 846 29 847 29 848 29 849 29 850 29 851 29 852 29 853 29 854 29 855 29 856 29 857 29 858 29 859 29 860 29 861 29 862 29 863 29 864 29 865 29 866 29 867 29 868 29 869 29 870 29 871 29 872 29 873 29 874 29 875 29 876 29 877 29 878 29 879 29 880 29 881 29 882 29 883 29 884 29 885 29 886 29 887 29 888 29 889 29 890 29 891 29 892 29 893 29 894 29 895 29 896 29 897 29 898 29 899 29 900 29 901 29 902 29 903 29 904 29 905 29 906 29 907 29 908 29 909 29 910 29 911 29 912 29 913 29 914 29 915 29 916 29 917 29 918 29 919 29 920 29 921 29 922 29 923 29 924 29 925 29 926 29 927 29 928 29 929 29 930 29 931 29 932 29 933 29 934 29 935 29 936 29 937 29 938 29 939 29 940 29 941 29 942 29 943 29 944 29 945 29 946 29 947 29 948 29 949 29 950 29 951 29 952 29 953 29 954 29 955 29 956 29 957 29 958 29 959 29 960 29 961 29 962 29 963 29 964 29 965 29 966 29 967 29 968 29 969 29 970 29 971 29 972 29 973 29 974 29 975 29 976 29 977 29 978 29 979 29 980 29 981 29 982 29 983 29 984 29 985 29 986 29 987 29 988 29 989 29 990 29 991 29 992 29 993 29 994 29 995 29 996 29 997 29 998 29 999 30 0 30 1 30 2 30 3 30 4 30 5 30 6 30 7 30 8 30 9 30 10 30 11 30 12 30 13 30 14 30 15 30 16 30 17 30 18 30 19 30 20 30 21 30 22 30 23 30 24 30 25 30 26 30 27 30 28 30 29 30 30 30 31 30 32 30 33 30 34 30 35 30 36 30 37 30 38 30 39 30 40 30 41 30 42 30 43 30 44 30 45 30 46 30 47 30 48 30 49 30 50 30 51 30 52 30 53 30 54 30 55 30 56 30 57 30 58 30 59 30 60 30 61 30 62 30 63 30 64 30 65 30 66 30 67 30 68 30 69 30 70 30 71 30 72 30 73 30 74 30 75 30 76 30 77 30 78 30 79 30 80 30 81 30 82 30 83 30 84 30 85 30 86 30 87 30 88 30 89 30 90 30 91 30 92 30 93 30 94 30 95 30 96 30 97 30 98 30 99 30 100 30 101 30 102 30 103 30 104 30 105 30 106 30 107 30 108 30 109 30 110 30 111 30 112 30 113 30 114 30 115 30 116 30 117 30 118 30 119 30 120 30 121 30 122 30 123 30 124 30 125 30 126 30 127 30 128 30 129 30 130 30 131 30 132 30 133 30 134 30 135 30 136 30 137 30 138 30 139 30 140 30 141 30 142 30 143 30 144 30 145 30 146 30 147 30 148 30 149 30 150 30 151 30 152 30 153 30 154 30 155 30 156 30 157 30 158 30 159 30 160 30 161 30 162 30 163 30 164 30 165 30 166 30 167 30 168 30 169 30 170 30 171 30 172 30 173 30 174 30 175 30 176 30 177 30 178 30 179 30 180 30 181 30 182 30 183 30 184 30 185 30 186 30 187 30 188 30 189 30 190 30 191 30 192 30 193 30 194 30 195 30 196 30 197 30 198 30 199 30 200 30 201 30 202 30 203 30 204 30 205 30 206 30 207 30 208 30 209 30 210 30 211 30 212 30 213 30 214 30 215 30 216 30 217 30 218 30 219 30 220 30 221 30 222 30 223 30 224 30 225 30 226 30 227 30 228 30 229 30 230 30 231 30 232 30 233 30 234 30 235 30 236 30 237 30 238 30 239 30 240 30 241 30 242 30 243 30 244 30 245 30 246 30 247 30 248 30 249 30 250 30 251 30 252 30 253 30 254 30 255 30 256 30 257 30 258 30 259 30 260 30 261 30 262 30 263 30 264 30 265 30 266 30 267 30 268 30 269 30 270 30 271 30 272 30 273 30 274 30 275 30 276 30 277 30 278 30 279 30 280 30 281 30 282 30 283 30 284 30 285 30 286 30 287 30 288 30 289 30 290 30 291 30 292 30 293 30 294 30 295 30 296 30 297 30 298 30 299 30 300 30 301 30 302 30 303 30 304 30 305 30 306 30 307 30 308 30 309 30 310 30 311 30 312 30 313 30 314 30 315 30 316 30 317 30 318 30 319 30 320 30 321 30 322 30 323 30 324 30 325 30 326 30 327 30 328 30 329 30 330 30 331 30 332 30 333 30 334 30 335 30 336 30 337 30 338 30 339 30 340 30 341 30 342 30 343 30 344 30 345 30 346 30 347 30 348 30 349 30 350 30 351 30 352 30 353 30 354 30 355 30 356 30 357 30 358 30 359 30 360 30 361 30 362 30 363 30 364 30 365 30 366 30 367 30 368 30 369 30 370 30 371 30 372 30 373 30 374 30 375 30 376 30 377 30 378 30 379 30 380 30 381 30 382 30 383 30 384 30 385 30 386 30 387 30 388 30 389 30 390 30 391 30 392 30 393 30 394 30 395 30 396 30 397 30 398 30 399 30 400 30 401 30 402 30 403 30 404 30 405 30 406 30 407 30 408 30 409 30 410 30 411 30 412 30 413 30 414 30 415 30 416 30 417 30 418 30 419 30 420 30 421 30 422 30 423 30 424 30 425 30 426 30 427 30 428 30 429 30 430 30 431 30 432 30 433 30 434 30 435 30 436 30 437 30 438 30 439 30 440 30 441 30 442 30 443 30 444 30 445 30 446 30 447 30 448 30 449 30 450 30 451 30 452 30 453 30 454 30 455 30 456 30 457 30 458 30 459 30 460 30 461 30 462 30 463 30 464 30 465 30 466 30 467 30 468 30 469 30 470 30 471 30 472 30 473 30 474 30 475 30 476 30 477 30 478 30 479 30 480 30 481 30 482 30 483 30 484 30 485 30 486 30 487 30 488 30 489 30 490 30 491 30 492 30 493 30 494 30 495 30 496 30 497 30 498 30 499 30 500 30 501 30 502 30 503 30 504 30 505 30 506 30 507 30 508 30 509 30 510 30 511 30 512 30 513 30 514 30 515 30 516 30 517 30 518 30 519 30 520 30 521 30 522 30 523 30 524 30 525 30 526 30 527 30 528 30 529 30 530 30 531 30 532 30 533 30 534 30 535 30 536 30 537 30 538 30 539 30 540 30 541 30 542 30 543 30 544 30 545 30 546 30 547 30 548 30 549 30 550 30 551 30 552 30 553 30 554 30 555 30 556 30 557 30 558 30 559 30 560 30 561 30 562 30 563 30 564 30 565 30 566 30 567 30 568 30 569 30 570 30 571 30 572 30 573 30 574 30 575 30 576 30 577 30 578 30 579 30 580 30 581 30 582 30 583 30 584 30 585 30 586 30 587 30 588 30 589 30 590 30 591 30 592 30 593 30 594 30 595 30 596 30 597 30 598 30 599 30 600 30 601 30 602 30 603 30 604 30 605 30 606 30 607 30 608 30 609 30 610 30 611 30 612 30 613 30 614 30 615 30 616 30 617 30 618 30 619 30 620 30 621 30 622 30 623 30 624 30 625 30 626 30 627 30 628 30 629 30 630 30 631 30 632 30 633 30 634 30 635 30 636 30 637 30 638 30 639 30 640 30 641 30 642 30 643 30 644 30 645 30 646 30 647 30 648 30 649 30 650 30 651 30 652 30 653 30 654 30 655 30 656 30 657 30 658 30 659 30 660 30 661 30 662 30 663 30 664 30 665 30 666 30 667 30 668 30 669 30 670 30 671 30 672 30 673 30 674 30 675 30 676 30 677 30 678 30 679 30 680 30 681 30 682 30 683 30 684 30 685 30 686 30 687 30 688 30 689 30 690 30 691 30 692 30 693 30 694 30 695 30 696 30 697 30 698 30 699 30 700 30 701 30 702 30 703 30 704 30 705 30 706 30 707 30 708 30 709 30 710 30 711 30 712 30 713 30 714 30 715 30 716 30 717 30 718 30 719 30 720 30 721 30 722 30 723 30 724 30 725 30 726 30 727 30 728 30 729 30 730 30 731 30 732 30 733 30 734 30 735 30 736 30 737 30 738 30 739 30 740 30 741 30 742 30 743 30 744 30 745 30 746 30 747 30 748 30 749 30 750 30 751 30 752 30 753 30 754 30 755 30 756 30 757 30 758 30 759 30 760 30 761 30 762 30 763 30 764 30 765 30 766 30 767 30 768 30 769 30 770 30 771 30 772 30 773 30 774 30 775 30 776 30 777 30 778 30 779 30 780 30 781 30 782 30 783 30 784 30 785 30 786 30 787 30 788 30 789 30 790 30 791 30 792 30 793 30 794 30 795 30 796 30 797 30 798 30 799 30 800 30 801 30 802 30 803 30 804 30 805 30 806 30 807 30 808 30 809 30 810 30 811 30 812 30 813 30 814 30 815 30 816 30 817 30 818 30 819 30 820 30 821 30 822 30 823 30 824 30 825 30 826 30 827 30 828 30 829 30 830 30 831 30 832 30 833 30 834 30 835 30 836 30 837 30 838 30 839 30 840 30 841 30 842 30 843 30 844 30 845 30 846 30 847 30 848 30 849 30 850 30 851 30 852 30 853 30 854 30 855 30 856 30 857 30 858 30 859 30 860 30 861 30 862 30 863 30 864 30 865 30 866 30 867 30 868 30 869 30 870 30 871 30 872 30 873 30 874 30 875 30 876 30 877 30 878 30 879 30 880 30 881 30 882 30 883 30 884 30 885 30 886 30 887 30 888 30 889 30 890 30 891 30 892 30 893 30 894 30 895 30 896 30 897 30 898 30 899 30 900 30 901 30 902 30 903 30 904 30 905 30 906 30 907 30 908 30 909 30 910 30 911 30 912 30 913 30 914 30 915 30 916 30 917 30 918 30 919 30 920 30 921 30 922 30 923 30 924 30 925 30 926 30 927 30 928 30 929 30 930 30 931 30 932 30 933 30 934 30 935 30 936 30 937 30 938 30 939 30 940 30 941 30 942 30 943 30 944 30 945 30 946 30 947 30 948 30 949 30 950 30 951 30 952 30 953 30 954 30 955 30 956 30 957 30 958 30 959 30 960 30 961 30 962 30 963 30 964 30 965 30 966 30 967 30 968 30 969 30 970 30 971 30 972 30 973 30 974 30 975 30 976 30 977 30 978 30 979 30 980 30 981 30 982 30 983 30 984 30 985 30 986 30 987 30 988 30 989 30 990 30 991 30 992 30 993 30 994 30 995 30 996 30 997 30 998 30 999 31 0 31 1 31 2 31 3 31 4 31 5 31 6 31 7 31 8 31 9 31 10 31 11 31 12 31 13 31 14 31 15 31 16 31 17 31 18 31 19 31 20 31 21 31 22 31 23 31 24 31 25 31 26 31 27 31 28 31 29 31 30 31 31 31 32 31 33 31 34 31 35 31 36 31 37 31 38 31 39 31 40 31 41 31 42 31 43 31 44 31 45 31 46 31 47 31 48 31 49 31 50 31 51 31 52 31 53 31 54 31 55 31 56 31 57 31 58 31 59 31 60 31 61 31 62 31 63 31 64 31 65 31 66 31 67 31 68 31 69 31 70 31 71 31 72 31 73 31 74 31 75 31 76 31 77 31 78 31 79 31 80 31 81 31 82 31 83 31 84 31 85 31 86 31 87 31 88 31 89 31 90 31 91 31 92 31 93 31 94 31 95 31 96 31 97 31 98 31 99 31 100 31 101 31 102 31 103 31 104 31 105 31 106 31 107 31 108 31 109 31 110 31 111 31 112 31 113 31 114 31 115 31 116 31 117 31 118 31 119 31 120 31 121 31 122 31 123 31 124 31 125 31 126 31 127 31 128 31 129 31 130 31 131 31 132 31 133 31 134 31 135 31 136 31 137 31 138 31 139 31 140 31 141 31 142 31 143 31 144 31 145 31 146 31 147 31 148 31 149 31 150 31 151 31 152 31 153 31 154 31 155 31 156 31 157 31 158 31 159 31 160 31 161 31 162 31 163 31 164 31 165 31 166 31 167 31 168 31 169 31 170 31 171 31 172 31 173 31 174 31 175 31 176 31 177 31 178 31 179 31 180 31 181 31 182 31 183 31 184 31 185 31 186 31 187 31 188 31 189 31 190 31 191 31 192 31 193 31 194 31 195 31 196 31 197 31 198 31 199 31 200 31 201 31 202 31 203 31 204 31 205 31 206 31 207 31 208 31 209 31 210 31 211 31 212 31 213 31 214 31 215 31 216 31 217 31 218 31 219 31 220 31 221 31 222 31 223 31 224 31 225 31 226 31 227 31 228 31 229 31 230 31 231 31 232 31 233 31 234 31 235 31 236 31 237 31 238 31 239 31 240 31 241 31 242 31 243 31 244 31 245 31 246 31 247 31 248 31 249 31 250 31 251 31 252 31 253 31 254 31 255 31 256 31 257 31 258 31 259 31 260 31 261 31 262 31 263 31 264 31 265 31 266 31 267 31 268 31 269 31 270 31 271 31 272 31 273 31 274 31 275 31 276 31 277 31 278 31 279 31 280 31 281 31 282 31 283 31 284 31 285 31 286 31 287 31 288 31 289 31 290 31 291 31 292 31 293 31 294 31 295 31 296 31 297 31 298 31 299 31 300 31 301 31 302 31 303 31 304 31 305 31 306 31 307 31 308 31 309 31 310 31 311 31 312 31 313 31 314 31 315 31 316 31 317 31 318 31 319 31 320 31 321 31 322 31 323 31 324 31 325 31 326 31 327 31 328 31 329 31 330 31 331 31 332 31 333 31 334 31 335 31 336 31 337 31 338 31 339 31 340 31 341 31 342 31 343 31 344 31 345 31 346 31 347 31 348 31 349 31 350 31 351 31 352 31 353 31 354 31 355 31 356 31 357 31 358 31 359 31 360 31 361 31 362 31 363 31 364 31 365 31 366 31 367 31 368 31 369 31 370 31 371 31 372 31 373 31 374 31 375 31 376 31 377 31 378 31 379 31 380 31 381 31 382 31 383 31 384 31 385 31 386 31 387 31 388 31 389 31 390 31 391 31 392 31 393 31 394 31 395 31 396 31 397 31 398 31 399 31 400 31 401 31 402 31 403 31 404 31 405 31 406 31 407 31 408 31 409 31 410 31 411 31 412 31 413 31 414 31 415 31 416 31 417 31 418 31 419 31 420 31 421 31 422 31 423 31 424 31 425 31 426 31 427 31 428 31 429 31 430 31 431 31 432 31 433 31 434 31 435 31 436 31 437 31 438 31 439 31 440 31 441 31 442 31 443 31 444 31 445 31 446 31 447 31 448 31 449 31 450 31 451 31 452 31 453 31 454 31 455 31 456 31 457 31 458 31 459 31 460 31 461 31 462 31 463 31 464 31 465 31 466 31 467 31 468 31 469 31 470 31 471 31 472 31 473 31 474 31 475 31 476 31 477 31 478 31 479 31 480 31 481 31 482 31 483 31 484 31 485 31 486 31 487 31 488 31 489 31 490 31 491 31 492 31 493 31 494 31 495 31 496 31 497 31 498 31 499 31 500 31 501 31 502 31 503 31 504 31 505 31 506 31 507 31 508 31 509 31 510 31 511 31 512 31 513 31 514 31 515 31 516 31 517 31 518 31 519 31 520 31 521 31 522 31 523 31 524 31 525 31 526 31 527 31 528 31 529 31 530 31 531 31 532 31 533 31 534 31 535 31 536 31 537 31 538 31 539 31 540 31 541 31 542 31 543 31 544 31 545 31 546 31 547 31 548 31 549 31 550 31 551 31 552 31 553 31 554 31 555 31 556 31 557 31 558 31 559 31 560 31 561 31 562 31 563 31 564 31 565 31 566 31 567 31 568 31 569 31 570 31 571 31 572 31 573 31 574 31 575 31 576 31 577 31 578 31 579 31 580 31 581 31 582 31 583 31 584 31 585 31 586 31 587 31 588 31 589 31 590 31 591 31 592 31 593 31 594 31 595 31 596 31 597 31 598 31 599 31 600 31 601 31 602 31 603 31 604 31 605 31 606 31 607 31 608 31 609 31 610 31 611 31 612 31 613 31 614 31 615 31 616 31 617 31 618 31 619 31 620 31 621 31 622 31 623 31 624 31 625 31 626 31 627 31 628 31 629 31 630 31 631 31 632 31 633 31 634 31 635 31 636 31 637 31 638 31 639 31 640 31 641 31 642 31 643 31 644 31 645 31 646 31 647 31 648 31 649 31 650 31 651 31 652 31 653 31 654 31 655 31 656 31 657 31 658 31 659 31 660 31 661 31 662 31 663 31 664 31 665 31 666 31 667 31 668 31 669 31 670 31 671 31 672 31 673 31 674 31 675 31 676 31 677 31 678 31 679 31 680 31 681 31 682 31 683 31 684 31 685 31 686 31 687 31 688 31 689 31 690 31 691 31 692 31 693 31 694 31 695 31 696 31 697 31 698 31 699 31 700 31 701 31 702 31 703 31 704 31 705 31 706 31 707 31 708 31 709 31 710 31 711 31 712 31 713 31 714 31 715 31 716 31 717 31 718 31 719 31 720 31 721 31 722 31 723 31 724 31 725 31 726 31 727 31 728 31 729 31 730 31 731 31 732 31 733 31 734 31 735 31 736 31 737 31 738 31 739 31 740 31 741 31 742 31 743 31 744 31 745 31 746 31 747 31 748 31 749 31 750 31 751 31 752 31 753 31 754 31 755 31 756 31 757 31 758 31 759 31 760 31 761 31 762 31 763 31 764 31 765 31 766 31 767 31 768 31 769 31 770 31 771 31 772 31 773 31 774 31 775 31 776 31 777 31 778 31 779 31 780 31 781 31 782 31 783 31 784 31 785 31 786 31 787 31 788 31 789 31 790 31 791 31 792 31 793 31 794 31 795 31 796 31 797 31 798 31 799 31 800 31 801 31 802 31 803 31 804 31 805 31 806 31 807 31 808 31 809 31 810 31 811 31 812 31 813 31 814 31 815 31 816 31 817 31 818 31 819 31 820 31 821 31 822 31 823 31 824 31 825 31 826 31 827 31 828 31 829 31 830 31 831 31 832 31 833 31 834 31 835 31 836 31 837 31 838 31 839 31 840 31 841 31 842 31 843 31 844 31 845 31 846 31 847 31 848 31 849 31 850 31 851 31 852 31 853 31 854 31 855 31 856 31 857 31 858 31 859 31 860 31 861 31 862 31 863 31 864 31 865 31 866 31 867 31 868 31 869 31 870 31 871 31 872 31 873 31 874 31 875 31 876 31 877 31 878 31 879 31 880 31 881 31 882 31 883 31 884 31 885 31 886 31 887 31 888 31 889 31 890 31 891 31 892 31 893 31 894 31 895 31 896 31 897 31 898 31 899 31 900 31 901 31 902 31 903 31 904 31 905 31 906 31 907 31 908 31 909 31 910 31 911 31 912 31 913 31 914 31 915 31 916 31 917 31 918 31 919 31 920 31 921 31 922 31 923 31 924 31 925 31 926 31 927 31 928 31 929 31 930 31 931 31 932 31 933 31 934 31 935 31 936 31 937 31 938 31 939 31 940 31 941 31 942 31 943 31 944 31 945 31 946 31 947 31 948 31 949 31 950 31 951 31 952 31 953 31 954 31 955 31 956 31 957 31 958 31 959 31 960 31 961 31 962 31 963 31 964 31 965 31 966 31 967 31 968 31 969 31 970 31 971 31 972 31 973 31 974 31 975 31 976 31 977 31 978 31 979 31 980 31 981 31 982 31 983 31 984 31 985 31 986 31 987 31 988 31 989 31 990 31 991 31 992 31 993 31 994 31 995 31 996 31 997 31 998 31 999 32 0 32 1 32 2 32 3 32 4 32 5 32 6 32 7 32 8 32 9 32 10 32 11 32 12 32 13 32 14 32 15 32 16 32 17 32 18 32 19 32 20 32 21 32 22 32 23 32 24 32 25 32 26 32 27 32 28 32 29 32 30 32 31 32 32 32 33 32 34 32 35 32 36 32 37 32 38 32 39 32 40 32 41 32 42 32 43 32 44 32 45 32 46 32 47 32 48 32 49 32 50 32 51 32 52 32 53 32 54 32 55 32 56 32 57 32 58 32 59 32 60 32 61 32 62 32 63 32 64 32 65 32 66 32 67 32 68 32 69 32 70 32 71 32 72 32 73 32 74 32 75 32 76 32 77 32 78 32 79 32 80 32 81 32 82 32 83 32 84 32 85 32 86 32 87 32 88 32 89 32 90 32 91 32 92 32 93 32 94 32 95 32 96 32 97 32 98 32 99 32 100 32 101 32 102 32 103 32 104 32 105 32 106 32 107 32 108 32 109 32 110 32 111 32 112 32 113 32 114 32 115 32 116 32 117 32 118 32 119 32 120 32 121 32 122 32 123 32 124 32 125 32 126 32 127 32 128 32 129 32 130 32 131 32 132 32 133 32 134 32 135 32 136 32 137 32 138 32 139 32 140 32 141 32 142 32 143 32 144 32 145 32 146 32 147 32 148 32 149 32 150 32 151 32 152 32 153 32 154 32 155 32 156 32 157 32 158 32 159 32 160 32 161 32 162 32 163 32 164 32 165 32 166 32 167 32 168 32 169 32 170 32 171 32 172 32 173 32 174 32 175 32 176 32 177 32 178 32 179 32 180 32 181 32 182 32 183 32 184 32 185 32 186 32 187 32 188 32 189 32 190 32 191 32 192 32 193 32 194 32 195 32 196 32 197 32 198 32 199 32 200 32 201 32 202 32 203 32 204 32 205 32 206 32 207 32 208 32 209 32 210 32 211 32 212 32 213 32 214 32 215 32 216 32 217 32 218 32 219 32 220 32 221 32 222 32 223 32 224 32 225 32 226 32 227 32 228 32 229 32 230 32 231 32 232 32 233 32 234 32 235 32 236 32 237 32 238 32 239 32 240 32 241 32 242 32 243 32 244 32 245 32 246 32 247 32 248 32 249 32 250 32 251 32 252 32 253 32 254 32 255 32 256 32 257 32 258 32 259 32 260 32 261 32 262 32 263 32 264 32 265 32 266 32 267 32 268 32 269 32 270 32 271 32 272 32 273 32 274 32 275 32 276 32 277 32 278 32 279 32 280 32 281 32 282 32 283 32 284 32 285 32 286 32 287 32 288 32 289 32 290 32 291 32 292 32 293 32 294 32 295 32 296 32 297 32 298 32 299 32 300 32 301 32 302 32 303 32 304 32 305 32 306 32 307 32 308 32 309 32 310 32 311 32 312 32 313 32 314 32 315 32 316 32 317 32 318 32 319 32 320 32 321 32 322 32 323 32 324 32 325 32 326 32 327 32 328 32 329 32 330 32 331 32 332 32 333 32 334 32 335 32 336 32 337 32 338 32 339 32 340 32 341 32 342 32 343 32 344 32 345 32 346 32 347 32 348 32 349 32 350 32 351 32 352 32 353 32 354 32 355 32 356 32 357 32 358 32 359 32 360 32 361 32 362 32 363 32 364 32 365 32 366 32 367 32 368 32 369 32 370 32 371 32 372 32 373 32 374 32 375 32 376 32 377 32 378 32 379 32 380 32 381 32 382 32 383 32 384 32 385 32 386 32 387 32 388 32 389 32 390 32 391 32 392 32 393 32 394 32 395 32 396 32 397 32 398 32 399 32 400 32 401 32 402 32 403 32 404 32 405 32 406 32 407 32 408 32 409 32 410 32 411 32 412 32 413 32 414 32 415 32 416 32 417 32 418 32 419 32 420 32 421 32 422 32 423 32 424 32 425 32 426 32 427 32 428 32 429 32 430 32 431 32 432 32 433 32 434 32 435 32 436 32 437 32 438 32 439 32 440 32 441 32 442 32 443 32 444 32 445 32 446 32 447 32 448 32 449 32 450 32 451 32 452 32 453 32 454 32 455 32 456 32 457 32 458 32 459 32 460 32 461 32 462 32 463 32 464 32 465 32 466 32 467 32 468 32 469 32 470 32 471 32 472 32 473 32 474 32 475 32 476 32 477 32 478 32 479 32 480 32 481 32 482 32 483 32 484 32 485 32 486 32 487 32 488 32 489 32 490 32 491 32 492 32 493 32 494 32 495 32 496 32 497 32 498 32 499 32 500 32 501 32 502 32 503 32 504 32 505 32 506 32 507 32 508 32 509 32 510 32 511 32 512 32 513 32 514 32 515 32 516 32 517 32 518 32 519 32 520 32 521 32 522 32 523 32 524 32 525 32 526 32 527 32 528 32 529 32 530 32 531 32 532 32 533 32 534 32 535 32 536 32 537 32 538 32 539 32 540 32 541 32 542 32 543 32 544 32 545 32 546 32 547 32 548 32 549 32 550 32 551 32 552 32 553 32 554 32 555 32 556 32 557 32 558 32 559 32 560 32 561 32 562 32 563 32 564 32 565 32 566 32 567 32 568 32 569 32 570 32 571 32 572 32 573 32 574 32 575 32 576 32 577 32 578 32 579 32 580 32 581 32 582 32 583 32 584 32 585 32 586 32 587 32 588 32 589 32 590 32 591 32 592 32 593 32 594 32 595 32 596 32 597 32 598 32 599 32 600 32 601 32 602 32 603 32 604 32 605 32 606 32 607 32 608 32 609 32 610 32 611 32 612 32 613 32 614 32 615 32 616 32 617 32 618 32 619 32 620 32 621 32 622 32 623 32 624 32 625 32 626 32 627 32 628 32 629 32 630 32 631 32 632 32 633 32 634 32 635 32 636 32 637 32 638 32 639 32 640 32 641 32 642 32 643 32 644 32 645 32 646 32 647 32 648 32 649 32 650 32 651 32 652 32 653 32 654 32 655 32 656 32 657 32 658 32 659 32 660 32 661 32 662 32 663 32 664 32 665 32 666 32 667 32 668 32 669 32 670 32 671 32 672 32 673 32 674 32 675 32 676 32 677 32 678 32 679 32 680 32 681 32 682 32 683 32 684 32 685 32 686 32 687 32 688 32 689 32 690 32 691 32 692 32 693 32 694 32 695 32 696 32 697 32 698 32 699 32 700 32 701 32 702 32 703 32 704 32 705 32 706 32 707 32 708 32 709 32 710 32 711 32 712 32 713 32 714 32 715 32 716 32 717 32 718 32 719 32 720 32 721 32 722 32 723 32 724 32 725 32 726 32 727 32 728 32 729 32 730 32 731 32 732 32 733 32 734 32 735 32 736 32 737 32 738 32 739 32 740 32 741 32 742 32 743 32 744 32 745 32 746 32 747 32 748 32 749 32 750 32 751 32 752 32 753 32 754 32 755 32 756 32 757 32 758 32 759 32 760 32 761 32 762 32 763 32 764 32 765 32 766 32 767 32 768 32 769 32 770 32 771 32 772 32 773 32 774 32 775 32 776 32 777 32 778 32 779 32 780 32 781 32 782 32 783 32 784 32 785 32 786 32 787 32 788 32 789 32 790 32 791 32 792 32 793 32 794 32 795 32 796 32 797 32 798 32 799 32 800 32 801 32 802 32 803 32 804 32 805 32 806 32 807 32 808 32 809 32 810 32 811 32 812 32 813 32 814 32 815 32 816 32 817 32 818 32 819 32 820 32 821 32 822 32 823 32 824 32 825 32 826 32 827 32 828 32 829 32 830 32 831 32 832 32 833 32 834 32 835 32 836 32 837 32 838 32 839 32 840 32 841 32 842 32 843 32 844 32 845 32 846 32 847 32 848 32 849 32 850 32 851 32 852 32 853 32 854 32 855 32 856 32 857 32 858 32 859 32 860 32 861 32 862 32 863 32 864 32 865 32 866 32 867 32 868 32 869 32 870 32 871 32 872 32 873 32 874 32 875 32 876 32 877 32 878 32 879 32 880 32 881 32 882 32 883 32 884 32 885 32 886 32 887 32 888 32 889 32 890 32 891 32 892 32 893 32 894 32 895 32 896 32 897 32 898 32 899 32 900 32 901 32 902 32 903 32 904 32 905 32 906 32 907 32 908 32 909 32 910 32 911 32 912 32 913 32 914 32 915 32 916 32 917 32 918 32 919 32 920 32 921 32 922 32 923 32 924 32 925 32 926 32 927 32 928 32 929 32 930 32 931 32 932 32 933 32 934 32 935 32 936 32 937 32 938 32 939 32 940 32 941 32 942 32 943 32 944 32 945 32 946 32 947 32 948 32 949 32 950 32 951 32 952 32 953 32 954 32 955 32 956 32 957 32 958 32 959 32 960 32 961 32 962 32 963 32 964 32 965 32 966 32 967 32 968 32 969 32 970 32 971 32 972 32 973 32 974 32 975 32 976 32 977 32 978 32 979 32 980 32 981 32 982 32 983 32 984 32 985 32 986 32 987 32 988 32 989 32 990 32 991 32 992 32 993 32 994 32 995 32 996 32 997 32 998 32 999 33 0 33 1 33 2 33 3 33 4 33 5 33 6 33 7 33 8 33 9 33 10 33 11 33 12 33 13 33 14 33 15 33 16 33 17 33 18 33 19 33 20 33 21 33 22 33 23 33 24 33 25 33 26 33 27 33 28 33 29 33 30 33 31 33 32 33 33 33 34 33 35 33 36 33 37 33 38 33 39 33 40 33 41 33 42 33 43 33 44 33 45 33 46 33 47 33 48 33 49 33 50 33 51 33 52 33 53 33 54 33 55 33 56 33 57 33 58 33 59 33 60 33 61 33 62 33 63 33 64 33 65 33 66 33 67 33 68 33 69 33 70 33 71 33 72 33 73 33 74 33 75 33 76 33 77 33 78 33 79 33 80 33 81 33 82 33 83 33 84 33 85 33 86 33 87 33 88 33 89 33 90 33 91 33 92 33 93 33 94 33 95 33 96 33 97 33 98 33 99 33 100 33 101 33 102 33 103 33 104 33 105 33 106 33 107 33 108 33 109 33 110 33 111 33 112 33 113 33 114 33 115 33 116 33 117 33 118 33 119 33 120 33 121 33 122 33 123 33 124 33 125 33 126 33 127 33 128 33 129 33 130 33 131 33 132 33 133 33 134 33 135 33 136 33 137 33 138 33 139 33 140 33 141 33 142 33 143 33 144 33 145 33 146 33 147 33 148 33 149 33 150 33 151 33 152 33 153 33 154 33 155 33 156 33 157 33 158 33 159 33 160 33 161 33 162 33 163 33 164 33 165 33 166 33 167 33 168 33 169 33 170 33 171 33 172 33 173 33 174 33 175 33 176 33 177 33 178 33 179 33 180 33 181 33 182 33 183 33 184 33 185 33 186 33 187 33 188 33 189 33 190 33 191 33 192 33 193 33 194 33 195 33 196 33 197 33 198 33 199 33 200 33 201 33 202 33 203 33 204 33 205 33 206 33 207 33 208 33 209 33 210 33 211 33 212 33 213 33 214 33 215 33 216 33 217 33 218 33 219 33 220 33 221 33 222 33 223 33 224 33 225 33 226 33 227 33 228 33 229 33 230 33 231 33 232 33 233 33 234 33 235 33 236 33 237 33 238 33 239 33 240 33 241 33 242 33 243 33 244 33 245 33 246 33 247 33 248 33 249 33 250 33 251 33 252 33 253 33 254 33 255 33 256 33 257 33 258 33 259 33 260 33 261 33 262 33 263 33 264 33 265 33 266 33 267 33 268 33 269 33 270 33 271 33 272 33 273 33 274 33 275 33 276 33 277 33 278 33 279 33 280 33 281 33 282 33 283 33 284 33 285 33 286 33 287 33 288 33 289 33 290 33 291 33 292 33 293 33 294 33 295 33 296 33 297 33 298 33 299 33 300 33 301 33 302 33 303 33 304 33 305 33 306 33 307 33 308 33 309 33 310 33 311 33 312 33 313 33 314 33 315 33 316 33 317 33 318 33 319 33 320 33 321 33 322 33 323 33 324 33 325 33 326 33 327 33 328 33 329 33 330 33 331 33 332 33 333 33 334 33 335 33 336 33 337 33 338 33 339 33 340 33 341 33 342 33 343 33 344 33 345 33 346 33 347 33 348 33 349 33 350 33 351 33 352 33 353 33 354 33 355 33 356 33 357 33 358 33 359 33 360 33 361 33 362 33 363 33 364 33 365 33 366 33 367 33 368 33 369 33 370 33 371 33 372 33 373 33 374 33 375 33 376 33 377 33 378 33 379 33 380 33 381 33 382 33 383 33 384 33 385 33 386 33 387 33 388 33 389 33 390 33 391 33 392 33 393 33 394 33 395 33 396 33 397 33 398 33 399 33 400 33 401 33 402 33 403 33 404 33 405 33 406 33 407 33 408 33 409 33 410 33 411 33 412 33 413 33 414 33 415 33 416 33 417 33 418 33 419 33 420 33 421 33 422 33 423 33 424 33 425 33 426 33 427 33 428 33 429 33 430 33 431 33 432 33 433 33 434 33 435 33 436 33 437 33 438 33 439 33 440 33 441 33 442 33 443 33 444 33 445 33 446 33 447 33 448 33 449 33 450 33 451 33 452 33 453 33 454 33 455 33 456 33 457 33 458 33 459 33 460 33 461 33 462 33 463 33 464 33 465 33 466 33 467 33 468 33 469 33 470 33 471 33 472 33 473 33 474 33 475 33 476 33 477 33 478 33 479 33 480 33 481 33 482 33 483 33 484 33 485 33 486 33 487 33 488 33 489 33 490 33 491 33 492 33 493 33 494 33 495 33 496 33 497 33 498 33 499 33 500 33 501 33 502 33 503 33 504 33 505 33 506 33 507 33 508 33 509 33 510 33 511 33 512 33 513 33 514 33 515 33 516 33 517 33 518 33 519 33 520 33 521 33 522 33 523 33 524 33 525 33 526 33 527 33 528 33 529 33 530 33 531 33 532 33 533 33 534 33 535 33 536 33 537 33 538 33 539 33 540 33 541 33 542 33 543 33 544 33 545 33 546 33 547 33 548 33 549 33 550 33 551 33 552 33 553 33 554 33 555 33 556 33 557 33 558 33 559 33 560 33 561 33 562 33 563 33 564 33 565 33 566 33 567 33 568 33 569 33 570 33 571 33 572 33 573 33 574 33 575 33 576 33 577 33 578 33 579 33 580 33 581 33 582 33 583 33 584 33 585 33 586 33 587 33 588 33 589 33 590 33 591 33 592 33 593 33 594 33 595 33 596 33 597 33 598 33 599 33 600 33 601 33 602 33 603 33 604 33 605 33 606 33 607 33 608 33 609 33 610 33 611 33 612 33 613 33 614 33 615 33 616 33 617 33 618 33 619 33 620 33 621 33 622 33 623 33 624 33 625 33 626 33 627 33 628 33 629 33 630 33 631 33 632 33 633 33 634 33 635 33 636 33 637 33 638 33 639 33 640 33 641 33 642 33 643 33 644 33 645 33 646 33 647 33 648 33 649 33 650 33 651 33 652 33 653 33 654 33 655 33 656 33 657 33 658 33 659 33 660 33 661 33 662 33 663 33 664 33 665 33 666 33 667 33 668 33 669 33 670 33 671 33 672 33 673 33 674 33 675 33 676 33 677 33 678 33 679 33 680 33 681 33 682 33 683 33 684 33 685 33 686 33 687 33 688 33 689 33 690 33 691 33 692 33 693 33 694 33 695 33 696 33 697 33 698 33 699 33 700 33 701 33 702 33 703 33 704 33 705 33 706 33 707 33 708 33 709 33 710 33 711 33 712 33 713 33 714 33 715 33 716 33 717 33 718 33 719 33 720 33 721 33 722 33 723 33 724 33 725 33 726 33 727 33 728 33 729 33 730 33 731 33 732 33 733 33 734 33 735 33 736 33 737 33 738 33 739 33 740 33 741 33 742 33 743 33 744 33 745 33 746 33 747 33 748 33 749 33 750 33 751 33 752 33 753 33 754 33 755 33 756 33 757 33 758 33 759 33 760 33 761 33 762 33 763 33 764 33 765 33 766 33 767 33 768 33 769 33 770 33 771 33 772 33 773 33 774 33 775 33 776 33 777 33 778 33 779 33 780 33 781 33 782 33 783 33 784 33 785 33 786 33 787 33 788 33 789 33 790 33 791 33 792 33 793 33 794 33 795 33 796 33 797 33 798 33 799 33 800 33 801 33 802 33 803 33 804 33 805 33 806 33 807 33 808 33 809 33 810 33 811 33 812 33 813 33 814 33 815 33 816 33 817 33 818 33 819 33 820 33 821 33 822 33 823 33 824 33 825 33 826 33 827 33 828 33 829 33 830 33 831 33 832 33 833 33 834 33 835 33 836 33 837 33 838 33 839 33 840 33 841 33 842 33 843 33 844 33 845 33 846 33 847 33 848 33 849 33 850 33 851 33 852 33 853 33 854 33 855 33 856 33 857 33 858 33 859 33 860 33 861 33 862 33 863 33 864 33 865 33 866 33 867 33 868 33 869 33 870 33 871 33 872 33 873 33 874 33 875 33 876 33 877 33 878 33 879 33 880 33 881 33 882 33 883 33 884 33 885 33 886 33 887 33 888 33 889 33 890 33 891 33 892 33 893 33 894 33 895 33 896 33 897 33 898 33 899 33 900 33 901 33 902 33 903 33 904 33 905 33 906 33 907 33 908 33 909 33 910 33 911 33 912 33 913 33 914 33 915 33 916 33 917 33 918 33 919 33 920 33 921 33 922 33 923 33 924 33 925 33 926 33 927 33 928 33 929 33 930 33 931 33 932 33 933 33 934 33 935 33 936 33 937 33 938 33 939 33 940 33 941 33 942 33 943 33 944 33 945 33 946 33 947 33 948 33 949 33 950 33 951 33 952 33 953 33 954 33 955 33 956 33 957 33 958 33 959 33 960 33 961 33 962 33 963 33 964 33 965 33 966 33 967 33 968 33 969 33 970 33 971 33 972 33 973 33 974 33 975 33 976 33 977 33 978 33 979 33 980 33 981 33 982 33 983 33 984 33 985 33 986 33 987 33 988 33 989 33 990 33 991 33 992 33 993 33 994 33 995 33 996 33 997 33 998 33 999 34 0 34 1 34 2 34 3 34 4 34 5 34 6 34 7 34 8 34 9 34 10 34 11 34 12 34 13 34 14 34 15 34 16 34 17 34 18 34 19 34 20 34 21 34 22 34 23 34 24 34 25 34 26 34 27 34 28 34 29 34 30 34 31 34 32 34 33 34 34 34 35 34 36 34 37 34 38 34 39 34 40 34 41 34 42 34 43 34 44 34 45 34 46 34 47 34 48 34 49 34 50 34 51 34 52 34 53 34 54 34 55 34 56 34 57 34 58 34 59 34 60 34 61 34 62 34 63 34 64 34 65 34 66 34 67 34 68 34 69 34 70 34 71 34 72 34 73 34 74 34 75 34 76 34 77 34 78 34 79 34 80 34 81 34 82 34 83 34 84 34 85 34 86 34 87 34 88 34 89 34 90 34 91 34 92 34 93 34 94 34 95 34 96 34 97 34 98 34 99 34 100 34 101 34 102 34 103 34 104 34 105 34 106 34 107 34 108 34 109 34 110 34 111 34 112 34 113 34 114 34 115 34 116 34 117 34 118 34 119 34 120 34 121 34 122 34 123 34 124 34 125 34 126 34 127 34 128 34 129 34 130 34 131 34 132 34 133 34 134 34 135 34 136 34 137 34 138 34 139 34 140 34 141 34 142 34 143 34 144 34 145 34 146 34 147 34 148 34 149 34 150 34 151 34 152 34 153 34 154 34 155 34 156 34 157 34 158 34 159 34 160 34 161 34 162 34 163 34 164 34 165 34 166 34 167 34 168 34 169 34 170 34 171 34 172 34 173 34 174 34 175 34 176 34 177 34 178 34 179 34 180 34 181 34 182 34 183 34 184 34 185 34 186 34 187 34 188 34 189 34 190 34 191 34 192 34 193 34 194 34 195 34 196 34 197 34 198 34 199 34 200 34 201 34 202 34 203 34 204 34 205 34 206 34 207 34 208 34 209 34 210 34 211 34 212 34 213 34 214 34 215 34 216 34 217 34 218 34 219 34 220 34 221 34 222 34 223 34 224 34 225 34 226 34 227 34 228 34 229 34 230 34 231 34 232 34 233 34 234 34 235 34 236 34 237 34 238 34 239 34 240 34 241 34 242 34 243 34 244 34 245 34 246 34 247 34 248 34 249 34 250 34 251 34 252 34 253 34 254 34 255 34 256 34 257 34 258 34 259 34 260 34 261 34 262 34 263 34 264 34 265 34 266 34 267 34 268 34 269 34 270 34 271 34 272 34 273 34 274 34 275 34 276 34 277 34 278 34 279 34 280 34 281 34 282 34 283 34 284 34 285 34 286 34 287 34 288 34 289 34 290 34 291 34 292 34 293 34 294 34 295 34 296 34 297 34 298 34 299 34 300 34 301 34 302 34 303 34 304 34 305 34 306 34 307 34 308 34 309 34 310 34 311 34 312 34 313 34 314 34 315 34 316 34 317 34 318 34 319 34 320 34 321 34 322 34 323 34 324 34 325 34 326 34 327 34 328 34 329 34 330 34 331 34 332 34 333 34 334 34 335 34 336 34 337 34 338 34 339 34 340 34 341 34 342 34 343 34 344 34 345 34 346 34 347 34 348 34 349 34 350 34 351 34 352 34 353 34 354 34 355 34 356 34 357 34 358 34 359 34 360 34 361 34 362 34 363 34 364 34 365 34 366 34 367 34 368 34 369 34 370 34 371 34 372 34 373 34 374 34 375 34 376 34 377 34 378 34 379 34 380 34 381 34 382 34 383 34 384 34 385 34 386 34 387 34 388 34 389 34 390 34 391 34 392 34 393 34 394 34 395 34 396 34 397 34 398 34 399 34 400 34 401 34 402 34 403 34 404 34 405 34 406 34 407 34 408 34 409 34 410 34 411 34 412 34 413 34 414 34 415 34 416 34 417 34 418 34 419 34 420 34 421 34 422 34 423 34 424 34 425 34 426 34 427 34 428 34 429 34 430 34 431 34 432 34 433 34 434 34 435 34 436 34 437 34 438 34 439 34 440 34 441 34 442 34 443 34 444 34 445 34 446 34 447 34 448 34 449 34 450 34 451 34 452 34 453 34 454 34 455 34 456 34 457 34 458 34 459 34 460 34 461 34 462 34 463 34 464 34 465 34 466 34 467 34 468 34 469 34 470 34 471 34 472 34 473 34 474 34 475 34 476 34 477 34 478 34 479 34 480 34 481 34 482 34 483 34 484 34 485 34 486 34 487 34 488 34 489 34 490 34 491 34 492 34 493 34 494 34 495 34 496 34 497 34 498 34 499 34 500 34 501 34 502 34 503 34 504 34 505 34 506 34 507 34 508 34 509 34 510 34 511 34 512 34 513 34 514 34 515 34 516 34 517 34 518 34 519 34 520 34 521 34 522 34 523 34 524 34 525 34 526 34 527 34 528 34 529 34 530 34 531 34 532 34 533 34 534 34 535 34 536 34 537 34 538 34 539 34 540 34 541 34 542 34 543 34 544 34 545 34 546 34 547 34 548 34 549 34 550 34 551 34 552 34 553 34 554 34 555 34 556 34 557 34 558 34 559 34 560 34 561 34 562 34 563 34 564 34 565 34 566 34 567 34 568 34 569 34 570 34 571 34 572 34 573 34 574 34 575 34 576 34 577 34 578 34 579 34 580 34 581 34 582 34 583 34 584 34 585 34 586 34 587 34 588 34 589 34 590 34 591 34 592 34 593 34 594 34 595 34 596 34 597 34 598 34 599 34 600 34 601 34 602 34 603 34 604 34 605 34 606 34 607 34 608 34 609 34 610 34 611 34 612 34 613 34 614 34 615 34 616 34 617 34 618 34 619 34 620 34 621 34 622 34 623 34 624 34 625 34 626 34 627 34 628 34 629 34 630 34 631 34 632 34 633 34 634 34 635 34 636 34 637 34 638 34 639 34 640 34 641 34 642 34 643 34 644 34 645 34 646 34 647 34 648 34 649 34 650 34 651 34 652 34 653 34 654 34 655 34 656 34 657 34 658 34 659 34 660 34 661 34 662 34 663 34 664 34 665 34 666 34 667 34 668 34 669 34 670 34 671 34 672 34 673 34 674 34 675 34 676 34 677 34 678 34 679 34 680 34 681 34 682 34 683 34 684 34 685 34 686 34 687 34 688 34 689 34 690 34 691 34 692 34 693 34 694 34 695 34 696 34 697 34 698 34 699 34 700 34 701 34 702 34 703 34 704 34 705 34 706 34 707 34 708 34 709 34 710 34 711 34 712 34 713 34 714 34 715 34 716 34 717 34 718 34 719 34 720 34 721 34 722 34 723 34 724 34 725 34 726 34 727 34 728 34 729 34 730 34 731 34 732 34 733 34 734 34 735 34 736 34 737 34 738 34 739 34 740 34 741 34 742 34 743 34 744 34 745 34 746 34 747 34 748 34 749 34 750 34 751 34 752 34 753 34 754 34 755 34 756 34 757 34 758 34 759 34 760 34 761 34 762 34 763 34 764 34 765 34 766 34 767 34 768 34 769 34 770 34 771 34 772 34 773 34 774 34 775 34 776 34 777 34 778 34 779 34 780 34 781 34 782 34 783 34 784 34 785 34 786 34 787 34 788 34 789 34 790 34 791 34 792 34 793 34 794 34 795 34 796 34 797 34 798 34 799 34 800 34 801 34 802 34 803 34 804 34 805 34 806 34 807 34 808 34 809 34 810 34 811 34 812 34 813 34 814 34 815 34 816 34 817 34 818 34 819 34 820 34 821 34 822 34 823 34 824 34 825 34 826 34 827 34 828 34 829 34 830 34 831 34 832 34 833 34 834 34 835 34 836 34 837 34 838 34 839 34 840 34 841 34 842 34 843 34 844 34 845 34 846 34 847 34 848 34 849 34 850 34 851 34 852 34 853 34 854 34 855 34 856 34 857 34 858 34 859 34 860 34 861 34 862 34 863 34 864 34 865 34 866 34 867 34 868 34 869 34 870 34 871 34 872 34 873 34 874 34 875 34 876 34 877 34 878 34 879 34 880 34 881 34 882 34 883 34 884 34 885 34 886 34 887 34 888 34 889 34 890 34 891 34 892 34 893 34 894 34 895 34 896 34 897 34 898 34 899 34 900 34 901 34 902 34 903 34 904 34 905 34 906 34 907 34 908 34 909 34 910 34 911 34 912 34 913 34 914 34 915 34 916 34 917 34 918 34 919 34 920 34 921 34 922 34 923 34 924 34 925 34 926 34 927 34 928 34 929 34 930 34 931 34 932 34 933 34 934 34 935 34 936 34 937 34 938 34 939 34 940 34 941 34 942 34 943 34 944 34 945 34 946 34 947 34 948 34 949 34 950 34 951 34 952 34 953 34 954 34 955 34 956 34 957 34 958 34 959 34 960 34 961 34 962 34 963 34 964 34 965 34 966 34 967 34 968 34 969 34 970 34 971 34 972 34 973 34 974 34 975 34 976 34 977 34 978 34 979 34 980 34 981 34 982 34 983 34 984 34 985 34 986 34 987 34 988 34 989 34 990 34 991 34 992 34 993 34 994 34 995 34 996 34 997 34 998 34 999 35 0 35 1 35 2 35 3 35 4 35 5 35 6 35 7 35 8 35 9 35 10 35 11 35 12 35 13 35 14 35 15 35 16 35 17 35 18 35 19 35 20 35 21 35 22 35 23 35 24 35 25 35 26 35 27 35 28 35 29 35 30 35 31 35 32 35 33 35 34 35 35 35 36 35 37 35 38 35 39 35 40 35 41 35 42 35 43 35 44 35 45 35 46 35 47 35 48 35 49 35 50 35 51 35 52 35 53 35 54 35 55 35 56 35 57 35 58 35 59 35 60 35 61 35 62 35 63 35 64 35 65 35 66 35 67 35 68 35 69 35 70 35 71 35 72 35 73 35 74 35 75 35 76 35 77 35 78 35 79 35 80 35 81 35 82 35 83 35 84 35 85 35 86 35 87 35 88 35 89 35 90 35 91 35 92 35 93 35 94 35 95 35 96 35 97 35 98 35 99 35 100 35 101 35 102 35 103 35 104 35 105 35 106 35 107 35 108 35 109 35 110 35 111 35 112 35 113 35 114 35 115 35 116 35 117 35 118 35 119 35 120 35 121 35 122 35 123 35 124 35 125 35 126 35 127 35 128 35 129 35 130 35 131 35 132 35 133 35 134 35 135 35 136 35 137 35 138 35 139 35 140 35 141 35 142 35 143 35 144 35 145 35 146 35 147 35 148 35 149 35 150 35 151 35 152 35 153 35 154 35 155 35 156 35 157 35 158 35 159 35 160 35 161 35 162 35 163 35 164 35 165 35 166 35 167 35 168 35 169 35 170 35 171 35 172 35 173 35 174 35 175 35 176 35 177 35 178 35 179 35 180 35 181 35 182 35 183 35 184 35 185 35 186 35 187 35 188 35 189 35 190 35 191 35 192 35 193 35 194 35 195 35 196 35 197 35 198 35 199 35 200 35 201 35 202 35 203 35 204 35 205 35 206 35 207 35 208 35 209 35 210 35 211 35 212 35 213 35 214 35 215 35 216 35 217 35 218 35 219 35 220 35 221 35 222 35 223 35 224 35 225 35 226 35 227 35 228 35 229 35 230 35 231 35 232 35 233 35 234 35 235 35 236 35 237 35 238 35 239 35 240 35 241 35 242 35 243 35 244 35 245 35 246 35 247 35 248 35 249 35 250 35 251 35 252 35 253 35 254 35 255 35 256 35 257 35 258 35 259 35 260 35 261 35 262 35 263 35 264 35 265 35 266 35 267 35 268 35 269 35 270 35 271 35 272 35 273 35 274 35 275 35 276 35 277 35 278 35 279 35 280 35 281 35 282 35 283 35 284 35 285 35 286 35 287 35 288 35 289 35 290 35 291 35 292 35 293 35 294 35 295 35 296 35 297 35 298 35 299 35 300 35 301 35 302 35 303 35 304 35 305 35 306 35 307 35 308 35 309 35 310 35 311 35 312 35 313 35 314 35 315 35 316 35 317 35 318 35 319 35 320 35 321 35 322 35 323 35 324 35 325 35 326 35 327 35 328 35 329 35 330 35 331 35 332 35 333 35 334 35 335 35 336 35 337 35 338 35 339 35 340 35 341 35 342 35 343 35 344 35 345 35 346 35 347 35 348 35 349 35 350 35 351 35 352 35 353 35 354 35 355 35 356 35 357 35 358 35 359 35 360 35 361 35 362 35 363 35 364 35 365 35 366 35 367 35 368 35 369 35 370 35 371 35 372 35 373 35 374 35 375 35 376 35 377 35 378 35 379 35 380 35 381 35 382 35 383 35 384 35 385 35 386 35 387 35 388 35 389 35 390 35 391 35 392 35 393 35 394 35 395 35 396 35 397 35 398 35 399 35 400 35 401 35 402 35 403 35 404 35 405 35 406 35 407 35 408 35 409 35 410 35 411 35 412 35 413 35 414 35 415 35 416 35 417 35 418 35 419 35 420 35 421 35 422 35 423 35 424 35 425 35 426 35 427 35 428 35 429 35 430 35 431 35 432 35 433 35 434 35 435 35 436 35 437 35 438 35 439 35 440 35 441 35 442 35 443 35 444 35 445 35 446 35 447 35 448 35 449 35 450 35 451 35 452 35 453 35 454 35 455 35 456 35 457 35 458 35 459 35 460 35 461 35 462 35 463 35 464 35 465 35 466 35 467 35 468 35 469 35 470 35 471 35 472 35 473 35 474 35 475 35 476 35 477 35 478 35 479 35 480 35 481 35 482 35 483 35 484 35 485 35 486 35 487 35 488 35 489 35 490 35 491 35 492 35 493 35 494 35 495 35 496 35 497 35 498 35 499 35 500 35 501 35 502 35 503 35 504 35 505 35 506 35 507 35 508 35 509 35 510 35 511 35 512 35 513 35 514 35 515 35 516 35 517 35 518 35 519 35 520 35 521 35 522 35 523 35 524 35 525 35 526 35 527 35 528 35 529 35 530 35 531 35 532 35 533 35 534 35 535 35 536 35 537 35 538 35 539 35 540 35 541 35 542 35 543 35 544 35 545 35 546 35 547 35 548 35 549 35 550 35 551 35 552 35 553 35 554 35 555 35 556 35 557 35 558 35 559 35 560 35 561 35 562 35 563 35 564 35 565 35 566 35 567 35 568 35 569 35 570 35 571 35 572 35 573 35 574 35 575 35 576 35 577 35 578 35 579 35 580 35 581 35 582 35 583 35 584 35 585 35 586 35 587 35 588 35 589 35 590 35 591 35 592 35 593 35 594 35 595 35 596 35 597 35 598 35 599 35 600 35 601 35 602 35 603 35 604 35 605 35 606 35 607 35 608 35 609 35 610 35 611 35 612 35 613 35 614 35 615 35 616 35 617 35 618 35 619 35 620 35 621 35 622 35 623 35 624 35 625 35 626 35 627 35 628 35 629 35 630 35 631 35 632 35 633 35 634 35 635 35 636 35 637 35 638 35 639 35 640 35 641 35 642 35 643 35 644 35 645 35 646 35 647 35 648 35 649 35 650 35 651 35 652 35 653 35 654 35 655 35 656 35 657 35 658 35 659 35 660 35 661 35 662 35 663 35 664 35 665 35 666 35 667 35 668 35 669 35 670 35 671 35 672 35 673 35 674 35 675 35 676 35 677 35 678 35 679 35 680 35 681 35 682 35 683 35 684 35 685 35 686 35 687 35 688 35 689 35 690 35 691 35 692 35 693 35 694 35 695 35 696 35 697 35 698 35 699 35 700 35 701 35 702 35 703 35 704 35 705 35 706 35 707 35 708 35 709 35 710 35 711 35 712 35 713 35 714 35 715 35 716 35 717 35 718 35 719 35 720 35 721 35 722 35 723 35 724 35 725 35 726 35 727 35 728 35 729 35 730 35 731 35 732 35 733 35 734 35 735 35 736 35 737 35 738 35 739 35 740 35 741 35 742 35 743 35 744 35 745 35 746 35 747 35 748 35 749 35 750 35 751 35 752 35 753 35 754 35 755 35 756 35 757 35 758 35 759 35 760 35 761 35 762 35 763 35 764 35 765 35 766 35 767 35 768 35 769 35 770 35 771 35 772 35 773 35 774 35 775 35 776 35 777 35 778 35 779 35 780 35 781 35 782 35 783 35 784 35 785 35 786 35 787 35 788 35 789 35 790 35 791 35 792 35 793 35 794 35 795 35 796 35 797 35 798 35 799 35 800 35 801 35 802 35 803 35 804 35 805 35 806 35 807 35 808 35 809 35 810 35 811 35 812 35 813 35 814 35 815 35 816 35 817 35 818 35 819 35 820 35 821 35 822 35 823 35 824 35 825 35 826 35 827 35 828 35 829 35 830 35 831 35 832 35 833 35 834 35 835 35 836 35 837 35 838 35 839 35 840 35 841 35 842 35 843 35 844 35 845 35 846 35 847 35 848 35 849 35 850 35 851 35 852 35 853 35 854 35 855 35 856 35 857 35 858 35 859 35 . KeyboardInterrupt Traceback (most recent call last) /vscode/ahadsblog/_notebooks/2023-03-22-DS-space_time_complexity.ipynb Cell 22 in &lt;cell line: 2&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-22-DS-space_time_complexity.ipynb#X30sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; for i in numbers: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-22-DS-space_time_complexity.ipynb#X30sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; for j in numbers: -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-22-DS-space_time_complexity.ipynb#X30sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; print(i,j) File ~/anaconda3/lib/python3.9/site-packages/ipykernel/iostream.py:531, in OutStream.write(self, string) 529 is_child = (not self._is_master_process()) 530 # only touch the buffer in the IO thread to avoid races --&gt; 531 self.pub_thread.schedule(lambda: self._buffer.write(string)) 532 if is_child: 533 # mp.Pool cannot be trusted to flush promptly (or ever), 534 # and this helps. 535 if self._subprocess_flush_pending: File ~/anaconda3/lib/python3.9/site-packages/ipykernel/iostream.py:216, in IOPubThread.schedule(self, f) 214 self._events.append(f) 215 # wake event thread (message content is ignored) --&gt; 216 self._event_pipe.send(b&#39;&#39;) 217 else: 218 f() File ~/anaconda3/lib/python3.9/site-packages/zmq/sugar/socket.py:547, in Socket.send(self, data, flags, copy, track, routing_id, group) 540 data = zmq.Frame( 541 data, 542 track=track, 543 copy=copy or None, 544 copy_threshold=self.copy_threshold, 545 ) 546 data.group = group --&gt; 547 return super(Socket, self).send(data, flags=flags, copy=copy, track=track) File zmq/backend/cython/socket.pyx:718, in zmq.backend.cython.socket.Socket.send() File zmq/backend/cython/socket.pyx:765, in zmq.backend.cython.socket.Socket.send() File zmq/backend/cython/socket.pyx:242, in zmq.backend.cython.socket._send_copy() File ~/anaconda3/lib/python3.9/site-packages/zmq/backend/cython/checkrc.pxd:13, in zmq.backend.cython.checkrc._check_rc() KeyboardInterrupt: . Space . This function takes two matrices matrix1 and matrix2 as input and returns their product as a new matrix. The function creates a new matrix result with dimensions m by n to store the product of the input matrices. The size of result depends on the size of the input matrices, so the space complexity of this function is O(n^2). As the size of the input matrices increases, the amount of memory required to execute the function also increases quadratically. . Main take away is that a new matrix is created. | . def multiply_matrices(matrix1, matrix2): m = len(matrix1) n = len(matrix2[0]) result = [[0] * n] * m #this creates the new matrix based on the size of matrix 1 and 2 for i in range(m): for j in range(n): for k in range(len(matrix2)): result[i][j] += matrix1[i][k] * matrix2[k][j] return result print(multiply_matrices([[1,2],[3,4]], [[3,4],[1,2]])) . [[18, 28], [18, 28]] . Logarithmic O(logn) . Time . An example of a log time algorithm is binary search. Binary search is an algorithm that searches for a specific element in a sorted list by repeatedly dividing the search interval in half. As a result, the time taken to complete the search grows logarithmically with the size of the list. Hence, the time complexity of this operation is O(log n), where n is the size of the list being searched. . def binary_search(arr, low, high, target): while low &lt;= high: mid = (low + high) // 2 #integer division if arr[mid] == target: return mid elif arr[mid] &lt; target: low = mid + 1 else: high = mid - 1 target = 263 result = binary_search(numbers, 0, len(numbers) - 1, target) print(result) . 263 . Space . The same algorithm above has a O(logn) space complexity. The function takes an array arr, its lower and upper bounds low and high, and a target value target. The function searches for target within the bounds of arr by recursively dividing the search space in half until the target is found or the search space is empty. The function does not create any new data structures that depend on the size of arr. Instead, the function uses the call stack to keep track of the recursive calls. Since the maximum depth of the recursive calls is O(logn), where n is the size of arr, the space complexity of this function is O(logn). As the size of arr increases, the amount of memory required to execute the function grows logarithmically. . Exponential O(2^n) . Time . An example of an O(2^n) algorithm is the recursive implementation of the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, starting from 0 and 1. The recursive implementation of the Fibonacci sequence calculates each number by recursively calling itself with the two preceding numbers until it reaches the base case (i.e., the first or second number in the sequence). The algorithm takes O(2^n) time in the worst case because it has to calculate each number in the sequence by making two recursive calls. . def fibonacci(n): if n &lt;= 1: return n else: return fibonacci(n-1) + fibonacci(n-2) #print(fibonacci(5)) #print(fibonacci(10)) #print(fibonacci(20)) print(fibonacci(30)) #print(fibonacci(40)) . 832040 . Space . This function takes a set s as input and generates all possible subsets of s. The function does this by recursively generating the subsets of the set without the first element, and then adding the first element to each of those subsets to generate the subsets that include the first element. The function creates a new list for each recursive call that stores the subsets, and each element in the list is a new list that represents a subset. The number of subsets that can be generated from a set of size n is 2^n, so the space complexity of this function is O(2^n). As the size of the input set increases, the amount of memory required to execute the function grows exponentially. . def generate_subsets(s): if not s: return [[]] subsets = generate_subsets(s[1:]) return [[s[0]] + subset for subset in subsets] + subsets print(generate_subsets([1,2,3])) #print(generate_subsets(numbers)) . [[1, 2, 3], [1, 2], [1, 3], [1], [2, 3], [2], [3], []] . Using the time library, we are able to see the difference in time it takes to calculate the fibonacci function above. . Based on what is known about the other time complexities, hypothesize the resulting elapsed time if the function is replaced. | . import time start_time = time.time() print(fibonacci(34)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) start_time = time.time() print(fibonacci(35)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) . 5702887 Time taken: 1.1741087436676025 seconds 9227465 Time taken: 1.8948462009429932 seconds . Hacks . Record your findings when testing the time elapsed of the different algorithms. | Although we will go more in depth later, time complexity is a key concept that relates to the different sorting algorithms. Do some basic research on the different types of sorting algorithms and their time complexity. . Selection Sort: . Time Complexity: O(n^2) | Space Complexity: O(1) | It is an in-place comparison sorting algorithm that divides the input list into two parts: the sublist of items already sorted, which is built up from left to right at the front of the list, and the sublist of items remaining to be sorted that occupy the rest of the list. | . | Insertion Sort: . Time Complexity: O(n^2) | Space Complexity: O(1) | It is a simple sorting algorithm that builds the final sorted array one item at a time. | . | Quick Sort: . Time Complexity: O(n*log n) | Space Complexity: O(log n) | It is a divide-and-conquer algorithm that works by selecting a &#39;pivot&#39; element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. | . | . | | Why is time and space complexity important when choosing an algorithm? They can affect the performance and efficiency of the algorithm. | Choosing an algorithm with a higher time complexity results in slow execution times and may not be practical for your needs. If you are working with a system with limited memory, choosing an algorithm with a higher space complexity results in memory overflow errors or/and slow performance. | . | | Should you always use a constant time algorithm / Should you never use an exponential time algorithm? Explain? . It depends on the situation/problem you have. A more complex problem may require a exponential time algorithm. | A constant time algorithm is generally preferred over an exponential time algorithm because it has a time complexity that remains the same, regardless of the size of the input. This means that the algorithm is scalable and can handle large datasets without sacrificing performance. | Constant time algorithms are often used for simple operations such as accessing an element in an array, checking the size of a container, or performing a basic arithmetic operation. | . | . | What are some general patterns that you noticed to determine each algorithm&#39;s time and space complexity? . Loops: The number of loops in an algorithm often corresponds to its time complexity. For example, an algorithm with a single loop that iterates through an array has a time complexity of O(n), while an algorithm with nested loops has a time complexity of O(n^2) or higher, depending on the number of loops. . | Recursive calls: The number of recursive calls in an algorithm often corresponds to its time and space complexity. For example, an algorithm that recursively splits an array in half has a time complexity of O(log n), but a space complexity of O(n) due to the number of recursive calls. . | Data structures: The choice of data structure can impact both the time and space complexity of an algorithm. For example, a hash table can provide constant time access to elements, but has a space complexity that grows with the number of elements. . | . | . Complete the Time and Space Complexity analysis questions linked below. Practice .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/03/22/DS-space_time_complexity.html",
            "relUrl": "/2023/03/22/DS-space_time_complexity.html",
            "date": " • Mar 22, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Unit 2.4 Hacks",
            "content": "Procedural abstraction? . There is lots of procedural abstraction in both 2.4a and 2.4b | Everywhere where a procedure is named is an example of procedural abstraction. Naming helps keep things clean and easy and can be re-used later | The same procedure being used or called more than once is also an example of procedural abstraction and this happens multiple times. | . Debugging Examples . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///customer.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) # -- . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class customer(db.Model): __tablename__ = &#39;customers&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object customerid = db.Column(db.Integer, primary_key=True) _customername = db.Column(db.String(255), unique=False, nullable=False) _customeruid = db.Column(db.String(255), unique=True, nullable=False) _customerpassword = db.Column(db.String(255), unique=False, nullable=False) _state = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, customername, customeruid, customerpassword=&quot;123qwerty&quot;, state=datetime.today()): self._customername = customername # variables with self prefix become part of the object, self._customeruid = customeruid self.set_password(customerpassword) if isinstance(state, str): # not a date type state = state=datetime.today() self._state = state # a name getter method, extracts name from object @property def customername(self): return self._customername # a setter function, allows name to be updated after initial object creation @customername.setter def customername(self, customername): self._customername = customername # a getter method, extracts uid from object @property def customeruid(self): return self._customeruid # a setter function, allows uid to be updated after initial object creation @customeruid.setter def uid(self, customeruid): self._customeruid = customeruid # check if uid parameter matches user id in object, return boolean def is_uid(self, customeruid): return self._customeruid == customeruid @property def customerpassword(self): return self._customerpassword[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional method used for setter def set_customerpassword(self, customerpassword): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._customerpassword = generate_password_hash(customerpassword, method=&#39;sha256&#39;) # check password parameter against stored/encrypted password def is_customerpassword(self, customerpassword): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._customerpassword, customerpassword) return result # dob property is returned as string, a string represents date outside object @property def state(self): state_string = self._state.strftime(&#39;%m-%d-%Y&#39;) return state_string # dob setter, verifies date type before it is set or default to today @state.setter def state(self, state): if isinstance(state, str): # not a date type state = state=datetime.today() self.state = state # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self.state.year - ((today.month, today.day) &lt; (self.state.month, self.state.day)) # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;customerid&quot;: self.id, &quot;customername&quot;: self.name, &quot;customeruid&quot;: self.uid, &quot;state&quot;: self.state, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, customername=&quot;&quot;, customeruid=&quot;&quot;, customerpassword=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(customername) &gt; 0: self.customername = customername if len(customeruid) &gt; 0: self.customeruid = customeruid if len(customerpassword) &gt; 0: self.set_customerpassword(customerpassword) db.session.add(self) # performs update when id exists db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . InvalidRequestError Traceback (most recent call last) /vscode/ahadsblog/_notebooks/2023-03-17- 2.4 Hacks.ipynb Cell 4 in &lt;cell line: 17&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-17-%202.4%20Hacks.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-17-%202.4%20Hacks.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; # Define the User class to manage actions in the &#39;users&#39; table &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-17-%202.4%20Hacks.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-17-%202.4%20Hacks.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; # -- a.) db.Model is like an inner layer of the onion in ORM &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-17-%202.4%20Hacks.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; # -- b.) User represents data we want to store, something that is built on db.Model &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-17-%202.4%20Hacks.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-17-%202.4%20Hacks.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; class customer(db.Model): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-17-%202.4%20Hacks.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; __tablename__ = &#39;customers&#39; # table name is plural, class name is singular &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-17-%202.4%20Hacks.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=19&#39;&gt;20&lt;/a&gt; # Define the User schema with &#34;vars&#34; from object File ~/anaconda3/lib/python3.9/site-packages/flask_sqlalchemy/model.py:100, in BindMetaMixin.__init__(cls, name, bases, d, **kwargs) 97 if metadata is not parent_metadata: 98 cls.metadata = metadata --&gt; 100 super().__init__(name, bases, d, **kwargs) File ~/anaconda3/lib/python3.9/site-packages/flask_sqlalchemy/model.py:120, in NameMetaMixin.__init__(cls, name, bases, d, **kwargs) 117 if should_set_tablename(cls): 118 cls.__tablename__ = camel_to_snake_case(cls.__name__) --&gt; 120 super().__init__(name, bases, d, **kwargs) 122 # __table_cls__ has run. If no table was created, use the parent table. 123 if ( 124 &#34;__tablename__&#34; not in cls.__dict__ 125 and &#34;__table__&#34; in cls.__dict__ 126 and cls.__dict__[&#34;__table__&#34;] is None 127 ): File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/decl_api.py:199, in DeclarativeMeta.__init__(cls, classname, bases, dict_, **kw) 196 cls._sa_registry = reg 198 if not cls.__dict__.get(&#34;__abstract__&#34;, False): --&gt; 199 _as_declarative(reg, cls, dict_) 200 type.__init__(cls, classname, bases, dict_) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/decl_base.py:248, in _as_declarative(registry, cls, dict_) 242 def _as_declarative( 243 registry: _RegistryType, cls: Type[Any], dict_: _ClassDict 244 ) -&gt; Optional[_MapperConfig]: 245 246 # declarative scans the class for attributes. no table or mapper 247 # args passed separately. --&gt; 248 return _MapperConfig.setup_mapping(registry, cls, dict_, None, {}) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/decl_base.py:329, in _MapperConfig.setup_mapping(cls, registry, cls_, dict_, table, mapper_kw) 325 return _DeferredMapperConfig( 326 registry, cls_, dict_, table, mapper_kw 327 ) 328 else: --&gt; 329 return _ClassScanMapperConfig( 330 registry, cls_, dict_, table, mapper_kw 331 ) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/decl_base.py:578, in _ClassScanMapperConfig.__init__(self, registry, cls_, dict_, table, mapper_kw) 574 self._extract_mappable_attributes() 576 self._extract_declared_columns() --&gt; 578 self._setup_table(table) 580 self._setup_inheriting_columns(mapper_kw) 582 self._early_mapping(mapper_kw) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/decl_base.py:1663, in _ClassScanMapperConfig._setup_table(self, table) 1655 table_kw[&#34;autoload&#34;] = True 1657 sorted_columns = sorted( 1658 declared_columns, 1659 key=lambda c: column_ordering.get(c, 0), 1660 ) 1661 table = self.set_cls_attribute( 1662 &#34;__table__&#34;, -&gt; 1663 table_cls( 1664 tablename, 1665 self._metadata_for_cls(manager), 1666 *sorted_columns, 1667 *args, 1668 **table_kw, 1669 ), 1670 ) 1671 else: 1672 if table is None: File ~/anaconda3/lib/python3.9/site-packages/flask_sqlalchemy/model.py:147, in NameMetaMixin.__table_cls__(cls, *args, **kwargs) 144 # Check if a table with this name already exists. Allows reflected tables to be 145 # applied to models by name. 146 if key in cls.metadata.tables: --&gt; 147 return sa.Table(*args, **kwargs) 149 # If a primary key is found, create a table for joined-table inheritance. 150 for arg in args: File &lt;string&gt;:2, in __new__(cls, *args, **kw) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/util/deprecations.py:277, in deprecated_params.&lt;locals&gt;.decorate.&lt;locals&gt;.warned(fn, *args, **kwargs) 270 if m in kwargs: 271 _warn_with_version( 272 messages[m], 273 versions[m], 274 version_warnings[m], 275 stacklevel=3, 276 ) --&gt; 277 return fn(*args, **kwargs) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/sql/schema.py:428, in Table.__new__(cls, *args, **kw) 421 @util.deprecated_params( 422 mustexist=( 423 &#34;1.4&#34;, (...) 426 ) 427 def __new__(cls, *args: Any, **kw: Any) -&gt; Any: --&gt; 428 return cls._new(*args, **kw) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/sql/schema.py:460, in Table._new(cls, *args, **kw) 458 if key in metadata.tables: 459 if not keep_existing and not extend_existing and bool(args): --&gt; 460 raise exc.InvalidRequestError( 461 &#34;Table &#39;%s&#39; is already defined for this MetaData &#34; 462 &#34;instance. Specify &#39;extend_existing=True&#39; &#34; 463 &#34;to redefine &#34; 464 &#34;options and columns on an &#34; 465 &#34;existing Table object.&#34; % key 466 ) 467 table = metadata.tables[key] 468 if extend_existing: InvalidRequestError: Table &#39;customers&#39; is already defined for this MetaData instance. Specify &#39;extend_existing=True&#39; to redefine options and columns on an existing Table object. .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/03/17/2.4-Hacks.html",
            "relUrl": "/2023/03/17/2.4-Hacks.html",
            "date": " • Mar 17, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Unit 2.4 Hacks",
            "content": "Procedural abstraction? . There is lots of procedural abstraction in both 2.4a and 2.4b | Everywhere where a procedure is named is an example of procedural abstraction. Naming helps keep things clean and easy and can be re-used later | The same procedure being used or called more than once is also an example of procedural abstraction and this happens multiple times. | . import sqlite3 def create_connection(db_file): conn = None try: conn = sqlite3.connect(db_file) return conn except Error as e: print(e) return conn def create_table(conn, create_table_sql): try: c = conn.cursor() c.execute(create_table_sql) except Error as e: print(e) def main(): database = &#39;instance/movies.db&#39; movies_table = &quot;&quot;&quot;CREATE TABLE IF NOT EXISTS movies ( _id integer PRIMARY KEY, _movie text, _director text, _length text, _year integer ); &quot;&quot;&quot; # not null makes coloum not accpet null values conn = create_connection(database) # create table create_table(conn, movies_table) if __name__ == &#39;__main__&#39;: main() . def read(): database = &#39;instance/movies.db&#39; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM movies&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;empty&quot;) else: for row in results: print(row) # Close objects cursor.close() conn.close() read() . (2, &#39;2009 A Space Odyssey&#39;, &#39;Stanley Kubrick&#39;, &#39;2 h&#39;, 1968) (3, &#39;The Godfather&#39;, &#39;Francis Capolla&#39;, &#39;2h 55m&#39;, 1972) (4, &#39;The Dark Knight&#39;, &#39;Christopher Nolan&#39;, &#39; 2h 32m&#39;, 2008) (5, &#39;Fight Club&#39;, &#39;David FIncher&#39;, &#39;2h 19m&#39;, 1999) (7, &#39;The Godfather&#39;, &#39;Francis Capolla&#39;, &#39;2h 55m&#39;, 1972) (8, &#39;The Dark Knight&#39;, &#39;Christopher Nolan&#39;, &#39; 2h 32m&#39;, 2008) (9, &#39;Fight Club&#39;, &#39;David FIncher&#39;, &#39;2h 19m&#39;, 1999) . def create(): database = &#39;instance/movies.db&#39; movie = input(&quot;Enter movie name:&quot;) director = input(&quot;Enter director:&quot;) length = input(&quot;Enter length&quot;) year = input(&quot;Enter year&quot;) # Connect to the database file conn = sqlite3.connect(database) # execute SQL commands cursor = conn.cursor() try: # insert data into a table cursor.execute(&quot;INSERT INTO movies (_movie, _director, _length, _year) VALUES (?, ?, ?, ?)&quot;, (movie, director, length, year)) # Commit the changes conn.commit() print(f&quot;A new movie record {movie} has been created&quot;) except sqlite3.Error as error: print(&quot;Error with inserting&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() create() . A new movie record ? has been created . import sqlite3 # adding movies to the table def add(): database = &#39;instance/movies.db&#39; # Connect to db file conn = sqlite3.connect(database) # execute SQL commands cursor = conn.cursor() try: # insert data into a table cursor.execute(&quot;INSERT INTO movies (_movie, _director, _length, _year) VALUES (?, ?, ?, ?)&quot;, (&#39;The Godfather&#39;, &#39;Francis Capolla&#39;, &#39;2h 55m&#39;, 1972)) cursor.execute(&quot;INSERT INTO movies (_movie, _director, _length, _year) VALUES (?, ?, ?, ?)&quot;,(&#39;The Dark Knight&#39;, &#39;Christopher Nolan&#39;, &#39; 2h 32m&#39;, 2008)) cursor.execute(&quot;INSERT INTO movies (_movie, _director, _length, _year) VALUES (?, ?, ?, ?)&quot;,(&#39;Fight Club&#39;, &#39;David FIncher&#39;, &#39;2h 19m&#39;, 1999)) # Commit the changes conn.commit() except sqlite3.Error as error: print(&quot;Error&quot;, error) # Close objects cursor.close() conn.close() add() . read() . (2, &#39;2009 A Space Odyssey&#39;, &#39;Stanley Kubrick&#39;, &#39;2 h&#39;, 1968) (3, &#39;The Godfather&#39;, &#39;Francis Capolla&#39;, &#39;2h 55m&#39;, 1972) (4, &#39;The Dark Knight&#39;, &#39;Christopher Nolan&#39;, &#39; 2h 32m&#39;, 2008) (5, &#39;Fight Club&#39;, &#39;David FIncher&#39;, &#39;2h 19m&#39;, 1999) (7, &#39;The Godfather&#39;, &#39;Francis Capolla&#39;, &#39;2h 55m&#39;, 1972) (8, &#39;The Dark Knight&#39;, &#39;Christopher Nolan&#39;, &#39; 2h 32m&#39;, 2008) (9, &#39;Fight Club&#39;, &#39;David FIncher&#39;, &#39;2h 19m&#39;, 1999) (10, &#39;?&#39;, &#39;?&#39;, &#39;?&#39;, &#39;?&#39;) (11, &#39;The Godfather&#39;, &#39;Francis Capolla&#39;, &#39;2h 55m&#39;, 1972) (12, &#39;The Dark Knight&#39;, &#39;Christopher Nolan&#39;, &#39; 2h 32m&#39;, 2008) (13, &#39;Fight Club&#39;, &#39;David FIncher&#39;, &#39;2h 19m&#39;, 1999) . import sqlite3 def delete(): database = &#39;instance/movies.db&#39; id = input(&quot;Enter movie id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM movies WHERE _id = ?&quot;, (id,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {id} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {id} has been deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error in DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() print(&quot;-Original Table:-&quot;) read() print(&quot;&quot;) delete() read() . -Original Table:- (2, &#39;2009 A Space Odyssey&#39;, &#39;Stanley Kubrick&#39;, &#39;2 h&#39;, 1968) (3, &#39;The Godfather&#39;, &#39;Francis Capolla&#39;, &#39;2h 55m&#39;, 1972) (4, &#39;The Dark Knight&#39;, &#39;Christopher Nolan&#39;, &#39; 2h 32m&#39;, 2008) (5, &#39;Fight Club&#39;, &#39;David FIncher&#39;, &#39;2h 19m&#39;, 1999) (13, &#39;Fight Club&#39;, &#39;David FIncher&#39;, &#39;2h 19m&#39;, 1999) The row with uid 13 has been deleted (2, &#39;2009 A Space Odyssey&#39;, &#39;Stanley Kubrick&#39;, &#39;2 h&#39;, 1968) (3, &#39;The Godfather&#39;, &#39;Francis Capolla&#39;, &#39;2h 55m&#39;, 1972) (4, &#39;The Dark Knight&#39;, &#39;Christopher Nolan&#39;, &#39; 2h 32m&#39;, 2008) (5, &#39;Fight Club&#39;, &#39;David FIncher&#39;, &#39;2h 19m&#39;, 1999) . import sqlite3 def update(): database = &#39;instance/movies.db&#39; id = input(&quot;Enter a movie id to update movies runtime&quot;) runtime = input(&quot;Enter updated runtime status&quot;) if runtime == 1: status = &quot;changed&quot; else: status = &quot;&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE movies SET _length = ? WHERE _id = ?&quot;, (runtime, id)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No id {id} was not found in the table&quot;) else: print(f&quot;Movie {id} received an updated runtime: {status}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error in UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() print(&#39;-Original Databse:-&#39;) read() print(&quot;&quot;) print(&#39;-Updated Databse:-&#39;) update() read() . -Original Databse:- (2, &#39;2009 A Space Odyssey&#39;, &#39;Stanley Kubrick&#39;, &#39;2 h&#39;, 1968) (3, &#39;The Godfather&#39;, &#39;Francis Capolla&#39;, &#39;2h 55m&#39;, 1972) (4, &#39;The Dark Knight&#39;, &#39;Christopher Nolan&#39;, &#39; 2h 32m&#39;, 2008) (5, &#39;Fight Club&#39;, &#39;David FIncher&#39;, &#39;2h 19m&#39;, 1999) -Updated Databse:- Movie 5 received an updated runtime: (2, &#39;2009 A Space Odyssey&#39;, &#39;Stanley Kubrick&#39;, &#39;2 h&#39;, 1968) (3, &#39;The Godfather&#39;, &#39;Francis Capolla&#39;, &#39;2h 55m&#39;, 1972) (4, &#39;The Dark Knight&#39;, &#39;Christopher Nolan&#39;, &#39; 2h 32m&#39;, 2008) (5, &#39;Fight Club&#39;, &#39;David FIncher&#39;, &#39;100&#39;, 1999) . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, d&quot;) menu() # recursion (repeats) try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . (2, &#39;2009 A Space Odyssey&#39;, &#39;Stanley Kubrick&#39;, &#39;2 h&#39;, 1968) (3, &#39;The Godfather&#39;, &#39;Francis Capolla&#39;, &#39;2h 55m&#39;, 1972) (4, &#39;The Dark Knight&#39;, &#39;Christopher Nolan&#39;, &#39; 2h 32m&#39;, 2008) (5, &#39;Fight Club&#39;, &#39;David FIncher&#39;, &#39;100&#39;, 1999) .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/03/17/2.4-Hacks-copy.html",
            "relUrl": "/2023/03/17/2.4-Hacks-copy.html",
            "date": " • Mar 17, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . - The schema is the properties like columns in our database - the define scehema function allows us to abstract the schema - data that describes the data --&gt; meta data . What is the purpose of identity Column in SQL database? | What is the purpose of a primary key in SQL database? | What are the Data Types in SQL table? | . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_name&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_password&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_dob&#39;, &#39;DATE&#39;, 0, None, 0) . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? . It is used to connect to our database in order for us to interact with our database. | . | Same for cursor object? . enables us to execute SQL commands. Both cursor and connect allow us to interact with the sql Database | . | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? function variables, class variables and special variables | . | Is &quot;results&quot; an object? How do you know? results is a object becuase it has variables and a function inside of it. | . | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$vDnsONdqJKS6Obnn$c726d5c3cfaa4159467c7357523fa792b1cc4d8164e05a94fed03ca6eb706d7f&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$lVwNd2LvZUJsplmm$60b32eb516fb2e3d6990f3fe930c39d0183c837bad056bd30932dffbd6656fc5&#39;, &#39;2023-03-15&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$liR4Yi5rRS6jNDq8$86272a2635fd13379e44f2696c76d329a35c248fb73c608b86eb65f6cda54319&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$d3JQm7Ck9u47LL3a$7f946229c497a30bb7d72dc28dd7d4c1ec6a9638bd11c5378211344e120022ce&#39;, &#39;2023-03-15&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$fsB3tY3yKWVXQgee$fba550c3cd6e5d3d2b9e654739081fd7fd1abc29e4ace7842c26d5190ac6cb32&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$f82uM634qRvdFqFY$7ff160e633b58b995d6e60bfc54a8e9ebfcca2823854997f4734408944917be5&#39;, &#39;1921-10-21&#39;) (8, &#39;ahad biabani&#39;, &#39;ahad&#39;, &#39;sha256$Jeabd5blxEQxF1Dg$3a8d87270da3edf3e94db5e68e64de00df0621bf82fadaebd711f7456227d8e6&#39;, &#39;2005-09-18&#39;) . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compare create() in both SQL lessons. What is better or worse in the two implementations? | Explain purpose of SQL INSERT. Is this the same as User init? | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? | Explain try/except, when would except occur? | What code seems to be repeated in each of these examples to point, why is it repeated? | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? | In the print statemements, what is the &quot;f&quot; and what does {uid} do? | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? | Could you refactor this menu? Make it work with a List? | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$vDnsONdqJKS6Obnn$c726d5c3cfaa4159467c7357523fa792b1cc4d8164e05a94fed03ca6eb706d7f&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$lVwNd2LvZUJsplmm$60b32eb516fb2e3d6990f3fe930c39d0183c837bad056bd30932dffbd6656fc5&#39;, &#39;2023-03-15&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$liR4Yi5rRS6jNDq8$86272a2635fd13379e44f2696c76d329a35c248fb73c608b86eb65f6cda54319&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$d3JQm7Ck9u47LL3a$7f946229c497a30bb7d72dc28dd7d4c1ec6a9638bd11c5378211344e120022ce&#39;, &#39;2023-03-15&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$fsB3tY3yKWVXQgee$fba550c3cd6e5d3d2b9e654739081fd7fd1abc29e4ace7842c26d5190ac6cb32&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$f82uM634qRvdFqFY$7ff160e633b58b995d6e60bfc54a8e9ebfcca2823854997f4734408944917be5&#39;, &#39;1921-10-21&#39;) (8, &#39;ahad biabani&#39;, &#39;ahad&#39;, &#39;sha256$Jeabd5blxEQxF1Dg$3a8d87270da3edf3e94db5e68e64de00df0621bf82fadaebd711f7456227d8e6&#39;, &#39;2005-09-18&#39;) (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$vDnsONdqJKS6Obnn$c726d5c3cfaa4159467c7357523fa792b1cc4d8164e05a94fed03ca6eb706d7f&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$lVwNd2LvZUJsplmm$60b32eb516fb2e3d6990f3fe930c39d0183c837bad056bd30932dffbd6656fc5&#39;, &#39;2023-03-15&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$liR4Yi5rRS6jNDq8$86272a2635fd13379e44f2696c76d329a35c248fb73c608b86eb65f6cda54319&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$d3JQm7Ck9u47LL3a$7f946229c497a30bb7d72dc28dd7d4c1ec6a9638bd11c5378211344e120022ce&#39;, &#39;2023-03-15&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$fsB3tY3yKWVXQgee$fba550c3cd6e5d3d2b9e654739081fd7fd1abc29e4ace7842c26d5190ac6cb32&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$f82uM634qRvdFqFY$7ff160e633b58b995d6e60bfc54a8e9ebfcca2823854997f4734408944917be5&#39;, &#39;1921-10-21&#39;) (8, &#39;ahad biabani&#39;, &#39;ahad&#39;, &#39;sha256$Jeabd5blxEQxF1Dg$3a8d87270da3edf3e94db5e68e64de00df0621bf82fadaebd711f7456227d8e6&#39;, &#39;2005-09-18&#39;) . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . | . Reference... sqlite documentation .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. Flask app object | SQLAlchemy db object | | . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. . class User defining the template for users --&gt; a class definition template. Used to create objects of type users. WHne seeing this code it doesnt do anything right away but is used later to create objects. User template becuase we have different users. Class is atemplate for a future object. Atributes are added to user. db.Model inheritance Inheritance is used to inherity methods and use the mothods to interact with the database to interact with the class. This adds to out template database information. | . | . | . | init method Called the Constructor. This method is enables use to instanciate(make/create/dervive) an object from our user class. | . | @property, @&lt;column&gt;.setter Setters enable us to change the atributes for example the wrong DOB and u can come back and use the object name to reset the thing using property and seters. Getters enable us to retrieve data out of the objects. create, read, update, delete methods | . | CRUD METHODS | Methods are added to help interact and maintain data inside the class | Makes it easer to interact with database. | Attributes and methods are in the class. | . | . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional method used for setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter against stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, a string represents date outside object @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob setter, verifies date type before it is set or default to today @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object | User Object Constructors | Try / Except | | . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Records exist uid toby, or error. Records exist uid niko, or error. Records exist uid lex, or error. Records exist uid whit, or error. Records exist uid indi, or error. Records exist uid raven, or error. . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following User.query.filter_by | user.password | | . def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False check_credentials(&quot;indi&quot;, &quot;123qwerty2&quot;) #check_credentials(&quot;indi&quot;, &quot;123qwerty2&quot;) . False . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except | user = User(...) | user.dob and try/except | user.create() and try/except | | . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Created {&#39;id&#39;: 8, &#39;name&#39;: &#39;ahad biabani&#39;, &#39;uid&#39;: &#39;ahad&#39;, &#39;dob&#39;: &#39;09-18-2005&#39;, &#39;age&#39;: 17} . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all | json_ready assignment, google List Comprehension | | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Thomas Edison&#39;, &#39;uid&#39;: &#39;toby&#39;, &#39;dob&#39;: &#39;02-11-1847&#39;, &#39;age&#39;: 176}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Nikola Tesla&#39;, &#39;uid&#39;: &#39;niko&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Alexander Graham Bell&#39;, &#39;uid&#39;: &#39;lex&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Eli Whitney&#39;, &#39;uid&#39;: &#39;whit&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Indiana Jones&#39;, &#39;uid&#39;: &#39;indi&#39;, &#39;dob&#39;: &#39;10-21-1920&#39;, &#39;age&#39;: 102}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Marion Ravenwood&#39;, &#39;uid&#39;: &#39;raven&#39;, &#39;dob&#39;: &#39;10-21-1921&#39;, &#39;age&#39;: 101}, {&#39;id&#39;: 7, &#39;name&#39;: &#39;&#39;, &#39;uid&#39;: &#39;&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 8, &#39;name&#39;: &#39;ahad biabani&#39;, &#39;uid&#39;: &#39;ahad&#39;, &#39;dob&#39;: &#39;09-18-2005&#39;, &#39;age&#39;: 17}] . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-06-AP-unit2_3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390], &quot;duration&quot;: [50, 40, 45] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 3 entries, day1 to day3 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 3 non-null int64 1 duration 3 non-null int64 dtypes: int64(2) memory usage: 180.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Hacks . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Fambulous. | . When choosing a data set, think about the following:- Does it have a good sample size? - Is there bias in the data? - Does the data set need to be cleaned? - What is the purpose of the data set? - ... . Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. Here are some suggestions:- Titanic Dataset: This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. . Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset:- Kaggle: The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. . UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . 2.3 College Board Questions . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;College Board&quot;, &#39;label&#39;: &quot;Data Compression&quot;, &#39;file&#39;: &quot;EIFDQ.png&quot;}, ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # display default images from image_data() default_images = image_data() image_display(default_images) . Creating tables using pandas . import pandas as pd data = {&#39;class&#39;:[&#39;Math&#39;, &#39;AmLit&#39;, &#39;Apush&#39;, &#39;Csp&#39;], &#39;Ratings&#39;:[&#39;A+&#39;, &#39;A+&#39;, &#39;A+&#39;, &#39;A+&#39;]} df = pd.DataFrame(data, index =[&#39;period 1&#39;, &#39;period 2&#39;, &#39;period 3&#39;, &#39;period 4&#39;]) print(df) . class Ratings period 1 Math A+ period 2 AmLit A+ period 3 Apush A+ period 4 Csp A+ . import pandas as pd list = [&#39;hi&#39;, &#39;bye&#39;, &#39;poo&#39;, &#39;car&#39;, &#39;java&#39;, &#39;python&#39;, &#39;Go&#39;] dframe = pd.DataFrame(list) print(dframe) . 0 0 hi 1 bye 2 poo 3 car 4 java 5 python 6 Go . import pandas as pd data = [{&#39;food&#39;: &#39;good&#39;, &#39;Games&#39;: &#39;yes&#39;}] dframe = pd.DataFrame(data, index =[&#39;Day&#39;, &#39;Night&#39;]) print(dframe) . food Games Day good yes Night good yes . import pandas as pd player_data = pd.read_csv(&#39;/vscode/ahadsblog/_notebooks/files/AwardsPlayers.csv&#39;) nhl_data = player_data[player_data[&#39;award&#39;]==&#39;Hart&#39;] print(nhl_data.head(25)) . playerID award year lgID note pos 7 nighbfr01 Hart 1923 NHL NaN NaN 9 burchbi01 Hart 1924 NHL NaN NaN 12 stewane01 Hart 1925 NHL NaN NaN 15 gardihe01 Hart 1926 NHL NaN NaN 19 morenho01 Hart 1927 NHL NaN NaN 23 wortero01 Hart 1928 NHL NaN NaN 27 stewane01 Hart 1929 NHL NaN NaN 37 morenho01 Hart 1930 NHL NaN NaN 53 morenho01 Hart 1931 NHL NaN NaN 70 shoreed01 Hart 1932 NHL NaN NaN 87 joliaau01 Hart 1933 NHL NaN NaN 104 shoreed01 Hart 1934 NHL NaN NaN 121 shoreed01 Hart 1935 NHL NaN NaN 138 siebeba01 Hart 1936 NHL NaN NaN 156 shoreed01 Hart 1937 NHL NaN NaN 172 blaketo01 Hart 1938 NHL NaN NaN 189 goodfeb01 Hart 1939 NHL NaN NaN 206 cowlebi01 Hart 1940 NHL NaN NaN 223 anderto01 Hart 1941 NHL NaN NaN 240 cowlebi01 Hart 1942 NHL NaN NaN 257 prattba01 Hart 1943 NHL NaN NaN 274 lachel01 Hart 1944 NHL NaN NaN 291 bentlma01 Hart 1945 NHL NaN NaN 308 richama01 Hart 1946 NHL NaN NaN 325 oconnbu01 Hart 1947 NHL NaN NaN . import pandas as pd # creating a data frame df = pd.read_csv(&quot;/vscode/ahadsblog/_notebooks/files/AwardsPlayers.csv&quot;) print(df.head()) . playerID award year lgID note pos 0 malonjo01 Art Ross 1917 NHL NaN NaN 1 cleghod01 Art Ross 1918 NHL NaN NaN 2 malonjo01 Art Ross 1919 NHL NaN NaN 3 lalonne01 Art Ross 1920 NHL NaN NaN 4 broadpu01 Art Ross 1921 NHL NaN NaN . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Titanic Data Index([&#39;survived&#39;, &#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;fare&#39;, &#39;embarked&#39;, &#39;class&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;deck&#39;, &#39;embark_town&#39;, &#39;alive&#39;, &#39;alone&#39;], dtype=&#39;object&#39;) survived pclass sex age sibsp parch class fare 0 0 3 male 22.0 1 0 Third 7.2500 1 1 1 female 38.0 1 0 First 71.2833 2 1 3 female 26.0 0 0 Third 7.9250 3 1 1 female 35.0 1 0 First 53.1000 4 0 3 male 35.0 0 0 Third 8.0500 .. ... ... ... ... ... ... ... ... 886 0 2 male 27.0 0 0 Second 13.0000 887 1 1 female 19.0 0 0 First 30.0000 888 0 3 female NaN 1 2 Third 23.4500 889 1 1 male 26.0 0 0 First 30.0000 890 0 3 male 32.0 0 0 Third 7.7500 embark_town 0 Southampton 1 Cherbourg 2 Southampton 3 Southampton 4 Southampton .. ... 886 Southampton 887 Southampton 888 Southampton 889 Cherbourg 890 Queenstown [891 rows x 9 columns] . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . survived pclass sex age sibsp parch fare alone embarked_C 0 0 3 1 22.0 1 0 7.2500 0 0.0 1 1 1 0 38.0 1 0 71.2833 0 1.0 2 1 3 0 26.0 0 0 7.9250 1 0.0 3 1 1 0 35.0 1 0 53.1000 0 0.0 4 0 3 1 35.0 0 0 8.0500 1 0.0 .. ... ... ... ... ... ... ... ... ... 705 0 2 1 39.0 0 0 26.0000 1 0.0 706 1 2 0 45.0 0 0 13.5000 1 0.0 707 1 1 1 42.0 0 0 26.2875 1 0.0 708 1 1 0 22.0 0 0 151.5500 1 0.0 710 1 1 0 24.0 0 0 49.5042 1 1.0 embarked_Q embarked_S 0 0.0 1.0 1 0.0 0.0 2 0.0 1.0 3 0.0 1.0 4 0.0 1.0 .. ... ... 705 0.0 1.0 706 0.0 1.0 707 1.0 0.0 708 0.0 1.0 710 0.0 0.0 [564 rows x 11 columns] . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . survived 0.000000 pclass 2.464072 sex 0.844311 age 31.073353 sibsp 0.562874 parch 0.398204 fare 24.835902 alone 0.616766 embarked_C 0.185629 embarked_Q 0.038922 embarked_S 0.775449 dtype: float64 . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . survived 1.000000 pclass 1.878261 sex 0.326087 age 28.481522 sibsp 0.504348 parch 0.508696 fare 50.188806 alone 0.456522 embarked_C 0.152174 embarked_Q 0.034783 embarked_S 0.813043 dtype: float64 . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . survived 1.0000 pclass 3.0000 sex 1.0000 age 80.0000 sibsp 4.0000 parch 5.0000 fare 512.3292 alone 1.0000 embarked_C 1.0000 embarked_Q 1.0000 embarked_S 1.0000 dtype: float64 survived 1.00 pclass 1.00 sex 0.00 age 0.75 sibsp 0.00 parch 0.00 fare 0.00 alone 0.00 embarked_C 0.00 embarked_Q 0.00 embarked_S 0.00 dtype: float64 . Machine Learning . From Tutorials Point%20is,a%20consistence%20interface%20in%20Python). Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python.&gt; Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. Decision Trees, prediction by a piecewise constant approximation. - Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) . NameError Traceback (most recent call last) /vscode/ahadsblog/_notebooks/2023-03-12-AP-unit2-3.ipynb Cell 40 in &lt;cell line: 7&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-12-AP-unit2-3.ipynb#X53sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; from sklearn.metrics import accuracy_score &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-12-AP-unit2-3.ipynb#X53sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; # Split arrays or matrices into random train and test subsets. -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-12-AP-unit2-3.ipynb#X53sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; X = td.drop(&#39;survived&#39;, axis=1) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-12-AP-unit2-3.ipynb#X53sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; y = td[&#39;survived&#39;] &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2023-03-12-AP-unit2-3.ipynb#X53sdnNjb2RlLXJlbW90ZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) NameError: name &#39;td&#39; is not defined .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/03/12/AP-unit2-3.html",
            "relUrl": "/2023/03/12/AP-unit2-3.html",
            "date": " • Mar 12, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. - Clouds Impression . Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Python Libraries and Concepts used for Jupyter and Files/Directories . Introduction to displaying images in Jupyter notebook . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | What are the command you use in Windows terminal to access files? | What are some of the major differences? | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | How does the meta data source and label relate to Unit 5 topics? | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano-256.jpg&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;smiley&quot;, &#39;file&#39;: &quot;smile.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image greensquare = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(greensquare) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Translate first 3 letters of your name to Base64. | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | From your consumer experience, what effects have you experienced from buffering? | How do these effects apply to images? | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | Describe Grey Scale algorithm in English or Pseudo code? | Describe scale image? What is before and after on pixels in three images? | Is scale image a type of compression? If so, line it up with College Board terms described? | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 500 scalePercent = (baseWidth/float(img.size[1])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;red_scale&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;red_scale&#39;].append((average, average//2 , average, pixel[3])) # PNG format else: image[&#39;red_scale&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;red_scale&#39;]) image[&#39;html_red&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; purple image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_red&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (500, 500) -- original image -- . purple image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (500, 500) -- original image -- . purple image - . . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division # how are average pixel values found? if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano-256.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object # what is image data object? print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . grey image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . grey image . - meta data -- Lassen Volcano Peter Carolin lassen-volcano-256.jpg JPEG RGB Original size: (320, 240) Scaled size: (320, 240) -- scaled image -- . grey image . . import numpy as np from PIL import Image as pilImage from io import BytesIO import base64 from IPython.display import HTML, display # Load image img = pilImage.open(&quot;images/clouds-impression.png&quot;) # Convert image to numpy array img_array = np.array(img) # Create red and blue scale versions of image red_scale = img_array.copy() red_scale[:, :, 1] = 0 # set green channel to 0 red_scale[:, :, 2] = 0 # set blue channel to 0 blue_scale = img_array.copy() blue_scale[:, :, 0] = 0 # set red channel to 0 blue_scale[:, :, 1] = 0 # set green channel to 0 # Convert numpy arrays back to images red_scale_img = pilImage.fromarray(red_scale) blue_scale_img = pilImage.fromarray(blue_scale) # Convert images to base64 for display def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() red_scale_html = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(red_scale_img, img.format) blue_scale_html = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(blue_scale_img, img.format) # Display images display(HTML(red_scale_html)) display(HTML(blue_scale_html)) . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.2 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | . 2.3 College Board Practice Problems . . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;College Board&quot;, &#39;label&#39;: &quot;Data Compression&quot;, &#39;file&#39;: &quot;datacompression.png&quot;}, ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # display default images from image_data() default_images = image_data() image_display(default_images) . Playing around with PIL . Things to do . Display the altered image Observations | After altering the image, it is saved but not displayed yet. | . from PIL import Image def main(): try: #Relative Path img = Image.open(&quot;datacompression.png&quot;) #Angle given img = img.rotate(180) #Saved in the same relative location img.save(&quot;rotated_picture.jpg&quot;) except IOError: pass if __name__ == &quot;__main__&quot;: main() # why is image not being displayed . /bin/bash: -c: line 0: syntax error near unexpected token `rotatedpicture.jpg&#39; /bin/bash: -c: line 0: `[](rotatedpicture.jpg)&#39; . from PIL import Image filename = &quot;berserkpanel.jpg&quot; with Image.open(filename) as image: width, height = image.size . from PIL import Image def main(): try: #Relative Path img = Image.open(&quot;berserkpanel.jpg&quot;) width, height = img.size area = (0, 0, width/2, height/2) img = img.crop(area) #Saved in the same relative location img.save(&quot;cropped_picture.jpg&quot;) except IOError: pass if __name__ == &quot;__main__&quot;: main() . import numpy as np from PIL import Image as pilImage from io import BytesIO import base64 from IPython.display import HTML, display # Load image img = pilImage.open(&quot;images/berserkpanel.jpg&quot;) # Convert image to numpy array img_array = np.array(img) # Create red and blue scale versions of image red_scale = img_array.copy() red_scale[:, :, 1] = 0 # set green channel to 0 red_scale[:, :, 2] = 0 # set blue channel to 0 blue_scale = img_array.copy() blue_scale[:, :, 0] = 0 # set red channel to 0 blue_scale[:, :, 1] = 0 # set green channel to 0 # Convert numpy arrays back to images red_scale_img = pilImage.fromarray(red_scale) blue_scale_img = pilImage.fromarray(blue_scale) # Convert images to base64 for display def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() red_scale_html = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(red_scale_img, img.format) blue_scale_html = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(blue_scale_img, img.format) # Display images display(HTML(red_scale_html)) display(HTML(blue_scale_html)) . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[1] + pixel[1] + pixel[2]) // 40 # average pixel values and use // for integer division # how are average pixel values found? if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Manga&quot;, &#39;file&#39;: &quot;berserkcolor.jpg&quot;}, ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object # what is image data object? print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) . - meta data -- Manga Internet berserkcolor.jpg JPEG RGB Original size: (318, 159) Scaled size: (320, 160) -- scaled image -- . grey image .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/03/11/AP-unit2-2.html",
            "relUrl": "/2023/03/11/AP-unit2-2.html",
            "date": " • Mar 11, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "Tri 2 MCQ Corrections",
            "content": ". Corrections . Q1: Many Web browsers allow users to open anonymous windows. During a browsing session in an anonymous window, the browser does not record a browsing history or a list of downloaded files. When the anonymous window is exited, cookies created during the session are deleted. Which of the following statements about browsing sessions in an anonymous window is true? . A: B) This option is correct. Because the cookies created during the anonymous browsing session were deleted, no information exists in the browser to inform future visits to the same website. Thus, any shopping cart items will not be available for future purchase. . Q2: Which of the following has the greatest potential for compromising a user’s personal privacy? . A: A) This option is correct. The aggregation of information in browser cookies can be used by websites that the user visits to track the user and collect information about the user. . Q3: A chain of retail stores uses software to manage telephone calls from customers. The system was recently upgraded. Customers interacted with the original system using their phone keypad. Customers interact with the upgraded system using their voice. . The upgraded system (but not the original system) stores all information from the calling session in a database for future reference. This includes the customer’s telephone number and any information provided by the customer (name, address, order number, credit card number, etc.). . The original system and the upgraded system are described in the following flowcharts. Each flowchart uses the following blocks. . A: A) Correct. All information from the calling session (including personally identifiable information) is saved in a database. This information could be compromised if an unauthorized individual gains access to the database. . Q5 : Of the following potential benefits, which is LEAST likely to be provided by the upgraded system? . A: B) Correct. The company is not able to provide a human representative for calls made after business hours. . Q6: The upgraded system uses a directory containing additional information not supplied by the customer. The directory is used to help direct calls effectively. Which of the following is LEAST likely to be included in the directory? . A: C)Correct. A list of the company’s computers and their IP addresses is not needed to help direct calls. . Q21: A programmer wrote the program below. The program uses a list of numbers called numList. The program is intended to display the sum of the numbers in the list. In order to test the program, the programmer initializes numList to [0, 1, 4, 5]. The program displays 10, and the programmer concludes that the program works as intended. . Which of the following is true? . A: C) This option is correct. Because the variable sum is initialized to store the value of the first element of numList, and because the iteration block is a FOR EACH loop, the value of the first element is added to sum twice. Since the first element of the list is 0, adding this number to the sum does not affect the sum. A non-zero first element would give an incorrect result. In general, a single test case is not sufficient to confirm that a program works as intended. . Q24: The procedure below is intended to display the index in a list of unique names (nameList) where a particular name (targetName) is found. If targetName is not found in nameList, the code should display 0.Which of the following procedure calls can be used to demonstrate that the procedure does NOT work as intended? . A: C)This option is correct. The procedure will not display the correct value of foundIndex if the targetName is &quot;Ben&quot;. In the FOR EACH loop, when the value of name is &quot;Andrea&quot;, the ELSE statement sets foundIndex to 0. When the value of name is &quot;Ben&quot;, the ELSE statement sets foundIndex to 1. But as the loop continues, and the value of name is &quot;Chris&quot;, the ELSE statement sets foundIndex to 0. The procedure displays 0, even though the correct answer is 1. . Q26: A teacher has a goal of displaying the names of 2 students selected at random from a group of 30 students in a classroom. Any possible pair of students should be equally likely to be selected. Which of the following algorithms can be used to accomplish the teacher’s goal? . A: D) Correct. This algorithm selects 1 student from the group of 30 students, then selects another student from the remaining 29 students. Any possible pair of students is equally likely to be selected. . Q28: Assume that the string oldString contains at least 4 characters. A programmer is writing a code segment that is intended to remove the first two characters and the last two characters from oldString and assign the result to newString. . For example, if oldString contains &quot;student&quot;, then newString should contain &quot;ude&quot;. . Which of the following code segments can be used to assign the intended string to newString ? . Select two answers. . A: D) Correct. The first statement removes the first 2 characters of oldString and assigns the result to tempString. The second statement removes the last 2 characters of tempString and assigns the result to newString. . Q29: What is displayed as a result of executing the code segment? . A: B) Correct. The first three statements assign values to the variables. The fourth statement assigns the value of (NOT (a OR b)) AND c to a. Since a OR b is true, NOT (a OR b) is false, so (NOT (a OR b)) AND c is false. The fifth statement assigns the value of c AND a to c. Since a is now false, c AND a is false. The last three statements display the values of the variables. . Q31: A programmer is creating an algorithm that will be used to turn on the motor to open the gate in a parking garage. The specifications for the algorithm are as follows. . The gate should not open when the time is outside of business hours. The motor should not turn on unless the gate sensor is activated. The motor should not turn on if the gate is already open. . Which of the following algorithms can be used to open the gate under the appropriate conditions? . A: D) Correct. The algorithm continues past the first check if the time is during business hours, the algorithm continues past the second check if the gate sensor is activated, and the algorithm continues past the third check if the gate is not open. Performing the checks in this order will ensure that the gate is opened only under the appropriate conditions. . Q34: Which of the following code segments can be used to move the robot to the gray square? . A: D) Correct. The robot moves forward three spaces, turns to the left, moves forward two spaces, turns to the right, and moves forward three spaces. . Q35: Three teams (Team A, Team B, and Team C) are participating in a trivia contest. Let scoreA represent the number of correct questions for Team A, scoreB represent the number of correct questions for Team B, and scoreC represent the number of correct questions for Team C. Assuming no two teams get the same number of correct questions, which of the following code segments correctly displays the team with the highest number of correct questions? . A: A) Correct. If scoreA is greater than both scoreB and scoreC (the first two IF clauses), then Team A wins. If scoreA is greater than scoreB but not greater than scoreC, then scoreC is greater than both scoreA and scoreB and Team C wins. If scoreB is greater than scoreA (the outer ELSE clause) and scoreC (the IF clause in the outer ELSE), then Team B wins. If scoreB is greater than scoreA but not greater than scoreC, then scoreC is greater than both scoreA and scoreB and Team C wins. . Q36: A numeric test score is to be converted to a letter grade of A, B, or C according to the following rules: A score greater than 90 is considered an A; a score between 80 and 90, inclusive, is considered a B; and any other score is considered a C. . Which of the following code segments will assign the correct letter grade to grade based on the value of the variable score ? . A: D) Correct. Code segment I does not work correctly because it is not possible for &quot;C&quot; to be the value of grade at the end of the code segment. Code segment II correctly assigns &quot;A&quot; when the numeric score is greater than 90, or &quot;B&quot; if the numeric score is not greater than 90 but is greater than or equal to 80, or &quot;C&quot; otherwise. Code segment III assigns &quot;C&quot; when the numeric score is less than 80, or &quot;B&quot; if the numeric score is not less than 80 but is less than or equal to 90, or &quot;A&quot; otherwise. . Q37: If x has a value of 7 and y has a value of 20, what is displayed as a result of executing the code segment? . A: C) Correct. The value &quot;THREE&quot; is displayed whenever x is less than or equal to 10 and y is greater than 3. . Q38: Which of the following code segments is equivalent to the code segment above? . A: B) Correct. The given code segment displays &quot;positive&quot; when num is positive, displays &quot;negative&quot; when num is negative, and displays &quot;zero&quot; when num is 0. This code segment produces the same result. When num is negative, &quot;negative&quot; is displayed. Otherwise, when num is 0, &quot;zero&quot; is displayed. Otherwise, &quot;positive&quot; is displayed. . Q39:Consider the goal of modifying the code segment to count the number of squares the robot visits before execution terminates. Which of the following modifications can be made to the code segment to correctly count the number of squares the robot moves to? . A: A) Correct. Inserting this statement between lines 6 and 7 increases the value of count once each time the robot moves forward, which keeps an accurate count of the number of squares the robot visits. . Q40: When the robot reaches the gray square, it turns around and faces the bottom of the grid. Which of the following changes, if any, should be made to the code segment to move the robot back to its original position in the bottom-left square of the grid and facing toward the bottom of the grid? . A: D)Correct. In order for the robot to move from the gray square back to its original position, it must move forward two squares, turn right, move forward four squares, turn left, and move forward two squares. The same set of moves can be used in both directions, so no change is needed to the algorithm. . Q49: A city planner is using simulation software to study crowd flow out of a large arena after an event has ended. The arena is located in an urban city. Which of the following best describes a limitation of using a simulation for this purpose? . A: B) Correct. Simulations are limited by the model that is used. There may be many reasons for using a simplified model, including ease of implementation. .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/03/10/MCQ-Tri-2-corrections.html",
            "relUrl": "/2023/03/10/MCQ-Tri-2-corrections.html",
            "date": " • Mar 10, 2023"
        }
        
    
  
    
        ,"post23": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-06-AP-unit2_3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390], &quot;duration&quot;: [50, 40, 45] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 3 entries, day1 to day3 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 3 non-null int64 1 duration 3 non-null int64 dtypes: int64(2) memory usage: 180.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Hacks . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Fambulous. | . When choosing a data set, think about the following:- Does it have a good sample size? - Is there bias in the data? - Does the data set need to be cleaned? - What is the purpose of the data set? - ... . Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. Here are some suggestions:- Titanic Dataset: This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. . Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset:- Kaggle: The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. . UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Titanic Data Index([&#39;survived&#39;, &#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;fare&#39;, &#39;embarked&#39;, &#39;class&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;deck&#39;, &#39;embark_town&#39;, &#39;alive&#39;, &#39;alone&#39;], dtype=&#39;object&#39;) survived pclass sex age sibsp parch class fare 0 0 3 male 22.0 1 0 Third 7.2500 1 1 1 female 38.0 1 0 First 71.2833 2 1 3 female 26.0 0 0 Third 7.9250 3 1 1 female 35.0 1 0 First 53.1000 4 0 3 male 35.0 0 0 Third 8.0500 .. ... ... ... ... ... ... ... ... 886 0 2 male 27.0 0 0 Second 13.0000 887 1 1 female 19.0 0 0 First 30.0000 888 0 3 female NaN 1 2 Third 23.4500 889 1 1 male 26.0 0 0 First 30.0000 890 0 3 male 32.0 0 0 Third 7.7500 embark_town 0 Southampton 1 Cherbourg 2 Southampton 3 Southampton 4 Southampton .. ... 886 Southampton 887 Southampton 888 Southampton 889 Cherbourg 890 Queenstown [891 rows x 9 columns] . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . survived pclass sex age sibsp parch fare alone embarked_C 0 0 3 1 22.0 1 0 7.2500 0 0.0 1 1 1 0 38.0 1 0 71.2833 0 1.0 2 1 3 0 26.0 0 0 7.9250 1 0.0 3 1 1 0 35.0 1 0 53.1000 0 0.0 4 0 3 1 35.0 0 0 8.0500 1 0.0 .. ... ... ... ... ... ... ... ... ... 705 0 2 1 39.0 0 0 26.0000 1 0.0 706 1 2 0 45.0 0 0 13.5000 1 0.0 707 1 1 1 42.0 0 0 26.2875 1 0.0 708 1 1 0 22.0 0 0 151.5500 1 0.0 710 1 1 0 24.0 0 0 49.5042 1 1.0 embarked_Q embarked_S 0 0.0 1.0 1 0.0 0.0 2 0.0 1.0 3 0.0 1.0 4 0.0 1.0 .. ... ... 705 0.0 1.0 706 0.0 1.0 707 1.0 0.0 708 0.0 1.0 710 0.0 0.0 [564 rows x 11 columns] . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . survived 0.000000 pclass 2.464072 sex 0.844311 age 31.073353 sibsp 0.562874 parch 0.398204 fare 24.835902 alone 0.616766 embarked_C 0.185629 embarked_Q 0.038922 embarked_S 0.775449 dtype: float64 . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . survived 1.000000 pclass 1.878261 sex 0.326087 age 28.481522 sibsp 0.504348 parch 0.508696 fare 50.188806 alone 0.456522 embarked_C 0.152174 embarked_Q 0.034783 embarked_S 0.813043 dtype: float64 . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . survived 1.0000 pclass 3.0000 sex 1.0000 age 80.0000 sibsp 4.0000 parch 5.0000 fare 512.3292 alone 1.0000 embarked_C 1.0000 embarked_Q 1.0000 embarked_S 1.0000 dtype: float64 survived 1.00 pclass 1.00 sex 0.00 age 0.75 sibsp 0.00 parch 0.00 fare 0.00 alone 0.00 embarked_C 0.00 embarked_Q 0.00 embarked_S 0.00 dtype: float64 . Machine Learning . From Tutorials Point%20is,a%20consistence%20interface%20in%20Python). Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python.&gt; Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. Decision Trees, prediction by a piecewise constant approximation. - Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) . DecisionTreeClassifier Accuracy: 0.7352941176470589 LogisticRegression Accuracy: 0.788235294117647 . /home/pluto/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/03/09/AP-unit2-3.html",
            "relUrl": "/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post24": {
            "title": "Tri 2 MCQ Corrections",
            "content": ". Corrections . Q1: Many Web browsers allow users to open anonymous windows. During a browsing session in an anonymous window, the browser does not record a browsing history or a list of downloaded files. When the anonymous window is exited, cookies created during the session are deleted. Which of the following statements about browsing sessions in an anonymous window is true? . A: B) This option is correct. Because the cookies created during the anonymous browsing session were deleted, no information exists in the browser to inform future visits to the same website. Thus, any shopping cart items will not be available for future purchase. . Q2: Which of the following has the greatest potential for compromising a user’s personal privacy? . A: A) This option is correct. The aggregation of information in browser cookies can be used by websites that the user visits to track the user and collect information about the user. . Q3: A chain of retail stores uses software to manage telephone calls from customers. The system was recently upgraded. Customers interacted with the original system using their phone keypad. Customers interact with the upgraded system using their voice. . The upgraded system (but not the original system) stores all information from the calling session in a database for future reference. This includes the customer’s telephone number and any information provided by the customer (name, address, order number, credit card number, etc.). . The original system and the upgraded system are described in the following flowcharts. Each flowchart uses the following blocks. . A: A) Correct. All information from the calling session (including personally identifiable information) is saved in a database. This information could be compromised if an unauthorized individual gains access to the database. . Q5 : Of the following potential benefits, which is LEAST likely to be provided by the upgraded system? . A: B) Correct. The company is not able to provide a human representative for calls made after business hours. . Q6: The upgraded system uses a directory containing additional information not supplied by the customer. The directory is used to help direct calls effectively. Which of the following is LEAST likely to be included in the directory? . A: C)Correct. A list of the company’s computers and their IP addresses is not needed to help direct calls. . Q21: A programmer wrote the program below. The program uses a list of numbers called numList. The program is intended to display the sum of the numbers in the list. In order to test the program, the programmer initializes numList to [0, 1, 4, 5]. The program displays 10, and the programmer concludes that the program works as intended. . Which of the following is true? . A: C) This option is correct. Because the variable sum is initialized to store the value of the first element of numList, and because the iteration block is a FOR EACH loop, the value of the first element is added to sum twice. Since the first element of the list is 0, adding this number to the sum does not affect the sum. A non-zero first element would give an incorrect result. In general, a single test case is not sufficient to confirm that a program works as intended. . Q24: The procedure below is intended to display the index in a list of unique names (nameList) where a particular name (targetName) is found. If targetName is not found in nameList, the code should display 0.Which of the following procedure calls can be used to demonstrate that the procedure does NOT work as intended? . A: C)This option is correct. The procedure will not display the correct value of foundIndex if the targetName is &quot;Ben&quot;. In the FOR EACH loop, when the value of name is &quot;Andrea&quot;, the ELSE statement sets foundIndex to 0. When the value of name is &quot;Ben&quot;, the ELSE statement sets foundIndex to 1. But as the loop continues, and the value of name is &quot;Chris&quot;, the ELSE statement sets foundIndex to 0. The procedure displays 0, even though the correct answer is 1. . Q26: A teacher has a goal of displaying the names of 2 students selected at random from a group of 30 students in a classroom. Any possible pair of students should be equally likely to be selected. Which of the following algorithms can be used to accomplish the teacher’s goal? . A: D) Correct. This algorithm selects 1 student from the group of 30 students, then selects another student from the remaining 29 students. Any possible pair of students is equally likely to be selected. . Q28: Assume that the string oldString contains at least 4 characters. A programmer is writing a code segment that is intended to remove the first two characters and the last two characters from oldString and assign the result to newString. . For example, if oldString contains &quot;student&quot;, then newString should contain &quot;ude&quot;. . Which of the following code segments can be used to assign the intended string to newString ? . Select two answers. . A: D) Correct. The first statement removes the first 2 characters of oldString and assigns the result to tempString. The second statement removes the last 2 characters of tempString and assigns the result to newString. . Q29: What is displayed as a result of executing the code segment? . A: B) Correct. The first three statements assign values to the variables. The fourth statement assigns the value of (NOT (a OR b)) AND c to a. Since a OR b is true, NOT (a OR b) is false, so (NOT (a OR b)) AND c is false. The fifth statement assigns the value of c AND a to c. Since a is now false, c AND a is false. The last three statements display the values of the variables. . Q31: A programmer is creating an algorithm that will be used to turn on the motor to open the gate in a parking garage. The specifications for the algorithm are as follows. . The gate should not open when the time is outside of business hours. The motor should not turn on unless the gate sensor is activated. The motor should not turn on if the gate is already open. . Which of the following algorithms can be used to open the gate under the appropriate conditions? . A: D) Correct. The algorithm continues past the first check if the time is during business hours, the algorithm continues past the second check if the gate sensor is activated, and the algorithm continues past the third check if the gate is not open. Performing the checks in this order will ensure that the gate is opened only under the appropriate conditions. . Q34: Which of the following code segments can be used to move the robot to the gray square? . A: D) Correct. The robot moves forward three spaces, turns to the left, moves forward two spaces, turns to the right, and moves forward three spaces. . Q35: Three teams (Team A, Team B, and Team C) are participating in a trivia contest. Let scoreA represent the number of correct questions for Team A, scoreB represent the number of correct questions for Team B, and scoreC represent the number of correct questions for Team C. Assuming no two teams get the same number of correct questions, which of the following code segments correctly displays the team with the highest number of correct questions? . A: A) Correct. If scoreA is greater than both scoreB and scoreC (the first two IF clauses), then Team A wins. If scoreA is greater than scoreB but not greater than scoreC, then scoreC is greater than both scoreA and scoreB and Team C wins. If scoreB is greater than scoreA (the outer ELSE clause) and scoreC (the IF clause in the outer ELSE), then Team B wins. If scoreB is greater than scoreA but not greater than scoreC, then scoreC is greater than both scoreA and scoreB and Team C wins. . Q36: A numeric test score is to be converted to a letter grade of A, B, or C according to the following rules: A score greater than 90 is considered an A; a score between 80 and 90, inclusive, is considered a B; and any other score is considered a C. . Which of the following code segments will assign the correct letter grade to grade based on the value of the variable score ? . A: D) Correct. Code segment I does not work correctly because it is not possible for &quot;C&quot; to be the value of grade at the end of the code segment. Code segment II correctly assigns &quot;A&quot; when the numeric score is greater than 90, or &quot;B&quot; if the numeric score is not greater than 90 but is greater than or equal to 80, or &quot;C&quot; otherwise. Code segment III assigns &quot;C&quot; when the numeric score is less than 80, or &quot;B&quot; if the numeric score is not less than 80 but is less than or equal to 90, or &quot;A&quot; otherwise. . Q37: If x has a value of 7 and y has a value of 20, what is displayed as a result of executing the code segment? . A: C) Correct. The value &quot;THREE&quot; is displayed whenever x is less than or equal to 10 and y is greater than 3. . Q38: Which of the following code segments is equivalent to the code segment above? . A: B) Correct. The given code segment displays &quot;positive&quot; when num is positive, displays &quot;negative&quot; when num is negative, and displays &quot;zero&quot; when num is 0. This code segment produces the same result. When num is negative, &quot;negative&quot; is displayed. Otherwise, when num is 0, &quot;zero&quot; is displayed. Otherwise, &quot;positive&quot; is displayed. . Q39:Consider the goal of modifying the code segment to count the number of squares the robot visits before execution terminates. Which of the following modifications can be made to the code segment to correctly count the number of squares the robot moves to? . A: A) Correct. Inserting this statement between lines 6 and 7 increases the value of count once each time the robot moves forward, which keeps an accurate count of the number of squares the robot visits. . Q40: When the robot reaches the gray square, it turns around and faces the bottom of the grid. Which of the following changes, if any, should be made to the code segment to move the robot back to its original position in the bottom-left square of the grid and facing toward the bottom of the grid? . A: D)Correct. In order for the robot to move from the gray square back to its original position, it must move forward two squares, turn right, move forward four squares, turn left, and move forward two squares. The same set of moves can be used in both directions, so no change is needed to the algorithm. . Q49: A city planner is using simulation software to study crowd flow out of a large arena after an event has ended. The arena is located in an urban city. Which of the following best describes a limitation of using a simulation for this purpose? . A: B) Correct. Simulations are limited by the model that is used. There may be many reasons for using a simplified model, including ease of implementation. .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/03/07/MCQ-Tri-2-corrections.html",
            "relUrl": "/2023/03/07/MCQ-Tri-2-corrections.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post25": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. - Clouds Impression . Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Python Libraries and Concepts used for Jupyter and Files/Directories . Introduction to displaying images in Jupyter notebook . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | What are the command you use in Windows terminal to access files? | What are some of the major differences? | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | How does the meta data source and label relate to Unit 5 topics? | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano-256.jpg&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;smiley&quot;, &#39;file&#39;: &quot;smile.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image greensquare = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(greensquare) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Translate first 3 letters of your name to Base64. | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | From your consumer experience, what effects have you experienced from buffering? | How do these effects apply to images? | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | Describe Grey Scale algorithm in English or Pseudo code? | Describe scale image? What is before and after on pixels in three images? | Is scale image a type of compression? If so, line it up with College Board terms described? | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano-256.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (320, 240) Scaled size: (320, 240) -- original image -- . grey image - . . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division # how are average pixel values found? if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano-256.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object # what is image data object? print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . grey image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . grey image . - meta data -- Lassen Volcano Peter Carolin lassen-volcano-256.jpg JPEG RGB Original size: (320, 240) Scaled size: (320, 240) -- scaled image -- . grey image . . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.2 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | . 2.3 College Board Practice Problems . . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;College Board&quot;, &#39;label&#39;: &quot;Data Compression&quot;, &#39;file&#39;: &quot;datacompression.png&quot;}, ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # display default images from image_data() default_images = image_data() image_display(default_images) . Playing around with PIL . Things to do . Display the altered image Observations | After altering the image, it is saved but not displayed yet. | . from PIL import Image def main(): try: #Relative Path img = Image.open(&quot;datacompression.png&quot;) #Angle given img = img.rotate(180) #Saved in the same relative location img.save(&quot;rotated_picture.jpg&quot;) except IOError: pass if __name__ == &quot;__main__&quot;: main() # why is image not being displayed . /bin/bash: -c: line 0: syntax error near unexpected token `rotatedpicture.jpg&#39; /bin/bash: -c: line 0: `[](rotatedpicture.jpg)&#39; . from PIL import Image filename = &quot;berserkpanel.jpg&quot; with Image.open(filename) as image: width, height = image.size . from PIL import Image def main(): try: #Relative Path img = Image.open(&quot;berserkpanel.jpg&quot;) width, height = img.size area = (0, 0, width/2, height/2) img = img.crop(area) #Saved in the same relative location img.save(&quot;cropped_picture.jpg&quot;) except IOError: pass if __name__ == &quot;__main__&quot;: main() .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/03/07/AP-unit2-2.html",
            "relUrl": "/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post26": {
            "title": "List and Dictionaries",
            "content": "# &quot;List and Dictionaries&quot; &gt; &quot;Customized list and dictionary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . List and Dictionaries . This section is personalized to me and shows the things I like. This uses iteration - while loop . ThingsILike = [] ThingsILike.append({ &quot;FirstName&quot;: &quot;Ahad&quot; &quot;LastName:&quot; &quot;Biabani&quot; &quot;FavoriteFood:&quot; &quot;Steak&quot;, &quot;FavoriteSport&quot;: &quot;Ice Hockey&quot;, &quot;FavoriteVideoGame&quot;: &quot;BattleField 1&quot;, &quot;FavoriteArtist&quot;: &quot;Destroy Lonely&quot;, &quot;Hobbies&quot;: &quot;Ice Hockey and Video Games&quot;, &quot;FavoriteSubject&quot;: &quot;APCSP&quot; }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;FavoriteFood:&quot;, d_rec[&quot;FavoriteFood&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;FavoriteSport:&quot;, d_rec[&quot;FavoriteSport&quot;]) print(&quot; t&quot;, &quot;FavoriteVideoGame:&quot;, d_rec[&quot;FavoriteVideoGame&quot;]) print(&quot; t&quot;, &quot;FavoriteArtist:&quot;, d_rec[&quot;FavoriteArtist&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;,d_rec[&quot;Hobbies&quot;]) print(&quot; t&quot;, &quot;FavoriteSubject: &quot;,d_rec[&quot;FavoriteSubject&quot;]) print(end= &quot;&quot;) print() print(ThingsILike) #for loop algorithm iterates on length of Things I Like def while_loop():# while loop algorithm contains an initial n and an index incrementing statement (n += 1) print(&quot;While loop output n&quot;) i = 0 while i &lt; len(ThingsILike): record = ThingsILike[i] print_data(record) i += 1 return while_loop() # while loop algorithm contains an initial n and an index incrementing statement (n += 1) . This section is also personalized to me. This section uses iteration - for loop . AboutMe = [] AboutMe.append({ &quot;FirstName&quot;: &quot;Ahad&quot;, &quot;LastName&quot;: &quot;Biabani&quot;, &quot;DOB&quot;: &quot;Sept 18&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;aobiabain@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) print() def for_loop(): print(&quot;For loop output n&quot;) for record in AboutMe: print_data(record) for_loop() . . For loop output Ahad Biabani Email: aobiabain@gmail.com Residence: San Diego Birth Day: Sept 18 Cars: None . This section is also personalized to me. This uses iteration - recursive loop . AboutMe = [] AboutMe.append({ &quot;FirstName&quot;: &quot;Ahad&quot;, &quot;LastName&quot;: &quot;Biabani&quot;, &quot;DOB&quot;: &quot;Sept 18&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;aobiabain@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) print() def recursive_loop(i): if i &lt; len(AboutMe): record = AboutMe[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) # recursion algorithm loops incrementing on each call (n + 1) until exit condition is met . . Recursive loop output Ahad Biabani Email: aobiabain@gmail.com Residence: San Diego Birth Day: Sept 18 Cars: None . This is a quiz stored in a list . questions = 4 # number of quiz questions correct = 0 # initialize number of correct answers as 0 print(&quot;This is a 4 question quiz&quot;) def question_and_answer(prompt, answer): print(&quot;Question: &quot; + prompt) # asks user a question user_input = input() # takes user&#39;s input as variable msg print(&quot;Answer: &quot; + user_input) # print user&#39;s input as Answer if answer == user_input.lower(): # convert user&#39;s input to lowercase print(&quot;Correct Answer&quot;) global correct # allows to modify variable outside of current scope correct += 1 # add 1 to correct count else: print (&quot;Incorrect Answer&quot;) return user_input question_1 = question_and_answer(&quot;What is Ahads last name?&quot;, &quot;Biabani&quot;) question_2 = question_and_answer(&quot;What sport does Ahad play&quot;, &quot;Ice Hockey&quot;) question_3 = question_and_answer(&quot;How old is Ahad&quot;, &quot;16&quot;) question_4 = question_and_answer(&quot;When is his birthday?&quot;, &quot;September 18th&quot;) if correct &lt; 3: print(&#39;You scored {correct} correct answers out of 4, ur bad&#39;) elif correct &lt; 5: print(&#39;You scored {correct} correct answers out of 4, okay&#39;) else: print(&#39;You scored {correct} correct answers out of 4, good&#39;) print(&quot;A record of your quiz:&quot;) . This is a 4 question quiz Question: What is Ahads last name? .",
            "url": "https://ahadb63.github.io/ahadsblog/markdown/2023/03/05/list-and-dictionaries.html",
            "relUrl": "/markdown/2023/03/05/list-and-dictionaries.html",
            "date": " • Mar 5, 2023"
        }
        
    
  
    
        ,"post27": {
            "title": "Project Blog",
            "content": "Pre-view/ Outline and write up . Category Expectation Explanation/Response . Program Purpose and Function | Describes the purpose of the program, describes the program&#39;s functionality, and can take an input and return an output. | The purpose of this website and program is to offer fun games that entertain while also providing a competitive edge. The program uses a virtual currency as well as a leaderboard to engage with the users. In game tokens or currency can be used and earned by interactions. | . Data Abstraction | Shows how data has been stored in a collection and shows data from that collection as it contributes to the overall purpose of the program. Identifies the name of a variable representing the collection being used and describes what the data contained in the collection represents in the program. | Our program abstracts data by creating records that are accessed in the backend database. The purpose of this database is to store information on users(Leaderboard stats, tokens, etc). User ID, name and password are things that are also stored | . Managing Complexity | Shows a collection of data that manages complexity. Explains an alternative method that would have been more complex and explains why that method could not be used or how it would have to be written differently. | There will be many alternative ways to track currency or program each game, so we will show how we chose the simplest way to achieve the desired functionality and explain how it could have been done another way. | . Procedural Abstraction | Shows a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure, and shows where that procedure is called. Describes how the procedure contributes to the functionality of the program. | Each of our 4 games will include all of these. They will all have at least 1 parameter that effects functionality | . Algorithm Implementation | Includes a student-developed algorithm that includes sequencing, selection, and iteration. Explains how the algorithm works in detail enough to where someone could recreate it. | The games that we develop for the virtual arcade will have sufficient algorithms to fit this criteria. | . Testing | Describe two calls to the selected procedure in response 3c. Each call must pass a argument that causes different outputs. Describes conditions being tested by each call. Identifies the result of each call. | We will test different features in each game, which test certain conditions and output different results. | . Create Performance Task . Each of our 4 members has thier own game in the website. This way everyones CPT project will be thier game that they are working on. FOr the N@TM, all of our games will be incorperated into a larget website which we are already doing. Website includes account signup, currency, and a leaderboard. . Code Plan . My code plan uses HTML, JavaScript, and CSS. My code plan has steps that will be completed in order so that nothing is missing/forgotten from the process. My code plan is also subject to change. . User pays 2 tokens to start game | Rules/ How to Play will be displayed before game starts | Game starts classic snake | classic rules Next step occurs when user dies | . | User will be shown a you lose screen | Leaderboard/highscore wil update | Retry/PLay again screen will appear and the process will repeat | Video Plan . In my video, I will show the game running. I will show what happens when you lose and run the game again. Highscores will be kept and updated. Every loss, -1 tokens. If you win, + 50 tokens (snake is hard to complete) There may also be some theme customization .",
            "url": "https://ahadb63.github.io/ahadsblog/cbq/2023/03/05/ProjectBlog.html",
            "relUrl": "/cbq/2023/03/05/ProjectBlog.html",
            "date": " • Mar 5, 2023"
        }
        
    
  
    
        ,"post28": {
            "title": "5.5 and 5.6 Notes",
            "content": "Legal and Ethical Concerns . License Communities, License Types Guide . - .",
            "url": "https://ahadb63.github.io/ahadsblog/notes/2023/02/08/notes-week-22.html",
            "relUrl": "/notes/2023/02/08/notes-week-22.html",
            "date": " • Feb 8, 2023"
        }
        
    
  
    
        ,"post29": {
            "title": "Big Idea 5.6 Safe Computing",
            "content": "Safe Computing . Personal Identifiable Information (PII) . As we create a Web Site and post information we are adding to the Searchable PII. However, there is a dichotomy as a site like LinkedIn is a place where we want to be known for our accomplishments. But be aware, the person that looks at your LinkedIn will, most likely, look at things like TikTok, Instagram or Facebook. . PII considerations . Things that will be known by everyone: Name, Email (suggest a junk email), Picture, High School attended, College Attended, Properties you own, State-City of residence, all State-City of previous residence, Credit Reports, … | Gray area items, more cautious: Birth date, Place of Birth, Street Address, Phone Number, Maiden names of Mother and Grandmother, Drivers License Number, … | Things that you should strive to keep absolutely secret: Credentials for Access, Two-Factor Authentication on Financial accounts, Social Security Number, Tax records, … | . Beware, Establish practices for your own Safety . Multi-factor authentication often requires you to enter a code that has been texted or emailed to you. Other types of authentication are biometrics (finger print or facial recognition). | Malware is often sent in attachments to things in email. Often they request you to click on an attachment and it starts the process of adding a virus to your computer. | Phishing is where unknown sources try to entice you into a response, like click here and receive $500. Often such systems impersonate someone like Amazon asking for login information. Be careful to look closely at source of email (ie amzn.com vs amazon.com). | . Factors to Increase Security of System (recommend Watch 5.6 Video 2) . Most of my financials or critical systems use Multi Factor authentication | Biometrics is something that is used secure systems, fingerprints or facial recognition | Symmetric encryption is a type of encryption where only one key (a secret key) is used to both encrypt and decrypt electronic information. | Asymmetric cryptography, also known as public-key cryptography, is a process that uses a pair of related keys – one public key and one private key – to encrypt and decrypt a message and protect it from unauthorized access or use. | SSL Uses both Asymmetric and Symmetric Encryption | . Nefarious Uses of Internet . A Virus or Malware compromise security, they are opposite of increasing security. | Phishing is a way to get a Virus on your machine, or a way to get you to input PII. | After a Virus or being compromised by Phishing it is advised to review all of you PII vulnerabilities. | . Blog Post Reflection: . Describe PII you have seen on project in CompSci Principles. | When signing up for GitHub I used google. ThIs mean github has access to all the PII stored inside of my google account. Our own porject will be taking user PII in the form of thier full name. | . What are your feelings about PII and your personal exposure? | I think that some people share wayyy to much online and it ends up hurting them in the long run with things like jobs. Ive always kept my online small (compared to others) because of the fear of getting into trouble, or not finding a job later, etc. | . Describe good and bad passwords? What is another step that is used to assist in authentication. | Bad paswords are things that can be easily found out like your name, bday, fav number etc. A good number looks like a combinations of symbols, numbers and charachters that are randomized. | . Try to describe Symmetric and Asymmetric encryption. | Symmetric encryption is an encryption method where the same secret key is used for both encryption and decryption of data. It means that both the sender and the receiver must have the same key to encrypt and decrypt the data. . | Asymmetric encryption is an encryption method where different keys are used for encryption and decryption. The sender uses the receiver’s public key to encrypt the data, and the receiver uses their private key to decrypt the data. The public key can be freely shared and is used for encryption, while the private key must be kept secret and is used for decryption. . | . Provide an example of encryption we used in AWS deployment. | | . Describe a phishing scheme you have learned about the hard way. Describe some other phishing techniques. Sometimes when you click links such as a discord login, it is a fake discord website and they hack you. Fake sites or email address like google.com compared to goggle.com. They create fake logim pages and steal your info | . |",
            "url": "https://ahadb63.github.io/ahadsblog/safe",
            "relUrl": "/safe",
            "date": " • Feb 8, 2023"
        }
        
    
  
    
        ,"post30": {
            "title": "Big Idea 5.5 Legal and Ethical Concerns",
            "content": "Cost of Free . In Mr Mortensen’s most recent years in industry, there were many Lawyers making a profession on Patents and how they can be impacted on General Public Licensing (GPL). . Qualcomm makes its money on patents, if you use GPL software you could be voiding your rights to charge for software and patents. Open Source by nature, specifically GPL, says any derivative work is free and code should be shared. Qualcomm wants all derivative work to require a royalty payment payment, also anyone who uses the idea/patent pays royalty. . . From synopsis.com, “Black Duck® software composition analysis (SCA) helps teams manage the security, quality, and license compliance risks that come from the use of open source and third-party code in applications and containers.” Qualcomm has had 20 technical jobs and 3 lawyers analyzing all the code produced, analyzing code for Open Source inclusion, and analyzing impact of such licenses to its ability to charge royalties for the use of their Patents. . This may sound like a simple problem, but think about the Students of Today, often they are given an assignment and instead of developing their own algorithm they opt to copy something off the internet. Well, don’t think the Workers of Today are entirely different. In summary, it is important to know the type of software license you are copying, it could impact billions of dollars in business. . License Communities, License Types Guide . Adding and selecting a license GitHub instructions. An author, a licensor, needs to determine a license. This may result in asking… Do I want to waive default copyright in reuse? | Do I want to allow derivative works or not? | Do I want to require all derivative code to be shared? | | . Creative Commons Zero v1.0 Universal . The Creative Commons CC0 Public Domain Dedication waives copyright interest in a work you’ve created and dedicates it to the world-wide public domain. . Open Source MIT License . This license in friendly to someone like Qualcomm! This allows using code freely and making and distributing closed source versions. Typically, the author of software with MIT License want credit. Credit could be as simple as adding the authors name in comments. . Close source means the GitHub project could be private. . Open Source GPL License . The GNU GPLv3 also lets people do almost anything they want with your project, except distributing closed source versions. . Open source means the GitHub project must be public. . For a company like Qualcomm, they are required to institute many practices to deliver their code in parts (public vs private). Isolating their patent and secret code, far away from the GPL or Creative Commons code. In fact, a company that is protecting their patents may need to division engineers, split distribution, not deploy to public, etc. After distribution, the customer of the Patented (ie Qualcomm) product is required to put the public/private domain code back together again. . Legal and Ethically . We need to comply with the terms of licenses. We need to cite sources. (I am particularly bad with internet pictures. However, in the picture of the Black Duck above I am actually advertising the Company). . As consumers, we have become aware that Music and Movie companies own content. These companies build DRM (Digital Rights Management) software to protect, play, and/or distribute content. Most of us buy subscriptions to services. However, some figure out ways to bypass systems and allow download. Often we will see these sites disappear, as they are illegal. . In software, it can be more complicated to understand all the Creative Commons licenses and its impact to our own ideas and businesses. Mostly, if we use things in class, there is “no problem” with Open Source as our usage is considered educational use. Creative Commons software has enabled amazing innovation as we are able to do so much for free, as we have done in this class. However, Individuals and Companies are required to figure out techniques and business models in order to use Open Source software according to terms of license. . Long ago, I remember being amazed that Red Hat was not selling its Linux distribution, they were giving away the software. They had to! This was in the terms of the licenses they were using, GPL. However, as an early pioneers in Linux distributions, they established a business model around buying their support agreement. They rose in fortune, became a public company, and had an amazing Initial Public Offering (IPO). Many, many vendors have followed the Red Hat model in building free distributions and establishing unique business models. Qualcomm figured out how to mix Patent and GPL businesses and have flourished since abandoning all proprietary, to include Android in its very complicated business model using Android. . Creative Commons, Open Source are free terminologies! However, businesses will not last without income. And today, businesses won’t last without engineers pulling Open Source software. . Blog Post Reflection . When you create a GitHub repository it requests a license type. Review the license types in relationship to this Tech Talk and make some notes in your personal blog. | Given many different options for license types, GNU GPL v3.0 | MIT License | Apache License 2.0 | GNU GPL v2.0. All these licenses call for your repository to remain an open source of code, which different requirements for people using your code. MIT License will be the most common license for this class, as it allows you to do whatever you want as long as you include the original copyright and license notice in any copy of the software/source. | . | . In your blog, summarize the discussions and personal analysis on Software Licenses/Options, Digital Rights, and other Legal and Ethical thoughts from this College Board topic. Licensing and the legal aspect of it is much more detailed and complicated than i thought it was. | I think licences and digital rights is a great things and its good that there are protective laws so that people follow proper procedure and dont steal content/ideas. | Digital rights and licences serve great importance because they allow for interation between creators and comsumers in places liek socail media and media apps. | . | Make a license for your personal (blog) and Team repositories for the CPT project. Be sure to have a license for both Team GitHub repositories (frontend/backend). Document license(s) you picked and why. FYI, frontend, since it is built on GitHub pages may come with a license and restrictions. Document in blog how team made license choice and process of update. | For our group frontend repo, we have a MIT License because we want to let anyone use our code, just give credit to us and acknowledge the license. Same for our backend repo as well. In order to update or add a license, we needed to create a file called LICENSE and use the MIT License template in GitHub. We entered the copyright year as 2023 under the name TripleAJ. Both repos are now licensed with an MIT License. | .",
            "url": "https://ahadb63.github.io/ahadsblog/legal",
            "relUrl": "/legal",
            "date": " • Feb 8, 2023"
        }
        
    
  
    
        ,"post31": {
            "title": "5.3 and 5.4 Notes",
            "content": "5.3 . Facebook vs TikTok . The biggest demographic of users on facebook (23.7%) is people age 25-34 | The biggest demographic of user on TikTok (32.5%) is people age 10-19 ### Is there descrimination and should it be corrected? | I dont think there is any discrimination. One app is older than the other therefor has older users and TikTok is a newer app so it attracts younger people. Both Facebook and Tiktok both know there demographics and they use this to their advantage. TikTok shows content that appeals to younger generation and facebook shoes content that appeals to older generations. | I dont think this shoukd be corrected becuase there is no discrimination. It is just that one app tends to attract newer generations | This method od uses your demographic to your advantage is good business. ### Why do virtual assistants have female voices? | more attracting | less deep | more inviting | calmer ### Hp computers are racist | I think the video was pretty funny and the dude wasnt being a karen about it. | He jokes about it being intentional but obviously he knows HP didnt program their computers to be racist | I think it wasnt harmful here but in other situations or with other people, some people might take serious offense and it can become a harmful issue. | This kind of issue should be recognized and fixed immediantly | . Summary . I think computer bias is an intresting topic that I never really thought about or looked into before today. Learning about computer bias brings out the emphasis on things like debugging and teamwork. Specifically having a team with lots of different people. Different people allow for different ideas to be shared and used. I also find it interesting how big companies like apple or tiktok use computer bias everyday to attract more people on to thier platfroms. Thinking about computer bias also leads to questions about the future. With new things like ChatGPT, the threat of computer bias increases. What will be the result if AI like chatgpt started to become really bias. . 5.4 . Crowdsourcing . Many websites and companies like Wikipedia use crowdsourcing | Crowdsourcing: The practice of obtaining information or input into a task or project by enlisting the services of a large number of people, either paid or unpaid, typically via the internet. | We have used crowdsorucing here in the form of API&#39;s | covid data is easy to recognize areas that are contributing and not contributing. This data has impacted all our lives and decision we make on attending public events, flying on planes, or wearing masks. The community of data and analysts will spawn many new ways of thinking about data that impacts lives. | . Hacks . We could use crowdsourcing in our own project. gathering game-specific data | Using gathered data we could update our games | we could gather feedback on the website | use feedback to update site | . | We could gather input/feedback/data from past or current CS students to improve the class and the classroom. | during N@TM we could gather feedback and/or ratings for each game then present it on the site. | .",
            "url": "https://ahadb63.github.io/ahadsblog/cbq/2023/02/01/5.3-and-5.4-notes.html",
            "relUrl": "/cbq/2023/02/01/5.3-and-5.4-notes.html",
            "date": " • Feb 1, 2023"
        }
        
    
  
    
        ,"post32": {
            "title": "Project Blog",
            "content": "Pre-view/ Outline and write up . Category Expectation Explanation/Response . Program Purpose and Function | Describes the purpose of the program, describes the program&#39;s functionality, and can take an input and return an output. | The purpose of this website and program is to offer fun games that entertain while also providing a competitive edge. The program uses a virtual currency as well as a leaderboard to engage with the users. In game tokens or currency can be used and earned by interactions. | . Data Abstraction | Shows how data has been stored in a collection and shows data from that collection as it contributes to the overall purpose of the program. Identifies the name of a variable representing the collection being used and describes what the data contained in the collection represents in the program. | Our program abstracts data by creating records that are accessed in the backend database. The purpose of this database is to store information on users(Leaderboard stats, tokens, etc). User ID, name and password are things that are also stored | . Managing Complexity | Shows a collection of data that manages complexity. Explains an alternative method that would have been more complex and explains why that method could not be used or how it would have to be written differently. | There will be many alternative ways to track currency or program each game, so we will show how we chose the simplest way to achieve the desired functionality and explain how it could have been done another way. | . Procedural Abstraction | Shows a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure, and shows where that procedure is called. Describes how the procedure contributes to the functionality of the program. | Each of our 4 games will include all of these. They will all have at least 1 parameter that effects functionality | . Algorithm Implementation | Includes a student-developed algorithm that includes sequencing, selection, and iteration. Explains how the algorithm works in detail enough to where someone could recreate it. | The games that we develop for the virtual arcade will have sufficient algorithms to fit this criteria. | . Testing | Describe two calls to the selected procedure in response 3c. Each call must pass a argument that causes different outputs. Describes conditions being tested by each call. Identifies the result of each call. | We will test different features in each game, which test certain conditions and output different results. | . Create Performance Task . Each of our 4 members has thier own game in the website. This way everyones CPT project will be thier game that they are working on. FOr the N@TM, all of our games will be incorperated into a larget website which we are already doing. Website includes account signup, currency, and a leaderboard. . Code Plan . My code plan uses HTML, JavaScript, and CSS. My code plan has steps that will be completed in order so that nothing is missing/forgotten from the process. My code plan is also subject to change. . User pays 2 tokens to start game | Rules/ How to Play will be displayed before game starts | Game starts classic snake | classic rules Next step occurs when user dies | . | User will be shown a you lose screen | Leaderboard/highscore wil update | Retry/PLay again screen will appear and the process will repeat | Video Plan . In my video, I will show the game running. I will show what happens when you lose and run the game again. Highscores will be kept and updated. Every loss, -1 tokens. If you win, + 50 tokens (snake is hard to complete) There may also be some theme customization .",
            "url": "https://ahadb63.github.io/ahadsblog/cbq/2023/01/30/ProjectBlog.html",
            "relUrl": "/cbq/2023/01/30/ProjectBlog.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post33": {
            "title": "College Board Quiz Results and Corrections",
            "content": "My Score . I got a 36/50 . . Corrections . Q14 . I answered C) Input A can be either true or false | The correct answer is A) Input A must be true. | . | Q15 . I answered C) | The correct answer is D) | . | Q17** . I answered A) and D) | These are shown as the right answers but for some reason I didnt get the point on this question | . | Q19 . I answerd B) Hotel | The right answer is C) November | . | Q23 . I answered D) 1 2 3 4 5 | The right answer is A) 5 | . | Q25 . I answered B) j&gt;=6 | The right answer is A j=6 | . | Q26 . I answered C) | The correct Answer is A) | . | Q29 . I answered D) | The right answer is A) | . | Q30 . I answered A) x ← 4 y ← 1 r ← 0 REPEAT 3 TIMES { drawCircle(x, y, r) r ← r + 1 y ← y + 1 } | The Correct answer is B) | . | Q32 . I answered A) | The correct answer is C) | . | Q34 . I answered c) 250 | The right answer is A) 10 | . | Q37 . I answered C) | The correct answer is B) | . | Q50 . I answered A) A | The correct answer is C) V | . | . Reflections . Overall, my score wasnt the best and I have lots of room to improve. Maybe working with others and collaborating on the quiz could help raise my score. I could also study and focus more on the flowchart problems, seeing I got most of them wrong. .",
            "url": "https://ahadb63.github.io/ahadsblog/cbq/2023/01/30/CBQ2.html",
            "relUrl": "/cbq/2023/01/30/CBQ2.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post34": {
            "title": "5.1 Beneficial and Harmful Effects/ 5.2 Digital Divide (1/24/23)",
            "content": "Open AI and ChatGPT - Pros and Cons . Private company (cant buy stock) | ChatGPT is a disruptive technology changing the way we do things | . | ChatGPT may disrupt comapnies like Google Google gets payed of ads from google search | chat gpt gives more straight forward answers with less clicks compared to google. | . | Google will have to change thier platform and thier revenue model. | Schools are banning ChatGPT Positive: Kids stop cheating, kids arent relying on chatgpt to do thier work. | Cons: Creativity is taken away. Chat GPT is just like google but quicker and more effiecnt (in terms of what kids are using it for like searching answers/studying) | . | . Our Project . Benefits of our project: . Entertaining for the user if they are bored | It’s a good way to spend time with friends or family and have fun together | It’s a learning experience for everyone involved | . Potential con of our project: . It may be slightly buggy (it was developed by high schoolers) | People can procrastinate and play our games | . Dopamine Issues . Modern technolgy has led to an easy acces of dopamine | Easy access to dopamine raises things liek stress levels and it is hard to find other things fun after that | Social Media and digital companies pray of the fact that people, especially kids, get addicted to thier apps such as tiktok | . Personal . I think I use my phone a little too much but it is nothing threatening seeing I play sports, maintain good grades and have a social life. | I should consider decreasing screen time to combat procrastination | . Digital Divide . Unlike our school, lots of others have little to the technology we have we take our technology for granted | . | When the pandemic hit and digital learning increased, people who didnt have constant access to internet or technology suffered. | . Digital empowerment . Develop digital literacy skills . | Build a strong online presence . | Protect personal data . | Stay informed . | Network and collaborate . | Continuously learn and adapt . | How does someone that is empowered help someone that is not empowered? Describe something you could do at Del Norte HS. . If someone is more digitally empowered than another. THe obvious step is to share. Sharing resoucres such as wifi or laptops or iphones can help digitally empower another student. | Another way of helping without directly providing something physical is helping/teaching. Doing things like signing up for tutorial or asking questions from more knowledgable peers will help one increare there digital power | . Is paper or red tape blocking digital empowerment? Are there such barriers at Del Norte? Elsewhere? . Paper and red tape can slow down and stop digital empowerment becuase they make it harder to access information. These older systems take up more time and are less effiecnt as well as less knowledgeable. Digitilizing information makes it more convientint and effecient for others. | Example : Blocks on websites on PUSD Wifi some neccesary websites and applications require the bypassing of the school wifi. | . | .",
            "url": "https://ahadb63.github.io/ahadsblog/5.1%20notes/5.2%20notes/2023/01/24/week-20-notes.html",
            "relUrl": "/5.1%20notes/5.2%20notes/2023/01/24/week-20-notes.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post35": {
            "title": "CPT Grading 3",
            "content": "Submission 1 . My Score: . My Rubric . College Board Score: . College Board Rubric . Reflection: . . Submission 2 . My Score: . My Rubric . College Board Score: . College Board Rubric . Reflection: . . Submission 3 . My Score: . My Rubric . College Board Score: . College Board Rubric . Reflection: . . Submission 4 . My Score: . My Rubric . College Board Score: . College Board Rubric . Reflection: . . takeaway .",
            "url": "https://ahadb63.github.io/ahadsblog/cpt3/2023/01/18/CPT-Grading-3.html",
            "relUrl": "/cpt3/2023/01/18/CPT-Grading-3.html",
            "date": " • Jan 18, 2023"
        }
        
    
  
    
        ,"post36": {
            "title": "Model and Object-Oriented Programming",
            "content": "Morts code . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11)) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) . JSON ready string: {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175} Raw Variables of object: {&#39;_name&#39;: &#39;Thomas Edison&#39;, &#39;_uid&#39;: &#39;toby&#39;, &#39;_password&#39;: &#39;sha256$9a8S4Pq01Nsodrj7$dd8869522055f7e696bc67d4ec6038373426ff78989929c910cb81b60fa1c723&#39;, &#39;_dob&#39;: datetime.date(1847, 2, 11)} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Thomas Edison, uid=toby, password=sha256$9a8S4Pq01Nsodrj7$dd8869522055f7e696bc67d4ec6038373426ff78989929c910cb81b60fa1c723,dob=1847-02-11) . Hacks Complete . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json #Start code for hacks with my b day and age def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) dob = date(2005, 9, 18) age = calculate_age(dob) print(age) class User: def __init__(self, name, uid, password, dob, classOf): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob self._classOf = classOf @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) @property def classOf(self): return self._classOf # a setter function, allows classOf to be updated after initial object creation @classOf.setter def name(self, classOf): self._classOf = classOf # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11), classOf=&#39;1865&#39;) u2 = User(name=&#39;Ahad Biabani&#39;, uid=&#39;Ahadb&#39;, password=&#39;Ahadb05&#39;, dob=date(2005, 9, 18), classOf=&#39;2024&#39;) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) print(&quot;JSON ready string: n&quot;, u2, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u2), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u2), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u2), &quot; n&quot;) . 17 JSON ready string: {&#34;name&#34;: &#34;1865&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175} Raw Variables of object: {&#39;_name&#39;: &#39;Thomas Edison&#39;, &#39;_uid&#39;: &#39;toby&#39;, &#39;_password&#39;: &#39;sha256$QLH8bOjsTBxHC89v$113df62e3512d645a6ea463f2eaaf85a920d8a5d945a3ac6fce94ae2d0c2a023&#39;, &#39;_dob&#39;: datetime.date(1847, 2, 11), &#39;_classOf&#39;: &#39;1865&#39;} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_classOf&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;classOf&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Thomas Edison, uid=toby, password=sha256$QLH8bOjsTBxHC89v$113df62e3512d645a6ea463f2eaaf85a920d8a5d945a3ac6fce94ae2d0c2a023,dob=1847-02-11) JSON ready string: {&#34;name&#34;: &#34;2024&#34;, &#34;uid&#34;: &#34;Ahadb&#34;, &#34;dob&#34;: &#34;01-06-2006&#34;, &#34;age&#34;: 17} Raw Variables of object: {&#39;_name&#39;: &#39;Ahad Biabani&#39;, &#39;_uid&#39;: &#39;Ahadb&#39;, &#39;_password&#39;: &#39;sha256$5rH0mTcTLI89t1M4$084cfd6833c1fcdcf962ac8e4597c591ec5dd2630538c9dddbd80625bac2f9f1&#39;, &#39;_dob&#39;: datetime.date(2006, 1, 6), &#39;_classOf&#39;: &#39;2024&#39;} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_classOf&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;classOf&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Ahad Biabani, uid=Ahadb, password=sha256$5rH0mTcTLI89t1M4$084cfd6833c1fcdcf962ac8e4597c591ec5dd2630538c9dddbd80625bac2f9f1,dob=2006-01-06) .",
            "url": "https://ahadb63.github.io/ahadsblog/oop/model%20and%20object-oriented%20programming/2023/01/16/OOP-hacks.html",
            "relUrl": "/oop/model%20and%20object-oriented%20programming/2023/01/16/OOP-hacks.html",
            "date": " • Jan 16, 2023"
        }
        
    
  
    
        ,"post37": {
            "title": "CPT Grading 2",
            "content": "Submission 1 . My Score: 1/6 . My Rubric . College Board Score: 1/6 . College Board Rubric . Reflection: My scoring and the college board scoring were similar on this submission. I recognized that the submission was missing a lot of components so they werent able to earn full points. . . Submission 2 . My Score: 6/6 . My Rubric . College Board Score: 6/6 . College Board Rubric . Reflection: My scoring and the college board scoring were the same. I felt like this submission was checking all the boxes as I was going through the rubric. I can use this as an example and for tips so that I also get full points. . . Submission 3 . My Score: 6/6 . My Rubric . College Board Score: 5/6 . College Board Rubric . Reflection: Again my score and college board&#39;s score are very similar this time mine being one points too high. This means that I recognized most of the good work the submission had but I might have went to easy on them and awarded another point . . Submission 4 . My Score: 5/6 . My Rubric . College Board Score: 3/6 . College Board Rubric . Reflection: This time my score and college boards score were a little off. I may have not analyzed the submissin correctly in accordance to the rubric therefor ending up giving the submission more points than it deserves. . . takeaway . Using both CPT grading 1 and 2, I am able to take away lots of information from the submissions. I now know what to do and what not do. Looking at succesful CPT projects has enabled me to take ideas and implement them into my own project for a full score. .",
            "url": "https://ahadb63.github.io/ahadsblog/cpt/2023/01/16/CPT-Grading-2.html",
            "relUrl": "/cpt/2023/01/16/CPT-Grading-2.html",
            "date": " • Jan 16, 2023"
        }
        
    
  
    
        ,"post38": {
            "title": "Submission 1",
            "content": "Submission 1 . Reporting Category Requirements Student Score College Board Score Comments . Program Purpose and Function | - [x] input | - [x] program functionality | - [x] output | - [x] It describes the overall purpose of the program. | - [x] describes what functionality of the program is demonstrated in the video. | - [x] describes the input and output of the program demonstrated in the video. | . | 1 | 0 | Submission one meets and fits all the requirements in this category. The program is functional, and gives a good description of the whole program | . Data Abstraction | - [x] It also includes two program code segments: | - [x] one that shows how data has been stored in this list (or other collection type). | - [x] Also one that shows the data in this same list being used as part of fulfilling the program’s purpose. | - [x]It also identifies the name of the variable representing the list being used in this response. | - [x] It describes what the data contained in this list is representing in the program. | . | 1 | 1 | Provides code segments and shoes how data is being inputed ans stored. User could have explained code segments a little more. | . Managing Complexity | - [ ] Also includes a program code segment that shows a list being used to manage complexity in the program. | - [ ] explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . | 0 | 0 | The submission does not get any points because it doesnt fulfill any of the criteria here | . Procedural Abstraction | - [x] It includes two program code segments: | - [x] one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. | - [x] one showing where the student-developed procedure is being called. | - [x] It describes what the identified procedure does and how it contributes to the overall functionality of the program. | . | 1 | 1 | The Submission has everything required for this section so they received full points | . Algorithmic Implementation | - [x] includes a program code segment of a student-developed algorithm that includes | - [x] sequencing | -[x] selection | [x] iteration | -[x]explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | &lt;/td&gt; 1 | 1 | Everything is describedand the algorithms are in use and explained well, code segments, sequencing, iteration, and selection are included | &lt;/tr&gt; Testing | - [x] describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. | -[x] describes the condition(s) being tested by each call to the procedure. | -[x] identifies the result of each call. | . | 1 | 1 | The submission fits all the criteria for this part | . &lt;/tbody&gt; &lt;/table&gt; Student 1 Reflection: The submission receieved 5/6. They had all the neccesary work completed for all the categories but the Managing Complexity section. They missed all the points possible in the managing complexity section becuase they met none of the requirements for that section. My score differs from teh college board score. College Board gave them a 4/6/, they lost points in the first category. The Submission needs to include something like a list so they can gain points for the managing complexity section. . Submission 2 . Reporting Category Requirements Student Score College Board Score Comments . Program Purpose and Function | - [x] input | - [x] program functionality | - [x] output | - [x] It describes the overall purpose of the program. | - [x] describes what functionality of the program is demonstrated in the video. | - [x] describes the input and output of the program demonstrated in the video. | . | 1 | 1 | All the requirements are met in this section. | . Data Abstraction | - [x] It also includes two program code segments: | - [x] one that shows how data has been stored in this list (or other collection type). | - [x] Also one that shows the data in this same list being used as part of fulfilling the program’s purpose. | - [x]It also identifies the name of the variable representing the list being used in this response. | - [x] It describes what the data contained in this list is representing in the program. | . | 1 | 1 | The submission has all the requirements met here and they even added comments to the code | . Managing Complexity | - [x] Also includes a program code segment that shows a list being used to manage complexity in the program. | - [x] explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . | 1 | 1 | The submission has all the requirements met and there are examples of required items | . Procedural Abstraction | - [x] It includes two program code segments: | - [x] one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. | - [x] one showing where the student-developed procedure is being called. | - [x] It describes what the identified procedure does and how it contributes to the overall functionality of the program. | . | 1 | 1 | The submission has all the requirements met. | . Algorithmic Implementation | - [x] includes a program code segment of a student-developed algorithm that includes | - [x] sequencing | -[x] selection | [x] iteration | -[x]explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | &lt;/td&gt; 1 | 1 | The submission has all the requirements met | &lt;/tr&gt; Testing | - [x] describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. | -[x] describes the condition(s) being tested by each call to the procedure. | -[x] identifies the result of each call. | . | 1 | 1 | Everything is described well and organized. | . &lt;/tbody&gt; &lt;/table&gt; Student 2 Reflection: The student had all the requirements that the college board rubric had. College board also scored this submission full points. The student consistenlt provided comments and examples to demonstrate they meet college board standards. In my own work I can use examples or techniques from this subbmission to help make sure I also get full points on my CPT. Using techniques like adding comments and mulitple examples for everything is good because it ensure that no points are missed. . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . | . | .",
            "url": "https://ahadb63.github.io/ahadsblog/2023/01/15/CPT-Grading-1.html",
            "relUrl": "/2023/01/15/CPT-Grading-1.html",
            "date": " • Jan 15, 2023"
        }
        
    
  
    
        ,"post39": {
            "title": "Notes Week 15",
            "content": "3.8 and 3.10 . Lists . Lists: a sequence of variables . we can use lists to store multiple items into one variable | used to store collections of data | changeable, ordered, allow duplicates | . fruits = [&quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot;] index = 1 print (fruits[index]) # Index starts at 0 and not 1, so grape will be printed and not apple (College Board starts at 1) . grape . sports = [&quot;football&quot;, &quot;soccer&quot;, &quot;baseball&quot;, &quot;golf&quot;, &quot;basketball&quot;] # add &quot;golf&quot; as the 3rd element in the list print (sports) . [&#39;football&#39;, &#39;soccer&#39;, &#39;baseball&#39;, &#39;golf&#39;, &#39;basketball&#39;] . sports = [&quot;football&quot;, &quot;hockey&quot;, &quot;baseball&quot;, &quot;basketball&quot;] # change the value &quot;soccer&quot; to &quot;hockey&quot; print (sports) . [&#39;football&#39;, &#39;hockey&#39;, &#39;baseball&#39;, &#39;basketball&#39;] . Output of list practice is unusual, | . | . Iteration . Iteration is the repetition of a process or utterance applied to the result or taken from a previous statement. | Types of Iteration include using a &quot;for loop&quot;, using a &quot;for loop and range()&quot;, using a &quot;while loop&quot;, and using comprehension | . a = [&#39;alpha&#39;, &#39;bravo&#39;, &#39;charlie&#39;] itr = iter(a) print(next(itr)) print(next(itr)) print(next(itr)) . alpha bravo charlie . Loops . Well, above is basically just printing them again, so how do we takes these iterators into something we can make use for? | Loops take essentially what we did above and automates it, here are some examples. | . Iteration HW . words = [&quot;alfa&quot;, &quot;bravo&quot;, &quot;charlie&quot;, &quot;delta&quot;, &quot;echo&quot;, &quot;foxtrot&quot;, &quot;golf&quot;, &quot;hotel&quot;, &quot;india&quot;, &quot;juliett&quot;, &quot;kilo&quot;, &quot;lima&quot;, &quot;mike&quot;, &quot;november&quot;, &quot;oscar&quot;, &quot;papa&quot;, &quot;quebec&quot;, &quot;romeo&quot;, &quot;sierra&quot;, &quot;tango&quot;, &quot;uniform&quot;, &quot;victor&quot;, &quot;whiskey&quot;, &quot;xray&quot;, &quot;yankee&quot;, &quot;zulu&quot;] inp = input().lower() itr = iter(words) name = [&quot;delta&quot;, &quot;alpha&quot;, &quot;hotel&quot;] d = &quot;delta&quot; a = &quot;alfa&quot; h = &quot;hotel&quot; . 2d List Challenge . print_matrix3 = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] . 3.8 and 3.10 Hacks . hacks for 3.8 and 3.10 . sports = [&quot;football&quot;, &quot;hockey&quot;, &quot;baseball&quot;, &quot;basketball&quot;] # change the value &quot;soccer&quot; to &quot;hockey&quot; print (sports) . [&#39;football&#39;, &#39;hockey&#39;, &#39;baseball&#39;, &#39;basketball&#39;] . sports = [&quot;football&quot;, &quot;soccer&quot;, &quot;baseball&quot;, &quot;golf&quot;, &quot;basketball&quot;] # add &quot;golf&quot; as the 3rd element in the list print (sports) . [&#39;football&#39;, &#39;soccer&#39;, &#39;baseball&#39;, &#39;golf&#39;, &#39;basketball&#39;] . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] . def print_matrix3(matrix): for row in matrix: print(*row) print_matrix3(keypad) . 1 2 3 4 5 6 7 8 9 0 . def print_matrix1(matrix): for i in range(len(matrix)): for j in range(len(matrix[i])): print(matrix[i][j], end=&quot; &quot;) . print(&quot;Raw matrix (list of lists): &quot;) print(keypad) print(&quot;Matrix printed using nested for loop iteration:&quot;) print_matrix1(keypad) print() . Raw matrix (list of lists): [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&#39; &#39;, 0, &#39; &#39;]] Matrix printed using nested for loop iteration: 1 2 3 4 5 6 7 8 9 0 . def print_matrix2(matrix): for row in matrix: # Iterates through rows. Iterates through every value in matrix and list. for col in row: # Iterates value in row. row values stored in col. print(col, end=&quot; &quot;) print() print_matrix2(keypad) . 1 2 3 4 5 6 7 8 9 0 . words = [&quot;alfa&quot;, &quot;bravo&quot;, &quot;charlie&quot;, &quot;delta&quot;, &quot;echo&quot;, &quot;foxtrot&quot;, &quot;golf&quot;, &quot;hotel&quot;, &quot;india&quot;, &quot;juliett&quot;, &quot;kilo&quot;, &quot;lima&quot;, &quot;mike&quot;, &quot;november&quot;, &quot;oscar&quot;, &quot;papa&quot;, &quot;quebec&quot;, &quot;romeo&quot;, &quot;sierra&quot;, &quot;tango&quot;, &quot;uniform&quot;, &quot;victor&quot;, &quot;whiskey&quot;, &quot;xray&quot;, &quot;yankee&quot;, &quot;zulu&quot;] output = &quot;&quot; for letter in inp: for word in words: if letter == word[0]: # fidns rigth words output += word + &quot; &quot; # adds space print(inp + &quot; n&quot; + output) # input is ahad biabani . . Print what month you were born and how old you are by iterating through the keyboard (don&#39;t just write a string). . keyboard = [[&quot;`&quot;, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] . month = keyboard[2][1] + keyboard[1][2] + keyboard[1][9] + keyboard[1][4] + keyboard[1][2] + keyboard[3][6] + keyboard[3][4] + keyboard[1][2] + keyboard[1][3] age = str(keyboard[0][1]) + str(keyboard[0][8]) print(month[:1] + month[1:].lower()) print(age) . September 18 . NOTES . VARIABLE : A variable is a named location in a computer&#39;s memory where a programmer can store and retrieve data. The data stored in a variable can be of various types, such as numbers, strings, or booleans (true or false values). . DATA TYPE : Data types refer to the different types of data that a variable can hold. Some common data types include integers, floating-point numbers, strings, and booleans. . ASSIGNMENT OPERATORS : Assignment operators are used to assign a value to a variable. For example, the equal sign (=) is an assignment operator that is used to assign a value to a variable on the left side of the equal sign. . LISTS : Lists are a data structure that allows a programmer to store and manipulate multiple values in a single, ordered collection. . 2D LISTS :lists are lists that contain other lists as elements. They can be thought of as a grid, with rows and columns, where each element in the grid is itself a list. . DICTIONARIES : Dictionaries are another data structure that allows a programmer to store and manipulate data. Unlike lists, which are ordered collections of data, dictionaries are unordered collections of key-value pairs. . CLASS ALGORITHMS : A class is a concept in object-oriented programming that allows a programmer to define a new data type. A class can contain variables and functions (called methods) that operate on those variables. . ALGORITHMS Algorithms are a set of steps or instructions that a computer can follow to solve a problem or accomplish a task. . SEQUENCE : A sequence is a common control flow pattern in which a set of instructions is executed in order, one after the other. . SELECTION : Selection is a control flow pattern in which a program only executes certain instructions depending on whether a certain condition is met. . ITERATION : Iteration is a control flow pattern in which a set of instructions is executed repeatedly until a certain condition is met. This is often accomplished using a looping construct, such as a for loop or a while loop. . Expressions: In programming, an expression is a combination of values, variables, and operators that produces a result. Expressions can be used to perform calculations, assign values to variables, or as part of larger statements or programs. . Comparison Operators: Comparison operators are used to compare two values and determine whether they are equal, greater than, less than, or not equal to each other. Some common comparison operators include == (equal to), &gt; (greater than), &lt; (less than), &gt;= (greater than or equal to), and &lt;= (less than or equal to). . Boolean Expressions and Selection: A boolean expression is an expression that evaluates to either True or False. Boolean expressions are often used in selection statements, such as if and elif, to determine whether a certain block of code should be executed based on the value of the expression. . Boolean Expressions and Iteration: Boolean expressions can also be used in iteration statements, such as for and while, to control the number of times a loop is executed. For example, a while loop can be used to repeat a block of code as long as a boolean expression is True. . Truth Tables: A truth table is a table that displays the output of a logical expression for every possible combination of input values. Truth tables are used to analyze and understand the behavior of logical expressions, such as boolean expressions. . Characters: In programming, a character is a single letter, digit, punctuation mark, or other symbol that can be represented by a single code point in a computer&#39;s memory. Characters are often used to represent text or other types of data in programs. . Strings: A string is a sequence of characters that represents text or other data in a program. Strings are often used to store names, messages, or other types of data that need to be manipulated or displayed in a program. . Length: The length of a string is the number of characters it contains. In programming, the length of a string can be determined using the len() function. . Concatenation: Concatenation is the process of combining two or more strings into a single string. In programming, strings can be concatenated using the + operator. . Upper: The upper() function is used to convert a string to uppercase, meaning that all the letters in the string are converted to their uppercase counterparts. . Lower: The lower() function is used to convert a string to lowercase, meaning that all the letters in the string are converted to their lowercase counterparts. . Traversing Strings: Traversing a string refers to the process of iterating over the characters in a string one by one. This can be done using a loop or other iteration statement, such as a for loop. . Python If, Elif, Else Conditionals: The if statement in Python is used to execute a block of code only if a certain condition is met. The elif statement is used to specify additional conditions to be tested if the condition in the if statement is not met, and the else statement is used to specify a block of code to be executed if none of the conditions in the if and elif statements are met. . Nested Selection Statements: Nested selection statements are selection statements that are placed inside another selection statement. This allows for more complex logic to be implemented in a program, as the inner selection statements can be used to test additional conditions or execute different code based on the result of the outer selection statement. . Python For, While Loops with Range: The for loop in Python is used to iterate over a sequence of values, such as a list or a range of numbers. The while loop is used to execute a block of code repeatedly as long as a certain condition is met. The range() function is used to generate a sequence of numbers that can be used as the iterable in a for loop. . Python For, While Loops with List: The for loop and while loop can also be used to iterate over the elements of a list. This allows the code inside the loop to be executed for each element in the list. . Combining Loops with Conditionals to Break, Continue: Loops and conditionals can be combined in various ways to control the flow of a program. The break statement is used to exit a loop prematurely, and the continue statement is used to skip the rest of the current iteration of a loop and move on to the next one. . Procedural Abstraction: Procedural abstraction is a programming technique that involves breaking a complex task into smaller, more manageable pieces or procedures. This makes it easier to understand and work with large programs by dividing them into smaller, more easily understood units of code. . Python Def Procedures: In Python, a procedure is a block of code that performs a specific task and can be called multiple times from different parts of a program. Procedures are defined using the def keyword and can have parameters, which are variables that are used to pass data into the procedure, and return values, which are the values that the procedure returns to the caller when it is finished. . Parameters: In programming, parameters are variables that are used to pass data into a function or procedure. Parameters are specified when a function or procedure is defined, and the values for the parameters are provided when the function or procedure is called. . Return Values: In programming, a return value is the value that is returned to the caller of a function or procedure when it is finished executing. Return values are specified using the return keyword and can be used to pass data back to the caller or to indicate the status or result of the function or procedure. . result = 3 + 4 x = 3 * 4 + 5 if x &gt; 10: print(&quot;x is greater than 10&quot;) # expressions . if x &lt;= 3: print(&quot;x is less than or equal to 3&quot;) # comparasin operators . if x &gt; 3: print(&quot;x is greater than 3&quot;) elif x &lt; 3: print(&quot;x is less than 3&quot;) else: print(&quot;x is equal to 3&quot;) . x is greater than 3 . while x &gt; 3: print(&quot;x is still greater than 3&quot;) x -= 1 for i in range(10): if i % 2 == 0: print(f&quot;{i} is even&quot;) else: print(f&quot;{i} is odd&quot;) . x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 x is still greater than 3 0 is even 1 is odd 2 is even 3 is odd 4 is even 5 is odd 6 is even 7 is odd 8 is even 9 is odd . print(&quot;AND operator:&quot;) print(f&quot;True AND True = {True and True}&quot;) print(f&quot;True AND False = {True and False}&quot;) print(f&quot;False AND True = {False and True}&quot;) print(f&quot;False AND False = {False and False}&quot;) . AND operator: True AND True = True True AND False = False False AND True = False False AND False = False . x = &#39;a&#39; . x = 3 y = 4 print(x + y) print (&quot;variable example&quot;) . 7 variable example . my_var = 10 # This is a variable with a floating-point data type my_other_var = 10.5 # This is a variable with a string data type my_string = &quot;Hello, world!&quot; print(&quot;data type examples&quot;) . data type examples . my_var = 10 # This is a variable that is assigned the value of another variable my_other_var = my_var print(&quot;assignment operator example&quot;) . assignment operator example . my_list = [&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;] # This is a list of integers my_other_list = [1, 2, 3, 4, 5] # This is an empty list my_empty_list = [] print(&quot;list examples&quot;) . list examples . 3.12 - 3.13 Notes . ## Calling Procedures | . Slide 1: . A (procedure) is a named group of programming instructions that may have parameters and return values. | Procedures are referred to by different names, such as (method) or (function), depending on the programing language. | Parameters are input values of a procedure. (arguments) specify the values of the parameters when procedure is called. | A procedure call interrupts the sequential execution of statements causing the program to execute the statements within the procedure before continuing. One the last statement in the procedure (or a return statement) has executed, flow or control is returned to the point immediately following where the procedure was (called). | . Slide 2: . When calling procedures, it&#39;s important to take notice to whether it returns data, or a block of (statements). | If the procedure just returns a block of statements, you call the procedure by referring to the procedure name, and (input) the arguments. | If the procedure returns some sort of data like a (boolean) or (value), then you will assign that value to a variable | . Slide 3: . Assume the Temperature outside is Fahrenheit. | The procedure convertFahrenheit is intended to convert from Fahrenheit to Celsius. | Convert the following psuedocode to python | . ## Developing Procedures | . Slide 8: . Picking a descriptive name is important in case you revisit the code later on (separate words with capitals) There are 2 different types of procedures- ones that return a value and those that simply execute a block of statements Steps of developing procedure: picking a useful name, thinking of parameters (what data does the procedure need to know), making a flowchart or writing procedure in pseudocode, and actually developing the procedure. . Slide 9: . In this example, a teacher is writing a program that will replace the grade on a previous quiz if the new grade is better than the previous. . quizGrade = 0 currentPoints = 100 def replace_quiz_grade(currentPoints): global quizGrade currentGrade = currentPoints / 40 currentGrade = currentGrade * 100 if currentGrade &gt; quizGrade: quizGrade = currentGrade print(quizGrade) replace_quiz_grade(currentPoints) print(quizGrade) . 3.12-3.13 Homework and hacks . def grade_tracker(): math_grade = input(&quot;What is your current grade in Math? &quot;) chemistry_grade = input(&quot;What is your current grade in Chemistry? &quot;) computer_science_grade = input(&quot;What is your current grade in Computer Science? &quot;) history_grade = input(&quot;What is your current grade in History? &quot;) print(&quot;Here are your current grades:&quot;) print(&quot;Math: &quot; + math_grade) print(&quot;Chemistry: &quot; + chemistry_grade) print(&quot;Computer Science: &quot; + computer_science_grade) print(&quot;History: &quot; + history_grade) grade_tracker() . Here are your current grades: Math: 90 Chemistry: 90 Computer Science: 90 History: 82 . 3.14 and 3.15 . Libraries . A library is a collection of precompiled codes that can be used later on in a program for some specific well-defined operations. | These precompiled codes can be referred to as modules. Each module contains bundles of code that can be used repeatedly in different programs. | A library may also contain documentation, configuration data, message templates, classes, and values, etc. | . Why are libraries important? . Using Libraries makes Python Programming simpler and convenient for the programmer. | One example would be through looping and iteration, as we don’t need to write the same code again and again for different programs. | Python libraries play a very vital role in fields of Machine Learning, Data Science, Data Visualization, etc. | . A few libraries that simplify coding processes: . Pillow allows you to work with images. | Tensor Flow helps with data automation and monitors performance. | Matplotlib allows you to make 2D graphs and plots. | . Hacks . pygame library: used for creating games in python. Pygame offers altered code and third party services to easily run and create games in python | Tensor flow is a python library that is used for computer learning and AI. This library caters towards building and running AI and computer learning in python. | . Homework . import random n = 10 even_numbers = [] odd_numbers = [] for i in range(n): num = random.randint(1, 100) if num % 2 == 0: even_numbers.append(num) else: odd_numbers.append(num) # Print the lists of even and odd numbers print(&quot;Even numbers:&quot;, even_numbers) print(&quot;Odd numbers:&quot;, odd_numbers) . Even numbers: [86, 18, 64, 76, 92] Odd numbers: [25, 49, 35, 45, 65] . import numpy as np def f(x): return 2 * x**5 - 6 * x**2 + 24 * x x = np.linspace(-10, 10, 100) dfdx = np.gradient(f(x)) print(dfdx) . [1.94309469e+04 1.86627722e+04 1.71729445e+04 1.57742420e+04 1.44628691e+04 1.32351110e+04 1.20873336e+04 1.10159834e+04 1.00175879e+04 9.08875536e+03 8.22617458e+03 7.42661527e+03 6.68692788e+03 6.00404362e+03 5.37497442e+03 4.79681302e+03 4.26673287e+03 3.78198822e+03 3.33991404e+03 2.93792609e+03 2.57352086e+03 2.24427563e+03 1.94784840e+03 1.68197796e+03 1.44448384e+03 1.23326634e+03 1.04630650e+03 8.81666144e+02 7.37487828e+02 6.11994882e+02 5.03491387e+02 4.10362186e+02 3.31072878e+02 2.64169819e+02 2.08280124e+02 1.62111667e+02 1.24453077e+02 9.41737454e+01 7.02238171e+01 5.16341972e+01 3.75165485e+01 2.70632913e+01 1.95476044e+01 1.43234240e+01 1.08254447e+01 8.56911877e+00 7.15065649e+00 6.24702608e+00 5.61595374e+00 5.09592357e+00 4.60617762e+00 4.14671591e+00 3.79829636e+00 3.72243488e+00 4.16140527e+00 5.43823933e+00 7.95672675e+00 1.22014152e+01 1.87376103e+01 2.82113755e+01 4.13495324e+01 5.89596604e+01 8.19300968e+01 1.11229937e+02 1.47909034e+02 1.93098000e+02 2.48008202e+02 3.13931770e+02 3.92241586e+02 4.84391295e+02 5.91915298e+02 7.16428753e+02 8.59627576e+02 1.02328844e+03 1.20926879e+03 1.41950680e+03 1.65602142e+03 1.92091237e+03 2.21636011e+03 2.54462585e+03 2.90805159e+03 3.30906005e+03 3.75015473e+03 4.23391990e+03 4.76302055e+03 5.34020246e+03 5.96829216e+03 6.65019694e+03 7.38890483e+03 8.18748465e+03 9.04908594e+03 9.97693903e+03 1.09743550e+04 1.20447257e+04 1.31915236e+04 1.44183022e+04 1.57286956e+04 1.71264186e+04 1.86152668e+04 1.93829518e+04] . import numpy as np def f(x): return 2 * x**5 - 6 * x**2 + 24 * x x = np.linspace(-10, 10, 100) dfdx = np.gradient(f(9)) print(dfdx) . [] . import numpy as np def f(x): return (13 * x**4 + 4 * x**2) / 2 dfdx = np.gradient(f(9)) print(dfdx) . [] . import random # Create a list of dogs and cats dogs_and_cats = [&quot;dog&quot;] * 10 + [&quot;cat&quot;] * 10 # Shuffle the list to create a random order random.shuffle(dogs_and_cats) # Print the list to see the random order print(dogs_and_cats) . [&#39;dog&#39;, &#39;dog&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;dog&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;dog&#39;, &#39;cat&#39;, &#39;dog&#39;, &#39;dog&#39;, &#39;dog&#39;, &#39;dog&#39;, &#39;dog&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;dog&#39;] . 3.16 HW . simulation ideas . planets crashing | cars crashing | objects falling (gravity) | . this is a simulation including gravity and an object falling . pos = 0 vel = 5 # Define the time step (in seconds) dt = 0.1 # Simulate the motion of the object while pos &gt;= 0: # Update the position of the object pos += vel * dt print(f&quot;Position: {pos}&quot;) # Update the velocity of the object (assuming constant acceleration) vel += -9.81 * dt # Print a message when the object hits the ground print(&quot;The object has hit the ground!&quot;) # This simulation models the motion of an object under the influence of gravity. # It updates the position and velocity of the object at each time step, using a simple kinematic equation. # The simulation continues until the object hits the ground (i.e., its position becomes negative), at which point it prints a message. . Position: 0.5 Position: 0.9019 Position: 1.2057000000000002 Position: 1.4114000000000002 Position: 1.5190000000000001 Position: 1.5285000000000002 Position: 1.4399000000000002 Position: 1.2532 Position: 0.9684000000000001 Position: 0.5855000000000001 Position: 0.10450000000000015 Position: -0.4745999999999998 The object has hit the ground! . Simulation example . Desmos graphing calculator | simulates and graphs equations | . . 3.17 - 3.18 Notes . What is Algorithmic Efficiency? . The ability of an algorithm to solve a problem in an efficient way | An efficient algorithm solves a problem quickly and with a minimum amount of resources, such as time and memory. | . How do we determine if an algorithm is efficient or not? . One way we can do this is by determining the time complexity of the algorithm | Another way is through space complexity | . heuristic solution: an approach to a problem that produces a solution that isn’t necessarily optimal but can be used when normal methods to an optimal solution would take forever | algorithmic efficiency: The ability of an algorithm to solve a problem in an efficient way | decidable problem: problem in cs and mathematics for which an algo can be created that can always produce a correct answer | undecidable problem: problem in cs and mathematics for which it is impossible to create an algorithm that can always provide a correct answer or solution. | . Undecidable code . def check_truth(statement): if statement == &quot;This statement is false&quot;: return &quot;UNDECIDABLE&quot; else: return statement result = check_truth(&quot;This statement is false&quot;) print(result) . UNDECIDABLE . def halts(program, input): # This function cannot be implemented because the Halting Problem is undecidable pass . import time def linear_search(lst, x): start_time = time.perf_counter_ns() # records time (nanoseconds) for i in range(len(lst)): # loops through the entire list if lst[i] == x: # until the x value we are looking for is found end_time = time.perf_counter_ns() # records time again total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time print(&quot;Found element after {} loops in {} microseconds&quot;.format(i+1, total_time)) # prints the results return print(&quot;Your number was found at&quot;, i) end_time = time.perf_counter_ns() # records the time again total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time print(&quot;Element not found after {} loops in {} microseconds&quot;.format(len(lst), total_time)) # prints the results return &quot;Your number wasn&#39;t found :(&quot; lst = list(range(1, 10001)) # list with numbers 1-10000 x = 5000 # replace with an integer between 1 and 10000 (I suggest big numbers like 500, 2000, so on) linear_search(lst, x) # runs procedure . Found element after 5000 loops in 347 microseconds Your number was found at 4999 . import time def binary_search(lt, x): start_time = time.perf_counter_ns() # starts timer low = 0 # sets the lower side mid = 0 # sets mid value high = len(lt) -1 # sets the higher side num_loops = 0 # number of loops the search undergoes to find the x value while low&lt;=high: # Loop ran until mid is reached num_loops += 1 # adds one loop each time process is repeated mid = (low + high) // 2 # takes the lowest and highest possible numbers and divides by 2 and rounds to closest whole # if lt[mid] == x: end_time = time.perf_counter_ns() # records time total_time = (end_time - start_time) // 1000 # time in microseconds print(&quot;Element found after {} loops in {} microseconds&quot;.format(num_loops, total_time)) # prints the results return mid # returns the index value elif lt[mid] &gt; x: # if mid was higher than x value, then sets new highest value as mid -1 high = mid -1 elif lt[mid] &lt; x: low = mid + 1 # if mid was lower than x, sets the new low as mid + 1 end_time = time.perf_counter_ns() total_time = (end_time - start_time) // 1000 print(&quot;Element not found after {} loops in {} microseconds&quot;.format(num_loops, total_time)) # prints the results return &quot;Your number wasn&#39;t found :(&quot; lt = list(range(1, 10001)) # list with numbers 1-10000 x = 1000 # replace with an integer between 1 and 10000 (I suggest big numbers like 500, 2000, so on) binary_search(lt, x) # runs procedure . Element found after 11 loops in 3 microseconds . 999 . . . graph description. . The first graph seems to be more linear than the second. Becuase the first graph is linear it is always increasing so he bigger your number is, the longer it takes to identify your number. My seconf graph is supposed to represent a more logarithmic function. the logarithmic like graph mean that it increases slower than the linear one. The second graph has a steeper curve meaning it will take less time to indentify your number. | . 3.18 hw . def binary_search(arr, target): &quot;&quot;&quot;Searches for a given target in a sorted array using binary search&quot;&quot;&quot; low = 0 high = len(arr) - 1 while low &lt;= high: mid = (low + high) // 2 if arr[mid] == target: return mid elif arr[mid] &lt; target: low = mid + 1 else: high = mid - 1 return -1 . while True: # Do some action print(&quot;I&#39;m running forever!&quot;) . I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! I&#39;m running forever! . KeyboardInterrupt Traceback (most recent call last) /vscode/ahadsblog/_notebooks/2022-12-15-Week 15 Notes.ipynb Cell 63 in &lt;cell line: 3&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2022-12-15-Week%2015%20Notes.ipynb#Y120sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; while True: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2022-12-15-Week%2015%20Notes.ipynb#Y120sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; # Do some action -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2022-12-15-Week%2015%20Notes.ipynb#Y120sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; print(&#34;I&#39;m running forever!&#34;) File ~/anaconda3/lib/python3.9/site-packages/ipykernel/iostream.py:531, in OutStream.write(self, string) 529 is_child = (not self._is_master_process()) 530 # only touch the buffer in the IO thread to avoid races --&gt; 531 self.pub_thread.schedule(lambda: self._buffer.write(string)) 532 if is_child: 533 # mp.Pool cannot be trusted to flush promptly (or ever), 534 # and this helps. 535 if self._subprocess_flush_pending: File ~/anaconda3/lib/python3.9/site-packages/ipykernel/iostream.py:216, in IOPubThread.schedule(self, f) 214 self._events.append(f) 215 # wake event thread (message content is ignored) --&gt; 216 self._event_pipe.send(b&#39;&#39;) 217 else: 218 f() File ~/anaconda3/lib/python3.9/site-packages/zmq/sugar/socket.py:547, in Socket.send(self, data, flags, copy, track, routing_id, group) 540 data = zmq.Frame( 541 data, 542 track=track, 543 copy=copy or None, 544 copy_threshold=self.copy_threshold, 545 ) 546 data.group = group --&gt; 547 return super(Socket, self).send(data, flags=flags, copy=copy, track=track) File zmq/backend/cython/socket.pyx:718, in zmq.backend.cython.socket.Socket.send() File zmq/backend/cython/socket.pyx:765, in zmq.backend.cython.socket.Socket.send() File zmq/backend/cython/socket.pyx:242, in zmq.backend.cython.socket._send_copy() File ~/anaconda3/lib/python3.9/site-packages/zmq/backend/cython/checkrc.pxd:13, in zmq.backend.cython.checkrc._check_rc() KeyboardInterrupt: .",
            "url": "https://ahadb63.github.io/ahadsblog/notes/3.8/3.1/2022/12/15/Week-15-Notes.html",
            "relUrl": "/notes/3.8/3.1/2022/12/15/Week-15-Notes.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Grades",
            "content": "Grades . 3.1 &amp; 3.2 3.3 and 3.4 3.5-3.7 3.8-3.10 3.9-3.11 3.12-3.13 3.14-3.15 3.16 3.17-3.18 . 0.95/1 | 1/1 | .9/1 | .9/1 | 3.3/4 | 0.9/1 | 0.9/1 | notposted | notposted | .",
            "url": "https://ahadb63.github.io/ahadsblog/grades/2022/12/15/GRADES.html",
            "relUrl": "/grades/2022/12/15/GRADES.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Notes Week 14",
            "content": "Grades . 3.1 &amp; 3.2 3.3 and 3.4 Total . 0.95/1 | 1/1 | 1.95/2 | . 3.1 and 3.2 . Variables . Using meaningful variable names help with readability and help keep stuff organized | be concisive with variables and thier names | . Integer . numbers | . text/string . words phrases | . Boolean . True or False | . List of data can be stored in variable . easily remove/add/change items into the list | print/retrieve specific values in the list without creating a lot of variables | help reduce need for new variables, simplifying the complexity | . Assignments . assignment operator allows a program to change the value represented by a variable. | assigns values to variables | Different operators lile =, +=, /=, *=, etc are used to change value of a variable | . Data Abstraction . Method used in coding to represent data in a useful form, by taking away aspects of data that aren&#39;t being used in the situation | Variables and lists are primary tools in data abstraction | data abstractions help manage complexity in programs by giving a collection of data a name without refernecing the specific detailsof the representation. | . Lists and Strings . list -&gt; ordered sequence of elements | Element -&gt; individual value in a list that is assigned to a unique index | Index -&gt; a way to reference the elements in a list or string using natural numbers; each element of a string is referenced by an index | String -&gt; ordered sequence of charachters (letters, numbers, special charachters.) | . Lists . allow data abstraction | bundles variables togther | can keep adding elements | can store elemetns as a single variable by using a list | . QuestionsandAnswers= { &quot;#1 | What is the operator that displays only true or false?&quot;: &quot;boolean&quot;, &quot;#2 | What lessons were taught by students this week?&quot;: &quot;3.1-3.4&quot;, &quot;#3 | Who is the best teacher?&quot;: &quot;mr.mort&quot;, &quot;#4 | Why are variables important?&quot;: &quot;meaningful variable names help with readability and help keep stuff organized&quot;, &quot;#5 | What is a list in coding?&quot;: &quot;ordered sequence of elements&quot;, } def QuestionandResponse(Question): # display the question then return a response print(Question) Response = input() return Response Correct = 0 # Setting up the start of the quiz print(&quot;Number of questions: &quot; + str(len(QuestionsandAnswers))) # Looks through code till desired answer for key in QuestionsandAnswers: rsp = QuestionandResponse(key) #answer input is saved to a variable rsp = rsp.lower() # answer is case sensitive, so match response to lowercase for answer key to work if rsp == QuestionsandAnswers[key]: # checks if answer is correct accoring to Questions and answers variale defined at the top. print(f&quot;Correct! --&gt; {rsp}&quot;) correct += 1 else: # if else statement to print either correct or incorrect print(f&quot;{rsp} is super wrong&quot;) percent = str(round(correct/len(QandA), 2)*100) # calculate percentage print(&quot;You scored &quot; + str(correct) +&quot;/&quot; + str(len(QandA))) print(f&quot;This is {percent}%&quot;) # print score and percentage . QuestionsandAnswers= { &quot;#1 | What is the operator that displays only true or false?&quot;: &quot;boolean&quot;, &quot;#2 | What lessons were taught by students this week?&quot;: &quot;3.1-3.4&quot;, &quot;#3 | Who is the best teacher?&quot;: &quot;mr.mort&quot;, &quot;#4 | Why are variables important?&quot;: &quot;meaningful variable names help with readability and help keep stuff organized&quot;, &quot;#5 | What is a list in coding?&quot;: &quot;ordered sequence of elements&quot;, } def QuestionandResponse(Question): # display the question then return a response print(Question) Response = input() return Response Correct = 0 # Setting up the start of the quiz print(&quot;Number of questions: &quot; + str(len(QuestionsandAnswers))) # Looks through code till desired answer for key in QuestionsandAnswers: rsp = QuestionandResponse(key) #answer input is saved to a variable # answer is case sensitive, so match response to lowercase for answer key to work if rsp == QuestionsandAnswers[key]: # checks if answer is correct accoring to Questions and answers variale defined at the top. print(f&quot;Correct! --&gt; {rsp}&quot;) correct += 1 else: # if else statement to print either correct or incorrect print(f&quot;{rsp} is super wrong&quot;) print(&quot;You scored &quot; + str(correct) +&quot;/&quot; + str(len(QuestionsandAnswers))) . colorList=[&quot;green&quot;, &quot;red&quot;, &quot;Blue&quot;] colorlist2=[] print(str(colorList)) . 3.3 and 3.4 . Algorithms can be represeted in different ways . flow charts | . strings . len() finds length | lower() converts to lowercase | concat() returns a string made up of the concatenated strings ex. concat(&quot;string1&quot;, &quot;string2&quot;) would return string1string2 | substring() returns the characters from the string beginning at the at the first position to the last so an example of this would be substring (&quot;abcdefghijk&quot;, 2, 5) would print bcde (pseudocode starts at 1) | . 3.3 and 3.4 hacks . Variable hacks . Problem 1 : 23.91 | Problem 2 : 1.25 | Problem 3 : 17 | Problem 4 : straightbrownshort | . Num1 = 50 Num2 = Num1 % 9 + 15 # 50 / 9 +15 = 20.5 Num3 = Num2 / Num1 + ( Num2 * 2 ) # 20.5/50 + (20.5 x 2) = 44.41 Num4 = Num3 + Num1 / 5 - 10 # 44.41+50/5 -10 Result = Num4 - Num2 RESULT = 23.91 . Num1 = 10 Num2 = Num1 % 3 * 4 #10/12 or 0.83 Num1 = Num2 # num 1 is now alos 0.83 Num3 = Num1 * 3 # num 3 is 2.5 Result = Num3 % 2 #num 3 (2.5) becomes 1.25 Result = 1.25 . valueA = 4 valueB = 90 valueC = 17 valueB = valueC - valueA # 17 - 4 valueA = valueA * 10 # 4 x 10 if valueB &gt; 10: # b is bigger than 10 print(valueC) # c stays 17 Result = 17 . type = &quot;curly&quot; color = &quot;brown&quot; length = &quot;short&quot; type = &quot;straight&quot; hair = type + color + length # straight + brown + short print(hair) . String hacks . Problem 1: &quot; Mr.Mortenson is very handsome. | Problem 2: | . Noun = &quot;Mr.Mortenson&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;Very&quot; Verb = &quot;is&quot; abrev = subtring(Noun, 1, 7) yoda = concat(Adjective2, &quot; &quot;, Adjective, &quot; &quot;, abrev, &quot; &quot;,Verb, &quot;.&quot;) display[yoda] . NameError Traceback (most recent call last) /vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb Cell 13 in &lt;cell line: 5&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb#X15sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; Adjective2 = &#34;Very&#34; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb#X15sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; Verb = &#34;is&#34; -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb#X15sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; abrev = subtring(Noun, 1, 7) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb#X15sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; yoda = concat(Adjective2, &#34; &#34;, Adjective, &#34; &#34;, abrev, &#34; &#34;,Verb, &#34;.&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb#X15sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; display[yoda] NameError: name &#39;subtring&#39; is not defined . cookie = len(&quot;choclate&quot;) # 8 cookie2 = len(&quot;rasin&quot;) # 5 len1 = cookie / 2 # 8/2 = 4 len2 = cookie2 * 45 # 5 x 45 = 225 vote1 = (cookie, &quot;vote&quot;, len2) # 8, vote, 225 vote2 = (cookie2, &quot;vote&quot;, len1) # 5, vote, 4 votes = concat(vote1, &quot; &quot;, vote2) #8 vote 225 5 vote 4 display[votes] # 225 vote chocolate, 4 vote rasin . NameError Traceback (most recent call last) /vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb Cell 14 in &lt;cell line: 7&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; vote1 = (cookie, &#34;vote&#34;, len2) # 8, vote, 225 &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; vote2 = (cookie2, &#34;vote&#34;, len1) # 5, vote, 4 -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; votes = concat(vote1, &#34; &#34;, vote2) #8 vote 225 5 vote 4 &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; display[votes] NameError: name &#39;concat&#39; is not defined . 3.5 , 3.6 , 3.7 Notes and Problems . Boolean: data type with two possible values (true or false) | Selection(conditionals): uses a condition that evaluates to true or false Selection determines which part of an algorithm are executed based on a condition being true or false | . | Algorithm is a finite set of instructions that accomplish a specific task | Nested conditional statements consist of conditional statements within other conditional statements | | . grade1 = 90 grade2 = 65 grade3 = 60 grade4 = 75 grade5 = 95 GradeAverage = (90 + 65 + 75 + 60 + 95) / 5 if GradeAverage &gt; 80 : print(GradeAverage) else : print(&quot;no&quot;) . print(&quot;100 == 100:&quot;,100==100) print(&quot;Hello == Adios:&quot;,&quot;greeting&quot;==&quot;farewell&quot;) print(&quot;Hello != Adios:&quot;,&quot;greeting&quot;!=&quot;farewell&quot;) print(&quot;Hello == Hola:&quot;,&quot;greeting&quot;==&quot;greeting&quot;) print(&quot;5&gt;=4:&quot;, 5&gt;=4) print (&#39;&#39;) # Notice that relational operators can even work on lists! # For lists, the relational operator compares each respective component until an answer is derived print(&quot;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]:&quot;, [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]) print(&quot;[1,2,3,5] &gt; [1,2,3,4]:&quot;, [1,2,3,5] &gt; [1,2,3,4]) print(&quot;[1,2,3,5] &lt; [1,2,3,4]:&quot;, [1,2,3,5] &lt; [1,2,3,4]) print(&quot;[1,2,3,5] == [1,2,3,4]:&quot;, [1,2,3,5] == [1,2,3,4]) . print(&quot;1 &gt; 2 or 5 &lt; 12:&quot;,) # Output TRUE using OR ^ # Output FALSE using NOT print(&quot;24 &gt; 8:&quot;,) # Output FALSE using AND print(&quot;10 &gt; 20:&quot;, 10 &gt; 20 and false) . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) else: print(&quot;x is not greater than y&quot;) . x = 2 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) else: print(&quot;x is not greater than y&quot;) . num1 = 100 num2 = 100 sum = num1 + num2 if sum &gt;= 200: print(&quot;200&quot;) else: print(sum) . Analyzing Code Walkthrough . score = 82 if (score &gt;= 90) { console.log(&quot;You got an A, congrats!&quot;) } else { if (score &gt;= 75) { console.log(&quot;Please come to retake up to a 90 next week at tutorial!&quot;) } else { console.log(&quot;You have detention!&quot;) } } //will print &#39;Please come to retake up to a 90 next week at tutorial!&#39; because score &gt;= 75. //javascript dont work on python base kernel . protein = 25 carbs = 36 sugar = 11 if (carbs &gt;= 55 || protein &lt;= 20 || sugar &gt;= 15) { console.log(&quot;Your lunch is too unhealthy, please pick a new one&quot;) } else { if (carbs &lt; 35 || protein &lt; 25) { console.log (&quot;This lunch is alright but try to add some more carbs or protein&quot;) } else { if (sugar &gt;= 11) { console.log (&quot;Looks great but lets see if we can cut down on sugar, we don&#39;t want diabetes!&quot;) } else { console.log (&quot;Amazing, you created a healthy lunch!!!&quot;) } } } // will print &quot;Looks great but lets see if we can cut down on sugar, we don&#39;t want diabetes!&quot; //javascript dont work on python base kernel . Writing Nested Code Activity . hours = 25 if (hours &lt;= 8) { print(&quot;inexpierenced, 50k salary&quot;) } else { if (hours &gt;= 10) { print(&quot;expierenced, 150k salary&quot;) } else { print(&quot;Expierenced, 90k salary&quot;) } } //javascript dont work on python base kernel . 3.5 - 3.7 hacks . Write a program that fits these conditions using nested conditionals: . If the product is expired, print &quot;this product is no good&quot; If the cost is above 50 dollars, and the product isn&#39;t expired, print &quot;this product is too expensive&quot; If the cost is 25 dollars but under 50, and the product isn&#39;t expired, print &quot;this is a regular product&quot; If the cost is under 25 dollars, print &quot;this is a cheap product&quot; . x = &quot;expired&quot; product = x cost = 70 if (product &lt;= x, cost &lt;= 50): print(&quot;This product good and not expensive&quot; ); else: if (product &gt;= x, cost &gt;= 50): print(&quot;Product is not good and expensive&quot;); else: if (product &lt;= x, cost &lt;= 25): print(&quot;regular product&quot;) else: print(&quot;cheap product&quot;) . This product good and not expensive . x = 0 score = x # Question One print(&quot;What is 1 + 1&quot;) answer_1 = input(&quot;a)1 b)2 c)3 d)4:&quot;) if answer_1.lower() == &quot;b&quot; or answer_1.lower() == &quot;2&quot;: print(&quot;Correct&quot;) x = x + 1 else: print(&quot;Incorrect, 1 + 1 is 2&quot;) # Question Two print(&quot;What is my name?&quot;) answer_2 = input(&quot;a)ahad b)akshat c)xeem d)josh:&quot;) if answer_2.lower() == &quot;a&quot; or answer_2.lower() == &quot;ahad&quot;: print(&quot;Correct&quot;) x = x + 1 else: print(&quot;Incorrect, my name is Ahad&quot;) # Question Three print(&quot;True or False Ahad is 17&quot;) answer_3 = input(&quot;:&quot;) if answer_3.lower() == &quot;true&quot; or answer_3.lower() == &quot;T&quot;: print(&quot;Correct&quot;) x = x + 1 else: print(&quot;Incorrect&quot;) #Total Score score = float(x / 3) * 100 print(x,&quot;out of 3, that is&quot;,score, &quot;%&quot;) . What is 1 + 1 Correct What is my name? Correct True or False Ahad is 17 Incorrect 2 out of 3, that is 66.66666666666666 % .",
            "url": "https://ahadb63.github.io/ahadsblog/notes%2011/28/22/3.1/3.2/2022/12/01/Notes.html",
            "relUrl": "/notes%2011/28/22/3.1/3.2/2022/12/01/Notes.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Week 13 Lesson Planning",
            "content": "Our Group . - .",
            "url": "https://ahadb63.github.io/ahadsblog/week13/2022/11/22/Week-13.html",
            "relUrl": "/week13/2022/11/22/Week-13.html",
            "date": " • Nov 22, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "List and Dictionaries",
            "content": "# &quot;List and Dictionaries&quot; &gt; &quot;Customized list and dictionary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . List and Dictionaries . This section is personalized to me and shows the things I like. This uses iteration - while loop . ThingsILike = [] ThingsILike.append({ &quot;FirstName&quot;: &quot;Ahad&quot; &quot;LastName:&quot; &quot;Biabani&quot; &quot;FavoriteFood:&quot; &quot;Steak&quot;, &quot;FavoriteSport&quot;: &quot;Ice Hockey&quot;, &quot;FavoriteVideoGame&quot;: &quot;BattleField 1&quot;, &quot;FavoriteArtist&quot;: &quot;Destroy Lonely&quot;, &quot;Hobbies&quot;: &quot;Ice Hockey and Video Games&quot;, &quot;FavoriteSubject&quot;: &quot;APCSP&quot; }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;FavoriteFood:&quot;, d_rec[&quot;FavoriteFood&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;FavoriteSport:&quot;, d_rec[&quot;FavoriteSport&quot;]) print(&quot; t&quot;, &quot;FavoriteVideoGame:&quot;, d_rec[&quot;FavoriteVideoGame&quot;]) print(&quot; t&quot;, &quot;FavoriteArtist:&quot;, d_rec[&quot;FavoriteArtist&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;,d_rec[&quot;Hobbies&quot;]) print(&quot; t&quot;, &quot;FavoriteSubject: &quot;,d_rec[&quot;FavoriteSubject&quot;]) print(end= &quot;&quot;) print() print(ThingsILike) #for loop algorithm iterates on length of Things I Like def while_loop():# while loop algorithm contains an initial n and an index incrementing statement (n += 1) print(&quot;While loop output n&quot;) i = 0 while i &lt; len(ThingsILike): record = ThingsILike[i] print_data(record) i += 1 return while_loop() # while loop algorithm contains an initial n and an index incrementing statement (n += 1) . This section is also personalized to me. This section uses iteration - for loop . AboutMe = [] AboutMe.append({ &quot;FirstName&quot;: &quot;Ahad&quot;, &quot;LastName&quot;: &quot;Biabani&quot;, &quot;DOB&quot;: &quot;Sept 18&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;aobiabain@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) print() def for_loop(): print(&quot;For loop output n&quot;) for record in AboutMe: print_data(record) for_loop() . . For loop output Ahad Biabani Email: aobiabain@gmail.com Residence: San Diego Birth Day: Sept 18 Cars: None . This section is also personalized to me. This uses iteration - recursive loop . AboutMe = [] AboutMe.append({ &quot;FirstName&quot;: &quot;Ahad&quot;, &quot;LastName&quot;: &quot;Biabani&quot;, &quot;DOB&quot;: &quot;Sept 18&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;aobiabain@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) print() def recursive_loop(i): if i &lt; len(AboutMe): record = AboutMe[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) # recursion algorithm loops incrementing on each call (n + 1) until exit condition is met . . Recursive loop output Ahad Biabani Email: aobiabain@gmail.com Residence: San Diego Birth Day: Sept 18 Cars: None . This is a quiz stored in a list . questions = 4 # number of quiz questions correct = 0 # initialize number of correct answers as 0 print(&quot;This is a 4 question quiz&quot;) def question_and_answer(prompt, answer): print(&quot;Question: &quot; + prompt) # asks user a question user_input = input() # takes user&#39;s input as variable msg print(&quot;Answer: &quot; + user_input) # print user&#39;s input as Answer if answer == user_input.lower(): # convert user&#39;s input to lowercase print(&quot;Correct Answer&quot;) global correct # allows to modify variable outside of current scope correct += 1 # add 1 to correct count else: print (&quot;Incorrect Answer&quot;) return user_input question_1 = question_and_answer(&quot;What is Ahads last name?&quot;, &quot;Biabani&quot;) question_2 = question_and_answer(&quot;What sport does Ahad play&quot;, &quot;Ice Hockey&quot;) question_3 = question_and_answer(&quot;How old is Ahad&quot;, &quot;16&quot;) question_4 = question_and_answer(&quot;When is his birthday?&quot;, &quot;September 18th&quot;) if correct &lt; 3: print(&#39;You scored {correct} correct answers out of 4, ur bad&#39;) elif correct &lt; 5: print(&#39;You scored {correct} correct answers out of 4, okay&#39;) else: print(&#39;You scored {correct} correct answers out of 4, good&#39;) print(&quot;A record of your quiz:&quot;) . This is a 4 question quiz Question: What is Ahads last name? .",
            "url": "https://ahadb63.github.io/ahadsblog/markdown/2022/11/15/list-and-dictionaries.html",
            "relUrl": "/markdown/2022/11/15/list-and-dictionaries.html",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "MC Corrections and Final Presentation notes/review",
            "content": "Final Presentation Notes . For the final presentations I took notes on Haozuan, Aj, Paaras, and Samarth&#39;s group. . Theme of thier website: Motivational Website They provided a quote generator | quotes -included happy quotes, motivational quotes (used api) | . | They had a tracker/voter-thingy to see how many people disliked or liked the joke | A counter would tell you the stats of the quote | . | . I think this group did a great job on thier site, it was ver9y detailed and appealing. . College Board Quiz Corrections . Q5: My answer was A (II only), Correct answer was B(III only) | Q30: My answer was A (Keeping the numeric values in a list makes it easier to round a number to the nearest integer.) Correct answer is B(Keeping the numeric values in a list makes it easier to apply the same computation to every data element.) | Q34: My answer was C([&quot;flute&quot;, &quot;violin&quot;]), the correct answer was B([&quot;guitar&quot;, &quot;drums&quot;, &quot;bass&quot;]) | Q19: My answer was B(An overflow error will occur because 4 bits is not large enough to represent either of the values 14 or 15.), The correct answer was C(An overflow error will occur because 4 bits is not large enough to represent 29, the sum of 14 and 15.) | Q20: My answer was B(Four bits are not enough to store the eight directions. Eight bits are needed for the new version of the game.), The correct answer was D(Four bits are enough to store the eight directions.) | Q23: My answer was A(The position of the runner is determined by calculating the time difference between the start and the end of the race and making an estimation based on the runner’s average speed.). The correct answer was D(The position of the runner is sampled at regular intervals to approximate the real-word position, and a sequence of bits is used to represent each sample.) | Q37: My answer was A, the correct answer was B | Q41: My answer was D(40), the correct answer was B(20) | Q45: My answer was A(count1 = 2, count2 = 2). The correct answer is B(count1 = 2, count2 = 3) | Q49: My answer was A(wordword ←concat(reverse(word), word)). The correct asnwer is C(word ←&quot;on&quot;word ←concat(reverse(word), word)). | . img .",
            "url": "https://ahadb63.github.io/ahadsblog/final/2022/11/07/Final.html",
            "relUrl": "/final/2022/11/07/Final.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . import http.client conn = http.client.HTTPSConnection(&quot;corona-virus-world-and-india-data.p.rapidapi.com&quot;) headers = { &#39;X-RapidAPI-Key&#39;: &quot;3d86dd31a2mshca1f32e22e2396cp1f7302jsn610cf54ceeb6&quot;, &#39;X-RapidAPI-Host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } conn.request(&quot;GET&quot;, &quot;/api_india_timeline&quot;, headers=headers) res = conn.getresponse() data = res.read() print(data.decode(&quot;utf-8&quot;)) . [{&#34;dailyconfirmed&#34;:&#34;1&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;30 January 2020&#34;,&#34;dateymd&#34;:&#34;2020-01-30&#34;,&#34;totalconfirmed&#34;:&#34;1&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;31 January 2020&#34;,&#34;dateymd&#34;:&#34;2020-01-31&#34;,&#34;totalconfirmed&#34;:&#34;1&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;1 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-01&#34;,&#34;totalconfirmed&#34;:&#34;1&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;1&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;2 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-02&#34;,&#34;totalconfirmed&#34;:&#34;2&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;1&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;3 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-03&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;4 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-04&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;5 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-05&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;6 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-06&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;7 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-07&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;8 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-08&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;9 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-09&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;10 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-10&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;11 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-11&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;12 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-12&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;1&#34;,&#34;date&#34;:&#34;13 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-13&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;1&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;14 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-14&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;1&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;15 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-15&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;1&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;1&#34;,&#34;date&#34;:&#34;16 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-16&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;2&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;17 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-17&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;2&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;18 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-18&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;2&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;19 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-19&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;2&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;1&#34;,&#34;date&#34;:&#34;20 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-20&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;21 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-21&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;22 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-22&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;23 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-23&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;24 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-24&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;25 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-25&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;26 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-26&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;27 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-27&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;28 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-28&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;29 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-29&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;1 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-01&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;2&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;2 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-02&#34;,&#34;totalconfirmed&#34;:&#34;5&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;1&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;3 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-03&#34;,&#34;totalconfirmed&#34;:&#34;6&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;22&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;4 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-04&#34;,&#34;totalconfirmed&#34;:&#34;28&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;2&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;5 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-05&#34;,&#34;totalconfirmed&#34;:&#34;30&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;1&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;6 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-06&#34;,&#34;totalconfirmed&#34;:&#34;31&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;3&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;7 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-07&#34;,&#34;totalconfirmed&#34;:&#34;34&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;5&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;8 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-08&#34;,&#34;totalconfirmed&#34;:&#34;39&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;9&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;9 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-09&#34;,&#34;totalconfirmed&#34;:&#34;48&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;15&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;1&#34;,&#34;date&#34;:&#34;10 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-10&#34;,&#34;totalconfirmed&#34;:&#34;63&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;4&#34;},{&#34;dailyconfirmed&#34;:&#34;8&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;11 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-11&#34;,&#34;totalconfirmed&#34;:&#34;71&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;4&#34;},{&#34;dailyconfirmed&#34;:&#34;10&#34;,&#34;dailydeceased&#34;:&#34;1&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;12 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-12&#34;,&#34;totalconfirmed&#34;:&#34;81&#34;,&#34;totaldeceased&#34;:&#34;1&#34;,&#34;totalrecovered&#34;:&#34;4&#34;},{&#34;dailyconfirmed&#34;:&#34;10&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;6&#34;,&#34;date&#34;:&#34;13 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-13&#34;,&#34;totalconfirmed&#34;:&#34;91&#34;,&#34;totaldeceased&#34;:&#34;1&#34;,&#34;totalrecovered&#34;:&#34;10&#34;},{&#34;dailyconfirmed&#34;:&#34;11&#34;,&#34;dailydeceased&#34;:&#34;1&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;14 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-14&#34;,&#34;totalconfirmed&#34;:&#34;102&#34;,&#34;totaldeceased&#34;:&#34;2&#34;,&#34;totalrecovered&#34;:&#34;10&#34;},{&#34;dailyconfirmed&#34;:&#34;10&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;3&#34;,&#34;date&#34;:&#34;15 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-15&#34;,&#34;totalconfirmed&#34;:&#34;112&#34;,&#34;totaldeceased&#34;:&#34;2&#34;,&#34;totalrecovered&#34;:&#34;13&#34;},{&#34;dailyconfirmed&#34;:&#34;14&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;1&#34;,&#34;date&#34;:&#34;16 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-16&#34;,&#34;totalconfirmed&#34;:&#34;126&#34;,&#34;totaldeceased&#34;:&#34;2&#34;,&#34;totalrecovered&#34;:&#34;14&#34;},{&#34;dailyconfirmed&#34;:&#34;20&#34;,&#34;dailydeceased&#34;:&#34;1&#34;,&#34;dailyrecovered&#34;:&#34;1&#34;,&#34;date&#34;:&#34;17 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-17&#34;,&#34;totalconfirmed&#34;:&#34;146&#34;,&#34;totaldeceased&#34;:&#34;3&#34;,&#34;totalrecovered&#34;:&#34;15&#34;},{&#34;dailyconfirmed&#34;:&#34;25&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;18 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-18&#34;,&#34;totalconfirmed&#34;:&#34;171&#34;,&#34;totaldeceased&#34;:&#34;3&#34;,&#34;totalrecovered&#34;:&#34;15&#34;},{&#34;dailyconfirmed&#34;:&#34;27&#34;,&#34;dailydeceased&#34;:&#34;1&#34;,&#34;dailyrecovered&#34;:&#34;5&#34;,&#34;date&#34;:&#34;19 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-19&#34;,&#34;totalconfirmed&#34;:&#34;198&#34;,&#34;totaldeceased&#34;:&#34;4&#34;,&#34;totalrecovered&#34;:&#34;20&#34;},{&#34;dailyconfirmed&#34;:&#34;58&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;3&#34;,&#34;date&#34;:&#34;20 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-20&#34;,&#34;totalconfirmed&#34;:&#34;256&#34;,&#34;totaldeceased&#34;:&#34;4&#34;,&#34;totalrecovered&#34;:&#34;23&#34;},{&#34;dailyconfirmed&#34;:&#34;78&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;21 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-21&#34;,&#34;totalconfirmed&#34;:&#34;334&#34;,&#34;totaldeceased&#34;:&#34;4&#34;,&#34;totalrecovered&#34;:&#34;23&#34;},{&#34;dailyconfirmed&#34;:&#34;69&#34;,&#34;dailydeceased&#34;:&#34;3&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;22 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-22&#34;,&#34;totalconfirmed&#34;:&#34;403&#34;,&#34;totaldeceased&#34;:&#34;7&#34;,&#34;totalrecovered&#34;:&#34;23&#34;},{&#34;dailyconfirmed&#34;:&#34;94&#34;,&#34;dailydeceased&#34;:&#34;2&#34;,&#34;dailyrecovered&#34;:&#34;2&#34;,&#34;date&#34;:&#34;23 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-23&#34;,&#34;totalconfirmed&#34;:&#34;497&#34;,&#34;totaldeceased&#34;:&#34;9&#34;,&#34;totalrecovered&#34;:&#34;25&#34;},{&#34;dailyconfirmed&#34;:&#34;74&#34;,&#34;dailydeceased&#34;:&#34;1&#34;,&#34;dailyrecovered&#34;:&#34;15&#34;,&#34;date&#34;:&#34;24 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-24&#34;,&#34;totalconfirmed&#34;:&#34;571&#34;,&#34;totaldeceased&#34;:&#34;10&#34;,&#34;totalrecovered&#34;:&#34;40&#34;},{&#34;dailyconfirmed&#34;:&#34;86&#34;,&#34;dailydeceased&#34;:&#34;1&#34;,&#34;dailyrecovered&#34;:&#34;3&#34;,&#34;date&#34;:&#34;25 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-25&#34;,&#34;totalconfirmed&#34;:&#34;657&#34;,&#34;totaldeceased&#34;:&#34;11&#34;,&#34;totalrecovered&#34;:&#34;43&#34;},{&#34;dailyconfirmed&#34;:&#34;73&#34;,&#34;dailydeceased&#34;:&#34;5&#34;,&#34;dailyrecovered&#34;:&#34;7&#34;,&#34;date&#34;:&#34;26 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-26&#34;,&#34;totalconfirmed&#34;:&#34;730&#34;,&#34;totaldeceased&#34;:&#34;16&#34;,&#34;totalrecovered&#34;:&#34;50&#34;},{&#34;dailyconfirmed&#34;:&#34;153&#34;,&#34;dailydeceased&#34;:&#34;3&#34;,&#34;dailyrecovered&#34;:&#34;25&#34;,&#34;date&#34;:&#34;27 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-27&#34;,&#34;totalconfirmed&#34;:&#34;883&#34;,&#34;totaldeceased&#34;:&#34;19&#34;,&#34;totalrecovered&#34;:&#34;75&#34;},{&#34;dailyconfirmed&#34;:&#34;136&#34;,&#34;dailydeceased&#34;:&#34;5&#34;,&#34;dailyrecovered&#34;:&#34;10&#34;,&#34;date&#34;:&#34;28 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-28&#34;,&#34;totalconfirmed&#34;:&#34;1019&#34;,&#34;totaldeceased&#34;:&#34;24&#34;,&#34;totalrecovered&#34;:&#34;85&#34;},{&#34;dailyconfirmed&#34;:&#34;120&#34;,&#34;dailydeceased&#34;:&#34;3&#34;,&#34;dailyrecovered&#34;:&#34;17&#34;,&#34;date&#34;:&#34;29 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-29&#34;,&#34;totalconfirmed&#34;:&#34;1139&#34;,&#34;totaldeceased&#34;:&#34;27&#34;,&#34;totalrecovered&#34;:&#34;102&#34;},{&#34;dailyconfirmed&#34;:&#34;187&#34;,&#34;dailydeceased&#34;:&#34;14&#34;,&#34;dailyrecovered&#34;:&#34;35&#34;,&#34;date&#34;:&#34;30 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-30&#34;,&#34;totalconfirmed&#34;:&#34;1326&#34;,&#34;totaldeceased&#34;:&#34;41&#34;,&#34;totalrecovered&#34;:&#34;137&#34;},{&#34;dailyconfirmed&#34;:&#34;309&#34;,&#34;dailydeceased&#34;:&#34;6&#34;,&#34;dailyrecovered&#34;:&#34;13&#34;,&#34;date&#34;:&#34;31 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-31&#34;,&#34;totalconfirmed&#34;:&#34;1635&#34;,&#34;totaldeceased&#34;:&#34;47&#34;,&#34;totalrecovered&#34;:&#34;150&#34;},{&#34;dailyconfirmed&#34;:&#34;424&#34;,&#34;dailydeceased&#34;:&#34;6&#34;,&#34;dailyrecovered&#34;:&#34;19&#34;,&#34;date&#34;:&#34;1 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-01&#34;,&#34;totalconfirmed&#34;:&#34;2059&#34;,&#34;totaldeceased&#34;:&#34;53&#34;,&#34;totalrecovered&#34;:&#34;169&#34;},{&#34;dailyconfirmed&#34;:&#34;486&#34;,&#34;dailydeceased&#34;:&#34;16&#34;,&#34;dailyrecovered&#34;:&#34;22&#34;,&#34;date&#34;:&#34;2 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-02&#34;,&#34;totalconfirmed&#34;:&#34;2545&#34;,&#34;totaldeceased&#34;:&#34;69&#34;,&#34;totalrecovered&#34;:&#34;191&#34;},{&#34;dailyconfirmed&#34;:&#34;560&#34;,&#34;dailydeceased&#34;:&#34;14&#34;,&#34;dailyrecovered&#34;:&#34;39&#34;,&#34;date&#34;:&#34;3 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-03&#34;,&#34;totalconfirmed&#34;:&#34;3105&#34;,&#34;totaldeceased&#34;:&#34;83&#34;,&#34;totalrecovered&#34;:&#34;230&#34;},{&#34;dailyconfirmed&#34;:&#34;579&#34;,&#34;dailydeceased&#34;:&#34;13&#34;,&#34;dailyrecovered&#34;:&#34;56&#34;,&#34;date&#34;:&#34;4 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-04&#34;,&#34;totalconfirmed&#34;:&#34;3684&#34;,&#34;totaldeceased&#34;:&#34;96&#34;,&#34;totalrecovered&#34;:&#34;286&#34;},{&#34;dailyconfirmed&#34;:&#34;609&#34;,&#34;dailydeceased&#34;:&#34;22&#34;,&#34;dailyrecovered&#34;:&#34;43&#34;,&#34;date&#34;:&#34;5 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-05&#34;,&#34;totalconfirmed&#34;:&#34;4293&#34;,&#34;totaldeceased&#34;:&#34;118&#34;,&#34;totalrecovered&#34;:&#34;329&#34;},{&#34;dailyconfirmed&#34;:&#34;484&#34;,&#34;dailydeceased&#34;:&#34;16&#34;,&#34;dailyrecovered&#34;:&#34;65&#34;,&#34;date&#34;:&#34;6 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-06&#34;,&#34;totalconfirmed&#34;:&#34;4777&#34;,&#34;totaldeceased&#34;:&#34;134&#34;,&#34;totalrecovered&#34;:&#34;394&#34;},{&#34;dailyconfirmed&#34;:&#34;573&#34;,&#34;dailydeceased&#34;:&#34;27&#34;,&#34;dailyrecovered&#34;:&#34;75&#34;,&#34;date&#34;:&#34;7 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-07&#34;,&#34;totalconfirmed&#34;:&#34;5350&#34;,&#34;totaldeceased&#34;:&#34;161&#34;,&#34;totalrecovered&#34;:&#34;469&#34;},{&#34;dailyconfirmed&#34;:&#34;565&#34;,&#34;dailydeceased&#34;:&#34;20&#34;,&#34;dailyrecovered&#34;:&#34;96&#34;,&#34;date&#34;:&#34;8 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-08&#34;,&#34;totalconfirmed&#34;:&#34;5915&#34;,&#34;totaldeceased&#34;:&#34;181&#34;,&#34;totalrecovered&#34;:&#34;565&#34;},{&#34;dailyconfirmed&#34;:&#34;813&#34;,&#34;dailydeceased&#34;:&#34;46&#34;,&#34;dailyrecovered&#34;:&#34;70&#34;,&#34;date&#34;:&#34;9 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-09&#34;,&#34;totalconfirmed&#34;:&#34;6728&#34;,&#34;totaldeceased&#34;:&#34;227&#34;,&#34;totalrecovered&#34;:&#34;635&#34;},{&#34;dailyconfirmed&#34;:&#34;871&#34;,&#34;dailydeceased&#34;:&#34;22&#34;,&#34;dailyrecovered&#34;:&#34;151&#34;,&#34;date&#34;:&#34;10 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-10&#34;,&#34;totalconfirmed&#34;:&#34;7599&#34;,&#34;totaldeceased&#34;:&#34;249&#34;,&#34;totalrecovered&#34;:&#34;786&#34;},{&#34;dailyconfirmed&#34;:&#34;854&#34;,&#34;dailydeceased&#34;:&#34;41&#34;,&#34;dailyrecovered&#34;:&#34;186&#34;,&#34;date&#34;:&#34;11 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-11&#34;,&#34;totalconfirmed&#34;:&#34;8453&#34;,&#34;totaldeceased&#34;:&#34;290&#34;,&#34;totalrecovered&#34;:&#34;972&#34;},{&#34;dailyconfirmed&#34;:&#34;758&#34;,&#34;dailydeceased&#34;:&#34;42&#34;,&#34;dailyrecovered&#34;:&#34;114&#34;,&#34;date&#34;:&#34;12 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-12&#34;,&#34;totalconfirmed&#34;:&#34;9211&#34;,&#34;totaldeceased&#34;:&#34;332&#34;,&#34;totalrecovered&#34;:&#34;1086&#34;},{&#34;dailyconfirmed&#34;:&#34;1243&#34;,&#34;dailydeceased&#34;:&#34;27&#34;,&#34;dailyrecovered&#34;:&#34;112&#34;,&#34;date&#34;:&#34;13 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-13&#34;,&#34;totalconfirmed&#34;:&#34;10454&#34;,&#34;totaldeceased&#34;:&#34;359&#34;,&#34;totalrecovered&#34;:&#34;1198&#34;},{&#34;dailyconfirmed&#34;:&#34;1031&#34;,&#34;dailydeceased&#34;:&#34;37&#34;,&#34;dailyrecovered&#34;:&#34;167&#34;,&#34;date&#34;:&#34;14 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-14&#34;,&#34;totalconfirmed&#34;:&#34;11485&#34;,&#34;totaldeceased&#34;:&#34;396&#34;,&#34;totalrecovered&#34;:&#34;1365&#34;},{&#34;dailyconfirmed&#34;:&#34;886&#34;,&#34;dailydeceased&#34;:&#34;27&#34;,&#34;dailyrecovered&#34;:&#34;144&#34;,&#34;date&#34;:&#34;15 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-15&#34;,&#34;totalconfirmed&#34;:&#34;12371&#34;,&#34;totaldeceased&#34;:&#34;423&#34;,&#34;totalrecovered&#34;:&#34;1509&#34;},{&#34;dailyconfirmed&#34;:&#34;1061&#34;,&#34;dailydeceased&#34;:&#34;26&#34;,&#34;dailyrecovered&#34;:&#34;258&#34;,&#34;date&#34;:&#34;16 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-16&#34;,&#34;totalconfirmed&#34;:&#34;13432&#34;,&#34;totaldeceased&#34;:&#34;449&#34;,&#34;totalrecovered&#34;:&#34;1767&#34;},{&#34;dailyconfirmed&#34;:&#34;922&#34;,&#34;dailydeceased&#34;:&#34;38&#34;,&#34;dailyrecovered&#34;:&#34;273&#34;,&#34;date&#34;:&#34;17 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-17&#34;,&#34;totalconfirmed&#34;:&#34;14354&#34;,&#34;totaldeceased&#34;:&#34;487&#34;,&#34;totalrecovered&#34;:&#34;2040&#34;},{&#34;dailyconfirmed&#34;:&#34;1371&#34;,&#34;dailydeceased&#34;:&#34;35&#34;,&#34;dailyrecovered&#34;:&#34;426&#34;,&#34;date&#34;:&#34;18 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-18&#34;,&#34;totalconfirmed&#34;:&#34;15725&#34;,&#34;totaldeceased&#34;:&#34;522&#34;,&#34;totalrecovered&#34;:&#34;2466&#34;},{&#34;dailyconfirmed&#34;:&#34;1580&#34;,&#34;dailydeceased&#34;:&#34;38&#34;,&#34;dailyrecovered&#34;:&#34;388&#34;,&#34;date&#34;:&#34;19 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-19&#34;,&#34;totalconfirmed&#34;:&#34;17305&#34;,&#34;totaldeceased&#34;:&#34;560&#34;,&#34;totalrecovered&#34;:&#34;2854&#34;},{&#34;dailyconfirmed&#34;:&#34;1239&#34;,&#34;dailydeceased&#34;:&#34;33&#34;,&#34;dailyrecovered&#34;:&#34;419&#34;,&#34;date&#34;:&#34;20 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-20&#34;,&#34;totalconfirmed&#34;:&#34;18544&#34;,&#34;totaldeceased&#34;:&#34;593&#34;,&#34;totalrecovered&#34;:&#34;3273&#34;},{&#34;dailyconfirmed&#34;:&#34;1537&#34;,&#34;dailydeceased&#34;:&#34;53&#34;,&#34;dailyrecovered&#34;:&#34;703&#34;,&#34;date&#34;:&#34;21 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-21&#34;,&#34;totalconfirmed&#34;:&#34;20081&#34;,&#34;totaldeceased&#34;:&#34;646&#34;,&#34;totalrecovered&#34;:&#34;3976&#34;},{&#34;dailyconfirmed&#34;:&#34;1292&#34;,&#34;dailydeceased&#34;:&#34;36&#34;,&#34;dailyrecovered&#34;:&#34;394&#34;,&#34;date&#34;:&#34;22 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-22&#34;,&#34;totalconfirmed&#34;:&#34;21373&#34;,&#34;totaldeceased&#34;:&#34;682&#34;,&#34;totalrecovered&#34;:&#34;4370&#34;},{&#34;dailyconfirmed&#34;:&#34;1667&#34;,&#34;dailydeceased&#34;:&#34;40&#34;,&#34;dailyrecovered&#34;:&#34;642&#34;,&#34;date&#34;:&#34;23 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-23&#34;,&#34;totalconfirmed&#34;:&#34;23040&#34;,&#34;totaldeceased&#34;:&#34;722&#34;,&#34;totalrecovered&#34;:&#34;5012&#34;},{&#34;dailyconfirmed&#34;:&#34;1408&#34;,&#34;dailydeceased&#34;:&#34;59&#34;,&#34;dailyrecovered&#34;:&#34;484&#34;,&#34;date&#34;:&#34;24 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-24&#34;,&#34;totalconfirmed&#34;:&#34;24448&#34;,&#34;totaldeceased&#34;:&#34;781&#34;,&#34;totalrecovered&#34;:&#34;5496&#34;},{&#34;dailyconfirmed&#34;:&#34;1835&#34;,&#34;dailydeceased&#34;:&#34;44&#34;,&#34;dailyrecovered&#34;:&#34;442&#34;,&#34;date&#34;:&#34;25 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-25&#34;,&#34;totalconfirmed&#34;:&#34;26283&#34;,&#34;totaldeceased&#34;:&#34;825&#34;,&#34;totalrecovered&#34;:&#34;5938&#34;},{&#34;dailyconfirmed&#34;:&#34;1607&#34;,&#34;dailydeceased&#34;:&#34;56&#34;,&#34;dailyrecovered&#34;:&#34;585&#34;,&#34;date&#34;:&#34;26 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-26&#34;,&#34;totalconfirmed&#34;:&#34;27890&#34;,&#34;totaldeceased&#34;:&#34;881&#34;,&#34;totalrecovered&#34;:&#34;6523&#34;},{&#34;dailyconfirmed&#34;:&#34;1568&#34;,&#34;dailydeceased&#34;:&#34;58&#34;,&#34;dailyrecovered&#34;:&#34;580&#34;,&#34;date&#34;:&#34;27 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-27&#34;,&#34;totalconfirmed&#34;:&#34;29458&#34;,&#34;totaldeceased&#34;:&#34;939&#34;,&#34;totalrecovered&#34;:&#34;7103&#34;},{&#34;dailyconfirmed&#34;:&#34;1902&#34;,&#34;dailydeceased&#34;:&#34;69&#34;,&#34;dailyrecovered&#34;:&#34;636&#34;,&#34;date&#34;:&#34;28 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-28&#34;,&#34;totalconfirmed&#34;:&#34;31360&#34;,&#34;totaldeceased&#34;:&#34;1008&#34;,&#34;totalrecovered&#34;:&#34;7739&#34;},{&#34;dailyconfirmed&#34;:&#34;1705&#34;,&#34;dailydeceased&#34;:&#34;71&#34;,&#34;dailyrecovered&#34;:&#34;690&#34;,&#34;date&#34;:&#34;29 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-29&#34;,&#34;totalconfirmed&#34;:&#34;33065&#34;,&#34;totaldeceased&#34;:&#34;1079&#34;,&#34;totalrecovered&#34;:&#34;8429&#34;},{&#34;dailyconfirmed&#34;:&#34;1801&#34;,&#34;dailydeceased&#34;:&#34;75&#34;,&#34;dailyrecovered&#34;:&#34;630&#34;,&#34;date&#34;:&#34;30 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-30&#34;,&#34;totalconfirmed&#34;:&#34;34866&#34;,&#34;totaldeceased&#34;:&#34;1154&#34;,&#34;totalrecovered&#34;:&#34;9059&#34;},{&#34;dailyconfirmed&#34;:&#34;2396&#34;,&#34;dailydeceased&#34;:&#34;77&#34;,&#34;dailyrecovered&#34;:&#34;962&#34;,&#34;date&#34;:&#34;1 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-01&#34;,&#34;totalconfirmed&#34;:&#34;37262&#34;,&#34;totaldeceased&#34;:&#34;1231&#34;,&#34;totalrecovered&#34;:&#34;10021&#34;},{&#34;dailyconfirmed&#34;:&#34;2564&#34;,&#34;dailydeceased&#34;:&#34;92&#34;,&#34;dailyrecovered&#34;:&#34;831&#34;,&#34;date&#34;:&#34;2 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-02&#34;,&#34;totalconfirmed&#34;:&#34;39826&#34;,&#34;totaldeceased&#34;:&#34;1323&#34;,&#34;totalrecovered&#34;:&#34;10852&#34;},{&#34;dailyconfirmed&#34;:&#34;2952&#34;,&#34;dailydeceased&#34;:&#34;140&#34;,&#34;dailyrecovered&#34;:&#34;911&#34;,&#34;date&#34;:&#34;3 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-03&#34;,&#34;totalconfirmed&#34;:&#34;42778&#34;,&#34;totaldeceased&#34;:&#34;1463&#34;,&#34;totalrecovered&#34;:&#34;11763&#34;},{&#34;dailyconfirmed&#34;:&#34;3656&#34;,&#34;dailydeceased&#34;:&#34;103&#34;,&#34;dailyrecovered&#34;:&#34;1082&#34;,&#34;date&#34;:&#34;4 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-04&#34;,&#34;totalconfirmed&#34;:&#34;46434&#34;,&#34;totaldeceased&#34;:&#34;1566&#34;,&#34;totalrecovered&#34;:&#34;12845&#34;},{&#34;dailyconfirmed&#34;:&#34;2971&#34;,&#34;dailydeceased&#34;:&#34;128&#34;,&#34;dailyrecovered&#34;:&#34;1295&#34;,&#34;date&#34;:&#34;5 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-05&#34;,&#34;totalconfirmed&#34;:&#34;49405&#34;,&#34;totaldeceased&#34;:&#34;1694&#34;,&#34;totalrecovered&#34;:&#34;14140&#34;},{&#34;dailyconfirmed&#34;:&#34;3602&#34;,&#34;dailydeceased&#34;:&#34;91&#34;,&#34;dailyrecovered&#34;:&#34;1161&#34;,&#34;date&#34;:&#34;6 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-06&#34;,&#34;totalconfirmed&#34;:&#34;53007&#34;,&#34;totaldeceased&#34;:&#34;1785&#34;,&#34;totalrecovered&#34;:&#34;15301&#34;},{&#34;dailyconfirmed&#34;:&#34;3344&#34;,&#34;dailydeceased&#34;:&#34;104&#34;,&#34;dailyrecovered&#34;:&#34;1475&#34;,&#34;date&#34;:&#34;7 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-07&#34;,&#34;totalconfirmed&#34;:&#34;56351&#34;,&#34;totaldeceased&#34;:&#34;1889&#34;,&#34;totalrecovered&#34;:&#34;16776&#34;},{&#34;dailyconfirmed&#34;:&#34;3339&#34;,&#34;dailydeceased&#34;:&#34;97&#34;,&#34;dailyrecovered&#34;:&#34;1111&#34;,&#34;date&#34;:&#34;8 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-08&#34;,&#34;totalconfirmed&#34;:&#34;59690&#34;,&#34;totaldeceased&#34;:&#34;1986&#34;,&#34;totalrecovered&#34;:&#34;17887&#34;},{&#34;dailyconfirmed&#34;:&#34;3175&#34;,&#34;dailydeceased&#34;:&#34;115&#34;,&#34;dailyrecovered&#34;:&#34;1414&#34;,&#34;date&#34;:&#34;9 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-09&#34;,&#34;totalconfirmed&#34;:&#34;62865&#34;,&#34;totaldeceased&#34;:&#34;2101&#34;,&#34;totalrecovered&#34;:&#34;19301&#34;},{&#34;dailyconfirmed&#34;:&#34;4311&#34;,&#34;dailydeceased&#34;:&#34;112&#34;,&#34;dailyrecovered&#34;:&#34;1669&#34;,&#34;date&#34;:&#34;10 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-10&#34;,&#34;totalconfirmed&#34;:&#34;67176&#34;,&#34;totaldeceased&#34;:&#34;2213&#34;,&#34;totalrecovered&#34;:&#34;20970&#34;},{&#34;dailyconfirmed&#34;:&#34;3592&#34;,&#34;dailydeceased&#34;:&#34;81&#34;,&#34;dailyrecovered&#34;:&#34;1579&#34;,&#34;date&#34;:&#34;11 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-11&#34;,&#34;totalconfirmed&#34;:&#34;70768&#34;,&#34;totaldeceased&#34;:&#34;2294&#34;,&#34;totalrecovered&#34;:&#34;22549&#34;},{&#34;dailyconfirmed&#34;:&#34;3562&#34;,&#34;dailydeceased&#34;:&#34;120&#34;,&#34;dailyrecovered&#34;:&#34;1905&#34;,&#34;date&#34;:&#34;12 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-12&#34;,&#34;totalconfirmed&#34;:&#34;74330&#34;,&#34;totaldeceased&#34;:&#34;2414&#34;,&#34;totalrecovered&#34;:&#34;24454&#34;},{&#34;dailyconfirmed&#34;:&#34;3726&#34;,&#34;dailydeceased&#34;:&#34;137&#34;,&#34;dailyrecovered&#34;:&#34;1963&#34;,&#34;date&#34;:&#34;13 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-13&#34;,&#34;totalconfirmed&#34;:&#34;78056&#34;,&#34;totaldeceased&#34;:&#34;2551&#34;,&#34;totalrecovered&#34;:&#34;26417&#34;},{&#34;dailyconfirmed&#34;:&#34;3991&#34;,&#34;dailydeceased&#34;:&#34;97&#34;,&#34;dailyrecovered&#34;:&#34;1594&#34;,&#34;date&#34;:&#34;14 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-14&#34;,&#34;totalconfirmed&#34;:&#34;82047&#34;,&#34;totaldeceased&#34;:&#34;2648&#34;,&#34;totalrecovered&#34;:&#34;28011&#34;},{&#34;dailyconfirmed&#34;:&#34;3808&#34;,&#34;dailydeceased&#34;:&#34;104&#34;,&#34;dailyrecovered&#34;:&#34;2234&#34;,&#34;date&#34;:&#34;15 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-15&#34;,&#34;totalconfirmed&#34;:&#34;85855&#34;,&#34;totaldeceased&#34;:&#34;2752&#34;,&#34;totalrecovered&#34;:&#34;30245&#34;},{&#34;dailyconfirmed&#34;:&#34;4794&#34;,&#34;dailydeceased&#34;:&#34;120&#34;,&#34;dailyrecovered&#34;:&#34;4012&#34;,&#34;date&#34;:&#34;16 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-16&#34;,&#34;totalconfirmed&#34;:&#34;90649&#34;,&#34;totaldeceased&#34;:&#34;2872&#34;,&#34;totalrecovered&#34;:&#34;34257&#34;},{&#34;dailyconfirmed&#34;:&#34;5049&#34;,&#34;dailydeceased&#34;:&#34;152&#34;,&#34;dailyrecovered&#34;:&#34;2538&#34;,&#34;date&#34;:&#34;17 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-17&#34;,&#34;totalconfirmed&#34;:&#34;95698&#34;,&#34;totaldeceased&#34;:&#34;3024&#34;,&#34;totalrecovered&#34;:&#34;36795&#34;},{&#34;dailyconfirmed&#34;:&#34;4628&#34;,&#34;dailydeceased&#34;:&#34;131&#34;,&#34;dailyrecovered&#34;:&#34;2482&#34;,&#34;date&#34;:&#34;18 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-18&#34;,&#34;totalconfirmed&#34;:&#34;100326&#34;,&#34;totaldeceased&#34;:&#34;3155&#34;,&#34;totalrecovered&#34;:&#34;39277&#34;},{&#34;dailyconfirmed&#34;:&#34;6154&#34;,&#34;dailydeceased&#34;:&#34;146&#34;,&#34;dailyrecovered&#34;:&#34;3032&#34;,&#34;date&#34;:&#34;19 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-19&#34;,&#34;totalconfirmed&#34;:&#34;106480&#34;,&#34;totaldeceased&#34;:&#34;3301&#34;,&#34;totalrecovered&#34;:&#34;42309&#34;},{&#34;dailyconfirmed&#34;:&#34;5720&#34;,&#34;dailydeceased&#34;:&#34;134&#34;,&#34;dailyrecovered&#34;:&#34;3113&#34;,&#34;date&#34;:&#34;20 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-20&#34;,&#34;totalconfirmed&#34;:&#34;112200&#34;,&#34;totaldeceased&#34;:&#34;3435&#34;,&#34;totalrecovered&#34;:&#34;45422&#34;},{&#34;dailyconfirmed&#34;:&#34;6023&#34;,&#34;dailydeceased&#34;:&#34;148&#34;,&#34;dailyrecovered&#34;:&#34;3131&#34;,&#34;date&#34;:&#34;21 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-21&#34;,&#34;totalconfirmed&#34;:&#34;118223&#34;,&#34;totaldeceased&#34;:&#34;3583&#34;,&#34;totalrecovered&#34;:&#34;48553&#34;},{&#34;dailyconfirmed&#34;:&#34;6536&#34;,&#34;dailydeceased&#34;:&#34;142&#34;,&#34;dailyrecovered&#34;:&#34;3280&#34;,&#34;date&#34;:&#34;22 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-22&#34;,&#34;totalconfirmed&#34;:&#34;124759&#34;,&#34;totaldeceased&#34;:&#34;3725&#34;,&#34;totalrecovered&#34;:&#34;51833&#34;},{&#34;dailyconfirmed&#34;:&#34;6667&#34;,&#34;dailydeceased&#34;:&#34;142&#34;,&#34;dailyrecovered&#34;:&#34;2576&#34;,&#34;date&#34;:&#34;23 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-23&#34;,&#34;totalconfirmed&#34;:&#34;131424&#34;,&#34;totaldeceased&#34;:&#34;3867&#34;,&#34;totalrecovered&#34;:&#34;54409&#34;},{&#34;dailyconfirmed&#34;:&#34;7111&#34;,&#34;dailydeceased&#34;:&#34;156&#34;,&#34;dailyrecovered&#34;:&#34;3285&#34;,&#34;date&#34;:&#34;24 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-24&#34;,&#34;totalconfirmed&#34;:&#34;138537&#34;,&#34;totaldeceased&#34;:&#34;4023&#34;,&#34;totalrecovered&#34;:&#34;57694&#34;},{&#34;dailyconfirmed&#34;:&#34;6414&#34;,&#34;dailydeceased&#34;:&#34;150&#34;,&#34;dailyrecovered&#34;:&#34;3012&#34;,&#34;date&#34;:&#34;25 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-25&#34;,&#34;totalconfirmed&#34;:&#34;144951&#34;,&#34;totaldeceased&#34;:&#34;4173&#34;,&#34;totalrecovered&#34;:&#34;60706&#34;},{&#34;dailyconfirmed&#34;:&#34;5907&#34;,&#34;dailydeceased&#34;:&#34;173&#34;,&#34;dailyrecovered&#34;:&#34;3585&#34;,&#34;date&#34;:&#34;26 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-26&#34;,&#34;totalconfirmed&#34;:&#34;150858&#34;,&#34;totaldeceased&#34;:&#34;4346&#34;,&#34;totalrecovered&#34;:&#34;64291&#34;},{&#34;dailyconfirmed&#34;:&#34;7246&#34;,&#34;dailydeceased&#34;:&#34;188&#34;,&#34;dailyrecovered&#34;:&#34;3434&#34;,&#34;date&#34;:&#34;27 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-27&#34;,&#34;totalconfirmed&#34;:&#34;158104&#34;,&#34;totaldeceased&#34;:&#34;4534&#34;,&#34;totalrecovered&#34;:&#34;67725&#34;},{&#34;dailyconfirmed&#34;:&#34;7254&#34;,&#34;dailydeceased&#34;:&#34;176&#34;,&#34;dailyrecovered&#34;:&#34;3171&#34;,&#34;date&#34;:&#34;28 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-28&#34;,&#34;totalconfirmed&#34;:&#34;165358&#34;,&#34;totaldeceased&#34;:&#34;4710&#34;,&#34;totalrecovered&#34;:&#34;70896&#34;},{&#34;dailyconfirmed&#34;:&#34;8138&#34;,&#34;dailydeceased&#34;:&#34;269&#34;,&#34;dailyrecovered&#34;:&#34;11735&#34;,&#34;date&#34;:&#34;29 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-29&#34;,&#34;totalconfirmed&#34;:&#34;173496&#34;,&#34;totaldeceased&#34;:&#34;4979&#34;,&#34;totalrecovered&#34;:&#34;82631&#34;},{&#34;dailyconfirmed&#34;:&#34;8364&#34;,&#34;dailydeceased&#34;:&#34;205&#34;,&#34;dailyrecovered&#34;:&#34;4303&#34;,&#34;date&#34;:&#34;30 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-30&#34;,&#34;totalconfirmed&#34;:&#34;181860&#34;,&#34;totaldeceased&#34;:&#34;5184&#34;,&#34;totalrecovered&#34;:&#34;86934&#34;},{&#34;dailyconfirmed&#34;:&#34;8789&#34;,&#34;dailydeceased&#34;:&#34;222&#34;,&#34;dailyrecovered&#34;:&#34;4928&#34;,&#34;date&#34;:&#34;31 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-31&#34;,&#34;totalconfirmed&#34;:&#34;190649&#34;,&#34;totaldeceased&#34;:&#34;5406&#34;,&#34;totalrecovered&#34;:&#34;91862&#34;},{&#34;dailyconfirmed&#34;:&#34;7723&#34;,&#34;dailydeceased&#34;:&#34;201&#34;,&#34;dailyrecovered&#34;:&#34;3882&#34;,&#34;date&#34;:&#34;1 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-01&#34;,&#34;totalconfirmed&#34;:&#34;198372&#34;,&#34;totaldeceased&#34;:&#34;5607&#34;,&#34;totalrecovered&#34;:&#34;95744&#34;},{&#34;dailyconfirmed&#34;:&#34;8812&#34;,&#34;dailydeceased&#34;:&#34;222&#34;,&#34;dailyrecovered&#34;:&#34;4531&#34;,&#34;date&#34;:&#34;2 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-02&#34;,&#34;totalconfirmed&#34;:&#34;207187&#34;,&#34;totaldeceased&#34;:&#34;5829&#34;,&#34;totalrecovered&#34;:&#34;100275&#34;},{&#34;dailyconfirmed&#34;:&#34;9689&#34;,&#34;dailydeceased&#34;:&#34;259&#34;,&#34;dailyrecovered&#34;:&#34;3789&#34;,&#34;date&#34;:&#34;3 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-03&#34;,&#34;totalconfirmed&#34;:&#34;216876&#34;,&#34;totaldeceased&#34;:&#34;6088&#34;,&#34;totalrecovered&#34;:&#34;104064&#34;},{&#34;dailyconfirmed&#34;:&#34;9847&#34;,&#34;dailydeceased&#34;:&#34;274&#34;,&#34;dailyrecovered&#34;:&#34;4390&#34;,&#34;date&#34;:&#34;4 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-04&#34;,&#34;totalconfirmed&#34;:&#34;226723&#34;,&#34;totaldeceased&#34;:&#34;6362&#34;,&#34;totalrecovered&#34;:&#34;108454&#34;},{&#34;dailyconfirmed&#34;:&#34;9472&#34;,&#34;dailydeceased&#34;:&#34;286&#34;,&#34;dailyrecovered&#34;:&#34;4770&#34;,&#34;date&#34;:&#34;5 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-05&#34;,&#34;totalconfirmed&#34;:&#34;236195&#34;,&#34;totaldeceased&#34;:&#34;6648&#34;,&#34;totalrecovered&#34;:&#34;113224&#34;},{&#34;dailyconfirmed&#34;:&#34;10408&#34;,&#34;dailydeceased&#34;:&#34;297&#34;,&#34;dailyrecovered&#34;:&#34;5433&#34;,&#34;date&#34;:&#34;6 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-06&#34;,&#34;totalconfirmed&#34;:&#34;246603&#34;,&#34;totaldeceased&#34;:&#34;6945&#34;,&#34;totalrecovered&#34;:&#34;118657&#34;},{&#34;dailyconfirmed&#34;:&#34;10882&#34;,&#34;dailydeceased&#34;:&#34;261&#34;,&#34;dailyrecovered&#34;:&#34;5191&#34;,&#34;date&#34;:&#34;7 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-07&#34;,&#34;totalconfirmed&#34;:&#34;257485&#34;,&#34;totaldeceased&#34;:&#34;7206&#34;,&#34;totalrecovered&#34;:&#34;123848&#34;},{&#34;dailyconfirmed&#34;:&#34;8536&#34;,&#34;dailydeceased&#34;:&#34;271&#34;,&#34;dailyrecovered&#34;:&#34;5171&#34;,&#34;date&#34;:&#34;8 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-08&#34;,&#34;totalconfirmed&#34;:&#34;266021&#34;,&#34;totaldeceased&#34;:&#34;7477&#34;,&#34;totalrecovered&#34;:&#34;129019&#34;},{&#34;dailyconfirmed&#34;:&#34;9981&#34;,&#34;dailydeceased&#34;:&#34;272&#34;,&#34;dailyrecovered&#34;:&#34;5634&#34;,&#34;date&#34;:&#34;9 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-09&#34;,&#34;totalconfirmed&#34;:&#34;276002&#34;,&#34;totaldeceased&#34;:&#34;7749&#34;,&#34;totalrecovered&#34;:&#34;134653&#34;},{&#34;dailyconfirmed&#34;:&#34;11156&#34;,&#34;dailydeceased&#34;:&#34;358&#34;,&#34;dailyrecovered&#34;:&#34;6275&#34;,&#34;date&#34;:&#34;10 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-10&#34;,&#34;totalconfirmed&#34;:&#34;287158&#34;,&#34;totaldeceased&#34;:&#34;8107&#34;,&#34;totalrecovered&#34;:&#34;140928&#34;},{&#34;dailyconfirmed&#34;:&#34;11135&#34;,&#34;dailydeceased&#34;:&#34;394&#34;,&#34;dailyrecovered&#34;:&#34;6044&#34;,&#34;date&#34;:&#34;11 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-11&#34;,&#34;totalconfirmed&#34;:&#34;298293&#34;,&#34;totaldeceased&#34;:&#34;8501&#34;,&#34;totalrecovered&#34;:&#34;146972&#34;},{&#34;dailyconfirmed&#34;:&#34;11306&#34;,&#34;dailydeceased&#34;:&#34;388&#34;,&#34;dailyrecovered&#34;:&#34;7263&#34;,&#34;date&#34;:&#34;12 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-12&#34;,&#34;totalconfirmed&#34;:&#34;309599&#34;,&#34;totaldeceased&#34;:&#34;8889&#34;,&#34;totalrecovered&#34;:&#34;154235&#34;},{&#34;dailyconfirmed&#34;:&#34;12039&#34;,&#34;dailydeceased&#34;:&#34;309&#34;,&#34;dailyrecovered&#34;:&#34;8092&#34;,&#34;date&#34;:&#34;13 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-13&#34;,&#34;totalconfirmed&#34;:&#34;321638&#34;,&#34;totaldeceased&#34;:&#34;9198&#34;,&#34;totalrecovered&#34;:&#34;162327&#34;},{&#34;dailyconfirmed&#34;:&#34;11405&#34;,&#34;dailydeceased&#34;:&#34;324&#34;,&#34;dailyrecovered&#34;:&#34;7358&#34;,&#34;date&#34;:&#34;14 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-14&#34;,&#34;totalconfirmed&#34;:&#34;333043&#34;,&#34;totaldeceased&#34;:&#34;9522&#34;,&#34;totalrecovered&#34;:&#34;169685&#34;},{&#34;dailyconfirmed&#34;:&#34;10032&#34;,&#34;dailydeceased&#34;:&#34;396&#34;,&#34;dailyrecovered&#34;:&#34;10639&#34;,&#34;date&#34;:&#34;15 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-15&#34;,&#34;totalconfirmed&#34;:&#34;343075&#34;,&#34;totaldeceased&#34;:&#34;9918&#34;,&#34;totalrecovered&#34;:&#34;180324&#34;},{&#34;dailyconfirmed&#34;:&#34;11086&#34;,&#34;dailydeceased&#34;:&#34;2004&#34;,&#34;dailyrecovered&#34;:&#34;7226&#34;,&#34;date&#34;:&#34;16 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-16&#34;,&#34;totalconfirmed&#34;:&#34;354161&#34;,&#34;totaldeceased&#34;:&#34;11922&#34;,&#34;totalrecovered&#34;:&#34;187550&#34;},{&#34;dailyconfirmed&#34;:&#34;13108&#34;,&#34;dailydeceased&#34;:&#34;341&#34;,&#34;dailyrecovered&#34;:&#34;6890&#34;,&#34;date&#34;:&#34;17 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-17&#34;,&#34;totalconfirmed&#34;:&#34;367269&#34;,&#34;totaldeceased&#34;:&#34;12263&#34;,&#34;totalrecovered&#34;:&#34;194440&#34;},{&#34;dailyconfirmed&#34;:&#34;13829&#34;,&#34;dailydeceased&#34;:&#34;343&#34;,&#34;dailyrecovered&#34;:&#34;10741&#34;,&#34;date&#34;:&#34;18 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-18&#34;,&#34;totalconfirmed&#34;:&#34;381098&#34;,&#34;totaldeceased&#34;:&#34;12606&#34;,&#34;totalrecovered&#34;:&#34;205181&#34;},{&#34;dailyconfirmed&#34;:&#34;14740&#34;,&#34;dailydeceased&#34;:&#34;364&#34;,&#34;dailyrecovered&#34;:&#34;9029&#34;,&#34;date&#34;:&#34;19 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-19&#34;,&#34;totalconfirmed&#34;:&#34;395838&#34;,&#34;totaldeceased&#34;:&#34;12970&#34;,&#34;totalrecovered&#34;:&#34;214210&#34;},{&#34;dailyconfirmed&#34;:&#34;15918&#34;,&#34;dailydeceased&#34;:&#34;308&#34;,&#34;dailyrecovered&#34;:&#34;13974&#34;,&#34;date&#34;:&#34;20 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-20&#34;,&#34;totalconfirmed&#34;:&#34;411753&#34;,&#34;totaldeceased&#34;:&#34;13278&#34;,&#34;totalrecovered&#34;:&#34;228184&#34;},{&#34;dailyconfirmed&#34;:&#34;15151&#34;,&#34;dailydeceased&#34;:&#34;426&#34;,&#34;dailyrecovered&#34;:&#34;9075&#34;,&#34;date&#34;:&#34;21 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-21&#34;,&#34;totalconfirmed&#34;:&#34;426904&#34;,&#34;totaldeceased&#34;:&#34;13704&#34;,&#34;totalrecovered&#34;:&#34;237259&#34;},{&#34;dailyconfirmed&#34;:&#34;13560&#34;,&#34;dailydeceased&#34;:&#34;312&#34;,&#34;dailyrecovered&#34;:&#34;10879&#34;,&#34;date&#34;:&#34;22 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-22&#34;,&#34;totalconfirmed&#34;:&#34;440464&#34;,&#34;totaldeceased&#34;:&#34;14016&#34;,&#34;totalrecovered&#34;:&#34;248138&#34;},{&#34;dailyconfirmed&#34;:&#34;15656&#34;,&#34;dailydeceased&#34;:&#34;468&#34;,&#34;dailyrecovered&#34;:&#34;10462&#34;,&#34;date&#34;:&#34;23 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-23&#34;,&#34;totalconfirmed&#34;:&#34;456120&#34;,&#34;totaldeceased&#34;:&#34;14484&#34;,&#34;totalrecovered&#34;:&#34;258600&#34;},{&#34;dailyconfirmed&#34;:&#34;16868&#34;,&#34;dailydeceased&#34;:&#34;424&#34;,&#34;dailyrecovered&#34;:&#34;13089&#34;,&#34;date&#34;:&#34;24 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-24&#34;,&#34;totalconfirmed&#34;:&#34;472988&#34;,&#34;totaldeceased&#34;:&#34;14908&#34;,&#34;totalrecovered&#34;:&#34;271689&#34;},{&#34;dailyconfirmed&#34;:&#34;18205&#34;,&#34;dailydeceased&#34;:&#34;401&#34;,&#34;dailyrecovered&#34;:&#34;13983&#34;,&#34;date&#34;:&#34;25 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-25&#34;,&#34;totalconfirmed&#34;:&#34;491193&#34;,&#34;totaldeceased&#34;:&#34;15309&#34;,&#34;totalrecovered&#34;:&#34;285672&#34;},{&#34;dailyconfirmed&#34;:&#34;18255&#34;,&#34;dailydeceased&#34;:&#34;381&#34;,&#34;dailyrecovered&#34;:&#34;10246&#34;,&#34;date&#34;:&#34;26 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-26&#34;,&#34;totalconfirmed&#34;:&#34;509448&#34;,&#34;totaldeceased&#34;:&#34;15690&#34;,&#34;totalrecovered&#34;:&#34;295918&#34;},{&#34;dailyconfirmed&#34;:&#34;20142&#34;,&#34;dailydeceased&#34;:&#34;414&#34;,&#34;dailyrecovered&#34;:&#34;14229&#34;,&#34;date&#34;:&#34;27 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-27&#34;,&#34;totalconfirmed&#34;:&#34;529590&#34;,&#34;totaldeceased&#34;:&#34;16104&#34;,&#34;totalrecovered&#34;:&#34;310147&#34;},{&#34;dailyconfirmed&#34;:&#34;19610&#34;,&#34;dailydeceased&#34;:&#34;384&#34;,&#34;dailyrecovered&#34;:&#34;11631&#34;,&#34;date&#34;:&#34;28 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-28&#34;,&#34;totalconfirmed&#34;:&#34;549200&#34;,&#34;totaldeceased&#34;:&#34;16488&#34;,&#34;totalrecovered&#34;:&#34;321778&#34;},{&#34;dailyconfirmed&#34;:&#34;18339&#34;,&#34;dailydeceased&#34;:&#34;417&#34;,&#34;dailyrecovered&#34;:&#34;13497&#34;,&#34;date&#34;:&#34;29 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-29&#34;,&#34;totalconfirmed&#34;:&#34;567539&#34;,&#34;totaldeceased&#34;:&#34;16905&#34;,&#34;totalrecovered&#34;:&#34;335275&#34;},{&#34;dailyconfirmed&#34;:&#34;18256&#34;,&#34;dailydeceased&#34;:&#34;506&#34;,&#34;dailyrecovered&#34;:&#34;12565&#34;,&#34;date&#34;:&#34;30 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-30&#34;,&#34;totalconfirmed&#34;:&#34;585795&#34;,&#34;totaldeceased&#34;:&#34;17411&#34;,&#34;totalrecovered&#34;:&#34;347840&#34;},{&#34;dailyconfirmed&#34;:&#34;19429&#34;,&#34;dailydeceased&#34;:&#34;438&#34;,&#34;dailyrecovered&#34;:&#34;12064&#34;,&#34;date&#34;:&#34;1 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-01&#34;,&#34;totalconfirmed&#34;:&#34;605224&#34;,&#34;totaldeceased&#34;:&#34;17849&#34;,&#34;totalrecovered&#34;:&#34;359904&#34;},{&#34;dailyconfirmed&#34;:&#34;21947&#34;,&#34;dailydeceased&#34;:&#34;378&#34;,&#34;dailyrecovered&#34;:&#34;19999&#34;,&#34;date&#34;:&#34;2 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-02&#34;,&#34;totalconfirmed&#34;:&#34;627171&#34;,&#34;totaldeceased&#34;:&#34;18227&#34;,&#34;totalrecovered&#34;:&#34;379903&#34;},{&#34;dailyconfirmed&#34;:&#34;22718&#34;,&#34;dailydeceased&#34;:&#34;444&#34;,&#34;dailyrecovered&#34;:&#34;14417&#34;,&#34;date&#34;:&#34;3 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-03&#34;,&#34;totalconfirmed&#34;:&#34;649889&#34;,&#34;totaldeceased&#34;:&#34;18671&#34;,&#34;totalrecovered&#34;:&#34;394320&#34;},{&#34;dailyconfirmed&#34;:&#34;24018&#34;,&#34;dailydeceased&#34;:&#34;611&#34;,&#34;dailyrecovered&#34;:&#34;14746&#34;,&#34;date&#34;:&#34;4 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-04&#34;,&#34;totalconfirmed&#34;:&#34;673907&#34;,&#34;totaldeceased&#34;:&#34;19282&#34;,&#34;totalrecovered&#34;:&#34;409066&#34;},{&#34;dailyconfirmed&#34;:&#34;23942&#34;,&#34;dailydeceased&#34;:&#34;421&#34;,&#34;dailyrecovered&#34;:&#34;15829&#34;,&#34;date&#34;:&#34;5 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-05&#34;,&#34;totalconfirmed&#34;:&#34;697849&#34;,&#34;totaldeceased&#34;:&#34;19703&#34;,&#34;totalrecovered&#34;:&#34;424895&#34;},{&#34;dailyconfirmed&#34;:&#34;22500&#34;,&#34;dailydeceased&#34;:&#34;473&#34;,&#34;dailyrecovered&#34;:&#34;15315&#34;,&#34;date&#34;:&#34;6 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-06&#34;,&#34;totalconfirmed&#34;:&#34;720349&#34;,&#34;totaldeceased&#34;:&#34;20176&#34;,&#34;totalrecovered&#34;:&#34;440210&#34;},{&#34;dailyconfirmed&#34;:&#34;23147&#34;,&#34;dailydeceased&#34;:&#34;479&#34;,&#34;dailyrecovered&#34;:&#34;16836&#34;,&#34;date&#34;:&#34;7 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-07&#34;,&#34;totalconfirmed&#34;:&#34;743496&#34;,&#34;totaldeceased&#34;:&#34;20655&#34;,&#34;totalrecovered&#34;:&#34;457046&#34;},{&#34;dailyconfirmed&#34;:&#34;25561&#34;,&#34;dailydeceased&#34;:&#34;492&#34;,&#34;dailyrecovered&#34;:&#34;19508&#34;,&#34;date&#34;:&#34;8 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-08&#34;,&#34;totalconfirmed&#34;:&#34;769057&#34;,&#34;totaldeceased&#34;:&#34;21147&#34;,&#34;totalrecovered&#34;:&#34;476554&#34;},{&#34;dailyconfirmed&#34;:&#34;25790&#34;,&#34;dailydeceased&#34;:&#34;479&#34;,&#34;dailyrecovered&#34;:&#34;19408&#34;,&#34;date&#34;:&#34;9 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-09&#34;,&#34;totalconfirmed&#34;:&#34;794847&#34;,&#34;totaldeceased&#34;:&#34;21626&#34;,&#34;totalrecovered&#34;:&#34;495962&#34;},{&#34;dailyconfirmed&#34;:&#34;27762&#34;,&#34;dailydeceased&#34;:&#34;520&#34;,&#34;dailyrecovered&#34;:&#34;20289&#34;,&#34;date&#34;:&#34;10 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-10&#34;,&#34;totalconfirmed&#34;:&#34;822609&#34;,&#34;totaldeceased&#34;:&#34;22146&#34;,&#34;totalrecovered&#34;:&#34;516251&#34;},{&#34;dailyconfirmed&#34;:&#34;27757&#34;,&#34;dailydeceased&#34;:&#34;543&#34;,&#34;dailyrecovered&#34;:&#34;19981&#34;,&#34;date&#34;:&#34;11 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-11&#34;,&#34;totalconfirmed&#34;:&#34;850366&#34;,&#34;totaldeceased&#34;:&#34;22689&#34;,&#34;totalrecovered&#34;:&#34;536232&#34;},{&#34;dailyconfirmed&#34;:&#34;29106&#34;,&#34;dailydeceased&#34;:&#34;500&#34;,&#34;dailyrecovered&#34;:&#34;18198&#34;,&#34;date&#34;:&#34;12 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-12&#34;,&#34;totalconfirmed&#34;:&#34;879472&#34;,&#34;totaldeceased&#34;:&#34;23189&#34;,&#34;totalrecovered&#34;:&#34;554430&#34;},{&#34;dailyconfirmed&#34;:&#34;28178&#34;,&#34;dailydeceased&#34;:&#34;541&#34;,&#34;dailyrecovered&#34;:&#34;17683&#34;,&#34;date&#34;:&#34;13 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-13&#34;,&#34;totalconfirmed&#34;:&#34;907650&#34;,&#34;totaldeceased&#34;:&#34;23730&#34;,&#34;totalrecovered&#34;:&#34;572113&#34;},{&#34;dailyconfirmed&#34;:&#34;29917&#34;,&#34;dailydeceased&#34;:&#34;587&#34;,&#34;dailyrecovered&#34;:&#34;20977&#34;,&#34;date&#34;:&#34;14 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-14&#34;,&#34;totalconfirmed&#34;:&#34;937567&#34;,&#34;totaldeceased&#34;:&#34;24317&#34;,&#34;totalrecovered&#34;:&#34;593090&#34;},{&#34;dailyconfirmed&#34;:&#34;32607&#34;,&#34;dailydeceased&#34;:&#34;614&#34;,&#34;dailyrecovered&#34;:&#34;20646&#34;,&#34;date&#34;:&#34;15 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-15&#34;,&#34;totalconfirmed&#34;:&#34;970174&#34;,&#34;totaldeceased&#34;:&#34;24931&#34;,&#34;totalrecovered&#34;:&#34;613736&#34;},{&#34;dailyconfirmed&#34;:&#34;35468&#34;,&#34;dailydeceased&#34;:&#34;680&#34;,&#34;dailyrecovered&#34;:&#34;22867&#34;,&#34;date&#34;:&#34;16 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-16&#34;,&#34;totalconfirmed&#34;:&#34;1005642&#34;,&#34;totaldeceased&#34;:&#34;25611&#34;,&#34;totalrecovered&#34;:&#34;636603&#34;},{&#34;dailyconfirmed&#34;:&#34;34820&#34;,&#34;dailydeceased&#34;:&#34;676&#34;,&#34;dailyrecovered&#34;:&#34;17476&#34;,&#34;date&#34;:&#34;17 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-17&#34;,&#34;totalconfirmed&#34;:&#34;1040462&#34;,&#34;totaldeceased&#34;:&#34;26287&#34;,&#34;totalrecovered&#34;:&#34;654079&#34;},{&#34;dailyconfirmed&#34;:&#34;37411&#34;,&#34;dailydeceased&#34;:&#34;543&#34;,&#34;dailyrecovered&#34;:&#34;23583&#34;,&#34;date&#34;:&#34;18 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-18&#34;,&#34;totalconfirmed&#34;:&#34;1077873&#34;,&#34;totaldeceased&#34;:&#34;26830&#34;,&#34;totalrecovered&#34;:&#34;677662&#34;},{&#34;dailyconfirmed&#34;:&#34;40235&#34;,&#34;dailydeceased&#34;:&#34;675&#34;,&#34;dailyrecovered&#34;:&#34;22730&#34;,&#34;date&#34;:&#34;19 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-19&#34;,&#34;totalconfirmed&#34;:&#34;1118108&#34;,&#34;totaldeceased&#34;:&#34;27505&#34;,&#34;totalrecovered&#34;:&#34;700392&#34;},{&#34;dailyconfirmed&#34;:&#34;36806&#34;,&#34;dailydeceased&#34;:&#34;596&#34;,&#34;dailyrecovered&#34;:&#34;24303&#34;,&#34;date&#34;:&#34;20 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-20&#34;,&#34;totalconfirmed&#34;:&#34;1154914&#34;,&#34;totaldeceased&#34;:&#34;28101&#34;,&#34;totalrecovered&#34;:&#34;724695&#34;},{&#34;dailyconfirmed&#34;:&#34;39170&#34;,&#34;dailydeceased&#34;:&#34;671&#34;,&#34;dailyrecovered&#34;:&#34;27589&#34;,&#34;date&#34;:&#34;21 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-21&#34;,&#34;totalconfirmed&#34;:&#34;1194084&#34;,&#34;totaldeceased&#34;:&#34;28772&#34;,&#34;totalrecovered&#34;:&#34;752284&#34;},{&#34;dailyconfirmed&#34;:&#34;45601&#34;,&#34;dailydeceased&#34;:&#34;1130&#34;,&#34;dailyrecovered&#34;:&#34;31875&#34;,&#34;date&#34;:&#34;22 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-22&#34;,&#34;totalconfirmed&#34;:&#34;1239685&#34;,&#34;totaldeceased&#34;:&#34;29902&#34;,&#34;totalrecovered&#34;:&#34;784159&#34;},{&#34;dailyconfirmed&#34;:&#34;48443&#34;,&#34;dailydeceased&#34;:&#34;755&#34;,&#34;dailyrecovered&#34;:&#34;33326&#34;,&#34;date&#34;:&#34;23 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-23&#34;,&#34;totalconfirmed&#34;:&#34;1288128&#34;,&#34;totaldeceased&#34;:&#34;30657&#34;,&#34;totalrecovered&#34;:&#34;817485&#34;},{&#34;dailyconfirmed&#34;:&#34;48888&#34;,&#34;dailydeceased&#34;:&#34;763&#34;,&#34;dailyrecovered&#34;:&#34;32514&#34;,&#34;date&#34;:&#34;24 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-24&#34;,&#34;totalconfirmed&#34;:&#34;1337016&#34;,&#34;totaldeceased&#34;:&#34;31420&#34;,&#34;totalrecovered&#34;:&#34;849999&#34;},{&#34;dailyconfirmed&#34;:&#34;50072&#34;,&#34;dailydeceased&#34;:&#34;703&#34;,&#34;dailyrecovered&#34;:&#34;37125&#34;,&#34;date&#34;:&#34;25 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-25&#34;,&#34;totalconfirmed&#34;:&#34;1387088&#34;,&#34;totaldeceased&#34;:&#34;32123&#34;,&#34;totalrecovered&#34;:&#34;887124&#34;},{&#34;dailyconfirmed&#34;:&#34;48932&#34;,&#34;dailydeceased&#34;:&#34;704&#34;,&#34;dailyrecovered&#34;:&#34;31512&#34;,&#34;date&#34;:&#34;26 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-26&#34;,&#34;totalconfirmed&#34;:&#34;1436020&#34;,&#34;totaldeceased&#34;:&#34;32827&#34;,&#34;totalrecovered&#34;:&#34;918636&#34;},{&#34;dailyconfirmed&#34;:&#34;46484&#34;,&#34;dailydeceased&#34;:&#34;642&#34;,&#34;dailyrecovered&#34;:&#34;34354&#34;,&#34;date&#34;:&#34;27 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-27&#34;,&#34;totalconfirmed&#34;:&#34;1482504&#34;,&#34;totaldeceased&#34;:&#34;33469&#34;,&#34;totalrecovered&#34;:&#34;952990&#34;},{&#34;dailyconfirmed&#34;:&#34;49631&#34;,&#34;dailydeceased&#34;:&#34;774&#34;,&#34;dailyrecovered&#34;:&#34;35683&#34;,&#34;date&#34;:&#34;28 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-28&#34;,&#34;totalconfirmed&#34;:&#34;1532135&#34;,&#34;totaldeceased&#34;:&#34;34243&#34;,&#34;totalrecovered&#34;:&#34;988673&#34;},{&#34;dailyconfirmed&#34;:&#34;52479&#34;,&#34;dailydeceased&#34;:&#34;775&#34;,&#34;dailyrecovered&#34;:&#34;32886&#34;,&#34;date&#34;:&#34;29 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-29&#34;,&#34;totalconfirmed&#34;:&#34;1584614&#34;,&#34;totaldeceased&#34;:&#34;35018&#34;,&#34;totalrecovered&#34;:&#34;1021559&#34;},{&#34;dailyconfirmed&#34;:&#34;54968&#34;,&#34;dailydeceased&#34;:&#34;784&#34;,&#34;dailyrecovered&#34;:&#34;37425&#34;,&#34;date&#34;:&#34;30 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-30&#34;,&#34;totalconfirmed&#34;:&#34;1639582&#34;,&#34;totaldeceased&#34;:&#34;35802&#34;,&#34;totalrecovered&#34;:&#34;1058984&#34;},{&#34;dailyconfirmed&#34;:&#34;57486&#34;,&#34;dailydeceased&#34;:&#34;764&#34;,&#34;dailyrecovered&#34;:&#34;36554&#34;,&#34;date&#34;:&#34;31 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-31&#34;,&#34;totalconfirmed&#34;:&#34;1697068&#34;,&#34;totaldeceased&#34;:&#34;36566&#34;,&#34;totalrecovered&#34;:&#34;1095538&#34;},{&#34;dailyconfirmed&#34;:&#34;55117&#34;,&#34;dailydeceased&#34;:&#34;854&#34;,&#34;dailyrecovered&#34;:&#34;51368&#34;,&#34;date&#34;:&#34;1 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-01&#34;,&#34;totalconfirmed&#34;:&#34;1752185&#34;,&#34;totaldeceased&#34;:&#34;37420&#34;,&#34;totalrecovered&#34;:&#34;1146906&#34;},{&#34;dailyconfirmed&#34;:&#34;52672&#34;,&#34;dailydeceased&#34;:&#34;760&#34;,&#34;dailyrecovered&#34;:&#34;40355&#34;,&#34;date&#34;:&#34;2 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-02&#34;,&#34;totalconfirmed&#34;:&#34;1804857&#34;,&#34;totaldeceased&#34;:&#34;38180&#34;,&#34;totalrecovered&#34;:&#34;1187261&#34;},{&#34;dailyconfirmed&#34;:&#34;50488&#34;,&#34;dailydeceased&#34;:&#34;806&#34;,&#34;dailyrecovered&#34;:&#34;43070&#34;,&#34;date&#34;:&#34;3 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-03&#34;,&#34;totalconfirmed&#34;:&#34;1855345&#34;,&#34;totaldeceased&#34;:&#34;38986&#34;,&#34;totalrecovered&#34;:&#34;1230331&#34;},{&#34;dailyconfirmed&#34;:&#34;51282&#34;,&#34;dailydeceased&#34;:&#34;849&#34;,&#34;dailyrecovered&#34;:&#34;51220&#34;,&#34;date&#34;:&#34;4 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-04&#34;,&#34;totalconfirmed&#34;:&#34;1906627&#34;,&#34;totaldeceased&#34;:&#34;39835&#34;,&#34;totalrecovered&#34;:&#34;1281551&#34;},{&#34;dailyconfirmed&#34;:&#34;56626&#34;,&#34;dailydeceased&#34;:&#34;919&#34;,&#34;dailyrecovered&#34;:&#34;45583&#34;,&#34;date&#34;:&#34;5 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-05&#34;,&#34;totalconfirmed&#34;:&#34;1963253&#34;,&#34;totaldeceased&#34;:&#34;40754&#34;,&#34;totalrecovered&#34;:&#34;1327134&#34;},{&#34;dailyconfirmed&#34;:&#34;62170&#34;,&#34;dailydeceased&#34;:&#34;899&#34;,&#34;dailyrecovered&#34;:&#34;50141&#34;,&#34;date&#34;:&#34;6 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-06&#34;,&#34;totalconfirmed&#34;:&#34;2025423&#34;,&#34;totaldeceased&#34;:&#34;41653&#34;,&#34;totalrecovered&#34;:&#34;1377275&#34;},{&#34;dailyconfirmed&#34;:&#34;61455&#34;,&#34;dailydeceased&#34;:&#34;936&#34;,&#34;dailyrecovered&#34;:&#34;50387&#34;,&#34;date&#34;:&#34;7 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-07&#34;,&#34;totalconfirmed&#34;:&#34;2086878&#34;,&#34;totaldeceased&#34;:&#34;42589&#34;,&#34;totalrecovered&#34;:&#34;1427662&#34;},{&#34;dailyconfirmed&#34;:&#34;65156&#34;,&#34;dailydeceased&#34;:&#34;875&#34;,&#34;dailyrecovered&#34;:&#34;52135&#34;,&#34;date&#34;:&#34;8 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-08&#34;,&#34;totalconfirmed&#34;:&#34;2152034&#34;,&#34;totaldeceased&#34;:&#34;43464&#34;,&#34;totalrecovered&#34;:&#34;1479797&#34;},{&#34;dailyconfirmed&#34;:&#34;62117&#34;,&#34;dailydeceased&#34;:&#34;1013&#34;,&#34;dailyrecovered&#34;:&#34;54474&#34;,&#34;date&#34;:&#34;9 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-09&#34;,&#34;totalconfirmed&#34;:&#34;2214151&#34;,&#34;totaldeceased&#34;:&#34;44477&#34;,&#34;totalrecovered&#34;:&#34;1534271&#34;},{&#34;dailyconfirmed&#34;:&#34;53016&#34;,&#34;dailydeceased&#34;:&#34;887&#34;,&#34;dailyrecovered&#34;:&#34;47362&#34;,&#34;date&#34;:&#34;10 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-10&#34;,&#34;totalconfirmed&#34;:&#34;2267167&#34;,&#34;totaldeceased&#34;:&#34;45364&#34;,&#34;totalrecovered&#34;:&#34;1581633&#34;},{&#34;dailyconfirmed&#34;:&#34;61252&#34;,&#34;dailydeceased&#34;:&#34;835&#34;,&#34;dailyrecovered&#34;:&#34;56461&#34;,&#34;date&#34;:&#34;11 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-11&#34;,&#34;totalconfirmed&#34;:&#34;2328419&#34;,&#34;totaldeceased&#34;:&#34;46199&#34;,&#34;totalrecovered&#34;:&#34;1638094&#34;},{&#34;dailyconfirmed&#34;:&#34;67066&#34;,&#34;dailydeceased&#34;:&#34;950&#34;,&#34;dailyrecovered&#34;:&#34;57759&#34;,&#34;date&#34;:&#34;12 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-12&#34;,&#34;totalconfirmed&#34;:&#34;2395485&#34;,&#34;totaldeceased&#34;:&#34;47149&#34;,&#34;totalrecovered&#34;:&#34;1695853&#34;},{&#34;dailyconfirmed&#34;:&#34;64141&#34;,&#34;dailydeceased&#34;:&#34;1006&#34;,&#34;dailyrecovered&#34;:&#34;54776&#34;,&#34;date&#34;:&#34;13 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-13&#34;,&#34;totalconfirmed&#34;:&#34;2459626&#34;,&#34;totaldeceased&#34;:&#34;48155&#34;,&#34;totalrecovered&#34;:&#34;1750629&#34;},{&#34;dailyconfirmed&#34;:&#34;65610&#34;,&#34;dailydeceased&#34;:&#34;989&#34;,&#34;dailyrecovered&#34;:&#34;56920&#34;,&#34;date&#34;:&#34;14 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-14&#34;,&#34;totalconfirmed&#34;:&#34;2525236&#34;,&#34;totaldeceased&#34;:&#34;49144&#34;,&#34;totalrecovered&#34;:&#34;1807549&#34;},{&#34;dailyconfirmed&#34;:&#34;63986&#34;,&#34;dailydeceased&#34;:&#34;952&#34;,&#34;dailyrecovered&#34;:&#34;53116&#34;,&#34;date&#34;:&#34;15 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-15&#34;,&#34;totalconfirmed&#34;:&#34;2589222&#34;,&#34;totaldeceased&#34;:&#34;50096&#34;,&#34;totalrecovered&#34;:&#34;1860665&#34;},{&#34;dailyconfirmed&#34;:&#34;58096&#34;,&#34;dailydeceased&#34;:&#34;952&#34;,&#34;dailyrecovered&#34;:&#34;57404&#34;,&#34;date&#34;:&#34;16 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-16&#34;,&#34;totalconfirmed&#34;:&#34;2647318&#34;,&#34;totaldeceased&#34;:&#34;51048&#34;,&#34;totalrecovered&#34;:&#34;1918069&#34;},{&#34;dailyconfirmed&#34;:&#34;54298&#34;,&#34;dailydeceased&#34;:&#34;880&#34;,&#34;dailyrecovered&#34;:&#34;58172&#34;,&#34;date&#34;:&#34;17 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-17&#34;,&#34;totalconfirmed&#34;:&#34;2701616&#34;,&#34;totaldeceased&#34;:&#34;51928&#34;,&#34;totalrecovered&#34;:&#34;1976241&#34;},{&#34;dailyconfirmed&#34;:&#34;65024&#34;,&#34;dailydeceased&#34;:&#34;1099&#34;,&#34;dailyrecovered&#34;:&#34;60455&#34;,&#34;date&#34;:&#34;18 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-18&#34;,&#34;totalconfirmed&#34;:&#34;2766640&#34;,&#34;totaldeceased&#34;:&#34;53027&#34;,&#34;totalrecovered&#34;:&#34;2036696&#34;},{&#34;dailyconfirmed&#34;:&#34;69196&#34;,&#34;dailydeceased&#34;:&#34;979&#34;,&#34;dailyrecovered&#34;:&#34;59365&#34;,&#34;date&#34;:&#34;19 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-19&#34;,&#34;totalconfirmed&#34;:&#34;2835836&#34;,&#34;totaldeceased&#34;:&#34;54006&#34;,&#34;totalrecovered&#34;:&#34;2096061&#34;},{&#34;dailyconfirmed&#34;:&#34;68518&#34;,&#34;dailydeceased&#34;:&#34;981&#34;,&#34;dailyrecovered&#34;:&#34;61873&#34;,&#34;date&#34;:&#34;20 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-20&#34;,&#34;totalconfirmed&#34;:&#34;2904354&#34;,&#34;totaldeceased&#34;:&#34;54987&#34;,&#34;totalrecovered&#34;:&#34;2157934&#34;},{&#34;dailyconfirmed&#34;:&#34;69029&#34;,&#34;dailydeceased&#34;:&#34;953&#34;,&#34;dailyrecovered&#34;:&#34;62858&#34;,&#34;date&#34;:&#34;21 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-21&#34;,&#34;totalconfirmed&#34;:&#34;2973383&#34;,&#34;totaldeceased&#34;:&#34;55940&#34;,&#34;totalrecovered&#34;:&#34;2220792&#34;},{&#34;dailyconfirmed&#34;:&#34;70067&#34;,&#34;dailydeceased&#34;:&#34;918&#34;,&#34;dailyrecovered&#34;:&#34;59101&#34;,&#34;date&#34;:&#34;22 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-22&#34;,&#34;totalconfirmed&#34;:&#34;3043450&#34;,&#34;totaldeceased&#34;:&#34;56858&#34;,&#34;totalrecovered&#34;:&#34;2279893&#34;},{&#34;dailyconfirmed&#34;:&#34;61749&#34;,&#34;dailydeceased&#34;:&#34;846&#34;,&#34;dailyrecovered&#34;:&#34;56896&#34;,&#34;date&#34;:&#34;23 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-23&#34;,&#34;totalconfirmed&#34;:&#34;3105199&#34;,&#34;totaldeceased&#34;:&#34;57704&#34;,&#34;totalrecovered&#34;:&#34;2336789&#34;},{&#34;dailyconfirmed&#34;:&#34;59696&#34;,&#34;dailydeceased&#34;:&#34;854&#34;,&#34;dailyrecovered&#34;:&#34;66305&#34;,&#34;date&#34;:&#34;24 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-24&#34;,&#34;totalconfirmed&#34;:&#34;3164895&#34;,&#34;totaldeceased&#34;:&#34;58558&#34;,&#34;totalrecovered&#34;:&#34;2403094&#34;},{&#34;dailyconfirmed&#34;:&#34;66873&#34;,&#34;dailydeceased&#34;:&#34;1066&#34;,&#34;dailyrecovered&#34;:&#34;64151&#34;,&#34;date&#34;:&#34;25 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-25&#34;,&#34;totalconfirmed&#34;:&#34;3231768&#34;,&#34;totaldeceased&#34;:&#34;59624&#34;,&#34;totalrecovered&#34;:&#34;2467245&#34;},{&#34;dailyconfirmed&#34;:&#34;75995&#34;,&#34;dailydeceased&#34;:&#34;1017&#34;,&#34;dailyrecovered&#34;:&#34;56191&#34;,&#34;date&#34;:&#34;26 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-26&#34;,&#34;totalconfirmed&#34;:&#34;3307763&#34;,&#34;totaldeceased&#34;:&#34;60641&#34;,&#34;totalrecovered&#34;:&#34;2523436&#34;},{&#34;dailyconfirmed&#34;:&#34;76827&#34;,&#34;dailydeceased&#34;:&#34;1066&#34;,&#34;dailyrecovered&#34;:&#34;59620&#34;,&#34;date&#34;:&#34;27 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-27&#34;,&#34;totalconfirmed&#34;:&#34;3384590&#34;,&#34;totaldeceased&#34;:&#34;61707&#34;,&#34;totalrecovered&#34;:&#34;2583056&#34;},{&#34;dailyconfirmed&#34;:&#34;76657&#34;,&#34;dailydeceased&#34;:&#34;1019&#34;,&#34;dailyrecovered&#34;:&#34;64475&#34;,&#34;date&#34;:&#34;28 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-28&#34;,&#34;totalconfirmed&#34;:&#34;3461247&#34;,&#34;totaldeceased&#34;:&#34;62726&#34;,&#34;totalrecovered&#34;:&#34;2647531&#34;},{&#34;dailyconfirmed&#34;:&#34;78479&#34;,&#34;dailydeceased&#34;:&#34;943&#34;,&#34;dailyrecovered&#34;:&#34;64982&#34;,&#34;date&#34;:&#34;29 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-29&#34;,&#34;totalconfirmed&#34;:&#34;3539726&#34;,&#34;totaldeceased&#34;:&#34;63669&#34;,&#34;totalrecovered&#34;:&#34;2712513&#34;},{&#34;dailyconfirmed&#34;:&#34;79461&#34;,&#34;dailydeceased&#34;:&#34;960&#34;,&#34;dailyrecovered&#34;:&#34;60422&#34;,&#34;date&#34;:&#34;30 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-30&#34;,&#34;totalconfirmed&#34;:&#34;3619187&#34;,&#34;totaldeceased&#34;:&#34;64629&#34;,&#34;totalrecovered&#34;:&#34;2772935&#34;},{&#34;dailyconfirmed&#34;:&#34;68766&#34;,&#34;dailydeceased&#34;:&#34;816&#34;,&#34;dailyrecovered&#34;:&#34;64435&#34;,&#34;date&#34;:&#34;31 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-31&#34;,&#34;totalconfirmed&#34;:&#34;3687953&#34;,&#34;totaldeceased&#34;:&#34;65445&#34;,&#34;totalrecovered&#34;:&#34;2837370&#34;},{&#34;dailyconfirmed&#34;:&#34;78168&#34;,&#34;dailydeceased&#34;:&#34;892&#34;,&#34;dailyrecovered&#34;:&#34;62145&#34;,&#34;date&#34;:&#34;1 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-01&#34;,&#34;totalconfirmed&#34;:&#34;3766121&#34;,&#34;totaldeceased&#34;:&#34;66337&#34;,&#34;totalrecovered&#34;:&#34;2899515&#34;},{&#34;dailyconfirmed&#34;:&#34;82860&#34;,&#34;dailydeceased&#34;:&#34;913&#34;,&#34;dailyrecovered&#34;:&#34;67874&#34;,&#34;date&#34;:&#34;2 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-02&#34;,&#34;totalconfirmed&#34;:&#34;3848981&#34;,&#34;totaldeceased&#34;:&#34;67250&#34;,&#34;totalrecovered&#34;:&#34;2967389&#34;},{&#34;dailyconfirmed&#34;:&#34;84156&#34;,&#34;dailydeceased&#34;:&#34;979&#34;,&#34;dailyrecovered&#34;:&#34;67491&#34;,&#34;date&#34;:&#34;3 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-03&#34;,&#34;totalconfirmed&#34;:&#34;3933137&#34;,&#34;totaldeceased&#34;:&#34;68229&#34;,&#34;totalrecovered&#34;:&#34;3034880&#34;},{&#34;dailyconfirmed&#34;:&#34;87115&#34;,&#34;dailydeceased&#34;:&#34;950&#34;,&#34;dailyrecovered&#34;:&#34;69625&#34;,&#34;date&#34;:&#34;4 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-04&#34;,&#34;totalconfirmed&#34;:&#34;4020252&#34;,&#34;totaldeceased&#34;:&#34;69179&#34;,&#34;totalrecovered&#34;:&#34;3104505&#34;},{&#34;dailyconfirmed&#34;:&#34;90600&#34;,&#34;dailydeceased&#34;:&#34;916&#34;,&#34;dailyrecovered&#34;:&#34;73161&#34;,&#34;date&#34;:&#34;5 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-05&#34;,&#34;totalconfirmed&#34;:&#34;4110852&#34;,&#34;totaldeceased&#34;:&#34;70095&#34;,&#34;totalrecovered&#34;:&#34;3177666&#34;},{&#34;dailyconfirmed&#34;:&#34;91725&#34;,&#34;dailydeceased&#34;:&#34;1005&#34;,&#34;dailyrecovered&#34;:&#34;69630&#34;,&#34;date&#34;:&#34;6 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-06&#34;,&#34;totalconfirmed&#34;:&#34;4202577&#34;,&#34;totaldeceased&#34;:&#34;71100&#34;,&#34;totalrecovered&#34;:&#34;3247296&#34;},{&#34;dailyconfirmed&#34;:&#34;75015&#34;,&#34;dailydeceased&#34;:&#34;1129&#34;,&#34;dailyrecovered&#34;:&#34;74116&#34;,&#34;date&#34;:&#34;7 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-07&#34;,&#34;totalconfirmed&#34;:&#34;4277592&#34;,&#34;totaldeceased&#34;:&#34;72229&#34;,&#34;totalrecovered&#34;:&#34;3321412&#34;},{&#34;dailyconfirmed&#34;:&#34;89855&#34;,&#34;dailydeceased&#34;:&#34;1107&#34;,&#34;dailyrecovered&#34;:&#34;74608&#34;,&#34;date&#34;:&#34;8 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-08&#34;,&#34;totalconfirmed&#34;:&#34;4367447&#34;,&#34;totaldeceased&#34;:&#34;73336&#34;,&#34;totalrecovered&#34;:&#34;3396020&#34;},{&#34;dailyconfirmed&#34;:&#34;95536&#34;,&#34;dailydeceased&#34;:&#34;1168&#34;,&#34;dailyrecovered&#34;:&#34;73062&#34;,&#34;date&#34;:&#34;9 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-09&#34;,&#34;totalconfirmed&#34;:&#34;4462983&#34;,&#34;totaldeceased&#34;:&#34;74504&#34;,&#34;totalrecovered&#34;:&#34;3469082&#34;},{&#34;dailyconfirmed&#34;:&#34;96762&#34;,&#34;dailydeceased&#34;:&#34;1213&#34;,&#34;dailyrecovered&#34;:&#34;70904&#34;,&#34;date&#34;:&#34;10 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-10&#34;,&#34;totalconfirmed&#34;:&#34;4559745&#34;,&#34;totaldeceased&#34;:&#34;75717&#34;,&#34;totalrecovered&#34;:&#34;3539986&#34;},{&#34;dailyconfirmed&#34;:&#34;97655&#34;,&#34;dailydeceased&#34;:&#34;1202&#34;,&#34;dailyrecovered&#34;:&#34;81456&#34;,&#34;date&#34;:&#34;11 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-11&#34;,&#34;totalconfirmed&#34;:&#34;4657400&#34;,&#34;totaldeceased&#34;:&#34;76919&#34;,&#34;totalrecovered&#34;:&#34;3621442&#34;},{&#34;dailyconfirmed&#34;:&#34;94414&#34;,&#34;dailydeceased&#34;:&#34;1111&#34;,&#34;dailyrecovered&#34;:&#34;77862&#34;,&#34;date&#34;:&#34;12 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-12&#34;,&#34;totalconfirmed&#34;:&#34;4751814&#34;,&#34;totaldeceased&#34;:&#34;78030&#34;,&#34;totalrecovered&#34;:&#34;3699304&#34;},{&#34;dailyconfirmed&#34;:&#34;93220&#34;,&#34;dailydeceased&#34;:&#34;1140&#34;,&#34;dailyrecovered&#34;:&#34;77748&#34;,&#34;date&#34;:&#34;13 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-13&#34;,&#34;totalconfirmed&#34;:&#34;4845034&#34;,&#34;totaldeceased&#34;:&#34;79170&#34;,&#34;totalrecovered&#34;:&#34;3777052&#34;},{&#34;dailyconfirmed&#34;:&#34;81913&#34;,&#34;dailydeceased&#34;:&#34;1054&#34;,&#34;dailyrecovered&#34;:&#34;79213&#34;,&#34;date&#34;:&#34;14 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-14&#34;,&#34;totalconfirmed&#34;:&#34;4926947&#34;,&#34;totaldeceased&#34;:&#34;80224&#34;,&#34;totalrecovered&#34;:&#34;3856265&#34;},{&#34;dailyconfirmed&#34;:&#34;91098&#34;,&#34;dailydeceased&#34;:&#34;1281&#34;,&#34;dailyrecovered&#34;:&#34;82849&#34;,&#34;date&#34;:&#34;15 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-15&#34;,&#34;totalconfirmed&#34;:&#34;5018045&#34;,&#34;totaldeceased&#34;:&#34;81505&#34;,&#34;totalrecovered&#34;:&#34;3939114&#34;},{&#34;dailyconfirmed&#34;:&#34;97860&#34;,&#34;dailydeceased&#34;:&#34;1140&#34;,&#34;dailyrecovered&#34;:&#34;82924&#34;,&#34;date&#34;:&#34;16 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-16&#34;,&#34;totalconfirmed&#34;:&#34;5115905&#34;,&#34;totaldeceased&#34;:&#34;82645&#34;,&#34;totalrecovered&#34;:&#34;4022038&#34;},{&#34;dailyconfirmed&#34;:&#34;96787&#34;,&#34;dailydeceased&#34;:&#34;1175&#34;,&#34;dailyrecovered&#34;:&#34;87788&#34;,&#34;date&#34;:&#34;17 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-17&#34;,&#34;totalconfirmed&#34;:&#34;5212692&#34;,&#34;totaldeceased&#34;:&#34;83820&#34;,&#34;totalrecovered&#34;:&#34;4109826&#34;},{&#34;dailyconfirmed&#34;:&#34;92973&#34;,&#34;dailydeceased&#34;:&#34;1221&#34;,&#34;dailyrecovered&#34;:&#34;95515&#34;,&#34;date&#34;:&#34;18 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-18&#34;,&#34;totalconfirmed&#34;:&#34;5305665&#34;,&#34;totaldeceased&#34;:&#34;85041&#34;,&#34;totalrecovered&#34;:&#34;4205341&#34;},{&#34;dailyconfirmed&#34;:&#34;92574&#34;,&#34;dailydeceased&#34;:&#34;1149&#34;,&#34;dailyrecovered&#34;:&#34;94389&#34;,&#34;date&#34;:&#34;19 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-19&#34;,&#34;totalconfirmed&#34;:&#34;5398239&#34;,&#34;totaldeceased&#34;:&#34;86190&#34;,&#34;totalrecovered&#34;:&#34;4299730&#34;},{&#34;dailyconfirmed&#34;:&#34;87395&#34;,&#34;dailydeceased&#34;:&#34;1135&#34;,&#34;dailyrecovered&#34;:&#34;92926&#34;,&#34;date&#34;:&#34;20 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-20&#34;,&#34;totalconfirmed&#34;:&#34;5485634&#34;,&#34;totaldeceased&#34;:&#34;87325&#34;,&#34;totalrecovered&#34;:&#34;4392656&#34;},{&#34;dailyconfirmed&#34;:&#34;74493&#34;,&#34;dailydeceased&#34;:&#34;1056&#34;,&#34;dailyrecovered&#34;:&#34;102070&#34;,&#34;date&#34;:&#34;21 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-21&#34;,&#34;totalconfirmed&#34;:&#34;5560127&#34;,&#34;totaldeceased&#34;:&#34;88381&#34;,&#34;totalrecovered&#34;:&#34;4494726&#34;},{&#34;dailyconfirmed&#34;:&#34;83362&#34;,&#34;dailydeceased&#34;:&#34;1085&#34;,&#34;dailyrecovered&#34;:&#34;89657&#34;,&#34;date&#34;:&#34;22 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-22&#34;,&#34;totalconfirmed&#34;:&#34;5643489&#34;,&#34;totaldeceased&#34;:&#34;89466&#34;,&#34;totalrecovered&#34;:&#34;4584383&#34;},{&#34;dailyconfirmed&#34;:&#34;86703&#34;,&#34;dailydeceased&#34;:&#34;1123&#34;,&#34;dailyrecovered&#34;:&#34;87459&#34;,&#34;date&#34;:&#34;23 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-23&#34;,&#34;totalconfirmed&#34;:&#34;5730192&#34;,&#34;totaldeceased&#34;:&#34;90589&#34;,&#34;totalrecovered&#34;:&#34;4671842&#34;},{&#34;dailyconfirmed&#34;:&#34;85921&#34;,&#34;dailydeceased&#34;:&#34;1144&#34;,&#34;dailyrecovered&#34;:&#34;81142&#34;,&#34;date&#34;:&#34;24 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-24&#34;,&#34;totalconfirmed&#34;:&#34;5816113&#34;,&#34;totaldeceased&#34;:&#34;91733&#34;,&#34;totalrecovered&#34;:&#34;4752984&#34;},{&#34;dailyconfirmed&#34;:&#34;85717&#34;,&#34;dailydeceased&#34;:&#34;1093&#34;,&#34;dailyrecovered&#34;:&#34;93331&#34;,&#34;date&#34;:&#34;25 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-25&#34;,&#34;totalconfirmed&#34;:&#34;5901830&#34;,&#34;totaldeceased&#34;:&#34;92826&#34;,&#34;totalrecovered&#34;:&#34;4846315&#34;},{&#34;dailyconfirmed&#34;:&#34;88759&#34;,&#34;dailydeceased&#34;:&#34;1124&#34;,&#34;dailyrecovered&#34;:&#34;92365&#34;,&#34;date&#34;:&#34;26 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-26&#34;,&#34;totalconfirmed&#34;:&#34;5990589&#34;,&#34;totaldeceased&#34;:&#34;93950&#34;,&#34;totalrecovered&#34;:&#34;4938680&#34;},{&#34;dailyconfirmed&#34;:&#34;82770&#34;,&#34;dailydeceased&#34;:&#34;1040&#34;,&#34;dailyrecovered&#34;:&#34;74691&#34;,&#34;date&#34;:&#34;27 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-27&#34;,&#34;totalconfirmed&#34;:&#34;6073359&#34;,&#34;totaldeceased&#34;:&#34;94990&#34;,&#34;totalrecovered&#34;:&#34;5013371&#34;},{&#34;dailyconfirmed&#34;:&#34;69669&#34;,&#34;dailydeceased&#34;:&#34;775&#34;,&#34;dailyrecovered&#34;:&#34;85198&#34;,&#34;date&#34;:&#34;28 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-28&#34;,&#34;totalconfirmed&#34;:&#34;6143028&#34;,&#34;totaldeceased&#34;:&#34;95765&#34;,&#34;totalrecovered&#34;:&#34;5098569&#34;},{&#34;dailyconfirmed&#34;:&#34;80500&#34;,&#34;dailydeceased&#34;:&#34;1178&#34;,&#34;dailyrecovered&#34;:&#34;86150&#34;,&#34;date&#34;:&#34;29 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-29&#34;,&#34;totalconfirmed&#34;:&#34;6223528&#34;,&#34;totaldeceased&#34;:&#34;96943&#34;,&#34;totalrecovered&#34;:&#34;5184719&#34;},{&#34;dailyconfirmed&#34;:&#34;86748&#34;,&#34;dailydeceased&#34;:&#34;1179&#34;,&#34;dailyrecovered&#34;:&#34;85274&#34;,&#34;date&#34;:&#34;30 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-30&#34;,&#34;totalconfirmed&#34;:&#34;6310276&#34;,&#34;totaldeceased&#34;:&#34;98122&#34;,&#34;totalrecovered&#34;:&#34;5269993&#34;},{&#34;dailyconfirmed&#34;:&#34;81784&#34;,&#34;dailydeceased&#34;:&#34;1099&#34;,&#34;dailyrecovered&#34;:&#34;78731&#34;,&#34;date&#34;:&#34;1 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-01&#34;,&#34;totalconfirmed&#34;:&#34;6392060&#34;,&#34;totaldeceased&#34;:&#34;99221&#34;,&#34;totalrecovered&#34;:&#34;5348724&#34;},{&#34;dailyconfirmed&#34;:&#34;79883&#34;,&#34;dailydeceased&#34;:&#34;1068&#34;,&#34;dailyrecovered&#34;:&#34;76339&#34;,&#34;date&#34;:&#34;2 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-02&#34;,&#34;totalconfirmed&#34;:&#34;6471943&#34;,&#34;totaldeceased&#34;:&#34;100289&#34;,&#34;totalrecovered&#34;:&#34;5425063&#34;},{&#34;dailyconfirmed&#34;:&#34;75479&#34;,&#34;dailydeceased&#34;:&#34;937&#34;,&#34;dailyrecovered&#34;:&#34;81655&#34;,&#34;date&#34;:&#34;3 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-03&#34;,&#34;totalconfirmed&#34;:&#34;6547422&#34;,&#34;totaldeceased&#34;:&#34;101226&#34;,&#34;totalrecovered&#34;:&#34;5506718&#34;},{&#34;dailyconfirmed&#34;:&#34;74770&#34;,&#34;dailydeceased&#34;:&#34;903&#34;,&#34;dailyrecovered&#34;:&#34;76713&#34;,&#34;date&#34;:&#34;4 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-04&#34;,&#34;totalconfirmed&#34;:&#34;6622192&#34;,&#34;totaldeceased&#34;:&#34;102129&#34;,&#34;totalrecovered&#34;:&#34;5583431&#34;},{&#34;dailyconfirmed&#34;:&#34;60130&#34;,&#34;dailydeceased&#34;:&#34;886&#34;,&#34;dailyrecovered&#34;:&#34;75855&#34;,&#34;date&#34;:&#34;5 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-05&#34;,&#34;totalconfirmed&#34;:&#34;6682322&#34;,&#34;totaldeceased&#34;:&#34;103015&#34;,&#34;totalrecovered&#34;:&#34;5659286&#34;},{&#34;dailyconfirmed&#34;:&#34;71869&#34;,&#34;dailydeceased&#34;:&#34;990&#34;,&#34;dailyrecovered&#34;:&#34;81945&#34;,&#34;date&#34;:&#34;6 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-06&#34;,&#34;totalconfirmed&#34;:&#34;6754191&#34;,&#34;totaldeceased&#34;:&#34;104005&#34;,&#34;totalrecovered&#34;:&#34;5741231&#34;},{&#34;dailyconfirmed&#34;:&#34;78809&#34;,&#34;dailydeceased&#34;:&#34;963&#34;,&#34;dailyrecovered&#34;:&#34;83209&#34;,&#34;date&#34;:&#34;7 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-07&#34;,&#34;totalconfirmed&#34;:&#34;6833000&#34;,&#34;totaldeceased&#34;:&#34;104968&#34;,&#34;totalrecovered&#34;:&#34;5824440&#34;},{&#34;dailyconfirmed&#34;:&#34;70797&#34;,&#34;dailydeceased&#34;:&#34;967&#34;,&#34;dailyrecovered&#34;:&#34;78745&#34;,&#34;date&#34;:&#34;8 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-08&#34;,&#34;totalconfirmed&#34;:&#34;6903797&#34;,&#34;totaldeceased&#34;:&#34;105935&#34;,&#34;totalrecovered&#34;:&#34;5903185&#34;},{&#34;dailyconfirmed&#34;:&#34;73305&#34;,&#34;dailydeceased&#34;:&#34;929&#34;,&#34;dailyrecovered&#34;:&#34;82628&#34;,&#34;date&#34;:&#34;9 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-09&#34;,&#34;totalconfirmed&#34;:&#34;6977102&#34;,&#34;totaldeceased&#34;:&#34;106864&#34;,&#34;totalrecovered&#34;:&#34;5985813&#34;},{&#34;dailyconfirmed&#34;:&#34;74418&#34;,&#34;dailydeceased&#34;:&#34;921&#34;,&#34;dailyrecovered&#34;:&#34;89024&#34;,&#34;date&#34;:&#34;10 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-10&#34;,&#34;totalconfirmed&#34;:&#34;7051520&#34;,&#34;totaldeceased&#34;:&#34;107785&#34;,&#34;totalrecovered&#34;:&#34;6074837&#34;},{&#34;dailyconfirmed&#34;:&#34;67789&#34;,&#34;dailydeceased&#34;:&#34;813&#34;,&#34;dailyrecovered&#34;:&#34;71565&#34;,&#34;date&#34;:&#34;11 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-11&#34;,&#34;totalconfirmed&#34;:&#34;7119309&#34;,&#34;totaldeceased&#34;:&#34;108598&#34;,&#34;totalrecovered&#34;:&#34;6146402&#34;},{&#34;dailyconfirmed&#34;:&#34;54262&#34;,&#34;dailydeceased&#34;:&#34;710&#34;,&#34;dailyrecovered&#34;:&#34;78365&#34;,&#34;date&#34;:&#34;12 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-12&#34;,&#34;totalconfirmed&#34;:&#34;7173571&#34;,&#34;totaldeceased&#34;:&#34;109308&#34;,&#34;totalrecovered&#34;:&#34;6224767&#34;},{&#34;dailyconfirmed&#34;:&#34;63717&#34;,&#34;dailydeceased&#34;:&#34;727&#34;,&#34;dailyrecovered&#34;:&#34;74079&#34;,&#34;date&#34;:&#34;13 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-13&#34;,&#34;totalconfirmed&#34;:&#34;7237288&#34;,&#34;totaldeceased&#34;:&#34;110035&#34;,&#34;totalrecovered&#34;:&#34;6298846&#34;},{&#34;dailyconfirmed&#34;:&#34;67811&#34;,&#34;dailydeceased&#34;:&#34;690&#34;,&#34;dailyrecovered&#34;:&#34;81582&#34;,&#34;date&#34;:&#34;14 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-14&#34;,&#34;totalconfirmed&#34;:&#34;7305099&#34;,&#34;totaldeceased&#34;:&#34;110725&#34;,&#34;totalrecovered&#34;:&#34;6380428&#34;},{&#34;dailyconfirmed&#34;:&#34;63441&#34;,&#34;dailydeceased&#34;:&#34;882&#34;,&#34;dailyrecovered&#34;:&#34;70792&#34;,&#34;date&#34;:&#34;15 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-15&#34;,&#34;totalconfirmed&#34;:&#34;7368540&#34;,&#34;totaldeceased&#34;:&#34;111607&#34;,&#34;totalrecovered&#34;:&#34;6451220&#34;},{&#34;dailyconfirmed&#34;:&#34;62304&#34;,&#34;dailydeceased&#34;:&#34;840&#34;,&#34;dailyrecovered&#34;:&#34;70568&#34;,&#34;date&#34;:&#34;16 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-16&#34;,&#34;totalconfirmed&#34;:&#34;7430844&#34;,&#34;totaldeceased&#34;:&#34;112447&#34;,&#34;totalrecovered&#34;:&#34;6521788&#34;},{&#34;dailyconfirmed&#34;:&#34;61893&#34;,&#34;dailydeceased&#34;:&#34;1032&#34;,&#34;dailyrecovered&#34;:&#34;72583&#34;,&#34;date&#34;:&#34;17 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-17&#34;,&#34;totalconfirmed&#34;:&#34;7492737&#34;,&#34;totaldeceased&#34;:&#34;113479&#34;,&#34;totalrecovered&#34;:&#34;6594371&#34;},{&#34;dailyconfirmed&#34;:&#34;56519&#34;,&#34;dailydeceased&#34;:&#34;582&#34;,&#34;dailyrecovered&#34;:&#34;66418&#34;,&#34;date&#34;:&#34;18 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-18&#34;,&#34;totalconfirmed&#34;:&#34;7549256&#34;,&#34;totaldeceased&#34;:&#34;114061&#34;,&#34;totalrecovered&#34;:&#34;6660789&#34;},{&#34;dailyconfirmed&#34;:&#34;45506&#34;,&#34;dailydeceased&#34;:&#34;589&#34;,&#34;dailyrecovered&#34;:&#34;69800&#34;,&#34;date&#34;:&#34;19 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-19&#34;,&#34;totalconfirmed&#34;:&#34;7594762&#34;,&#34;totaldeceased&#34;:&#34;114650&#34;,&#34;totalrecovered&#34;:&#34;6730589&#34;},{&#34;dailyconfirmed&#34;:&#34;54348&#34;,&#34;dailydeceased&#34;:&#34;714&#34;,&#34;dailyrecovered&#34;:&#34;61828&#34;,&#34;date&#34;:&#34;20 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-20&#34;,&#34;totalconfirmed&#34;:&#34;7649110&#34;,&#34;totaldeceased&#34;:&#34;115364&#34;,&#34;totalrecovered&#34;:&#34;6792417&#34;},{&#34;dailyconfirmed&#34;:&#34;56264&#34;,&#34;dailydeceased&#34;:&#34;701&#34;,&#34;dailyrecovered&#34;:&#34;79561&#34;,&#34;date&#34;:&#34;21 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-21&#34;,&#34;totalconfirmed&#34;:&#34;7705374&#34;,&#34;totaldeceased&#34;:&#34;116065&#34;,&#34;totalrecovered&#34;:&#34;6871978&#34;},{&#34;dailyconfirmed&#34;:&#34;54371&#34;,&#34;dailydeceased&#34;:&#34;686&#34;,&#34;dailyrecovered&#34;:&#34;74569&#34;,&#34;date&#34;:&#34;22 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-22&#34;,&#34;totalconfirmed&#34;:&#34;7759745&#34;,&#34;totaldeceased&#34;:&#34;116751&#34;,&#34;totalrecovered&#34;:&#34;6946547&#34;},{&#34;dailyconfirmed&#34;:&#34;53931&#34;,&#34;dailydeceased&#34;:&#34;655&#34;,&#34;dailyrecovered&#34;:&#34;66994&#34;,&#34;date&#34;:&#34;23 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-23&#34;,&#34;totalconfirmed&#34;:&#34;7813676&#34;,&#34;totaldeceased&#34;:&#34;117406&#34;,&#34;totalrecovered&#34;:&#34;7013541&#34;},{&#34;dailyconfirmed&#34;:&#34;50366&#34;,&#34;dailydeceased&#34;:&#34;578&#34;,&#34;dailyrecovered&#34;:&#34;62270&#34;,&#34;date&#34;:&#34;24 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-24&#34;,&#34;totalconfirmed&#34;:&#34;7864042&#34;,&#34;totaldeceased&#34;:&#34;117984&#34;,&#34;totalrecovered&#34;:&#34;7075811&#34;},{&#34;dailyconfirmed&#34;:&#34;45922&#34;,&#34;dailydeceased&#34;:&#34;483&#34;,&#34;dailyrecovered&#34;:&#34;59304&#34;,&#34;date&#34;:&#34;25 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-25&#34;,&#34;totalconfirmed&#34;:&#34;7909964&#34;,&#34;totaldeceased&#34;:&#34;118467&#34;,&#34;totalrecovered&#34;:&#34;7135115&#34;},{&#34;dailyconfirmed&#34;:&#34;36019&#34;,&#34;dailydeceased&#34;:&#34;485&#34;,&#34;dailyrecovered&#34;:&#34;63734&#34;,&#34;date&#34;:&#34;26 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-26&#34;,&#34;totalconfirmed&#34;:&#34;7945983&#34;,&#34;totaldeceased&#34;:&#34;118952&#34;,&#34;totalrecovered&#34;:&#34;7198849&#34;},{&#34;dailyconfirmed&#34;:&#34;43036&#34;,&#34;dailydeceased&#34;:&#34;511&#34;,&#34;dailyrecovered&#34;:&#34;58429&#34;,&#34;date&#34;:&#34;27 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-27&#34;,&#34;totalconfirmed&#34;:&#34;7989019&#34;,&#34;totaldeceased&#34;:&#34;119463&#34;,&#34;totalrecovered&#34;:&#34;7257278&#34;},{&#34;dailyconfirmed&#34;:&#34;50188&#34;,&#34;dailydeceased&#34;:&#34;515&#34;,&#34;dailyrecovered&#34;:&#34;56594&#34;,&#34;date&#34;:&#34;28 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-28&#34;,&#34;totalconfirmed&#34;:&#34;8039207&#34;,&#34;totaldeceased&#34;:&#34;119978&#34;,&#34;totalrecovered&#34;:&#34;7313872&#34;},{&#34;dailyconfirmed&#34;:&#34;48765&#34;,&#34;dailydeceased&#34;:&#34;562&#34;,&#34;dailyrecovered&#34;:&#34;57867&#34;,&#34;date&#34;:&#34;29 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-29&#34;,&#34;totalconfirmed&#34;:&#34;8087972&#34;,&#34;totaldeceased&#34;:&#34;120540&#34;,&#34;totalrecovered&#34;:&#34;7371739&#34;},{&#34;dailyconfirmed&#34;:&#34;48117&#34;,&#34;dailydeceased&#34;:&#34;550&#34;,&#34;dailyrecovered&#34;:&#34;59005&#34;,&#34;date&#34;:&#34;30 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-30&#34;,&#34;totalconfirmed&#34;:&#34;8136089&#34;,&#34;totaldeceased&#34;:&#34;121090&#34;,&#34;totalrecovered&#34;:&#34;7430744&#34;},{&#34;dailyconfirmed&#34;:&#34;47228&#34;,&#34;dailydeceased&#34;:&#34;469&#34;,&#34;dailyrecovered&#34;:&#34;58682&#34;,&#34;date&#34;:&#34;31 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-31&#34;,&#34;totalconfirmed&#34;:&#34;8183317&#34;,&#34;totaldeceased&#34;:&#34;121559&#34;,&#34;totalrecovered&#34;:&#34;7489426&#34;},{&#34;dailyconfirmed&#34;:&#34;45928&#34;,&#34;dailydeceased&#34;:&#34;491&#34;,&#34;dailyrecovered&#34;:&#34;53312&#34;,&#34;date&#34;:&#34;1 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-01&#34;,&#34;totalconfirmed&#34;:&#34;8229245&#34;,&#34;totaldeceased&#34;:&#34;122050&#34;,&#34;totalrecovered&#34;:&#34;7542738&#34;},{&#34;dailyconfirmed&#34;:&#34;37592&#34;,&#34;dailydeceased&#34;:&#34;498&#34;,&#34;dailyrecovered&#34;:&#34;58524&#34;,&#34;date&#34;:&#34;2 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-02&#34;,&#34;totalconfirmed&#34;:&#34;8266837&#34;,&#34;totaldeceased&#34;:&#34;122548&#34;,&#34;totalrecovered&#34;:&#34;7601262&#34;},{&#34;dailyconfirmed&#34;:&#34;46027&#34;,&#34;dailydeceased&#34;:&#34;510&#34;,&#34;dailyrecovered&#34;:&#34;53328&#34;,&#34;date&#34;:&#34;3 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-03&#34;,&#34;totalconfirmed&#34;:&#34;8312864&#34;,&#34;totaldeceased&#34;:&#34;123058&#34;,&#34;totalrecovered&#34;:&#34;7654590&#34;},{&#34;dailyconfirmed&#34;:&#34;50465&#34;,&#34;dailydeceased&#34;:&#34;707&#34;,&#34;dailyrecovered&#34;:&#34;55873&#34;,&#34;date&#34;:&#34;4 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-04&#34;,&#34;totalconfirmed&#34;:&#34;8363329&#34;,&#34;totaldeceased&#34;:&#34;123765&#34;,&#34;totalrecovered&#34;:&#34;7710463&#34;},{&#34;dailyconfirmed&#34;:&#34;47628&#34;,&#34;dailydeceased&#34;:&#34;672&#34;,&#34;dailyrecovered&#34;:&#34;54133&#34;,&#34;date&#34;:&#34;5 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-05&#34;,&#34;totalconfirmed&#34;:&#34;8410957&#34;,&#34;totaldeceased&#34;:&#34;124437&#34;,&#34;totalrecovered&#34;:&#34;7764596&#34;},{&#34;dailyconfirmed&#34;:&#34;50017&#34;,&#34;dailydeceased&#34;:&#34;577&#34;,&#34;dailyrecovered&#34;:&#34;53946&#34;,&#34;date&#34;:&#34;6 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-06&#34;,&#34;totalconfirmed&#34;:&#34;8460974&#34;,&#34;totaldeceased&#34;:&#34;125014&#34;,&#34;totalrecovered&#34;:&#34;7818542&#34;},{&#34;dailyconfirmed&#34;:&#34;46153&#34;,&#34;dailydeceased&#34;:&#34;557&#34;,&#34;dailyrecovered&#34;:&#34;48582&#34;,&#34;date&#34;:&#34;7 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-07&#34;,&#34;totalconfirmed&#34;:&#34;8507127&#34;,&#34;totaldeceased&#34;:&#34;125571&#34;,&#34;totalrecovered&#34;:&#34;7867124&#34;},{&#34;dailyconfirmed&#34;:&#34;46707&#34;,&#34;dailydeceased&#34;:&#34;491&#34;,&#34;dailyrecovered&#34;:&#34;48465&#34;,&#34;date&#34;:&#34;8 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-08&#34;,&#34;totalconfirmed&#34;:&#34;8553834&#34;,&#34;totaldeceased&#34;:&#34;126062&#34;,&#34;totalrecovered&#34;:&#34;7915589&#34;},{&#34;dailyconfirmed&#34;:&#34;37119&#34;,&#34;dailydeceased&#34;:&#34;450&#34;,&#34;dailyrecovered&#34;:&#34;41449&#34;,&#34;date&#34;:&#34;9 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-09&#34;,&#34;totalconfirmed&#34;:&#34;8590953&#34;,&#34;totaldeceased&#34;:&#34;126512&#34;,&#34;totalrecovered&#34;:&#34;7957038&#34;},{&#34;dailyconfirmed&#34;:&#34;44724&#34;,&#34;dailydeceased&#34;:&#34;511&#34;,&#34;dailyrecovered&#34;:&#34;54639&#34;,&#34;date&#34;:&#34;10 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-10&#34;,&#34;totalconfirmed&#34;:&#34;8635677&#34;,&#34;totaldeceased&#34;:&#34;127023&#34;,&#34;totalrecovered&#34;:&#34;8011677&#34;},{&#34;dailyconfirmed&#34;:&#34;48285&#34;,&#34;dailydeceased&#34;:&#34;550&#34;,&#34;dailyrecovered&#34;:&#34;52704&#34;,&#34;date&#34;:&#34;11 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-11&#34;,&#34;totalconfirmed&#34;:&#34;8683962&#34;,&#34;totaldeceased&#34;:&#34;127573&#34;,&#34;totalrecovered&#34;:&#34;8064381&#34;},{&#34;dailyconfirmed&#34;:&#34;44585&#34;,&#34;dailydeceased&#34;:&#34;544&#34;,&#34;dailyrecovered&#34;:&#34;49354&#34;,&#34;date&#34;:&#34;12 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-12&#34;,&#34;totalconfirmed&#34;:&#34;8728547&#34;,&#34;totaldeceased&#34;:&#34;128117&#34;,&#34;totalrecovered&#34;:&#34;8113735&#34;},{&#34;dailyconfirmed&#34;:&#34;44620&#34;,&#34;dailydeceased&#34;:&#34;517&#34;,&#34;dailyrecovered&#34;:&#34;47620&#34;,&#34;date&#34;:&#34;13 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-13&#34;,&#34;totalconfirmed&#34;:&#34;8773167&#34;,&#34;totaldeceased&#34;:&#34;128634&#34;,&#34;totalrecovered&#34;:&#34;8161355&#34;},{&#34;dailyconfirmed&#34;:&#34;41692&#34;,&#34;dailydeceased&#34;:&#34;450&#34;,&#34;dailyrecovered&#34;:&#34;42317&#34;,&#34;date&#34;:&#34;14 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-14&#34;,&#34;totalconfirmed&#34;:&#34;8814859&#34;,&#34;totaldeceased&#34;:&#34;129084&#34;,&#34;totalrecovered&#34;:&#34;8203672&#34;},{&#34;dailyconfirmed&#34;:&#34;30681&#34;,&#34;dailydeceased&#34;:&#34;434&#34;,&#34;dailyrecovered&#34;:&#34;44111&#34;,&#34;date&#34;:&#34;15 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-15&#34;,&#34;totalconfirmed&#34;:&#34;8845540&#34;,&#34;totaldeceased&#34;:&#34;129518&#34;,&#34;totalrecovered&#34;:&#34;8247783&#34;},{&#34;dailyconfirmed&#34;:&#34;28609&#34;,&#34;dailydeceased&#34;:&#34;451&#34;,&#34;dailyrecovered&#34;:&#34;40392&#34;,&#34;date&#34;:&#34;16 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-16&#34;,&#34;totalconfirmed&#34;:&#34;8874149&#34;,&#34;totaldeceased&#34;:&#34;129969&#34;,&#34;totalrecovered&#34;:&#34;8288175&#34;},{&#34;dailyconfirmed&#34;:&#34;38548&#34;,&#34;dailydeceased&#34;:&#34;472&#34;,&#34;dailyrecovered&#34;:&#34;44753&#34;,&#34;date&#34;:&#34;17 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-17&#34;,&#34;totalconfirmed&#34;:&#34;8912697&#34;,&#34;totaldeceased&#34;:&#34;130441&#34;,&#34;totalrecovered&#34;:&#34;8332928&#34;},{&#34;dailyconfirmed&#34;:&#34;45366&#34;,&#34;dailydeceased&#34;:&#34;586&#34;,&#34;dailyrecovered&#34;:&#34;48675&#34;,&#34;date&#34;:&#34;18 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-18&#34;,&#34;totalconfirmed&#34;:&#34;8958063&#34;,&#34;totaldeceased&#34;:&#34;131027&#34;,&#34;totalrecovered&#34;:&#34;8381603&#34;},{&#34;dailyconfirmed&#34;:&#34;46185&#34;,&#34;dailydeceased&#34;:&#34;582&#34;,&#34;dailyrecovered&#34;:&#34;45246&#34;,&#34;date&#34;:&#34;19 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-19&#34;,&#34;totalconfirmed&#34;:&#34;9004248&#34;,&#34;totaldeceased&#34;:&#34;131609&#34;,&#34;totalrecovered&#34;:&#34;8426849&#34;},{&#34;dailyconfirmed&#34;:&#34;46283&#34;,&#34;dailydeceased&#34;:&#34;564&#34;,&#34;dailyrecovered&#34;:&#34;48968&#34;,&#34;date&#34;:&#34;20 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-20&#34;,&#34;totalconfirmed&#34;:&#34;9050531&#34;,&#34;totaldeceased&#34;:&#34;132173&#34;,&#34;totalrecovered&#34;:&#34;8475817&#34;},{&#34;dailyconfirmed&#34;:&#34;45301&#34;,&#34;dailydeceased&#34;:&#34;499&#34;,&#34;dailyrecovered&#34;:&#34;44055&#34;,&#34;date&#34;:&#34;21 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-21&#34;,&#34;totalconfirmed&#34;:&#34;9095832&#34;,&#34;totaldeceased&#34;:&#34;132672&#34;,&#34;totalrecovered&#34;:&#34;8519872&#34;},{&#34;dailyconfirmed&#34;:&#34;44404&#34;,&#34;dailydeceased&#34;:&#34;510&#34;,&#34;dailyrecovered&#34;:&#34;41405&#34;,&#34;date&#34;:&#34;22 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-22&#34;,&#34;totalconfirmed&#34;:&#34;9140236&#34;,&#34;totaldeceased&#34;:&#34;133182&#34;,&#34;totalrecovered&#34;:&#34;8561277&#34;},{&#34;dailyconfirmed&#34;:&#34;37441&#34;,&#34;dailydeceased&#34;:&#34;481&#34;,&#34;dailyrecovered&#34;:&#34;42195&#34;,&#34;date&#34;:&#34;23 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-23&#34;,&#34;totalconfirmed&#34;:&#34;9177677&#34;,&#34;totaldeceased&#34;:&#34;133663&#34;,&#34;totalrecovered&#34;:&#34;8603472&#34;},{&#34;dailyconfirmed&#34;:&#34;44245&#34;,&#34;dailydeceased&#34;:&#34;489&#34;,&#34;dailyrecovered&#34;:&#34;37765&#34;,&#34;date&#34;:&#34;24 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-24&#34;,&#34;totalconfirmed&#34;:&#34;9221922&#34;,&#34;totaldeceased&#34;:&#34;134152&#34;,&#34;totalrecovered&#34;:&#34;8641237&#34;},{&#34;dailyconfirmed&#34;:&#34;44699&#34;,&#34;dailydeceased&#34;:&#34;518&#34;,&#34;dailyrecovered&#34;:&#34;36582&#34;,&#34;date&#34;:&#34;25 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-25&#34;,&#34;totalconfirmed&#34;:&#34;9266621&#34;,&#34;totaldeceased&#34;:&#34;134670&#34;,&#34;totalrecovered&#34;:&#34;8677819&#34;},{&#34;dailyconfirmed&#34;:&#34;43174&#34;,&#34;dailydeceased&#34;:&#34;491&#34;,&#34;dailyrecovered&#34;:&#34;39723&#34;,&#34;date&#34;:&#34;26 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-26&#34;,&#34;totalconfirmed&#34;:&#34;9309795&#34;,&#34;totaldeceased&#34;:&#34;135161&#34;,&#34;totalrecovered&#34;:&#34;8717542&#34;},{&#34;dailyconfirmed&#34;:&#34;41353&#34;,&#34;dailydeceased&#34;:&#34;486&#34;,&#34;dailyrecovered&#34;:&#34;41177&#34;,&#34;date&#34;:&#34;27 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-27&#34;,&#34;totalconfirmed&#34;:&#34;9351148&#34;,&#34;totaldeceased&#34;:&#34;135647&#34;,&#34;totalrecovered&#34;:&#34;8758719&#34;},{&#34;dailyconfirmed&#34;:&#34;41815&#34;,&#34;dailydeceased&#34;:&#34;495&#34;,&#34;dailyrecovered&#34;:&#34;42275&#34;,&#34;date&#34;:&#34;28 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-28&#34;,&#34;totalconfirmed&#34;:&#34;9392963&#34;,&#34;totaldeceased&#34;:&#34;136142&#34;,&#34;totalrecovered&#34;:&#34;8800994&#34;},{&#34;dailyconfirmed&#34;:&#34;39036&#34;,&#34;dailydeceased&#34;:&#34;444&#34;,&#34;dailyrecovered&#34;:&#34;45152&#34;,&#34;date&#34;:&#34;29 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-29&#34;,&#34;totalconfirmed&#34;:&#34;9431999&#34;,&#34;totaldeceased&#34;:&#34;136586&#34;,&#34;totalrecovered&#34;:&#34;8846146&#34;},{&#34;dailyconfirmed&#34;:&#34;31179&#34;,&#34;dailydeceased&#34;:&#34;482&#34;,&#34;dailyrecovered&#34;:&#34;42282&#34;,&#34;date&#34;:&#34;30 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-30&#34;,&#34;totalconfirmed&#34;:&#34;9463178&#34;,&#34;totaldeceased&#34;:&#34;137068&#34;,&#34;totalrecovered&#34;:&#34;8888428&#34;},{&#34;dailyconfirmed&#34;:&#34;36474&#34;,&#34;dailydeceased&#34;:&#34;501&#34;,&#34;dailyrecovered&#34;:&#34;43208&#34;,&#34;date&#34;:&#34;1 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-01&#34;,&#34;totalconfirmed&#34;:&#34;9499652&#34;,&#34;totaldeceased&#34;:&#34;137569&#34;,&#34;totalrecovered&#34;:&#34;8931636&#34;},{&#34;dailyconfirmed&#34;:&#34;35506&#34;,&#34;dailydeceased&#34;:&#34;526&#34;,&#34;dailyrecovered&#34;:&#34;40908&#34;,&#34;date&#34;:&#34;2 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-02&#34;,&#34;totalconfirmed&#34;:&#34;9535158&#34;,&#34;totaldeceased&#34;:&#34;138095&#34;,&#34;totalrecovered&#34;:&#34;8972544&#34;},{&#34;dailyconfirmed&#34;:&#34;36574&#34;,&#34;dailydeceased&#34;:&#34;541&#34;,&#34;dailyrecovered&#34;:&#34;42991&#34;,&#34;date&#34;:&#34;3 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-03&#34;,&#34;totalconfirmed&#34;:&#34;9571732&#34;,&#34;totaldeceased&#34;:&#34;138636&#34;,&#34;totalrecovered&#34;:&#34;9015535&#34;},{&#34;dailyconfirmed&#34;:&#34;36711&#34;,&#34;dailydeceased&#34;:&#34;511&#34;,&#34;dailyrecovered&#34;:&#34;42359&#34;,&#34;date&#34;:&#34;4 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-04&#34;,&#34;totalconfirmed&#34;:&#34;9608443&#34;,&#34;totaldeceased&#34;:&#34;139147&#34;,&#34;totalrecovered&#34;:&#34;9057894&#34;},{&#34;dailyconfirmed&#34;:&#34;36010&#34;,&#34;dailydeceased&#34;:&#34;482&#34;,&#34;dailyrecovered&#34;:&#34;41885&#34;,&#34;date&#34;:&#34;5 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-05&#34;,&#34;totalconfirmed&#34;:&#34;9644453&#34;,&#34;totaldeceased&#34;:&#34;139629&#34;,&#34;totalrecovered&#34;:&#34;9099779&#34;},{&#34;dailyconfirmed&#34;:&#34;33178&#34;,&#34;dailydeceased&#34;:&#34;390&#34;,&#34;dailyrecovered&#34;:&#34;39078&#34;,&#34;date&#34;:&#34;6 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-06&#34;,&#34;totalconfirmed&#34;:&#34;9677631&#34;,&#34;totaldeceased&#34;:&#34;140019&#34;,&#34;totalrecovered&#34;:&#34;9138857&#34;},{&#34;dailyconfirmed&#34;:&#34;26227&#34;,&#34;dailydeceased&#34;:&#34;386&#34;,&#34;dailyrecovered&#34;:&#34;39293&#34;,&#34;date&#34;:&#34;7 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-07&#34;,&#34;totalconfirmed&#34;:&#34;9703858&#34;,&#34;totaldeceased&#34;:&#34;140405&#34;,&#34;totalrecovered&#34;:&#34;9178150&#34;},{&#34;dailyconfirmed&#34;:&#34;32083&#34;,&#34;dailydeceased&#34;:&#34;402&#34;,&#34;dailyrecovered&#34;:&#34;36583&#34;,&#34;date&#34;:&#34;8 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-08&#34;,&#34;totalconfirmed&#34;:&#34;9735941&#34;,&#34;totaldeceased&#34;:&#34;140807&#34;,&#34;totalrecovered&#34;:&#34;9214733&#34;},{&#34;dailyconfirmed&#34;:&#34;31637&#34;,&#34;dailydeceased&#34;:&#34;413&#34;,&#34;dailyrecovered&#34;:&#34;37693&#34;,&#34;date&#34;:&#34;9 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-09&#34;,&#34;totalconfirmed&#34;:&#34;9767578&#34;,&#34;totaldeceased&#34;:&#34;141220&#34;,&#34;totalrecovered&#34;:&#34;9252426&#34;},{&#34;dailyconfirmed&#34;:&#34;29411&#34;,&#34;dailydeceased&#34;:&#34;411&#34;,&#34;dailyrecovered&#34;:&#34;37707&#34;,&#34;date&#34;:&#34;10 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-10&#34;,&#34;totalconfirmed&#34;:&#34;9796989&#34;,&#34;totaldeceased&#34;:&#34;141631&#34;,&#34;totalrecovered&#34;:&#34;9290133&#34;},{&#34;dailyconfirmed&#34;:&#34;29961&#34;,&#34;dailydeceased&#34;:&#34;442&#34;,&#34;dailyrecovered&#34;:&#34;33492&#34;,&#34;date&#34;:&#34;11 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-11&#34;,&#34;totalconfirmed&#34;:&#34;9826950&#34;,&#34;totaldeceased&#34;:&#34;142073&#34;,&#34;totalrecovered&#34;:&#34;9323625&#34;},{&#34;dailyconfirmed&#34;:&#34;30354&#34;,&#34;dailydeceased&#34;:&#34;391&#34;,&#34;dailyrecovered&#34;:&#34;33087&#34;,&#34;date&#34;:&#34;12 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-12&#34;,&#34;totalconfirmed&#34;:&#34;9857304&#34;,&#34;totaldeceased&#34;:&#34;142464&#34;,&#34;totalrecovered&#34;:&#34;9356712&#34;},{&#34;dailyconfirmed&#34;:&#34;27336&#34;,&#34;dailydeceased&#34;:&#34;338&#34;,&#34;dailyrecovered&#34;:&#34;30640&#34;,&#34;date&#34;:&#34;13 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-13&#34;,&#34;totalconfirmed&#34;:&#34;9884640&#34;,&#34;totaldeceased&#34;:&#34;142802&#34;,&#34;totalrecovered&#34;:&#34;9387352&#34;},{&#34;dailyconfirmed&#34;:&#34;21941&#34;,&#34;dailydeceased&#34;:&#34;354&#34;,&#34;dailyrecovered&#34;:&#34;34421&#34;,&#34;date&#34;:&#34;14 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-14&#34;,&#34;totalconfirmed&#34;:&#34;9906581&#34;,&#34;totaldeceased&#34;:&#34;143156&#34;,&#34;totalrecovered&#34;:&#34;9421773&#34;},{&#34;dailyconfirmed&#34;:&#34;26251&#34;,&#34;dailydeceased&#34;:&#34;384&#34;,&#34;dailyrecovered&#34;:&#34;33853&#34;,&#34;date&#34;:&#34;15 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-15&#34;,&#34;totalconfirmed&#34;:&#34;9932832&#34;,&#34;totaldeceased&#34;:&#34;143540&#34;,&#34;totalrecovered&#34;:&#34;9455626&#34;},{&#34;dailyconfirmed&#34;:&#34;18172&#34;,&#34;dailydeceased&#34;:&#34;356&#34;,&#34;dailyrecovered&#34;:&#34;33360&#34;,&#34;date&#34;:&#34;16 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-16&#34;,&#34;totalconfirmed&#34;:&#34;9951004&#34;,&#34;totaldeceased&#34;:&#34;143896&#34;,&#34;totalrecovered&#34;:&#34;9488986&#34;},{&#34;dailyconfirmed&#34;:&#34;26754&#34;,&#34;dailydeceased&#34;:&#34;342&#34;,&#34;dailyrecovered&#34;:&#34;30891&#34;,&#34;date&#34;:&#34;17 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-17&#34;,&#34;totalconfirmed&#34;:&#34;9977758&#34;,&#34;totaldeceased&#34;:&#34;144238&#34;,&#34;totalrecovered&#34;:&#34;9519877&#34;},{&#34;dailyconfirmed&#34;:&#34;26991&#34;,&#34;dailydeceased&#34;:&#34;342&#34;,&#34;dailyrecovered&#34;:&#34;29879&#34;,&#34;date&#34;:&#34;18 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-18&#34;,&#34;totalconfirmed&#34;:&#34;10004749&#34;,&#34;totaldeceased&#34;:&#34;144580&#34;,&#34;totalrecovered&#34;:&#34;9549756&#34;},{&#34;dailyconfirmed&#34;:&#34;26834&#34;,&#34;dailydeceased&#34;:&#34;342&#34;,&#34;dailyrecovered&#34;:&#34;29758&#34;,&#34;date&#34;:&#34;19 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-19&#34;,&#34;totalconfirmed&#34;:&#34;10031583&#34;,&#34;totaldeceased&#34;:&#34;144922&#34;,&#34;totalrecovered&#34;:&#34;9579514&#34;},{&#34;dailyconfirmed&#34;:&#34;24622&#34;,&#34;dailydeceased&#34;:&#34;332&#34;,&#34;dailyrecovered&#34;:&#34;25734&#34;,&#34;date&#34;:&#34;20 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-20&#34;,&#34;totalconfirmed&#34;:&#34;10056205&#34;,&#34;totaldeceased&#34;:&#34;145254&#34;,&#34;totalrecovered&#34;:&#34;9605248&#34;},{&#34;dailyconfirmed&#34;:&#34;19147&#34;,&#34;dailydeceased&#34;:&#34;302&#34;,&#34;dailyrecovered&#34;:&#34;30250&#34;,&#34;date&#34;:&#34;21 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-21&#34;,&#34;totalconfirmed&#34;:&#34;10075352&#34;,&#34;totaldeceased&#34;:&#34;145556&#34;,&#34;totalrecovered&#34;:&#34;9635498&#34;},{&#34;dailyconfirmed&#34;:&#34;23880&#34;,&#34;dailydeceased&#34;:&#34;329&#34;,&#34;dailyrecovered&#34;:&#34;27032&#34;,&#34;date&#34;:&#34;22 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-22&#34;,&#34;totalconfirmed&#34;:&#34;10099232&#34;,&#34;totaldeceased&#34;:&#34;145885&#34;,&#34;totalrecovered&#34;:&#34;9662530&#34;},{&#34;dailyconfirmed&#34;:&#34;24716&#34;,&#34;dailydeceased&#34;:&#34;315&#34;,&#34;dailyrecovered&#34;:&#34;29946&#34;,&#34;date&#34;:&#34;23 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-23&#34;,&#34;totalconfirmed&#34;:&#34;10123948&#34;,&#34;totaldeceased&#34;:&#34;146200&#34;,&#34;totalrecovered&#34;:&#34;9692476&#34;},{&#34;dailyconfirmed&#34;:&#34;23444&#34;,&#34;dailydeceased&#34;:&#34;337&#34;,&#34;dailyrecovered&#34;:&#34;24555&#34;,&#34;date&#34;:&#34;24 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-24&#34;,&#34;totalconfirmed&#34;:&#34;10147392&#34;,&#34;totaldeceased&#34;:&#34;146537&#34;,&#34;totalrecovered&#34;:&#34;9717031&#34;},{&#34;dailyconfirmed&#34;:&#34;22349&#34;,&#34;dailydeceased&#34;:&#34;251&#34;,&#34;dailyrecovered&#34;:&#34;22184&#34;,&#34;date&#34;:&#34;25 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-25&#34;,&#34;totalconfirmed&#34;:&#34;10169741&#34;,&#34;totaldeceased&#34;:&#34;146788&#34;,&#34;totalrecovered&#34;:&#34;9739215&#34;},{&#34;dailyconfirmed&#34;:&#34;18575&#34;,&#34;dailydeceased&#34;:&#34;280&#34;,&#34;dailyrecovered&#34;:&#34;21466&#34;,&#34;date&#34;:&#34;26 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-26&#34;,&#34;totalconfirmed&#34;:&#34;10188316&#34;,&#34;totaldeceased&#34;:&#34;147068&#34;,&#34;totalrecovered&#34;:&#34;9760681&#34;},{&#34;dailyconfirmed&#34;:&#34;20333&#34;,&#34;dailydeceased&#34;:&#34;281&#34;,&#34;dailyrecovered&#34;:&#34;21097&#34;,&#34;date&#34;:&#34;27 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-27&#34;,&#34;totalconfirmed&#34;:&#34;10208649&#34;,&#34;totaldeceased&#34;:&#34;147349&#34;,&#34;totalrecovered&#34;:&#34;9781778&#34;},{&#34;dailyconfirmed&#34;:&#34;16072&#34;,&#34;dailydeceased&#34;:&#34;250&#34;,&#34;dailyrecovered&#34;:&#34;24822&#34;,&#34;date&#34;:&#34;28 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-28&#34;,&#34;totalconfirmed&#34;:&#34;10224721&#34;,&#34;totaldeceased&#34;:&#34;147599&#34;,&#34;totalrecovered&#34;:&#34;9806600&#34;},{&#34;dailyconfirmed&#34;:&#34;20542&#34;,&#34;dailydeceased&#34;:&#34;285&#34;,&#34;dailyrecovered&#34;:&#34;26589&#34;,&#34;date&#34;:&#34;29 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-29&#34;,&#34;totalconfirmed&#34;:&#34;10245263&#34;,&#34;totaldeceased&#34;:&#34;147884&#34;,&#34;totalrecovered&#34;:&#34;9833189&#34;},{&#34;dailyconfirmed&#34;:&#34;21945&#34;,&#34;dailydeceased&#34;:&#34;299&#34;,&#34;dailyrecovered&#34;:&#34;26407&#34;,&#34;date&#34;:&#34;30 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-30&#34;,&#34;totalconfirmed&#34;:&#34;10267208&#34;,&#34;totaldeceased&#34;:&#34;148183&#34;,&#34;totalrecovered&#34;:&#34;9859596&#34;},{&#34;dailyconfirmed&#34;:&#34;19026&#34;,&#34;dailydeceased&#34;:&#34;244&#34;,&#34;dailyrecovered&#34;:&#34;21969&#34;,&#34;date&#34;:&#34;31 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-31&#34;,&#34;totalconfirmed&#34;:&#34;10286234&#34;,&#34;totaldeceased&#34;:&#34;148427&#34;,&#34;totalrecovered&#34;:&#34;9881565&#34;},{&#34;dailyconfirmed&#34;:&#34;20159&#34;,&#34;dailydeceased&#34;:&#34;237&#34;,&#34;dailyrecovered&#34;:&#34;23838&#34;,&#34;date&#34;:&#34;1 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-01&#34;,&#34;totalconfirmed&#34;:&#34;10306393&#34;,&#34;totaldeceased&#34;:&#34;148664&#34;,&#34;totalrecovered&#34;:&#34;9905403&#34;},{&#34;dailyconfirmed&#34;:&#34;18144&#34;,&#34;dailydeceased&#34;:&#34;216&#34;,&#34;dailyrecovered&#34;:&#34;20903&#34;,&#34;date&#34;:&#34;2 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-02&#34;,&#34;totalconfirmed&#34;:&#34;10324537&#34;,&#34;totaldeceased&#34;:&#34;148880&#34;,&#34;totalrecovered&#34;:&#34;9926306&#34;},{&#34;dailyconfirmed&#34;:&#34;16678&#34;,&#34;dailydeceased&#34;:&#34;215&#34;,&#34;dailyrecovered&#34;:&#34;19658&#34;,&#34;date&#34;:&#34;3 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-03&#34;,&#34;totalconfirmed&#34;:&#34;10341215&#34;,&#34;totaldeceased&#34;:&#34;149095&#34;,&#34;totalrecovered&#34;:&#34;9945964&#34;},{&#34;dailyconfirmed&#34;:&#34;16278&#34;,&#34;dailydeceased&#34;:&#34;200&#34;,&#34;dailyrecovered&#34;:&#34;29209&#34;,&#34;date&#34;:&#34;4 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-04&#34;,&#34;totalconfirmed&#34;:&#34;10357493&#34;,&#34;totaldeceased&#34;:&#34;149295&#34;,&#34;totalrecovered&#34;:&#34;9975173&#34;},{&#34;dailyconfirmed&#34;:&#34;17909&#34;,&#34;dailydeceased&#34;:&#34;265&#34;,&#34;dailyrecovered&#34;:&#34;21161&#34;,&#34;date&#34;:&#34;5 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-05&#34;,&#34;totalconfirmed&#34;:&#34;10375402&#34;,&#34;totaldeceased&#34;:&#34;149560&#34;,&#34;totalrecovered&#34;:&#34;9996334&#34;},{&#34;dailyconfirmed&#34;:&#34;20472&#34;,&#34;dailydeceased&#34;:&#34;222&#34;,&#34;dailyrecovered&#34;:&#34;19689&#34;,&#34;date&#34;:&#34;6 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-06&#34;,&#34;totalconfirmed&#34;:&#34;10395874&#34;,&#34;totaldeceased&#34;:&#34;149782&#34;,&#34;totalrecovered&#34;:&#34;10016023&#34;},{&#34;dailyconfirmed&#34;:&#34;18123&#34;,&#34;dailydeceased&#34;:&#34;233&#34;,&#34;dailyrecovered&#34;:&#34;20503&#34;,&#34;date&#34;:&#34;7 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-07&#34;,&#34;totalconfirmed&#34;:&#34;10413997&#34;,&#34;totaldeceased&#34;:&#34;150015&#34;,&#34;totalrecovered&#34;:&#34;10036526&#34;},{&#34;dailyconfirmed&#34;:&#34;18453&#34;,&#34;dailydeceased&#34;:&#34;229&#34;,&#34;dailyrecovered&#34;:&#34;19242&#34;,&#34;date&#34;:&#34;8 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-08&#34;,&#34;totalconfirmed&#34;:&#34;10432450&#34;,&#34;totaldeceased&#34;:&#34;150244&#34;,&#34;totalrecovered&#34;:&#34;10055768&#34;},{&#34;dailyconfirmed&#34;:&#34;18820&#34;,&#34;dailydeceased&#34;:&#34;213&#34;,&#34;dailyrecovered&#34;:&#34;19460&#34;,&#34;date&#34;:&#34;9 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-09&#34;,&#34;totalconfirmed&#34;:&#34;10451270&#34;,&#34;totaldeceased&#34;:&#34;150457&#34;,&#34;totalrecovered&#34;:&#34;10075228&#34;},{&#34;dailyconfirmed&#34;:&#34;16086&#34;,&#34;dailydeceased&#34;:&#34;150&#34;,&#34;dailyrecovered&#34;:&#34;16737&#34;,&#34;date&#34;:&#34;10 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-10&#34;,&#34;totalconfirmed&#34;:&#34;10467356&#34;,&#34;totaldeceased&#34;:&#34;150607&#34;,&#34;totalrecovered&#34;:&#34;10091965&#34;},{&#34;dailyconfirmed&#34;:&#34;12481&#34;,&#34;dailydeceased&#34;:&#34;166&#34;,&#34;dailyrecovered&#34;:&#34;18578&#34;,&#34;date&#34;:&#34;11 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-11&#34;,&#34;totalconfirmed&#34;:&#34;10479837&#34;,&#34;totaldeceased&#34;:&#34;150773&#34;,&#34;totalrecovered&#34;:&#34;10110543&#34;},{&#34;dailyconfirmed&#34;:&#34;15903&#34;,&#34;dailydeceased&#34;:&#34;200&#34;,&#34;dailyrecovered&#34;:&#34;17762&#34;,&#34;date&#34;:&#34;12 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-12&#34;,&#34;totalconfirmed&#34;:&#34;10495740&#34;,&#34;totaldeceased&#34;:&#34;150973&#34;,&#34;totalrecovered&#34;:&#34;10128305&#34;},{&#34;dailyconfirmed&#34;:&#34;17015&#34;,&#34;dailydeceased&#34;:&#34;201&#34;,&#34;dailyrecovered&#34;:&#34;17797&#34;,&#34;date&#34;:&#34;13 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-13&#34;,&#34;totalconfirmed&#34;:&#34;10512755&#34;,&#34;totaldeceased&#34;:&#34;151174&#34;,&#34;totalrecovered&#34;:&#34;10146102&#34;},{&#34;dailyconfirmed&#34;:&#34;15677&#34;,&#34;dailydeceased&#34;:&#34;189&#34;,&#34;dailyrecovered&#34;:&#34;15943&#34;,&#34;date&#34;:&#34;14 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-14&#34;,&#34;totalconfirmed&#34;:&#34;10528432&#34;,&#34;totaldeceased&#34;:&#34;151363&#34;,&#34;totalrecovered&#34;:&#34;10162045&#34;},{&#34;dailyconfirmed&#34;:&#34;15155&#34;,&#34;dailydeceased&#34;:&#34;176&#34;,&#34;dailyrecovered&#34;:&#34;16809&#34;,&#34;date&#34;:&#34;15 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-15&#34;,&#34;totalconfirmed&#34;:&#34;10543587&#34;,&#34;totaldeceased&#34;:&#34;151539&#34;,&#34;totalrecovered&#34;:&#34;10178854&#34;},{&#34;dailyconfirmed&#34;:&#34;15050&#34;,&#34;dailydeceased&#34;:&#34;181&#34;,&#34;dailyrecovered&#34;:&#34;17202&#34;,&#34;date&#34;:&#34;16 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-16&#34;,&#34;totalconfirmed&#34;:&#34;10558637&#34;,&#34;totaldeceased&#34;:&#34;151720&#34;,&#34;totalrecovered&#34;:&#34;10196056&#34;},{&#34;dailyconfirmed&#34;:&#34;13962&#34;,&#34;dailydeceased&#34;:&#34;145&#34;,&#34;dailyrecovered&#34;:&#34;14513&#34;,&#34;date&#34;:&#34;17 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-17&#34;,&#34;totalconfirmed&#34;:&#34;10572599&#34;,&#34;totaldeceased&#34;:&#34;151865&#34;,&#34;totalrecovered&#34;:&#34;10210569&#34;},{&#34;dailyconfirmed&#34;:&#34;9987&#34;,&#34;dailydeceased&#34;:&#34;137&#34;,&#34;dailyrecovered&#34;:&#34;17127&#34;,&#34;date&#34;:&#34;18 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-18&#34;,&#34;totalconfirmed&#34;:&#34;10582586&#34;,&#34;totaldeceased&#34;:&#34;152002&#34;,&#34;totalrecovered&#34;:&#34;10227696&#34;},{&#34;dailyconfirmed&#34;:&#34;13787&#34;,&#34;dailydeceased&#34;:&#34;162&#34;,&#34;dailyrecovered&#34;:&#34;17229&#34;,&#34;date&#34;:&#34;19 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-19&#34;,&#34;totalconfirmed&#34;:&#34;10596373&#34;,&#34;totaldeceased&#34;:&#34;152164&#34;,&#34;totalrecovered&#34;:&#34;10244925&#34;},{&#34;dailyconfirmed&#34;:&#34;15279&#34;,&#34;dailydeceased&#34;:&#34;152&#34;,&#34;dailyrecovered&#34;:&#34;20071&#34;,&#34;date&#34;:&#34;20 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-20&#34;,&#34;totalconfirmed&#34;:&#34;10611652&#34;,&#34;totaldeceased&#34;:&#34;152316&#34;,&#34;totalrecovered&#34;:&#34;10264996&#34;},{&#34;dailyconfirmed&#34;:&#34;14495&#34;,&#34;dailydeceased&#34;:&#34;161&#34;,&#34;dailyrecovered&#34;:&#34;17734&#34;,&#34;date&#34;:&#34;21 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-21&#34;,&#34;totalconfirmed&#34;:&#34;10626147&#34;,&#34;totaldeceased&#34;:&#34;152477&#34;,&#34;totalrecovered&#34;:&#34;10282730&#34;},{&#34;dailyconfirmed&#34;:&#34;14323&#34;,&#34;dailydeceased&#34;:&#34;153&#34;,&#34;dailyrecovered&#34;:&#34;17166&#34;,&#34;date&#34;:&#34;22 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-22&#34;,&#34;totalconfirmed&#34;:&#34;10640470&#34;,&#34;totaldeceased&#34;:&#34;152630&#34;,&#34;totalrecovered&#34;:&#34;10299896&#34;},{&#34;dailyconfirmed&#34;:&#34;14896&#34;,&#34;dailydeceased&#34;:&#34;156&#34;,&#34;dailyrecovered&#34;:&#34;16033&#34;,&#34;date&#34;:&#34;23 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-23&#34;,&#34;totalconfirmed&#34;:&#34;10655366&#34;,&#34;totaldeceased&#34;:&#34;152786&#34;,&#34;totalrecovered&#34;:&#34;10315929&#34;},{&#34;dailyconfirmed&#34;:&#34;13232&#34;,&#34;dailydeceased&#34;:&#34;131&#34;,&#34;dailyrecovered&#34;:&#34;13148&#34;,&#34;date&#34;:&#34;24 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-24&#34;,&#34;totalconfirmed&#34;:&#34;10668598&#34;,&#34;totaldeceased&#34;:&#34;152917&#34;,&#34;totalrecovered&#34;:&#34;10329077&#34;},{&#34;dailyconfirmed&#34;:&#34;9098&#34;,&#34;dailydeceased&#34;:&#34;116&#34;,&#34;dailyrecovered&#34;:&#34;16092&#34;,&#34;date&#34;:&#34;25 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-25&#34;,&#34;totalconfirmed&#34;:&#34;10677696&#34;,&#34;totaldeceased&#34;:&#34;153033&#34;,&#34;totalrecovered&#34;:&#34;10345169&#34;},{&#34;dailyconfirmed&#34;:&#34;12733&#34;,&#34;dailydeceased&#34;:&#34;138&#34;,&#34;dailyrecovered&#34;:&#34;13250&#34;,&#34;date&#34;:&#34;26 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-26&#34;,&#34;totalconfirmed&#34;:&#34;10690429&#34;,&#34;totaldeceased&#34;:&#34;153171&#34;,&#34;totalrecovered&#34;:&#34;10358419&#34;},{&#34;dailyconfirmed&#34;:&#34;11556&#34;,&#34;dailydeceased&#34;:&#34;123&#34;,&#34;dailyrecovered&#34;:&#34;14261&#34;,&#34;date&#34;:&#34;27 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-27&#34;,&#34;totalconfirmed&#34;:&#34;10701985&#34;,&#34;totaldeceased&#34;:&#34;153294&#34;,&#34;totalrecovered&#34;:&#34;10372680&#34;},{&#34;dailyconfirmed&#34;:&#34;18912&#34;,&#34;dailydeceased&#34;:&#34;162&#34;,&#34;dailyrecovered&#34;:&#34;20315&#34;,&#34;date&#34;:&#34;28 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-28&#34;,&#34;totalconfirmed&#34;:&#34;10720897&#34;,&#34;totaldeceased&#34;:&#34;153456&#34;,&#34;totalrecovered&#34;:&#34;10392995&#34;},{&#34;dailyconfirmed&#34;:&#34;13054&#34;,&#34;dailydeceased&#34;:&#34;137&#34;,&#34;dailyrecovered&#34;:&#34;14886&#34;,&#34;date&#34;:&#34;29 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-29&#34;,&#34;totalconfirmed&#34;:&#34;10733951&#34;,&#34;totaldeceased&#34;:&#34;153593&#34;,&#34;totalrecovered&#34;:&#34;10407881&#34;},{&#34;dailyconfirmed&#34;:&#34;13073&#34;,&#34;dailydeceased&#34;:&#34;128&#34;,&#34;dailyrecovered&#34;:&#34;14077&#34;,&#34;date&#34;:&#34;30 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-30&#34;,&#34;totalconfirmed&#34;:&#34;10747024&#34;,&#34;totaldeceased&#34;:&#34;153721&#34;,&#34;totalrecovered&#34;:&#34;10421958&#34;},{&#34;dailyconfirmed&#34;:&#34;11527&#34;,&#34;dailydeceased&#34;:&#34;116&#34;,&#34;dailyrecovered&#34;:&#34;11882&#34;,&#34;date&#34;:&#34;31 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-31&#34;,&#34;totalconfirmed&#34;:&#34;10758551&#34;,&#34;totaldeceased&#34;:&#34;153837&#34;,&#34;totalrecovered&#34;:&#34;10433840&#34;},{&#34;dailyconfirmed&#34;:&#34;8579&#34;,&#34;dailydeceased&#34;:&#34;94&#34;,&#34;dailyrecovered&#34;:&#34;13443&#34;,&#34;date&#34;:&#34;1 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-01&#34;,&#34;totalconfirmed&#34;:&#34;10767130&#34;,&#34;totaldeceased&#34;:&#34;153931&#34;,&#34;totalrecovered&#34;:&#34;10447283&#34;},{&#34;dailyconfirmed&#34;:&#34;11001&#34;,&#34;dailydeceased&#34;:&#34;113&#34;,&#34;dailyrecovered&#34;:&#34;14250&#34;,&#34;date&#34;:&#34;2 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-02&#34;,&#34;totalconfirmed&#34;:&#34;10778131&#34;,&#34;totaldeceased&#34;:&#34;154044&#34;,&#34;totalrecovered&#34;:&#34;10461533&#34;},{&#34;dailyconfirmed&#34;:&#34;12925&#34;,&#34;dailydeceased&#34;:&#34;107&#34;,&#34;dailyrecovered&#34;:&#34;17813&#34;,&#34;date&#34;:&#34;3 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-03&#34;,&#34;totalconfirmed&#34;:&#34;10791056&#34;,&#34;totaldeceased&#34;:&#34;154151&#34;,&#34;totalrecovered&#34;:&#34;10479346&#34;},{&#34;dailyconfirmed&#34;:&#34;12401&#34;,&#34;dailydeceased&#34;:&#34;120&#34;,&#34;dailyrecovered&#34;:&#34;15788&#34;,&#34;date&#34;:&#34;4 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-04&#34;,&#34;totalconfirmed&#34;:&#34;10803457&#34;,&#34;totaldeceased&#34;:&#34;154271&#34;,&#34;totalrecovered&#34;:&#34;10495134&#34;},{&#34;dailyconfirmed&#34;:&#34;11711&#34;,&#34;dailydeceased&#34;:&#34;95&#34;,&#34;dailyrecovered&#34;:&#34;14512&#34;,&#34;date&#34;:&#34;5 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-05&#34;,&#34;totalconfirmed&#34;:&#34;10815168&#34;,&#34;totaldeceased&#34;:&#34;154366&#34;,&#34;totalrecovered&#34;:&#34;10509646&#34;},{&#34;dailyconfirmed&#34;:&#34;12069&#34;,&#34;dailydeceased&#34;:&#34;75&#34;,&#34;dailyrecovered&#34;:&#34;11761&#34;,&#34;date&#34;:&#34;6 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-06&#34;,&#34;totalconfirmed&#34;:&#34;10827237&#34;,&#34;totaldeceased&#34;:&#34;154441&#34;,&#34;totalrecovered&#34;:&#34;10521407&#34;},{&#34;dailyconfirmed&#34;:&#34;11786&#34;,&#34;dailydeceased&#34;:&#34;86&#34;,&#34;dailyrecovered&#34;:&#34;11756&#34;,&#34;date&#34;:&#34;7 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-07&#34;,&#34;totalconfirmed&#34;:&#34;10839023&#34;,&#34;totaldeceased&#34;:&#34;154527&#34;,&#34;totalrecovered&#34;:&#34;10533163&#34;},{&#34;dailyconfirmed&#34;:&#34;8715&#34;,&#34;dailydeceased&#34;:&#34;78&#34;,&#34;dailyrecovered&#34;:&#34;13600&#34;,&#34;date&#34;:&#34;8 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-08&#34;,&#34;totalconfirmed&#34;:&#34;10847738&#34;,&#34;totaldeceased&#34;:&#34;154605&#34;,&#34;totalrecovered&#34;:&#34;10546763&#34;},{&#34;dailyconfirmed&#34;:&#34;10731&#34;,&#34;dailydeceased&#34;:&#34;94&#34;,&#34;dailyrecovered&#34;:&#34;12928&#34;,&#34;date&#34;:&#34;9 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-09&#34;,&#34;totalconfirmed&#34;:&#34;10858469&#34;,&#34;totaldeceased&#34;:&#34;154699&#34;,&#34;totalrecovered&#34;:&#34;10559691&#34;},{&#34;dailyconfirmed&#34;:&#34;12539&#34;,&#34;dailydeceased&#34;:&#34;110&#34;,&#34;dailyrecovered&#34;:&#34;11796&#34;,&#34;date&#34;:&#34;10 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-10&#34;,&#34;totalconfirmed&#34;:&#34;10871008&#34;,&#34;totaldeceased&#34;:&#34;154809&#34;,&#34;totalrecovered&#34;:&#34;10571487&#34;},{&#34;dailyconfirmed&#34;:&#34;9353&#34;,&#34;dailydeceased&#34;:&#34;85&#34;,&#34;dailyrecovered&#34;:&#34;15722&#34;,&#34;date&#34;:&#34;11 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-11&#34;,&#34;totalconfirmed&#34;:&#34;10880361&#34;,&#34;totaldeceased&#34;:&#34;154894&#34;,&#34;totalrecovered&#34;:&#34;10587209&#34;},{&#34;dailyconfirmed&#34;:&#34;12137&#34;,&#34;dailydeceased&#34;:&#34;104&#34;,&#34;dailyrecovered&#34;:&#34;11358&#34;,&#34;date&#34;:&#34;12 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-12&#34;,&#34;totalconfirmed&#34;:&#34;10892498&#34;,&#34;totaldeceased&#34;:&#34;154998&#34;,&#34;totalrecovered&#34;:&#34;10598567&#34;},{&#34;dailyconfirmed&#34;:&#34;12198&#34;,&#34;dailydeceased&#34;:&#34;89&#34;,&#34;dailyrecovered&#34;:&#34;11107&#34;,&#34;date&#34;:&#34;13 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-13&#34;,&#34;totalconfirmed&#34;:&#34;10904696&#34;,&#34;totaldeceased&#34;:&#34;155087&#34;,&#34;totalrecovered&#34;:&#34;10609674&#34;},{&#34;dailyconfirmed&#34;:&#34;11706&#34;,&#34;dailydeceased&#34;:&#34;91&#34;,&#34;dailyrecovered&#34;:&#34;9500&#34;,&#34;date&#34;:&#34;14 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-14&#34;,&#34;totalconfirmed&#34;:&#34;10916402&#34;,&#34;totaldeceased&#34;:&#34;155178&#34;,&#34;totalrecovered&#34;:&#34;10619174&#34;},{&#34;dailyconfirmed&#34;:&#34;9086&#34;,&#34;dailydeceased&#34;:&#34;82&#34;,&#34;dailyrecovered&#34;:&#34;11793&#34;,&#34;date&#34;:&#34;15 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-15&#34;,&#34;totalconfirmed&#34;:&#34;10925488&#34;,&#34;totaldeceased&#34;:&#34;155260&#34;,&#34;totalrecovered&#34;:&#34;10630967&#34;},{&#34;dailyconfirmed&#34;:&#34;11592&#34;,&#34;dailydeceased&#34;:&#34;99&#34;,&#34;dailyrecovered&#34;:&#34;11836&#34;,&#34;date&#34;:&#34;16 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-16&#34;,&#34;totalconfirmed&#34;:&#34;10937080&#34;,&#34;totaldeceased&#34;:&#34;155359&#34;,&#34;totalrecovered&#34;:&#34;10642803&#34;},{&#34;dailyconfirmed&#34;:&#34;12862&#34;,&#34;dailydeceased&#34;:&#34;100&#34;,&#34;dailyrecovered&#34;:&#34;12028&#34;,&#34;date&#34;:&#34;17 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-17&#34;,&#34;totalconfirmed&#34;:&#34;10949942&#34;,&#34;totaldeceased&#34;:&#34;155459&#34;,&#34;totalrecovered&#34;:&#34;10654831&#34;},{&#34;dailyconfirmed&#34;:&#34;13237&#34;,&#34;dailydeceased&#34;:&#34;100&#34;,&#34;dailyrecovered&#34;:&#34;10914&#34;,&#34;date&#34;:&#34;18 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-18&#34;,&#34;totalconfirmed&#34;:&#34;10963179&#34;,&#34;totaldeceased&#34;:&#34;155559&#34;,&#34;totalrecovered&#34;:&#34;10665745&#34;},{&#34;dailyconfirmed&#34;:&#34;13916&#34;,&#34;dailydeceased&#34;:&#34;100&#34;,&#34;dailyrecovered&#34;:&#34;10214&#34;,&#34;date&#34;:&#34;19 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-19&#34;,&#34;totalconfirmed&#34;:&#34;10977095&#34;,&#34;totaldeceased&#34;:&#34;155659&#34;,&#34;totalrecovered&#34;:&#34;10675959&#34;},{&#34;dailyconfirmed&#34;:&#34;13919&#34;,&#34;dailydeceased&#34;:&#34;89&#34;,&#34;dailyrecovered&#34;:&#34;11413&#34;,&#34;date&#34;:&#34;20 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-20&#34;,&#34;totalconfirmed&#34;:&#34;10991014&#34;,&#34;totaldeceased&#34;:&#34;155748&#34;,&#34;totalrecovered&#34;:&#34;10687372&#34;},{&#34;dailyconfirmed&#34;:&#34;14278&#34;,&#34;dailydeceased&#34;:&#34;83&#34;,&#34;dailyrecovered&#34;:&#34;9715&#34;,&#34;date&#34;:&#34;21 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-21&#34;,&#34;totalconfirmed&#34;:&#34;11005292&#34;,&#34;totaldeceased&#34;:&#34;155831&#34;,&#34;totalrecovered&#34;:&#34;10697087&#34;},{&#34;dailyconfirmed&#34;:&#34;10494&#34;,&#34;dailydeceased&#34;:&#34;76&#34;,&#34;dailyrecovered&#34;:&#34;13233&#34;,&#34;date&#34;:&#34;22 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-22&#34;,&#34;totalconfirmed&#34;:&#34;11015786&#34;,&#34;totaldeceased&#34;:&#34;155907&#34;,&#34;totalrecovered&#34;:&#34;10710320&#34;},{&#34;dailyconfirmed&#34;:&#34;13682&#34;,&#34;dailydeceased&#34;:&#34;103&#34;,&#34;dailyrecovered&#34;:&#34;13969&#34;,&#34;date&#34;:&#34;23 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-23&#34;,&#34;totalconfirmed&#34;:&#34;11029468&#34;,&#34;totaldeceased&#34;:&#34;156010&#34;,&#34;totalrecovered&#34;:&#34;10724289&#34;},{&#34;dailyconfirmed&#34;:&#34;16930&#34;,&#34;dailydeceased&#34;:&#34;141&#34;,&#34;dailyrecovered&#34;:&#34;12100&#34;,&#34;date&#34;:&#34;24 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-24&#34;,&#34;totalconfirmed&#34;:&#34;11046398&#34;,&#34;totaldeceased&#34;:&#34;156151&#34;,&#34;totalrecovered&#34;:&#34;10736389&#34;},{&#34;dailyconfirmed&#34;:&#34;16599&#34;,&#34;dailydeceased&#34;:&#34;119&#34;,&#34;dailyrecovered&#34;:&#34;12222&#34;,&#34;date&#34;:&#34;25 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-25&#34;,&#34;totalconfirmed&#34;:&#34;11062997&#34;,&#34;totaldeceased&#34;:&#34;156270&#34;,&#34;totalrecovered&#34;:&#34;10748611&#34;},{&#34;dailyconfirmed&#34;:&#34;16562&#34;,&#34;dailydeceased&#34;:&#34;114&#34;,&#34;dailyrecovered&#34;:&#34;12790&#34;,&#34;date&#34;:&#34;26 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-26&#34;,&#34;totalconfirmed&#34;:&#34;11079559&#34;,&#34;totaldeceased&#34;:&#34;156384&#34;,&#34;totalrecovered&#34;:&#34;10761401&#34;},{&#34;dailyconfirmed&#34;:&#34;16805&#34;,&#34;dailydeceased&#34;:&#34;111&#34;,&#34;dailyrecovered&#34;:&#34;11709&#34;,&#34;date&#34;:&#34;27 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-27&#34;,&#34;totalconfirmed&#34;:&#34;11096364&#34;,&#34;totaldeceased&#34;:&#34;156495&#34;,&#34;totalrecovered&#34;:&#34;10773110&#34;},{&#34;dailyconfirmed&#34;:&#34;15614&#34;,&#34;dailydeceased&#34;:&#34;108&#34;,&#34;dailyrecovered&#34;:&#34;11291&#34;,&#34;date&#34;:&#34;28 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-28&#34;,&#34;totalconfirmed&#34;:&#34;11111978&#34;,&#34;totaldeceased&#34;:&#34;156603&#34;,&#34;totalrecovered&#34;:&#34;10784401&#34;},{&#34;dailyconfirmed&#34;:&#34;12270&#34;,&#34;dailydeceased&#34;:&#34;92&#34;,&#34;dailyrecovered&#34;:&#34;12472&#34;,&#34;date&#34;:&#34;1 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-01&#34;,&#34;totalconfirmed&#34;:&#34;11124248&#34;,&#34;totaldeceased&#34;:&#34;156695&#34;,&#34;totalrecovered&#34;:&#34;10796873&#34;},{&#34;dailyconfirmed&#34;:&#34;14998&#34;,&#34;dailydeceased&#34;:&#34;98&#34;,&#34;dailyrecovered&#34;:&#34;13113&#34;,&#34;date&#34;:&#34;2 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-02&#34;,&#34;totalconfirmed&#34;:&#34;11139246&#34;,&#34;totaldeceased&#34;:&#34;156793&#34;,&#34;totalrecovered&#34;:&#34;10809986&#34;},{&#34;dailyconfirmed&#34;:&#34;17425&#34;,&#34;dailydeceased&#34;:&#34;87&#34;,&#34;dailyrecovered&#34;:&#34;14071&#34;,&#34;date&#34;:&#34;3 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-03&#34;,&#34;totalconfirmed&#34;:&#34;11156671&#34;,&#34;totaldeceased&#34;:&#34;156880&#34;,&#34;totalrecovered&#34;:&#34;10824057&#34;},{&#34;dailyconfirmed&#34;:&#34;16824&#34;,&#34;dailydeceased&#34;:&#34;113&#34;,&#34;dailyrecovered&#34;:&#34;13788&#34;,&#34;date&#34;:&#34;4 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-04&#34;,&#34;totalconfirmed&#34;:&#34;11173495&#34;,&#34;totaldeceased&#34;:&#34;156993&#34;,&#34;totalrecovered&#34;:&#34;10837845&#34;},{&#34;dailyconfirmed&#34;:&#34;18324&#34;,&#34;dailydeceased&#34;:&#34;109&#34;,&#34;dailyrecovered&#34;:&#34;14186&#34;,&#34;date&#34;:&#34;5 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-05&#34;,&#34;totalconfirmed&#34;:&#34;11191819&#34;,&#34;totaldeceased&#34;:&#34;157102&#34;,&#34;totalrecovered&#34;:&#34;10852031&#34;},{&#34;dailyconfirmed&#34;:&#34;18724&#34;,&#34;dailydeceased&#34;:&#34;100&#34;,&#34;dailyrecovered&#34;:&#34;14379&#34;,&#34;date&#34;:&#34;6 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-06&#34;,&#34;totalconfirmed&#34;:&#34;11210543&#34;,&#34;totaldeceased&#34;:&#34;157202&#34;,&#34;totalrecovered&#34;:&#34;10866410&#34;},{&#34;dailyconfirmed&#34;:&#34;18650&#34;,&#34;dailydeceased&#34;:&#34;97&#34;,&#34;dailyrecovered&#34;:&#34;14303&#34;,&#34;date&#34;:&#34;7 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-07&#34;,&#34;totalconfirmed&#34;:&#34;11229193&#34;,&#34;totaldeceased&#34;:&#34;157299&#34;,&#34;totalrecovered&#34;:&#34;10880713&#34;},{&#34;dailyconfirmed&#34;:&#34;15353&#34;,&#34;dailydeceased&#34;:&#34;76&#34;,&#34;dailyrecovered&#34;:&#34;16606&#34;,&#34;date&#34;:&#34;8 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-08&#34;,&#34;totalconfirmed&#34;:&#34;11244546&#34;,&#34;totaldeceased&#34;:&#34;157375&#34;,&#34;totalrecovered&#34;:&#34;10897319&#34;},{&#34;dailyconfirmed&#34;:&#34;17873&#34;,&#34;dailydeceased&#34;:&#34;133&#34;,&#34;dailyrecovered&#34;:&#34;20643&#34;,&#34;date&#34;:&#34;9 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-09&#34;,&#34;totalconfirmed&#34;:&#34;11262419&#34;,&#34;totaldeceased&#34;:&#34;157508&#34;,&#34;totalrecovered&#34;:&#34;10917962&#34;},{&#34;dailyconfirmed&#34;:&#34;22851&#34;,&#34;dailydeceased&#34;:&#34;125&#34;,&#34;dailyrecovered&#34;:&#34;18154&#34;,&#34;date&#34;:&#34;10 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-10&#34;,&#34;totalconfirmed&#34;:&#34;11285270&#34;,&#34;totaldeceased&#34;:&#34;157633&#34;,&#34;totalrecovered&#34;:&#34;10936116&#34;},{&#34;dailyconfirmed&#34;:&#34;23298&#34;,&#34;dailydeceased&#34;:&#34;119&#34;,&#34;dailyrecovered&#34;:&#34;15092&#34;,&#34;date&#34;:&#34;11 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-11&#34;,&#34;totalconfirmed&#34;:&#34;11308568&#34;,&#34;totaldeceased&#34;:&#34;157752&#34;,&#34;totalrecovered&#34;:&#34;10951208&#34;},{&#34;dailyconfirmed&#34;:&#34;24845&#34;,&#34;dailydeceased&#34;:&#34;140&#34;,&#34;dailyrecovered&#34;:&#34;19972&#34;,&#34;date&#34;:&#34;12 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-12&#34;,&#34;totalconfirmed&#34;:&#34;11333413&#34;,&#34;totaldeceased&#34;:&#34;157892&#34;,&#34;totalrecovered&#34;:&#34;10971180&#34;},{&#34;dailyconfirmed&#34;:&#34;25154&#34;,&#34;dailydeceased&#34;:&#34;159&#34;,&#34;dailyrecovered&#34;:&#34;16508&#34;,&#34;date&#34;:&#34;13 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-13&#34;,&#34;totalconfirmed&#34;:&#34;11358567&#34;,&#34;totaldeceased&#34;:&#34;158051&#34;,&#34;totalrecovered&#34;:&#34;10987688&#34;},{&#34;dailyconfirmed&#34;:&#34;26513&#34;,&#34;dailydeceased&#34;:&#34;120&#34;,&#34;dailyrecovered&#34;:&#34;17590&#34;,&#34;date&#34;:&#34;14 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-14&#34;,&#34;totalconfirmed&#34;:&#34;11385080&#34;,&#34;totaldeceased&#34;:&#34;158171&#34;,&#34;totalrecovered&#34;:&#34;11005278&#34;},{&#34;dailyconfirmed&#34;:&#34;24437&#34;,&#34;dailydeceased&#34;:&#34;130&#34;,&#34;dailyrecovered&#34;:&#34;20186&#34;,&#34;date&#34;:&#34;15 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-15&#34;,&#34;totalconfirmed&#34;:&#34;11409517&#34;,&#34;totaldeceased&#34;:&#34;158301&#34;,&#34;totalrecovered&#34;:&#34;11025464&#34;},{&#34;dailyconfirmed&#34;:&#34;28869&#34;,&#34;dailydeceased&#34;:&#34;187&#34;,&#34;dailyrecovered&#34;:&#34;17746&#34;,&#34;date&#34;:&#34;16 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-16&#34;,&#34;totalconfirmed&#34;:&#34;11438386&#34;,&#34;totaldeceased&#34;:&#34;158488&#34;,&#34;totalrecovered&#34;:&#34;11043210&#34;},{&#34;dailyconfirmed&#34;:&#34;35838&#34;,&#34;dailydeceased&#34;:&#34;171&#34;,&#34;dailyrecovered&#34;:&#34;17793&#34;,&#34;date&#34;:&#34;17 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-17&#34;,&#34;totalconfirmed&#34;:&#34;11474224&#34;,&#34;totaldeceased&#34;:&#34;158659&#34;,&#34;totalrecovered&#34;:&#34;11061003&#34;},{&#34;dailyconfirmed&#34;:&#34;39687&#34;,&#34;dailydeceased&#34;:&#34;156&#34;,&#34;dailyrecovered&#34;:&#34;20356&#34;,&#34;date&#34;:&#34;18 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-18&#34;,&#34;totalconfirmed&#34;:&#34;11513911&#34;,&#34;totaldeceased&#34;:&#34;158815&#34;,&#34;totalrecovered&#34;:&#34;11081359&#34;},{&#34;dailyconfirmed&#34;:&#34;40906&#34;,&#34;dailydeceased&#34;:&#34;188&#34;,&#34;dailyrecovered&#34;:&#34;23623&#34;,&#34;date&#34;:&#34;19 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-19&#34;,&#34;totalconfirmed&#34;:&#34;11554817&#34;,&#34;totaldeceased&#34;:&#34;159003&#34;,&#34;totalrecovered&#34;:&#34;11104982&#34;},{&#34;dailyconfirmed&#34;:&#34;43815&#34;,&#34;dailydeceased&#34;:&#34;196&#34;,&#34;dailyrecovered&#34;:&#34;22971&#34;,&#34;date&#34;:&#34;20 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-20&#34;,&#34;totalconfirmed&#34;:&#34;11598632&#34;,&#34;totaldeceased&#34;:&#34;159199&#34;,&#34;totalrecovered&#34;:&#34;11127953&#34;},{&#34;dailyconfirmed&#34;:&#34;47009&#34;,&#34;dailydeceased&#34;:&#34;213&#34;,&#34;dailyrecovered&#34;:&#34;21205&#34;,&#34;date&#34;:&#34;21 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-21&#34;,&#34;totalconfirmed&#34;:&#34;11645641&#34;,&#34;totaldeceased&#34;:&#34;159412&#34;,&#34;totalrecovered&#34;:&#34;11149158&#34;},{&#34;dailyconfirmed&#34;:&#34;40636&#34;,&#34;dailydeceased&#34;:&#34;197&#34;,&#34;dailyrecovered&#34;:&#34;29779&#34;,&#34;date&#34;:&#34;22 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-22&#34;,&#34;totalconfirmed&#34;:&#34;11686277&#34;,&#34;totaldeceased&#34;:&#34;159609&#34;,&#34;totalrecovered&#34;:&#34;11178937&#34;},{&#34;dailyconfirmed&#34;:&#34;47239&#34;,&#34;dailydeceased&#34;:&#34;277&#34;,&#34;dailyrecovered&#34;:&#34;23913&#34;,&#34;date&#34;:&#34;23 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-23&#34;,&#34;totalconfirmed&#34;:&#34;11733516&#34;,&#34;totaldeceased&#34;:&#34;159886&#34;,&#34;totalrecovered&#34;:&#34;11202850&#34;},{&#34;dailyconfirmed&#34;:&#34;53419&#34;,&#34;dailydeceased&#34;:&#34;249&#34;,&#34;dailyrecovered&#34;:&#34;26575&#34;,&#34;date&#34;:&#34;24 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-24&#34;,&#34;totalconfirmed&#34;:&#34;11786935&#34;,&#34;totaldeceased&#34;:&#34;160135&#34;,&#34;totalrecovered&#34;:&#34;11229425&#34;},{&#34;dailyconfirmed&#34;:&#34;59083&#34;,&#34;dailydeceased&#34;:&#34;257&#34;,&#34;dailyrecovered&#34;:&#34;32917&#34;,&#34;date&#34;:&#34;25 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-25&#34;,&#34;totalconfirmed&#34;:&#34;11846018&#34;,&#34;totaldeceased&#34;:&#34;160392&#34;,&#34;totalrecovered&#34;:&#34;11262342&#34;},{&#34;dailyconfirmed&#34;:&#34;62276&#34;,&#34;dailydeceased&#34;:&#34;292&#34;,&#34;dailyrecovered&#34;:&#34;30341&#34;,&#34;date&#34;:&#34;26 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-26&#34;,&#34;totalconfirmed&#34;:&#34;11908294&#34;,&#34;totaldeceased&#34;:&#34;160684&#34;,&#34;totalrecovered&#34;:&#34;11292683&#34;},{&#34;dailyconfirmed&#34;:&#34;62632&#34;,&#34;dailydeceased&#34;:&#34;311&#34;,&#34;dailyrecovered&#34;:&#34;28728&#34;,&#34;date&#34;:&#34;27 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-27&#34;,&#34;totalconfirmed&#34;:&#34;11970926&#34;,&#34;totaldeceased&#34;:&#34;160995&#34;,&#34;totalrecovered&#34;:&#34;11321411&#34;},{&#34;dailyconfirmed&#34;:&#34;68206&#34;,&#34;dailydeceased&#34;:&#34;295&#34;,&#34;dailyrecovered&#34;:&#34;32269&#34;,&#34;date&#34;:&#34;28 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-28&#34;,&#34;totalconfirmed&#34;:&#34;12039132&#34;,&#34;totaldeceased&#34;:&#34;161290&#34;,&#34;totalrecovered&#34;:&#34;11353680&#34;},{&#34;dailyconfirmed&#34;:&#34;56152&#34;,&#34;dailydeceased&#34;:&#34;266&#34;,&#34;dailyrecovered&#34;:&#34;36989&#34;,&#34;date&#34;:&#34;29 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-29&#34;,&#34;totalconfirmed&#34;:&#34;12095284&#34;,&#34;totaldeceased&#34;:&#34;161556&#34;,&#34;totalrecovered&#34;:&#34;11390669&#34;},{&#34;dailyconfirmed&#34;:&#34;53237&#34;,&#34;dailydeceased&#34;:&#34;355&#34;,&#34;dailyrecovered&#34;:&#34;41242&#34;,&#34;date&#34;:&#34;30 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-30&#34;,&#34;totalconfirmed&#34;:&#34;12148521&#34;,&#34;totaldeceased&#34;:&#34;161911&#34;,&#34;totalrecovered&#34;:&#34;11431911&#34;},{&#34;dailyconfirmed&#34;:&#34;72113&#34;,&#34;dailydeceased&#34;:&#34;458&#34;,&#34;dailyrecovered&#34;:&#34;40423&#34;,&#34;date&#34;:&#34;31 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-31&#34;,&#34;totalconfirmed&#34;:&#34;12220634&#34;,&#34;totaldeceased&#34;:&#34;162369&#34;,&#34;totalrecovered&#34;:&#34;11472334&#34;},{&#34;dailyconfirmed&#34;:&#34;81398&#34;,&#34;dailydeceased&#34;:&#34;468&#34;,&#34;dailyrecovered&#34;:&#34;50384&#34;,&#34;date&#34;:&#34;1 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-01&#34;,&#34;totalconfirmed&#34;:&#34;12302032&#34;,&#34;totaldeceased&#34;:&#34;162837&#34;,&#34;totalrecovered&#34;:&#34;11522718&#34;},{&#34;dailyconfirmed&#34;:&#34;89023&#34;,&#34;dailydeceased&#34;:&#34;713&#34;,&#34;dailyrecovered&#34;:&#34;44179&#34;,&#34;date&#34;:&#34;2 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-02&#34;,&#34;totalconfirmed&#34;:&#34;12391055&#34;,&#34;totaldeceased&#34;:&#34;163550&#34;,&#34;totalrecovered&#34;:&#34;11566897&#34;},{&#34;dailyconfirmed&#34;:&#34;92994&#34;,&#34;dailydeceased&#34;:&#34;514&#34;,&#34;dailyrecovered&#34;:&#34;60059&#34;,&#34;date&#34;:&#34;3 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-03&#34;,&#34;totalconfirmed&#34;:&#34;12484049&#34;,&#34;totaldeceased&#34;:&#34;164064&#34;,&#34;totalrecovered&#34;:&#34;11626956&#34;},{&#34;dailyconfirmed&#34;:&#34;103794&#34;,&#34;dailydeceased&#34;:&#34;477&#34;,&#34;dailyrecovered&#34;:&#34;52840&#34;,&#34;date&#34;:&#34;4 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-04&#34;,&#34;totalconfirmed&#34;:&#34;12587843&#34;,&#34;totaldeceased&#34;:&#34;164541&#34;,&#34;totalrecovered&#34;:&#34;11679796&#34;},{&#34;dailyconfirmed&#34;:&#34;96563&#34;,&#34;dailydeceased&#34;:&#34;446&#34;,&#34;dailyrecovered&#34;:&#34;50100&#34;,&#34;date&#34;:&#34;5 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-05&#34;,&#34;totalconfirmed&#34;:&#34;12684406&#34;,&#34;totaldeceased&#34;:&#34;164987&#34;,&#34;totalrecovered&#34;:&#34;11729896&#34;},{&#34;dailyconfirmed&#34;:&#34;115312&#34;,&#34;dailydeceased&#34;:&#34;630&#34;,&#34;dailyrecovered&#34;:&#34;59714&#34;,&#34;date&#34;:&#34;6 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-06&#34;,&#34;totalconfirmed&#34;:&#34;12799718&#34;,&#34;totaldeceased&#34;:&#34;165617&#34;,&#34;totalrecovered&#34;:&#34;11789610&#34;},{&#34;dailyconfirmed&#34;:&#34;126276&#34;,&#34;dailydeceased&#34;:&#34;684&#34;,&#34;dailyrecovered&#34;:&#34;59137&#34;,&#34;date&#34;:&#34;7 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-07&#34;,&#34;totalconfirmed&#34;:&#34;12925994&#34;,&#34;totaldeceased&#34;:&#34;166301&#34;,&#34;totalrecovered&#34;:&#34;11848747&#34;},{&#34;dailyconfirmed&#34;:&#34;131878&#34;,&#34;dailydeceased&#34;:&#34;802&#34;,&#34;dailyrecovered&#34;:&#34;61829&#34;,&#34;date&#34;:&#34;8 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-08&#34;,&#34;totalconfirmed&#34;:&#34;13057872&#34;,&#34;totaldeceased&#34;:&#34;167103&#34;,&#34;totalrecovered&#34;:&#34;11910576&#34;},{&#34;dailyconfirmed&#34;:&#34;144945&#34;,&#34;dailydeceased&#34;:&#34;773&#34;,&#34;dailyrecovered&#34;:&#34;77263&#34;,&#34;date&#34;:&#34;9 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-09&#34;,&#34;totalconfirmed&#34;:&#34;13202817&#34;,&#34;totaldeceased&#34;:&#34;167876&#34;,&#34;totalrecovered&#34;:&#34;11987839&#34;},{&#34;dailyconfirmed&#34;:&#34;152565&#34;,&#34;dailydeceased&#34;:&#34;838&#34;,&#34;dailyrecovered&#34;:&#34;90328&#34;,&#34;date&#34;:&#34;10 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-10&#34;,&#34;totalconfirmed&#34;:&#34;13355382&#34;,&#34;totaldeceased&#34;:&#34;168714&#34;,&#34;totalrecovered&#34;:&#34;12078167&#34;},{&#34;dailyconfirmed&#34;:&#34;169914&#34;,&#34;dailydeceased&#34;:&#34;904&#34;,&#34;dailyrecovered&#34;:&#34;75380&#34;,&#34;date&#34;:&#34;11 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-11&#34;,&#34;totalconfirmed&#34;:&#34;13525296&#34;,&#34;totaldeceased&#34;:&#34;169618&#34;,&#34;totalrecovered&#34;:&#34;12153547&#34;},{&#34;dailyconfirmed&#34;:&#34;160838&#34;,&#34;dailydeceased&#34;:&#34;880&#34;,&#34;dailyrecovered&#34;:&#34;96746&#34;,&#34;date&#34;:&#34;12 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-12&#34;,&#34;totalconfirmed&#34;:&#34;13686134&#34;,&#34;totaldeceased&#34;:&#34;170498&#34;,&#34;totalrecovered&#34;:&#34;12250293&#34;},{&#34;dailyconfirmed&#34;:&#34;185297&#34;,&#34;dailydeceased&#34;:&#34;1026&#34;,&#34;dailyrecovered&#34;:&#34;82271&#34;,&#34;date&#34;:&#34;13 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-13&#34;,&#34;totalconfirmed&#34;:&#34;13871431&#34;,&#34;totaldeceased&#34;:&#34;171524&#34;,&#34;totalrecovered&#34;:&#34;12332564&#34;},{&#34;dailyconfirmed&#34;:&#34;199584&#34;,&#34;dailydeceased&#34;:&#34;1038&#34;,&#34;dailyrecovered&#34;:&#34;93425&#34;,&#34;date&#34;:&#34;14 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-14&#34;,&#34;totalconfirmed&#34;:&#34;14071015&#34;,&#34;totaldeceased&#34;:&#34;172562&#34;,&#34;totalrecovered&#34;:&#34;12425989&#34;},{&#34;dailyconfirmed&#34;:&#34;216828&#34;,&#34;dailydeceased&#34;:&#34;1184&#34;,&#34;dailyrecovered&#34;:&#34;117897&#34;,&#34;date&#34;:&#34;15 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-15&#34;,&#34;totalconfirmed&#34;:&#34;14287843&#34;,&#34;totaldeceased&#34;:&#34;173746&#34;,&#34;totalrecovered&#34;:&#34;12543886&#34;},{&#34;dailyconfirmed&#34;:&#34;234002&#34;,&#34;dailydeceased&#34;:&#34;1338&#34;,&#34;dailyrecovered&#34;:&#34;122886&#34;,&#34;date&#34;:&#34;16 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-16&#34;,&#34;totalconfirmed&#34;:&#34;14521845&#34;,&#34;totaldeceased&#34;:&#34;175084&#34;,&#34;totalrecovered&#34;:&#34;12666772&#34;},{&#34;dailyconfirmed&#34;:&#34;260895&#34;,&#34;dailydeceased&#34;:&#34;1498&#34;,&#34;dailyrecovered&#34;:&#34;138209&#34;,&#34;date&#34;:&#34;17 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-17&#34;,&#34;totalconfirmed&#34;:&#34;14782740&#34;,&#34;totaldeceased&#34;:&#34;176582&#34;,&#34;totalrecovered&#34;:&#34;12804981&#34;},{&#34;dailyconfirmed&#34;:&#34;275063&#34;,&#34;dailydeceased&#34;:&#34;1620&#34;,&#34;dailyrecovered&#34;:&#34;143839&#34;,&#34;date&#34;:&#34;18 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-18&#34;,&#34;totalconfirmed&#34;:&#34;15057803&#34;,&#34;totaldeceased&#34;:&#34;178202&#34;,&#34;totalrecovered&#34;:&#34;12948820&#34;},{&#34;dailyconfirmed&#34;:&#34;257003&#34;,&#34;dailydeceased&#34;:&#34;1757&#34;,&#34;dailyrecovered&#34;:&#34;154357&#34;,&#34;date&#34;:&#34;19 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-19&#34;,&#34;totalconfirmed&#34;:&#34;15314806&#34;,&#34;totaldeceased&#34;:&#34;179959&#34;,&#34;totalrecovered&#34;:&#34;13103177&#34;},{&#34;dailyconfirmed&#34;:&#34;294365&#34;,&#34;dailydeceased&#34;:&#34;2021&#34;,&#34;dailyrecovered&#34;:&#34;166656&#34;,&#34;date&#34;:&#34;20 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-20&#34;,&#34;totalconfirmed&#34;:&#34;15609171&#34;,&#34;totaldeceased&#34;:&#34;181980&#34;,&#34;totalrecovered&#34;:&#34;13269833&#34;},{&#34;dailyconfirmed&#34;:&#34;315752&#34;,&#34;dailydeceased&#34;:&#34;2101&#34;,&#34;dailyrecovered&#34;:&#34;179434&#34;,&#34;date&#34;:&#34;21 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-21&#34;,&#34;totalconfirmed&#34;:&#34;15924923&#34;,&#34;totaldeceased&#34;:&#34;184081&#34;,&#34;totalrecovered&#34;:&#34;13449267&#34;},{&#34;dailyconfirmed&#34;:&#34;332531&#34;,&#34;dailydeceased&#34;:&#34;2257&#34;,&#34;dailyrecovered&#34;:&#34;192317&#34;,&#34;date&#34;:&#34;22 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-22&#34;,&#34;totalconfirmed&#34;:&#34;16257454&#34;,&#34;totaldeceased&#34;:&#34;186338&#34;,&#34;totalrecovered&#34;:&#34;13641584&#34;},{&#34;dailyconfirmed&#34;:&#34;345296&#34;,&#34;dailydeceased&#34;:&#34;2620&#34;,&#34;dailyrecovered&#34;:&#34;220545&#34;,&#34;date&#34;:&#34;23 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-23&#34;,&#34;totalconfirmed&#34;:&#34;16602750&#34;,&#34;totaldeceased&#34;:&#34;188958&#34;,&#34;totalrecovered&#34;:&#34;13862129&#34;},{&#34;dailyconfirmed&#34;:&#34;348996&#34;,&#34;dailydeceased&#34;:&#34;2761&#34;,&#34;dailyrecovered&#34;:&#34;215809&#34;,&#34;date&#34;:&#34;24 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-24&#34;,&#34;totalconfirmed&#34;:&#34;16951746&#34;,&#34;totaldeceased&#34;:&#34;191719&#34;,&#34;totalrecovered&#34;:&#34;14077938&#34;},{&#34;dailyconfirmed&#34;:&#34;354658&#34;,&#34;dailydeceased&#34;:&#34;2808&#34;,&#34;dailyrecovered&#34;:&#34;218626&#34;,&#34;date&#34;:&#34;25 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-25&#34;,&#34;totalconfirmed&#34;:&#34;17306404&#34;,&#34;totaldeceased&#34;:&#34;194527&#34;,&#34;totalrecovered&#34;:&#34;14296564&#34;},{&#34;dailyconfirmed&#34;:&#34;319471&#34;,&#34;dailydeceased&#34;:&#34;2762&#34;,&#34;dailyrecovered&#34;:&#34;249009&#34;,&#34;date&#34;:&#34;26 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-26&#34;,&#34;totalconfirmed&#34;:&#34;17625875&#34;,&#34;totaldeceased&#34;:&#34;197289&#34;,&#34;totalrecovered&#34;:&#34;14545573&#34;},{&#34;dailyconfirmed&#34;:&#34;362913&#34;,&#34;dailydeceased&#34;:&#34;3286&#34;,&#34;dailyrecovered&#34;:&#34;262349&#34;,&#34;date&#34;:&#34;27 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-27&#34;,&#34;totalconfirmed&#34;:&#34;17988788&#34;,&#34;totaldeceased&#34;:&#34;200575&#34;,&#34;totalrecovered&#34;:&#34;14807922&#34;},{&#34;dailyconfirmed&#34;:&#34;379404&#34;,&#34;dailydeceased&#34;:&#34;3646&#34;,&#34;dailyrecovered&#34;:&#34;274171&#34;,&#34;date&#34;:&#34;28 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-28&#34;,&#34;totalconfirmed&#34;:&#34;18368192&#34;,&#34;totaldeceased&#34;:&#34;204221&#34;,&#34;totalrecovered&#34;:&#34;15082093&#34;},{&#34;dailyconfirmed&#34;:&#34;386773&#34;,&#34;dailydeceased&#34;:&#34;3502&#34;,&#34;dailyrecovered&#34;:&#34;291727&#34;,&#34;date&#34;:&#34;29 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-29&#34;,&#34;totalconfirmed&#34;:&#34;18754965&#34;,&#34;totaldeceased&#34;:&#34;207723&#34;,&#34;totalrecovered&#34;:&#34;15373820&#34;},{&#34;dailyconfirmed&#34;:&#34;402014&#34;,&#34;dailydeceased&#34;:&#34;3525&#34;,&#34;dailyrecovered&#34;:&#34;299198&#34;,&#34;date&#34;:&#34;30 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-30&#34;,&#34;totalconfirmed&#34;:&#34;19156979&#34;,&#34;totaldeceased&#34;:&#34;211248&#34;,&#34;totalrecovered&#34;:&#34;15673018&#34;},{&#34;dailyconfirmed&#34;:&#34;392576&#34;,&#34;dailydeceased&#34;:&#34;3685&#34;,&#34;dailyrecovered&#34;:&#34;308688&#34;,&#34;date&#34;:&#34;1 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-01&#34;,&#34;totalconfirmed&#34;:&#34;19549555&#34;,&#34;totaldeceased&#34;:&#34;214933&#34;,&#34;totalrecovered&#34;:&#34;15981706&#34;},{&#34;dailyconfirmed&#34;:&#34;370090&#34;,&#34;dailydeceased&#34;:&#34;3423&#34;,&#34;dailyrecovered&#34;:&#34;300004&#34;,&#34;date&#34;:&#34;2 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-02&#34;,&#34;totalconfirmed&#34;:&#34;19919645&#34;,&#34;totaldeceased&#34;:&#34;218356&#34;,&#34;totalrecovered&#34;:&#34;16281710&#34;},{&#34;dailyconfirmed&#34;:&#34;355769&#34;,&#34;dailydeceased&#34;:&#34;3439&#34;,&#34;dailyrecovered&#34;:&#34;318910&#34;,&#34;date&#34;:&#34;3 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-03&#34;,&#34;totalconfirmed&#34;:&#34;20275414&#34;,&#34;totaldeceased&#34;:&#34;221795&#34;,&#34;totalrecovered&#34;:&#34;16600620&#34;},{&#34;dailyconfirmed&#34;:&#34;382847&#34;,&#34;dailydeceased&#34;:&#34;3786&#34;,&#34;dailyrecovered&#34;:&#34;337699&#34;,&#34;date&#34;:&#34;4 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-04&#34;,&#34;totalconfirmed&#34;:&#34;20658261&#34;,&#34;totaldeceased&#34;:&#34;225581&#34;,&#34;totalrecovered&#34;:&#34;16938319&#34;},{&#34;dailyconfirmed&#34;:&#34;412624&#34;,&#34;dailydeceased&#34;:&#34;3979&#34;,&#34;dailyrecovered&#34;:&#34;330718&#34;,&#34;date&#34;:&#34;5 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-05&#34;,&#34;totalconfirmed&#34;:&#34;21070885&#34;,&#34;totaldeceased&#34;:&#34;229560&#34;,&#34;totalrecovered&#34;:&#34;17269037&#34;},{&#34;dailyconfirmed&#34;:&#34;414280&#34;,&#34;dailydeceased&#34;:&#34;3923&#34;,&#34;dailyrecovered&#34;:&#34;328349&#34;,&#34;date&#34;:&#34;6 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-06&#34;,&#34;totalconfirmed&#34;:&#34;21485165&#34;,&#34;totaldeceased&#34;:&#34;233483&#34;,&#34;totalrecovered&#34;:&#34;17597386&#34;},{&#34;dailyconfirmed&#34;:&#34;406901&#34;,&#34;dailydeceased&#34;:&#34;4233&#34;,&#34;dailyrecovered&#34;:&#34;327675&#34;,&#34;date&#34;:&#34;7 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-07&#34;,&#34;totalconfirmed&#34;:&#34;21892066&#34;,&#34;totaldeceased&#34;:&#34;237716&#34;,&#34;totalrecovered&#34;:&#34;17925061&#34;},{&#34;dailyconfirmed&#34;:&#34;403808&#34;,&#34;dailydeceased&#34;:&#34;4092&#34;,&#34;dailyrecovered&#34;:&#34;386395&#34;,&#34;date&#34;:&#34;8 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-08&#34;,&#34;totalconfirmed&#34;:&#34;22295874&#34;,&#34;totaldeceased&#34;:&#34;241808&#34;,&#34;totalrecovered&#34;:&#34;18311456&#34;},{&#34;dailyconfirmed&#34;:&#34;366455&#34;,&#34;dailydeceased&#34;:&#34;3749&#34;,&#34;dailyrecovered&#34;:&#34;353777&#34;,&#34;date&#34;:&#34;9 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-09&#34;,&#34;totalconfirmed&#34;:&#34;22662329&#34;,&#34;totaldeceased&#34;:&#34;245557&#34;,&#34;totalrecovered&#34;:&#34;18665233&#34;},{&#34;dailyconfirmed&#34;:&#34;329491&#34;,&#34;dailydeceased&#34;:&#34;3879&#34;,&#34;dailyrecovered&#34;:&#34;355930&#34;,&#34;date&#34;:&#34;10 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-10&#34;,&#34;totalconfirmed&#34;:&#34;22991820&#34;,&#34;totaldeceased&#34;:&#34;249436&#34;,&#34;totalrecovered&#34;:&#34;19021163&#34;},{&#34;dailyconfirmed&#34;:&#34;348555&#34;,&#34;dailydeceased&#34;:&#34;4198&#34;,&#34;dailyrecovered&#34;:&#34;355398&#34;,&#34;date&#34;:&#34;11 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-11&#34;,&#34;totalconfirmed&#34;:&#34;23340375&#34;,&#34;totaldeceased&#34;:&#34;253634&#34;,&#34;totalrecovered&#34;:&#34;19376561&#34;},{&#34;dailyconfirmed&#34;:&#34;362632&#34;,&#34;dailydeceased&#34;:&#34;4128&#34;,&#34;dailyrecovered&#34;:&#34;352005&#34;,&#34;date&#34;:&#34;12 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-12&#34;,&#34;totalconfirmed&#34;:&#34;23703007&#34;,&#34;totaldeceased&#34;:&#34;257762&#34;,&#34;totalrecovered&#34;:&#34;19728566&#34;},{&#34;dailyconfirmed&#34;:&#34;343005&#34;,&#34;dailydeceased&#34;:&#34;4000&#34;,&#34;dailyrecovered&#34;:&#34;344676&#34;,&#34;date&#34;:&#34;13 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-13&#34;,&#34;totalconfirmed&#34;:&#34;24046012&#34;,&#34;totaldeceased&#34;:&#34;261762&#34;,&#34;totalrecovered&#34;:&#34;20073242&#34;},{&#34;dailyconfirmed&#34;:&#34;326256&#34;,&#34;dailydeceased&#34;:&#34;3889&#34;,&#34;dailyrecovered&#34;:&#34;353200&#34;,&#34;date&#34;:&#34;14 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-14&#34;,&#34;totalconfirmed&#34;:&#34;24372268&#34;,&#34;totaldeceased&#34;:&#34;265651&#34;,&#34;totalrecovered&#34;:&#34;20426442&#34;},{&#34;dailyconfirmed&#34;:&#34;310757&#34;,&#34;dailydeceased&#34;:&#34;4077&#34;,&#34;dailyrecovered&#34;:&#34;362547&#34;,&#34;date&#34;:&#34;15 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-15&#34;,&#34;totalconfirmed&#34;:&#34;24683025&#34;,&#34;totaldeceased&#34;:&#34;269728&#34;,&#34;totalrecovered&#34;:&#34;20788989&#34;},{&#34;dailyconfirmed&#34;:&#34;281837&#34;,&#34;dailydeceased&#34;:&#34;4098&#34;,&#34;dailyrecovered&#34;:&#34;378526&#34;,&#34;date&#34;:&#34;16 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-16&#34;,&#34;totalconfirmed&#34;:&#34;24964862&#34;,&#34;totaldeceased&#34;:&#34;273826&#34;,&#34;totalrecovered&#34;:&#34;21167515&#34;},{&#34;dailyconfirmed&#34;:&#34;263021&#34;,&#34;dailydeceased&#34;:&#34;4334&#34;,&#34;dailyrecovered&#34;:&#34;422391&#34;,&#34;date&#34;:&#34;17 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-17&#34;,&#34;totalconfirmed&#34;:&#34;25227883&#34;,&#34;totaldeceased&#34;:&#34;278160&#34;,&#34;totalrecovered&#34;:&#34;21589906&#34;},{&#34;dailyconfirmed&#34;:&#34;267246&#34;,&#34;dailydeceased&#34;:&#34;4529&#34;,&#34;dailyrecovered&#34;:&#34;389758&#34;,&#34;date&#34;:&#34;18 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-18&#34;,&#34;totalconfirmed&#34;:&#34;25495129&#34;,&#34;totaldeceased&#34;:&#34;282689&#34;,&#34;totalrecovered&#34;:&#34;21979664&#34;},{&#34;dailyconfirmed&#34;:&#34;276187&#34;,&#34;dailydeceased&#34;:&#34;3877&#34;,&#34;dailyrecovered&#34;:&#34;369005&#34;,&#34;date&#34;:&#34;19 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-19&#34;,&#34;totalconfirmed&#34;:&#34;25771316&#34;,&#34;totaldeceased&#34;:&#34;286566&#34;,&#34;totalrecovered&#34;:&#34;22348669&#34;},{&#34;dailyconfirmed&#34;:&#34;259242&#34;,&#34;dailydeceased&#34;:&#34;4209&#34;,&#34;dailyrecovered&#34;:&#34;357173&#34;,&#34;date&#34;:&#34;20 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-20&#34;,&#34;totalconfirmed&#34;:&#34;26030558&#34;,&#34;totaldeceased&#34;:&#34;290775&#34;,&#34;totalrecovered&#34;:&#34;22705842&#34;},{&#34;dailyconfirmed&#34;:&#34;257299&#34;,&#34;dailydeceased&#34;:&#34;4194&#34;,&#34;dailyrecovered&#34;:&#34;357625&#34;,&#34;date&#34;:&#34;21 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-21&#34;,&#34;totalconfirmed&#34;:&#34;26287857&#34;,&#34;totaldeceased&#34;:&#34;294969&#34;,&#34;totalrecovered&#34;:&#34;23063467&#34;},{&#34;dailyconfirmed&#34;:&#34;240897&#34;,&#34;dailydeceased&#34;:&#34;3739&#34;,&#34;dailyrecovered&#34;:&#34;355138&#34;,&#34;date&#34;:&#34;22 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-22&#34;,&#34;totalconfirmed&#34;:&#34;26528754&#34;,&#34;totaldeceased&#34;:&#34;298708&#34;,&#34;totalrecovered&#34;:&#34;23418605&#34;},{&#34;dailyconfirmed&#34;:&#34;222834&#34;,&#34;dailydeceased&#34;:&#34;4454&#34;,&#34;dailyrecovered&#34;:&#34;302253&#34;,&#34;date&#34;:&#34;23 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-23&#34;,&#34;totalconfirmed&#34;:&#34;26751588&#34;,&#34;totaldeceased&#34;:&#34;303162&#34;,&#34;totalrecovered&#34;:&#34;23720858&#34;},{&#34;dailyconfirmed&#34;:&#34;195857&#34;,&#34;dailydeceased&#34;:&#34;3509&#34;,&#34;dailyrecovered&#34;:&#34;326737&#34;,&#34;date&#34;:&#34;24 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-24&#34;,&#34;totalconfirmed&#34;:&#34;26947445&#34;,&#34;totaldeceased&#34;:&#34;306671&#34;,&#34;totalrecovered&#34;:&#34;24047595&#34;},{&#34;dailyconfirmed&#34;:&#34;208992&#34;,&#34;dailydeceased&#34;:&#34;4160&#34;,&#34;dailyrecovered&#34;:&#34;295264&#34;,&#34;date&#34;:&#34;25 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-25&#34;,&#34;totalconfirmed&#34;:&#34;27156437&#34;,&#34;totaldeceased&#34;:&#34;310831&#34;,&#34;totalrecovered&#34;:&#34;24342859&#34;},{&#34;dailyconfirmed&#34;:&#34;211510&#34;,&#34;dailydeceased&#34;:&#34;3843&#34;,&#34;dailyrecovered&#34;:&#34;283054&#34;,&#34;date&#34;:&#34;26 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-26&#34;,&#34;totalconfirmed&#34;:&#34;27367947&#34;,&#34;totaldeceased&#34;:&#34;314674&#34;,&#34;totalrecovered&#34;:&#34;24625913&#34;},{&#34;dailyconfirmed&#34;:&#34;186075&#34;,&#34;dailydeceased&#34;:&#34;3659&#34;,&#34;dailyrecovered&#34;:&#34;271002&#34;,&#34;date&#34;:&#34;27 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-27&#34;,&#34;totalconfirmed&#34;:&#34;27554022&#34;,&#34;totaldeceased&#34;:&#34;318333&#34;,&#34;totalrecovered&#34;:&#34;24896915&#34;},{&#34;dailyconfirmed&#34;:&#34;174083&#34;,&#34;dailydeceased&#34;:&#34;3611&#34;,&#34;dailyrecovered&#34;:&#34;285332&#34;,&#34;date&#34;:&#34;28 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-28&#34;,&#34;totalconfirmed&#34;:&#34;27728105&#34;,&#34;totaldeceased&#34;:&#34;321944&#34;,&#34;totalrecovered&#34;:&#34;25182247&#34;},{&#34;dailyconfirmed&#34;:&#34;165282&#34;,&#34;dailydeceased&#34;:&#34;3463&#34;,&#34;dailyrecovered&#34;:&#34;264483&#34;,&#34;date&#34;:&#34;29 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-29&#34;,&#34;totalconfirmed&#34;:&#34;27893387&#34;,&#34;totaldeceased&#34;:&#34;325407&#34;,&#34;totalrecovered&#34;:&#34;25446730&#34;},{&#34;dailyconfirmed&#34;:&#34;153396&#34;,&#34;dailydeceased&#34;:&#34;3130&#34;,&#34;dailyrecovered&#34;:&#34;237664&#34;,&#34;date&#34;:&#34;30 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-30&#34;,&#34;totalconfirmed&#34;:&#34;28046783&#34;,&#34;totaldeceased&#34;:&#34;328537&#34;,&#34;totalrecovered&#34;:&#34;25684394&#34;},{&#34;dailyconfirmed&#34;:&#34;126883&#34;,&#34;dailydeceased&#34;:&#34;2783&#34;,&#34;dailyrecovered&#34;:&#34;255125&#34;,&#34;date&#34;:&#34;31 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-31&#34;,&#34;totalconfirmed&#34;:&#34;28173666&#34;,&#34;totaldeceased&#34;:&#34;331320&#34;,&#34;totalrecovered&#34;:&#34;25939519&#34;},{&#34;dailyconfirmed&#34;:&#34;133152&#34;,&#34;dailydeceased&#34;:&#34;3205&#34;,&#34;dailyrecovered&#34;:&#34;231397&#34;,&#34;date&#34;:&#34;1 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-01&#34;,&#34;totalconfirmed&#34;:&#34;28306818&#34;,&#34;totaldeceased&#34;:&#34;334525&#34;,&#34;totalrecovered&#34;:&#34;26170916&#34;},{&#34;dailyconfirmed&#34;:&#34;134044&#34;,&#34;dailydeceased&#34;:&#34;2898&#34;,&#34;dailyrecovered&#34;:&#34;211890&#34;,&#34;date&#34;:&#34;2 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-02&#34;,&#34;totalconfirmed&#34;:&#34;28440862&#34;,&#34;totaldeceased&#34;:&#34;337423&#34;,&#34;totalrecovered&#34;:&#34;26382806&#34;},{&#34;dailyconfirmed&#34;:&#34;132424&#34;,&#34;dailydeceased&#34;:&#34;2717&#34;,&#34;dailyrecovered&#34;:&#34;206722&#34;,&#34;date&#34;:&#34;3 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-03&#34;,&#34;totalconfirmed&#34;:&#34;28573286&#34;,&#34;totaldeceased&#34;:&#34;340140&#34;,&#34;totalrecovered&#34;:&#34;26589528&#34;},{&#34;dailyconfirmed&#34;:&#34;120454&#34;,&#34;dailydeceased&#34;:&#34;3372&#34;,&#34;dailyrecovered&#34;:&#34;197763&#34;,&#34;date&#34;:&#34;4 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-04&#34;,&#34;totalconfirmed&#34;:&#34;28693740&#34;,&#34;totaldeceased&#34;:&#34;343512&#34;,&#34;totalrecovered&#34;:&#34;26787291&#34;},{&#34;dailyconfirmed&#34;:&#34;114488&#34;,&#34;dailydeceased&#34;:&#34;2682&#34;,&#34;dailyrecovered&#34;:&#34;189374&#34;,&#34;date&#34;:&#34;5 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-05&#34;,&#34;totalconfirmed&#34;:&#34;28808228&#34;,&#34;totaldeceased&#34;:&#34;346194&#34;,&#34;totalrecovered&#34;:&#34;26976665&#34;},{&#34;dailyconfirmed&#34;:&#34;101209&#34;,&#34;dailydeceased&#34;:&#34;2444&#34;,&#34;dailyrecovered&#34;:&#34;174156&#34;,&#34;date&#34;:&#34;6 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-06&#34;,&#34;totalconfirmed&#34;:&#34;28909437&#34;,&#34;totaldeceased&#34;:&#34;348638&#34;,&#34;totalrecovered&#34;:&#34;27150821&#34;},{&#34;dailyconfirmed&#34;:&#34;85804&#34;,&#34;dailydeceased&#34;:&#34;2107&#34;,&#34;dailyrecovered&#34;:&#34;182866&#34;,&#34;date&#34;:&#34;7 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-07&#34;,&#34;totalconfirmed&#34;:&#34;28995241&#34;,&#34;totaldeceased&#34;:&#34;350745&#34;,&#34;totalrecovered&#34;:&#34;27333687&#34;},{&#34;dailyconfirmed&#34;:&#34;92787&#34;,&#34;dailydeceased&#34;:&#34;2222&#34;,&#34;dailyrecovered&#34;:&#34;162356&#34;,&#34;date&#34;:&#34;8 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-08&#34;,&#34;totalconfirmed&#34;:&#34;29088028&#34;,&#34;totaldeceased&#34;:&#34;352967&#34;,&#34;totalrecovered&#34;:&#34;27496043&#34;},{&#34;dailyconfirmed&#34;:&#34;93883&#34;,&#34;dailydeceased&#34;:&#34;6139&#34;,&#34;dailyrecovered&#34;:&#34;149022&#34;,&#34;date&#34;:&#34;9 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-09&#34;,&#34;totalconfirmed&#34;:&#34;29181911&#34;,&#34;totaldeceased&#34;:&#34;359106&#34;,&#34;totalrecovered&#34;:&#34;27645065&#34;},{&#34;dailyconfirmed&#34;:&#34;91849&#34;,&#34;dailydeceased&#34;:&#34;3414&#34;,&#34;dailyrecovered&#34;:&#34;135329&#34;,&#34;date&#34;:&#34;10 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-10&#34;,&#34;totalconfirmed&#34;:&#34;29273760&#34;,&#34;totaldeceased&#34;:&#34;362520&#34;,&#34;totalrecovered&#34;:&#34;27780394&#34;},{&#34;dailyconfirmed&#34;:&#34;84574&#34;,&#34;dailydeceased&#34;:&#34;3996&#34;,&#34;dailyrecovered&#34;:&#34;122685&#34;,&#34;date&#34;:&#34;11 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-11&#34;,&#34;totalconfirmed&#34;:&#34;29358334&#34;,&#34;totaldeceased&#34;:&#34;366516&#34;,&#34;totalrecovered&#34;:&#34;27903079&#34;},{&#34;dailyconfirmed&#34;:&#34;80525&#34;,&#34;dailydeceased&#34;:&#34;3300&#34;,&#34;dailyrecovered&#34;:&#34;132664&#34;,&#34;date&#34;:&#34;12 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-12&#34;,&#34;totalconfirmed&#34;:&#34;29438859&#34;,&#34;totaldeceased&#34;:&#34;369816&#34;,&#34;totalrecovered&#34;:&#34;28035743&#34;},{&#34;dailyconfirmed&#34;:&#34;71001&#34;,&#34;dailydeceased&#34;:&#34;3922&#34;,&#34;dailyrecovered&#34;:&#34;119574&#34;,&#34;date&#34;:&#34;13 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-13&#34;,&#34;totalconfirmed&#34;:&#34;29509860&#34;,&#34;totaldeceased&#34;:&#34;373738&#34;,&#34;totalrecovered&#34;:&#34;28155317&#34;},{&#34;dailyconfirmed&#34;:&#34;60008&#34;,&#34;dailydeceased&#34;:&#34;2733&#34;,&#34;dailyrecovered&#34;:&#34;117376&#34;,&#34;date&#34;:&#34;14 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-14&#34;,&#34;totalconfirmed&#34;:&#34;29569868&#34;,&#34;totaldeceased&#34;:&#34;376471&#34;,&#34;totalrecovered&#34;:&#34;28272693&#34;},{&#34;dailyconfirmed&#34;:&#34;62215&#34;,&#34;dailydeceased&#34;:&#34;2540&#34;,&#34;dailyrecovered&#34;:&#34;107776&#34;,&#34;date&#34;:&#34;15 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-15&#34;,&#34;totalconfirmed&#34;:&#34;29632083&#34;,&#34;totaldeceased&#34;:&#34;379011&#34;,&#34;totalrecovered&#34;:&#34;28380469&#34;},{&#34;dailyconfirmed&#34;:&#34;67289&#34;,&#34;dailydeceased&#34;:&#34;2329&#34;,&#34;dailyrecovered&#34;:&#34;103900&#34;,&#34;date&#34;:&#34;16 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-16&#34;,&#34;totalconfirmed&#34;:&#34;29699372&#34;,&#34;totaldeceased&#34;:&#34;381340&#34;,&#34;totalrecovered&#34;:&#34;28484369&#34;},{&#34;dailyconfirmed&#34;:&#34;62436&#34;,&#34;dailydeceased&#34;:&#34;1591&#34;,&#34;dailyrecovered&#34;:&#34;88500&#34;,&#34;date&#34;:&#34;17 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-17&#34;,&#34;totalconfirmed&#34;:&#34;29761808&#34;,&#34;totaldeceased&#34;:&#34;382931&#34;,&#34;totalrecovered&#34;:&#34;28572869&#34;},{&#34;dailyconfirmed&#34;:&#34;60765&#34;,&#34;dailydeceased&#34;:&#34;1645&#34;,&#34;dailyrecovered&#34;:&#34;97854&#34;,&#34;date&#34;:&#34;18 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-18&#34;,&#34;totalconfirmed&#34;:&#34;29822573&#34;,&#34;totaldeceased&#34;:&#34;384576&#34;,&#34;totalrecovered&#34;:&#34;28670723&#34;},{&#34;dailyconfirmed&#34;:&#34;58615&#34;,&#34;dailydeceased&#34;:&#34;1574&#34;,&#34;dailyrecovered&#34;:&#34;87608&#34;,&#34;date&#34;:&#34;19 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-19&#34;,&#34;totalconfirmed&#34;:&#34;29881188&#34;,&#34;totaldeceased&#34;:&#34;386150&#34;,&#34;totalrecovered&#34;:&#34;28758331&#34;},{&#34;dailyconfirmed&#34;:&#34;52978&#34;,&#34;dailydeceased&#34;:&#34;1424&#34;,&#34;dailyrecovered&#34;:&#34;78189&#34;,&#34;date&#34;:&#34;20 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-20&#34;,&#34;totalconfirmed&#34;:&#34;29934166&#34;,&#34;totaldeceased&#34;:&#34;387574&#34;,&#34;totalrecovered&#34;:&#34;28836520&#34;},{&#34;dailyconfirmed&#34;:&#34;42683&#34;,&#34;dailydeceased&#34;:&#34;1167&#34;,&#34;dailyrecovered&#34;:&#34;82031&#34;,&#34;date&#34;:&#34;21 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-21&#34;,&#34;totalconfirmed&#34;:&#34;29976849&#34;,&#34;totaldeceased&#34;:&#34;388741&#34;,&#34;totalrecovered&#34;:&#34;28918551&#34;},{&#34;dailyconfirmed&#34;:&#34;50817&#34;,&#34;dailydeceased&#34;:&#34;1359&#34;,&#34;dailyrecovered&#34;:&#34;68697&#34;,&#34;date&#34;:&#34;22 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-22&#34;,&#34;totalconfirmed&#34;:&#34;30027666&#34;,&#34;totaldeceased&#34;:&#34;390100&#34;,&#34;totalrecovered&#34;:&#34;28987248&#34;},{&#34;dailyconfirmed&#34;:&#34;54309&#34;,&#34;dailydeceased&#34;:&#34;1323&#34;,&#34;dailyrecovered&#34;:&#34;69187&#34;,&#34;date&#34;:&#34;23 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-23&#34;,&#34;totalconfirmed&#34;:&#34;30081975&#34;,&#34;totaldeceased&#34;:&#34;391423&#34;,&#34;totalrecovered&#34;:&#34;29056435&#34;},{&#34;dailyconfirmed&#34;:&#34;51659&#34;,&#34;dailydeceased&#34;:&#34;1328&#34;,&#34;dailyrecovered&#34;:&#34;64369&#34;,&#34;date&#34;:&#34;24 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-24&#34;,&#34;totalconfirmed&#34;:&#34;30133634&#34;,&#34;totaldeceased&#34;:&#34;392751&#34;,&#34;totalrecovered&#34;:&#34;29120804&#34;},{&#34;dailyconfirmed&#34;:&#34;48768&#34;,&#34;dailydeceased&#34;:&#34;1183&#34;,&#34;dailyrecovered&#34;:&#34;64819&#34;,&#34;date&#34;:&#34;25 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-25&#34;,&#34;totalconfirmed&#34;:&#34;30182402&#34;,&#34;totaldeceased&#34;:&#34;393934&#34;,&#34;totalrecovered&#34;:&#34;29185623&#34;},{&#34;dailyconfirmed&#34;:&#34;49844&#34;,&#34;dailydeceased&#34;:&#34;1258&#34;,&#34;dailyrecovered&#34;:&#34;57866&#34;,&#34;date&#34;:&#34;26 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-26&#34;,&#34;totalconfirmed&#34;:&#34;30232246&#34;,&#34;totaldeceased&#34;:&#34;395192&#34;,&#34;totalrecovered&#34;:&#34;29243489&#34;},{&#34;dailyconfirmed&#34;:&#34;46523&#34;,&#34;dailydeceased&#34;:&#34;978&#34;,&#34;dailyrecovered&#34;:&#34;58563&#34;,&#34;date&#34;:&#34;27 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-27&#34;,&#34;totalconfirmed&#34;:&#34;30278769&#34;,&#34;totaldeceased&#34;:&#34;396170&#34;,&#34;totalrecovered&#34;:&#34;29302052&#34;},{&#34;dailyconfirmed&#34;:&#34;37070&#34;,&#34;dailydeceased&#34;:&#34;907&#34;,&#34;dailyrecovered&#34;:&#34;57016&#34;,&#34;date&#34;:&#34;28 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-28&#34;,&#34;totalconfirmed&#34;:&#34;30315839&#34;,&#34;totaldeceased&#34;:&#34;397077&#34;,&#34;totalrecovered&#34;:&#34;29359068&#34;},{&#34;dailyconfirmed&#34;:&#34;46104&#34;,&#34;dailydeceased&#34;:&#34;819&#34;,&#34;dailyrecovered&#34;:&#34;60789&#34;,&#34;date&#34;:&#34;29 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-29&#34;,&#34;totalconfirmed&#34;:&#34;30361943&#34;,&#34;totaldeceased&#34;:&#34;397896&#34;,&#34;totalrecovered&#34;:&#34;29419857&#34;},{&#34;dailyconfirmed&#34;:&#34;48606&#34;,&#34;dailydeceased&#34;:&#34;1002&#34;,&#34;dailyrecovered&#34;:&#34;61813&#34;,&#34;date&#34;:&#34;30 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-30&#34;,&#34;totalconfirmed&#34;:&#34;30410549&#34;,&#34;totaldeceased&#34;:&#34;398898&#34;,&#34;totalrecovered&#34;:&#34;29481670&#34;},{&#34;dailyconfirmed&#34;:&#34;46781&#34;,&#34;dailydeceased&#34;:&#34;857&#34;,&#34;dailyrecovered&#34;:&#34;59054&#34;,&#34;date&#34;:&#34;1 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-01&#34;,&#34;totalconfirmed&#34;:&#34;30457330&#34;,&#34;totaldeceased&#34;:&#34;399755&#34;,&#34;totalrecovered&#34;:&#34;29540724&#34;},{&#34;dailyconfirmed&#34;:&#34;44187&#34;,&#34;dailydeceased&#34;:&#34;737&#34;,&#34;dailyrecovered&#34;:&#34;57497&#34;,&#34;date&#34;:&#34;2 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-02&#34;,&#34;totalconfirmed&#34;:&#34;30501517&#34;,&#34;totaldeceased&#34;:&#34;400492&#34;,&#34;totalrecovered&#34;:&#34;29598221&#34;},{&#34;dailyconfirmed&#34;:&#34;43027&#34;,&#34;dailydeceased&#34;:&#34;950&#34;,&#34;dailyrecovered&#34;:&#34;52270&#34;,&#34;date&#34;:&#34;3 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-03&#34;,&#34;totalconfirmed&#34;:&#34;30544544&#34;,&#34;totaldeceased&#34;:&#34;401442&#34;,&#34;totalrecovered&#34;:&#34;29650491&#34;},{&#34;dailyconfirmed&#34;:&#34;40150&#34;,&#34;dailydeceased&#34;:&#34;725&#34;,&#34;dailyrecovered&#34;:&#34;42342&#34;,&#34;date&#34;:&#34;4 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-04&#34;,&#34;totalconfirmed&#34;:&#34;30584694&#34;,&#34;totaldeceased&#34;:&#34;402167&#34;,&#34;totalrecovered&#34;:&#34;29692833&#34;},{&#34;dailyconfirmed&#34;:&#34;34026&#34;,&#34;dailydeceased&#34;:&#34;552&#34;,&#34;dailyrecovered&#34;:&#34;51933&#34;,&#34;date&#34;:&#34;5 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-05&#34;,&#34;totalconfirmed&#34;:&#34;30618720&#34;,&#34;totaldeceased&#34;:&#34;402719&#34;,&#34;totalrecovered&#34;:&#34;29744766&#34;},{&#34;dailyconfirmed&#34;:&#34;43964&#34;,&#34;dailydeceased&#34;:&#34;930&#34;,&#34;dailyrecovered&#34;:&#34;47054&#34;,&#34;date&#34;:&#34;6 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-06&#34;,&#34;totalconfirmed&#34;:&#34;30662684&#34;,&#34;totaldeceased&#34;:&#34;403649&#34;,&#34;totalrecovered&#34;:&#34;29791820&#34;},{&#34;dailyconfirmed&#34;:&#34;45701&#34;,&#34;dailydeceased&#34;:&#34;819&#34;,&#34;dailyrecovered&#34;:&#34;44529&#34;,&#34;date&#34;:&#34;7 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-07&#34;,&#34;totalconfirmed&#34;:&#34;30708385&#34;,&#34;totaldeceased&#34;:&#34;404468&#34;,&#34;totalrecovered&#34;:&#34;29836349&#34;},{&#34;dailyconfirmed&#34;:&#34;43504&#34;,&#34;dailydeceased&#34;:&#34;908&#34;,&#34;dailyrecovered&#34;:&#34;44204&#34;,&#34;date&#34;:&#34;8 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-08&#34;,&#34;totalconfirmed&#34;:&#34;30751889&#34;,&#34;totaldeceased&#34;:&#34;405376&#34;,&#34;totalrecovered&#34;:&#34;29880553&#34;},{&#34;dailyconfirmed&#34;:&#34;42660&#34;,&#34;dailydeceased&#34;:&#34;1207&#34;,&#34;dailyrecovered&#34;:&#34;45291&#34;,&#34;date&#34;:&#34;9 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-09&#34;,&#34;totalconfirmed&#34;:&#34;30794549&#34;,&#34;totaldeceased&#34;:&#34;406583&#34;,&#34;totalrecovered&#34;:&#34;29925844&#34;},{&#34;dailyconfirmed&#34;:&#34;41494&#34;,&#34;dailydeceased&#34;:&#34;898&#34;,&#34;dailyrecovered&#34;:&#34;41511&#34;,&#34;date&#34;:&#34;10 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-10&#34;,&#34;totalconfirmed&#34;:&#34;30836043&#34;,&#34;totaldeceased&#34;:&#34;407481&#34;,&#34;totalrecovered&#34;:&#34;29967355&#34;},{&#34;dailyconfirmed&#34;:&#34;37654&#34;,&#34;dailydeceased&#34;:&#34;720&#34;,&#34;dailyrecovered&#34;:&#34;39688&#34;,&#34;date&#34;:&#34;11 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-11&#34;,&#34;totalconfirmed&#34;:&#34;30873697&#34;,&#34;totaldeceased&#34;:&#34;408201&#34;,&#34;totalrecovered&#34;:&#34;30007043&#34;},{&#34;dailyconfirmed&#34;:&#34;30818&#34;,&#34;dailydeceased&#34;:&#34;2024&#34;,&#34;dailyrecovered&#34;:&#34;47544&#34;,&#34;date&#34;:&#34;12 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-12&#34;,&#34;totalconfirmed&#34;:&#34;30904515&#34;,&#34;totaldeceased&#34;:&#34;410225&#34;,&#34;totalrecovered&#34;:&#34;30054587&#34;},{&#34;dailyconfirmed&#34;:&#34;40314&#34;,&#34;dailydeceased&#34;:&#34;625&#34;,&#34;dailyrecovered&#34;:&#34;42436&#34;,&#34;date&#34;:&#34;13 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-13&#34;,&#34;totalconfirmed&#34;:&#34;30944829&#34;,&#34;totaldeceased&#34;:&#34;410850&#34;,&#34;totalrecovered&#34;:&#34;30097023&#34;},{&#34;dailyconfirmed&#34;:&#34;41759&#34;,&#34;dailydeceased&#34;:&#34;578&#34;,&#34;dailyrecovered&#34;:&#34;39293&#34;,&#34;date&#34;:&#34;14 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-14&#34;,&#34;totalconfirmed&#34;:&#34;30986588&#34;,&#34;totaldeceased&#34;:&#34;411428&#34;,&#34;totalrecovered&#34;:&#34;30136316&#34;},{&#34;dailyconfirmed&#34;:&#34;39071&#34;,&#34;dailydeceased&#34;:&#34;544&#34;,&#34;dailyrecovered&#34;:&#34;39827&#34;,&#34;date&#34;:&#34;15 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-15&#34;,&#34;totalconfirmed&#34;:&#34;31025659&#34;,&#34;totaldeceased&#34;:&#34;411972&#34;,&#34;totalrecovered&#34;:&#34;30176143&#34;},{&#34;dailyconfirmed&#34;:&#34;38117&#34;,&#34;dailydeceased&#34;:&#34;560&#34;,&#34;dailyrecovered&#34;:&#34;43878&#34;,&#34;date&#34;:&#34;16 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-16&#34;,&#34;totalconfirmed&#34;:&#34;31063776&#34;,&#34;totaldeceased&#34;:&#34;412532&#34;,&#34;totalrecovered&#34;:&#34;30220021&#34;},{&#34;dailyconfirmed&#34;:&#34;41283&#34;,&#34;dailydeceased&#34;:&#34;517&#34;,&#34;dailyrecovered&#34;:&#34;42051&#34;,&#34;date&#34;:&#34;17 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-17&#34;,&#34;totalconfirmed&#34;:&#34;31105059&#34;,&#34;totaldeceased&#34;:&#34;413049&#34;,&#34;totalrecovered&#34;:&#34;30262072&#34;},{&#34;dailyconfirmed&#34;:&#34;38330&#34;,&#34;dailydeceased&#34;:&#34;501&#34;,&#34;dailyrecovered&#34;:&#34;38545&#34;,&#34;date&#34;:&#34;18 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-18&#34;,&#34;totalconfirmed&#34;:&#34;31143389&#34;,&#34;totaldeceased&#34;:&#34;413550&#34;,&#34;totalrecovered&#34;:&#34;30300617&#34;},{&#34;dailyconfirmed&#34;:&#34;29420&#34;,&#34;dailydeceased&#34;:&#34;372&#34;,&#34;dailyrecovered&#34;:&#34;45356&#34;,&#34;date&#34;:&#34;19 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-19&#34;,&#34;totalconfirmed&#34;:&#34;31172809&#34;,&#34;totaldeceased&#34;:&#34;413922&#34;,&#34;totalrecovered&#34;:&#34;30345973&#34;},{&#34;dailyconfirmed&#34;:&#34;42128&#34;,&#34;dailydeceased&#34;:&#34;3998&#34;,&#34;dailyrecovered&#34;:&#34;36876&#34;,&#34;date&#34;:&#34;20 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-20&#34;,&#34;totalconfirmed&#34;:&#34;31214937&#34;,&#34;totaldeceased&#34;:&#34;417920&#34;,&#34;totalrecovered&#34;:&#34;30382849&#34;},{&#34;dailyconfirmed&#34;:&#34;41687&#34;,&#34;dailydeceased&#34;:&#34;510&#34;,&#34;dailyrecovered&#34;:&#34;38891&#34;,&#34;date&#34;:&#34;21 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-21&#34;,&#34;totalconfirmed&#34;:&#34;31256624&#34;,&#34;totaldeceased&#34;:&#34;418430&#34;,&#34;totalrecovered&#34;:&#34;30421740&#34;},{&#34;dailyconfirmed&#34;:&#34;34863&#34;,&#34;dailydeceased&#34;:&#34;481&#34;,&#34;dailyrecovered&#34;:&#34;38403&#34;,&#34;date&#34;:&#34;22 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-22&#34;,&#34;totalconfirmed&#34;:&#34;31291487&#34;,&#34;totaldeceased&#34;:&#34;418911&#34;,&#34;totalrecovered&#34;:&#34;30460143&#34;},{&#34;dailyconfirmed&#34;:&#34;39501&#34;,&#34;dailydeceased&#34;:&#34;542&#34;,&#34;dailyrecovered&#34;:&#34;35144&#34;,&#34;date&#34;:&#34;23 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-23&#34;,&#34;totalconfirmed&#34;:&#34;31330988&#34;,&#34;totaldeceased&#34;:&#34;419453&#34;,&#34;totalrecovered&#34;:&#34;30495287&#34;},{&#34;dailyconfirmed&#34;:&#34;40286&#34;,&#34;dailydeceased&#34;:&#34;541&#34;,&#34;dailyrecovered&#34;:&#34;40038&#34;,&#34;date&#34;:&#34;24 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-24&#34;,&#34;totalconfirmed&#34;:&#34;31371274&#34;,&#34;totaldeceased&#34;:&#34;419994&#34;,&#34;totalrecovered&#34;:&#34;30535325&#34;},{&#34;dailyconfirmed&#34;:&#34;38179&#34;,&#34;dailydeceased&#34;:&#34;411&#34;,&#34;dailyrecovered&#34;:&#34;35945&#34;,&#34;date&#34;:&#34;25 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-25&#34;,&#34;totalconfirmed&#34;:&#34;31409453&#34;,&#34;totaldeceased&#34;:&#34;420405&#34;,&#34;totalrecovered&#34;:&#34;30571270&#34;},{&#34;dailyconfirmed&#34;:&#34;30820&#34;,&#34;dailydeceased&#34;:&#34;418&#34;,&#34;dailyrecovered&#34;:&#34;42503&#34;,&#34;date&#34;:&#34;26 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-26&#34;,&#34;totalconfirmed&#34;:&#34;31440273&#34;,&#34;totaldeceased&#34;:&#34;420823&#34;,&#34;totalrecovered&#34;:&#34;30613773&#34;},{&#34;dailyconfirmed&#34;:&#34;42971&#34;,&#34;dailydeceased&#34;:&#34;641&#34;,&#34;dailyrecovered&#34;:&#34;41653&#34;,&#34;date&#34;:&#34;27 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-27&#34;,&#34;totalconfirmed&#34;:&#34;31483244&#34;,&#34;totaldeceased&#34;:&#34;421464&#34;,&#34;totalrecovered&#34;:&#34;30655426&#34;},{&#34;dailyconfirmed&#34;:&#34;43165&#34;,&#34;dailydeceased&#34;:&#34;640&#34;,&#34;dailyrecovered&#34;:&#34;38537&#34;,&#34;date&#34;:&#34;28 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-28&#34;,&#34;totalconfirmed&#34;:&#34;31526409&#34;,&#34;totaldeceased&#34;:&#34;422104&#34;,&#34;totalrecovered&#34;:&#34;30693963&#34;},{&#34;dailyconfirmed&#34;:&#34;44671&#34;,&#34;dailydeceased&#34;:&#34;549&#34;,&#34;dailyrecovered&#34;:&#34;42115&#34;,&#34;date&#34;:&#34;29 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-29&#34;,&#34;totalconfirmed&#34;:&#34;31571080&#34;,&#34;totaldeceased&#34;:&#34;422653&#34;,&#34;totalrecovered&#34;:&#34;30736078&#34;},{&#34;dailyconfirmed&#34;:&#34;41499&#34;,&#34;dailydeceased&#34;:&#34;598&#34;,&#34;dailyrecovered&#34;:&#34;37320&#34;,&#34;date&#34;:&#34;30 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-30&#34;,&#34;totalconfirmed&#34;:&#34;31612579&#34;,&#34;totaldeceased&#34;:&#34;423251&#34;,&#34;totalrecovered&#34;:&#34;30773398&#34;},{&#34;dailyconfirmed&#34;:&#34;41943&#34;,&#34;dailydeceased&#34;:&#34;542&#34;,&#34;dailyrecovered&#34;:&#34;39485&#34;,&#34;date&#34;:&#34;31 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-31&#34;,&#34;totalconfirmed&#34;:&#34;31654522&#34;,&#34;totaldeceased&#34;:&#34;423793&#34;,&#34;totalrecovered&#34;:&#34;30812883&#34;},{&#34;dailyconfirmed&#34;:&#34;40629&#34;,&#34;dailydeceased&#34;:&#34;424&#34;,&#34;dailyrecovered&#34;:&#34;36628&#34;,&#34;date&#34;:&#34;1 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-01&#34;,&#34;totalconfirmed&#34;:&#34;31695151&#34;,&#34;totaldeceased&#34;:&#34;424217&#34;,&#34;totalrecovered&#34;:&#34;30849511&#34;},{&#34;dailyconfirmed&#34;:&#34;30085&#34;,&#34;dailydeceased&#34;:&#34;420&#34;,&#34;dailyrecovered&#34;:&#34;39120&#34;,&#34;date&#34;:&#34;2 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-02&#34;,&#34;totalconfirmed&#34;:&#34;31725236&#34;,&#34;totaldeceased&#34;:&#34;424637&#34;,&#34;totalrecovered&#34;:&#34;30888631&#34;},{&#34;dailyconfirmed&#34;:&#34;42530&#34;,&#34;dailydeceased&#34;:&#34;561&#34;,&#34;dailyrecovered&#34;:&#34;36552&#34;,&#34;date&#34;:&#34;3 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-03&#34;,&#34;totalconfirmed&#34;:&#34;31767766&#34;,&#34;totaldeceased&#34;:&#34;425198&#34;,&#34;totalrecovered&#34;:&#34;30925183&#34;},{&#34;dailyconfirmed&#34;:&#34;42797&#34;,&#34;dailydeceased&#34;:&#34;532&#34;,&#34;dailyrecovered&#34;:&#34;41873&#34;,&#34;date&#34;:&#34;4 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-04&#34;,&#34;totalconfirmed&#34;:&#34;31810563&#34;,&#34;totaldeceased&#34;:&#34;425730&#34;,&#34;totalrecovered&#34;:&#34;30967056&#34;},{&#34;dailyconfirmed&#34;:&#34;45005&#34;,&#34;dailydeceased&#34;:&#34;465&#34;,&#34;dailyrecovered&#34;:&#34;40906&#34;,&#34;date&#34;:&#34;5 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-05&#34;,&#34;totalconfirmed&#34;:&#34;31855568&#34;,&#34;totaldeceased&#34;:&#34;426195&#34;,&#34;totalrecovered&#34;:&#34;31007962&#34;},{&#34;dailyconfirmed&#34;:&#34;38705&#34;,&#34;dailydeceased&#34;:&#34;616&#34;,&#34;dailyrecovered&#34;:&#34;40026&#34;,&#34;date&#34;:&#34;6 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-06&#34;,&#34;totalconfirmed&#34;:&#34;31894273&#34;,&#34;totaldeceased&#34;:&#34;426811&#34;,&#34;totalrecovered&#34;:&#34;31047988&#34;},{&#34;dailyconfirmed&#34;:&#34;39068&#34;,&#34;dailydeceased&#34;:&#34;491&#34;,&#34;dailyrecovered&#34;:&#34;43935&#34;,&#34;date&#34;:&#34;7 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-07&#34;,&#34;totalconfirmed&#34;:&#34;31933341&#34;,&#34;totaldeceased&#34;:&#34;427302&#34;,&#34;totalrecovered&#34;:&#34;31091923&#34;},{&#34;dailyconfirmed&#34;:&#34;36036&#34;,&#34;dailydeceased&#34;:&#34;447&#34;,&#34;dailyrecovered&#34;:&#34;39832&#34;,&#34;date&#34;:&#34;8 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-08&#34;,&#34;totalconfirmed&#34;:&#34;31969377&#34;,&#34;totaldeceased&#34;:&#34;427749&#34;,&#34;totalrecovered&#34;:&#34;31131755&#34;},{&#34;dailyconfirmed&#34;:&#34;27428&#34;,&#34;dailydeceased&#34;:&#34;376&#34;,&#34;dailyrecovered&#34;:&#34;41461&#34;,&#34;date&#34;:&#34;9 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-09&#34;,&#34;totalconfirmed&#34;:&#34;31996805&#34;,&#34;totaldeceased&#34;:&#34;428125&#34;,&#34;totalrecovered&#34;:&#34;31173216&#34;},{&#34;dailyconfirmed&#34;:&#34;38376&#34;,&#34;dailydeceased&#34;:&#34;496&#34;,&#34;dailyrecovered&#34;:&#34;40097&#34;,&#34;date&#34;:&#34;10 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-10&#34;,&#34;totalconfirmed&#34;:&#34;32035181&#34;,&#34;totaldeceased&#34;:&#34;428621&#34;,&#34;totalrecovered&#34;:&#34;31213313&#34;},{&#34;dailyconfirmed&#34;:&#34;41586&#34;,&#34;dailydeceased&#34;:&#34;491&#34;,&#34;dailyrecovered&#34;:&#34;39127&#34;,&#34;date&#34;:&#34;11 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-11&#34;,&#34;totalconfirmed&#34;:&#34;32076767&#34;,&#34;totaldeceased&#34;:&#34;429112&#34;,&#34;totalrecovered&#34;:&#34;31252440&#34;},{&#34;dailyconfirmed&#34;:&#34;40081&#34;,&#34;dailydeceased&#34;:&#34;583&#34;,&#34;dailyrecovered&#34;:&#34;42156&#34;,&#34;date&#34;:&#34;12 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-12&#34;,&#34;totalconfirmed&#34;:&#34;32116848&#34;,&#34;totaldeceased&#34;:&#34;429695&#34;,&#34;totalrecovered&#34;:&#34;31294596&#34;},{&#34;dailyconfirmed&#34;:&#34;38761&#34;,&#34;dailydeceased&#34;:&#34;477&#34;,&#34;dailyrecovered&#34;:&#34;35759&#34;,&#34;date&#34;:&#34;13 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-13&#34;,&#34;totalconfirmed&#34;:&#34;32155609&#34;,&#34;totaldeceased&#34;:&#34;430172&#34;,&#34;totalrecovered&#34;:&#34;31330355&#34;},{&#34;dailyconfirmed&#34;:&#34;36135&#34;,&#34;dailydeceased&#34;:&#34;491&#34;,&#34;dailyrecovered&#34;:&#34;37936&#34;,&#34;date&#34;:&#34;14 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-14&#34;,&#34;totalconfirmed&#34;:&#34;32191744&#34;,&#34;totaldeceased&#34;:&#34;430663&#34;,&#34;totalrecovered&#34;:&#34;31368291&#34;},{&#34;dailyconfirmed&#34;:&#34;33245&#34;,&#34;dailydeceased&#34;:&#34;421&#34;,&#34;dailyrecovered&#34;:&#34;35936&#34;,&#34;date&#34;:&#34;15 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-15&#34;,&#34;totalconfirmed&#34;:&#34;32224989&#34;,&#34;totaldeceased&#34;:&#34;431084&#34;,&#34;totalrecovered&#34;:&#34;31404227&#34;},{&#34;dailyconfirmed&#34;:&#34;24692&#34;,&#34;dailydeceased&#34;:&#34;438&#34;,&#34;dailyrecovered&#34;:&#34;36862&#34;,&#34;date&#34;:&#34;16 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-16&#34;,&#34;totalconfirmed&#34;:&#34;32249681&#34;,&#34;totaldeceased&#34;:&#34;431522&#34;,&#34;totalrecovered&#34;:&#34;31441089&#34;}] . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.json) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . &lt;bound method Response.json of &lt;Response [403]&gt;&gt; . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://ahadb63.github.io/ahadsblog/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 0 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [0, 2, 4, 6, 8, 10] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . [0, 2, 4, 6, 8, 10] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 0, 2, 4, 5, 6, 8, 10, 10, 12, 14, 15, 16, 18, 20, 20, 22, 24, 25, 26, 28, 30, 30, 32, 34, 35, 36, 38, 40, 40, 42, 44, 45, 46, 48, 50, 50, 52, 54, 55, 56, 58, 60, 60, 62, 64, 65, 66, 68, 70, 70, 72, 74, 75, 76, 78, 80, 80, 82, 84, 85, 86, 88, 90, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) #code should add the price of the menu items selected by the user print(total) . Menu burger $3.99 fries $1.99 drink $0.99 0 . Fixed Version . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99, } go = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times while go == 0: item = input(&quot;Please select an item from the menu&quot;) print(&quot;Your Order:&quot;, item.lower()) for k,v in menu.items(): if item.lower() == k: print(&quot;Your total is $&quot;, menu[item.lower()]) go = 1 break if item.lower() != k: print(&quot;Please Try Again&quot;) continue #code should add the price of the menu items selected by the user . Menu burger $3.99 fries $1.99 drink $0.99 Your Order: burger Your total is $ 3.99 . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99,} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #code should prompts the user multiple times, until they type &quot;STOP&quot; while True: item = input(&quot;Select an item from the menu then type STOP&quot;) if item == &quot;STOP&quot; : break elif item in menu: total += menu[item] else: print (&quot;Doesnt Exist&quot;) #code adds price of the menu items selected by the user print(&quot;Total: $&quot; + str(total)) . Menu burger $3.99 fries $1.99 drink $0.99 Total: $7.970000000000001 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://ahadb63.github.io/ahadsblog/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Team Final Project",
            "content": "Final Project Early Idea . Webpage that has multiple minigames . Games like chess, poker, slots?, snake, wordle, | Games will be categorized in categories. For example, there will be a Board Games, Card Games, etc. | . Roles . Sabine - Frontend dev Dash - Backend dev Ahad - Backend dev Aiden - Scrum Master .",
            "url": "https://ahadb63.github.io/ahadsblog/final/project/2022/09/27/Final-Project-Planning.html",
            "relUrl": "/final/project/2022/09/27/Final-Project-Planning.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "JavaScript Usage",
            "content": "# JAVASCRIPT - toc: true - badges: true - comments: true - categories: [Java, markdown] . console.log(&quot;Hello World my name is Ahad Biabani&quot;); . Hello World my name is Ahad Biabani . Using Variable in console.log . var ahad = &quot;Hello fortnite hi hi hi&quot;; console.log(ahad); . Hello fortnite hi hi hi . Output showing use of function . function logIt(output) { console.log(output); } logIt(ahad); . Hello fortnite hi hi hi . Showing reuse of fucntion . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;I like to play Ice Hockey&quot;); logIt(2005) . Reuse of logIT I like to play Ice Hockey 2005 . Dynamic or Loosely typed language (string, number) . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Ahad is the best APCSP student&quot;) logItType(&quot;hello&quot;); logItType(2005); logItType([1, 2, 3, 4, 5]); . Ahad is the best APCSP student string ; hello number ; 2005 object ; [ 1, 2, 3, 4, 5 ] . Build a Person Function/Class object and JSON . function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var student = new Person(&quot;Ahad Biabani&quot;, &quot;Ahadb63&quot;, 2024); // object type is easy to work with in JavaScript logItType(student); // before role logItType(student.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher student.setRole(&quot;Teacher&quot;); // set the role logItType(student); logItType(student.toJSON()); . object ; Person { name: &#39;Ahad Biabani&#39;, ghID: &#39;Ahadb63&#39;, classOf: 2024, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Ahad Biabani&#34;,&#34;ghID&#34;:&#34;Ahadb63&#34;,&#34;classOf&#34;:2024,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Ahad Biabani&#39;, ghID: &#39;Ahadb63&#39;, classOf: 2024, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Ahad Biabani&#34;,&#34;ghID&#34;:&#34;Ahadb63&#34;,&#34;classOf&#34;:2024,&#34;role&#34;:&#34;Teacher&#34;} . Build a Classroom Array/List of Persons and JSON . var students = [ new Person(&quot;Kian&quot;, &quot;Pasokhi&quot;, 2024), new Person(&quot;Khalid&quot;, &quot;Farah&quot;, 2024), new Person(&quot;Neel&quot;, &quot;Agnihotri&quot;, 2024), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); . evalmachine.&lt;anonymous&gt;:22 compsci = new Classroom(teacher, students); ^ ReferenceError: teacher is not defined at evalmachine.&lt;anonymous&gt;:22:25 at ContextifyScript.Script.runInThisContext (vm.js:25:33) at Object.runInThisContext (vm.js:97:38) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) . IJavaScript and Table formatting using toHTML method . Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid white;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em blue;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Ahad Biabani | Ahadb63 | 2024 | Teacher | Kian | Pasokhi | 2024 | Student | Khalid | Farah | 2024 | Student | Neel | Agnihotri | 2024 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://ahadb63.github.io/ahadsblog/2022/09/25/JavaScript-Use.html",
            "relUrl": "/2022/09/25/JavaScript-Use.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Agenda",
            "content": "9/22/22 Thursday . AMLIT . Poem Essay (tommorow at 11:59) | . Chemistry . none | . APUSH . Chapter 10 notes | Chapter 10 study | . Math . B8 HW | Test Corrections | . APCOMSCI . none | .",
            "url": "https://ahadb63.github.io/ahadsblog/agenda/2022/09/22/AGENDA.html",
            "relUrl": "/agenda/2022/09/22/AGENDA.html",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Quiz Planning",
            "content": "# Quiz Planning - toc: true - badges: true - comments: true - categories: [Quiz, markdown] . Ideas for Quiz . Geography loction of statues | World Wonders | . | Sports Teams | different sports | players | . | History Historical figures | Historcial events | . | . We chose Geography as the topic for our quiz . Our Quiz will have three questions: . What country is the Eiffel Tower in? Answer: France | What country are the Pyramids Located? Answer: Egypt | What country and city is the Statue of Liberty in? Answer: United States, New York City | . Other: . We chose to add a bonus question | Bonus question gives viewer chance to decline and end quiz or move forward and do bonus question. | We have a loser screen and a winner screen. | . My Geography Quiz . Ideas for final project . Website where you can find information on characters from movies, shows, manga, and anime | Website that has lots of minigames | Trivia game website | website that teaches you stuff about math | . All projects aboce would orgamize the information and data and present it in different sections. . I need to add 6 points for each of the project ideas next time for full points on the weeks assignments . test .",
            "url": "https://ahadb63.github.io/ahadsblog/2022/09/07/Code.org-Quiz-Planning.html",
            "relUrl": "/2022/09/07/Code.org-Quiz-Planning.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Time Box Fragment",
            "content": "&lt;/p&gt; Week 0 Week 1 Week 2 . First Jupyter Notebook&lt;/td&gt; Tool Check&lt;/td&gt; Lists and Dictionaries&lt;/td&gt; &lt;/tr&gt; First Markdown Post&lt;/td&gt; Quiz&lt;/td&gt; &lt;/tr&gt; About Me&lt;/td&gt; Vocab&lt;/td&gt; Weekly Progress&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; test . &lt;/div&gt; | | | . | | . | | | .",
            "url": "https://ahadb63.github.io/ahadsblog/weeklyprogress/2022/09/05/TimeBoxFragment.html",
            "relUrl": "/weeklyprogress/2022/09/05/TimeBoxFragment.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Quiz",
            "content": "test test test . import getpass, sys def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) if rsp == &quot;import&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, pluto running /bin/python3 You will be asked 3 questions. Question: Are you ready to take a test? Answer: Question: What command is used to include other functions that were previously developed? is incorrect! Question: What command is used to evaluate correct or incorrect response in this example? is incorrect! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? is incorrect! pluto you scored 0/3 .",
            "url": "https://ahadb63.github.io/ahadsblog/quiz/2022/08/30/Quiz.html",
            "relUrl": "/quiz/2022/08/30/Quiz.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Quiz 2",
            "content": "import getpass, sys def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) if rsp == &quot;import&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, pluto running /bin/python3 You will be asked 3 questions. Question: Are you ready to take a test? Answer: Question: What command is used to include other functions that were previously developed? is incorrect! Question: What command is used to evaluate correct or incorrect response in this example? is incorrect! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? is incorrect! pluto you scored 0/3 .",
            "url": "https://ahadb63.github.io/ahadsblog/quiz/2022/08/30/QUIZ.html",
            "relUrl": "/quiz/2022/08/30/QUIZ.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "First Jupyter Notebook",
            "content": "print(1+1) print(&quot;hello&quot;) . .",
            "url": "https://ahadb63.github.io/ahadsblog/2022/08/29/firstjupyternotebook.html",
            "relUrl": "/2022/08/29/firstjupyternotebook.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "Bash Tool Checks",
            "content": "Python Check . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Package . conda list . # packages in environment at /home/pluto/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . Jupyter Check . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/pluto/.local/share/jupyter/kernels/bash javascript /home/pluto/.local/share/jupyter/kernels/javascript python3 /home/pluto/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://ahadb63.github.io/ahadsblog/2022/08/29/Bash-Tool-Check.html",
            "relUrl": "/2022/08/29/Bash-Tool-Check.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "Mrkdwnpost",
            "content": "Markdown test . Things I like . food | school | APCSP | Mr Yeung | .",
            "url": "https://ahadb63.github.io/ahadsblog/2022/08/24/mrkdwnpost.html",
            "relUrl": "/2022/08/24/mrkdwnpost.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | . | | | .",
            "url": "https://ahadb63.github.io/ahadsblog/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "CB quiz",
            "content": "",
            "url": "https://ahadb63.github.io/ahadsblog/quiz/2022/02/02/College-Board-Quiz.html",
            "relUrl": "/quiz/2022/02/02/College-Board-Quiz.html",
            "date": " • Feb 2, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "College board quiz (image)",
            "content": ".",
            "url": "https://ahadb63.github.io/ahadsblog/2022/02/02/College-Board-Quiz-(Image).html",
            "relUrl": "/2022/02/02/College-Board-Quiz-(Image).html",
            "date": " • Feb 2, 2022"
        }
        
    
  
    
        ,"post60": {
            "title": "Week 4",
            "content": "# Week 4 &gt; Week 4 assignments - toc:true- badges: true - comments: true - categories: [Flask, markdown] . Flask Web Page Video . Collaboration Group is new, none of us know each other well | Variance in gender and culture | United under intrest for comsci | . | Potential Group Project Ideas Trivia game | Mafia game | Media database characters | movies | anime | . | . | .",
            "url": "https://ahadb63.github.io/ahadsblog/2020/09/29/Week-4.html",
            "relUrl": "/2020/09/29/Week-4.html",
            "date": " • Sep 29, 2020"
        }
        
    
  
    
        ,"post61": {
            "title": "COVIDAPI",
            "content": "&quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 .",
            "url": "https://ahadb63.github.io/ahadsblog/api/2020/09/09/apiii.html",
            "relUrl": "/api/2020/09/09/apiii.html",
            "date": " • Sep 9, 2020"
        }
        
    
  
    
        ,"post62": {
            "title": "Algorithm Hacks",
            "content": "var vars = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] ,expressions = [&#39;! ( a || b || c )&#39;, &#39;(!a &amp;&amp; !b &amp;&amp; !c)&#39;]; document.getElementById(&#39;getResult&#39;).addEventListener(&#39;click&#39;, ()=&gt;{ var len = vars.length ,splitBy = Math.round(len/2) ,trueSet ,trues = [] ,falses = [] ,truthData = []; vars = document.getElementById(&#39;vars&#39;).value.split(&#39;,&#39;); expressions = document.getElementById(&#39;expression&#39;).value.split(&#39;,&#39;); truthData.push(truth(vars, vars, true)); for(var i=1; i&lt;=splitBy; i++) { trueSet = reduceToCombinations(permut(vars, i)); trueSet.forEach((truthSrc)=&gt;{ trues = truth(vars, truthSrc); truthData.push(trues); }); } truthData.push(truth(vars, vars)); writeTruthTable(truthData); }); function truth(set, truths, reverse) { var w = {}; set.forEach(v=&gt;w[v]=(truths.indexOf(v)&gt;=0 ? true : false)^reverse); return w; } function reduceToCombinations(arr) { var i=1 ,lastEl; arr = arr.map(v=&gt;{return v.split(&#39;&#39;).sort().join(&#39;&#39;)}).sort(); lastEl = arr[0]; while(i&lt;arr.length) { if(arr[i] == lastEl) { arr.splice(i,1); } else { lastEl = arr[i]; i++; } } arr = arr.map(v=&gt;{return v.split(&#39;&#39;)}); return arr; } function writeTruthTable(truthData) { var table = &#39;&lt;table cellpadding=0 cellspacing=0&gt;&#39; ,keys ,vals ,exprRes; table += &#39;&lt;thead&gt;&lt;tr&gt;&#39;; vars.forEach(v=&gt;{ table += &#39;&lt;th&gt;&#39;; table += v; table += &#39;&lt;/th&gt;&#39;; }); expressions.forEach(v=&gt;{ table += &#39;&lt;th&gt;&#39;; table += v; table += &#39;&lt;/th&gt;&#39;; }); table += &#39;&lt;/tr&gt;&lt;/thead&gt;&#39;; truthData.forEach((v)=&gt; { vals = []; keys = []; table += &#39;&lt;tr&gt;&#39;; console.log(v); for(i in v){ vals.push(v[i]); keys.push(i); table += &#39;&lt;td&gt;&#39;; table += v[i]; table += &#39;&lt;/td&gt;&#39;; }; for(var i = 0; i&lt;keys.length; i++) { eval(`var ${keys[i]} = ${vals[i]};`); } expressions.forEach((expr)=&gt;{ exprRes = eval(expr); table += `&lt;td class=&quot;${exprRes}&quot;&gt;`; table += exprRes ? &#39;T&#39; : &#39;F&#39;; table += &#39;&lt;/td&gt;&#39;; }); table += &#39;&lt;/tr&gt;&#39;; }); table += &#39;&lt;/table&gt;&#39;; document.getElementById(&#39;result&#39;).innerHTML = table; } function permut(arr, c) { var buf = [] ,len ,arrSlice ,permArr ,proArr; if(c&lt;=1) { return arr; } else { len = arr.length; for(var i=0;i&lt;len;i++) { arrSlice = arr.slice(0,i).concat(arr.slice(i+1)); permArr = permut(arrSlice,c-1); proArr = []; for(var y=0; y&lt;permArr.length; y++) { proArr.push([arr[i]].concat(permArr[y]).join(&#39;&#39;)); } buf.push(...proArr); } } return buf; } . evalmachine.&lt;anonymous&gt;:4 document.getElementById(&#39;getResult&#39;).addEventListener(&#39;click&#39;, ()=&gt;{ ^ ReferenceError: document is not defined at evalmachine.&lt;anonymous&gt;:4:1 at ContextifyScript.Script.runInThisContext (vm.js:25:33) at Object.runInThisContext (vm.js:97:38) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) . const A = () =&gt; { console.log(&#39;A&#39;); return true; } const B = () =&gt; { console.log(&#39;B&#39;); return true; } const C = () =&gt; { console.log(&#39;C&#39;); return false; }A() || B() &amp;&amp; C() // prints &quot;A&quot;, returns true (A() || B()) &amp;&amp; C() // prints &quot;A C&quot;, returns false . evalmachine.&lt;anonymous&gt;:12 }A() || B() &amp;&amp; C() ^ SyntaxError: Unexpected identifier at createScript (vm.js:56:10) at Object.runInThisContext (vm.js:97:10) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) at process._tickCallback (internal/process/next_tick.js:104:9) . from itertools import product while True: bexp = input(&#39; nBoolean expression: &#39;) bexp = bexp.strip() if not bexp: print(&quot; nThank you&quot;) break code = compile(bexp, &#39;&lt;string&gt;&#39;, &#39;eval&#39;) names = code.co_names print(&#39; n&#39; + &#39; &#39;.join(names), &#39;:&#39;, bexp) for values in product(range(2), repeat=len(names)): env = dict(zip(names, values)) print(&#39; &#39;.join(str(v) for v in values), &#39;:&#39;, eval(code, env)) . : 1 : 1 : 2 : 2 : 3 : 3 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 2 : 2 Thank you .",
            "url": "https://ahadb63.github.io/ahadsblog/algorithm/hacks/2020/09/09/Algorithm-Hacks.html",
            "relUrl": "/algorithm/hacks/2020/09/09/Algorithm-Hacks.html",
            "date": " • Sep 9, 2020"
        }
        
    
  
    
        ,"post63": {
            "title": "Lesson 3.11",
            "content": "",
            "url": "https://ahadb63.github.io/ahadsblog/2020/09/09/3.11-CB-lesson.html",
            "relUrl": "/2020/09/09/3.11-CB-lesson.html",
            "date": " • Sep 9, 2020"
        }
        
    
  
    
        ,"post64": {
            "title": "Binary Search Lesson 3.11",
            "content": "Lesson 3.11 Binary Search . Goals/Objectives: . detirmine number of iterations required to find vlue in data set. | explain requirements for binary search | . What is Binary Search? . Binary search is a search algorithm that finds the position of a target value within a sorted array. Binary search compares the target value to the middle element of the array. | An algorithm for iterating to find a value inside a data set | . About Binary Search: . Binary Search Algorithm starts in the middle of a data set of numbers and eliminates half the data. This process reapeats until the desired value is found or until all elements have been eliminated. | In order to use binary search effectivly and properly, data must be stored in order | COLLEGE BOARD INDEX STARTS AT 1 NOT 0 | . Think about how you would you would try to find a certain number in this set. . One way would be to line up the numbers and count them individually untill you find the desired value. . When working with large data sets with lots of numbers, methods like these wont work . Instead, a Binary Search would be more effective. | . Here we can see the numbers are set in an increasing order. Setting numbers in an increasing or decreasing is needed for a binary search . Binary search is started with the middle number first Middle number is found by taking the higest index number plus the lowest and divided by two | . | Binary Search can be represented using a tree as shown below | . Heres an easy way to put it: . binary search fidns the desired element by continuously chopping the search area in half | say the element you are looking for is &#39;f&#39; | . [a b c d e f g h] . We would start in the middle at element &#39;d&#39; | becuase our target is greater than d we will eliminate everything left of &#39;d&#39; including &#39;d&#39; (chopping it in half) . [e f g h] is what now remains . again we would &#39;chop in half&#39; | say we iterate through &#39;g&#39; and &#39;h&#39;, our desired element is still not found so we would eliminate &#39;g; and &#39;h&#39; and continue the process | . [e f] . now we are down to 2 elements | &#39;chopping in half&#39; will give us our desired element | . [f] . | . def binarySearch(array, x, low, high): # Repeat until the pointers low and high meet each other while low &lt;= high: mid = low + (high - low)//2 if array[mid] == x: return mid elif array[mid] &lt; x: low = mid + 1 else: high = mid - 1 return -1 array = [3, 4, 5, 6, 7, 8, 9] x = 4 result = binarySearch(array, x, 0, len(array)-1) if result != -1: print(&quot;Element is present at index &quot; + str(result)) else: print(&quot;Not found&quot;) . Element is present at index 1 . Hacks . Using my example above and steps below, create your own iteration using binary search . Steps . Compare x with the middle element. | If x matches with the middle element, we return the mid index. | Else if x is greater than the mid element, then x can only lie in the right (greater) half subarray after the mid element. Then we apply the algorithm again for the right half. | Else if x is smaller, the target x must lie in the left (lower) half. So we apply the algorithm for the left half. | .",
            "url": "https://ahadb63.github.io/ahadsblog/binary/2020/09/09/3.11-CB-lesson-copy.html",
            "relUrl": "/binary/2020/09/09/3.11-CB-lesson-copy.html",
            "date": " • Sep 9, 2020"
        }
        
    
  
    
        ,"post65": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . ModuleNotFoundError Traceback (most recent call last) /vscode/ahadsblog/_notebooks/2020-02-20-test.ipynb Cell 8 in &lt;cell line: 2&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2020-02-20-test.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; #collapse-hide -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2020-02-20-test.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; import pandas as pd &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2020-02-20-test.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; import altair as alt ModuleNotFoundError: No module named &#39;pandas&#39; . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://ahadb63.github.io/ahadsblog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post66": {
            "title": "Python Test",
            "content": "print(&quot;hi&quot;) . hi .",
            "url": "https://ahadb63.github.io/ahadsblog/kerneltest/2020/02/02/kernelworking2.html",
            "relUrl": "/kerneltest/2020/02/02/kernelworking2.html",
            "date": " • Feb 2, 2020"
        }
        
    
  
    
        ,"post67": {
            "title": "Shell Script Bash Test",
            "content": "echo helloo . helloo .",
            "url": "https://ahadb63.github.io/ahadsblog/kerneltest/2020/02/02/kernel2.html",
            "relUrl": "/kerneltest/2020/02/02/kernel2.html",
            "date": " • Feb 2, 2020"
        }
        
    
  
    
        ,"post68": {
            "title": "API Test",
            "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;Weather app&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot; /&gt; &lt;!-- Google Fonts --&gt; &lt;link rel=&quot;preconnect&quot; href=&quot;https://fonts.gstatic.com&quot;&gt; &lt;link href=&quot;https://fonts.googleapis.com/css2?family=Lora:ital,wght@0,700;1,600&amp;display=swap&quot; rel=&quot;stylesheet&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;img src=&quot;&quot; alt=&quot;&quot; srcset=&quot;&quot; id=&quot;weather-icon&quot;&gt; &lt;div id=&quot;location&quot;&gt;Unable to Fetch Weather&lt;/div&gt; &lt;div class=&quot;desc&quot;&gt;No Information Available.&lt;/div&gt; &lt;div class=&quot;weather&quot;&gt; &lt;div class=&quot;c&quot;&gt;Error&lt;/div&gt; &lt;div class=&quot;circle&quot;&gt;&lt;/div&gt; &lt;div class=&quot;f&quot;&gt;Error&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;info&quot;&gt; &lt;h4&gt;Sunrise: &lt;span class=&quot;sunrise&quot;&gt;No Information Available&lt;/span&gt;&lt;/h4&gt; &lt;h4&gt;Sunset: &lt;span class=&quot;sunset&quot;&gt;No Information Available&lt;/span&gt;&lt;/h4&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src=&quot;scripts.js&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . evalmachine.&lt;anonymous&gt;:1 &lt;!DOCTYPE html&gt; ^ SyntaxError: Unexpected token &lt; at createScript (vm.js:56:10) at Object.runInThisContext (vm.js:97:10) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) at process._tickCallback (internal/process/next_tick.js:104:9) . // OpenWeatherMap API. Do not share it publicly. const api = 6e1adc6d03e5d0ef28a7e75964140dd7; //Replace with your API const iconImg = document.getElementById(&#39;weather-icon&#39;); const loc = document.querySelector(&#39;#location&#39;); const tempC = document.querySelector(&#39;.c&#39;); const tempF = document.querySelector(&#39;.f&#39;); const desc = document.querySelector(&#39;.desc&#39;); const sunriseDOM = document.querySelector(&#39;.sunrise&#39;); const sunsetDOM = document.querySelector(&#39;.sunset&#39;); window.addEventListener(&#39;load&#39;, () =&gt; { let long; let lat; // Accesing Geolocation of User if (navigator.geolocation) { navigator.geolocation.getCurrentPosition((position) =&gt; { // Storing Longitude and Latitude in variables long = position.coords.longitude; lat = position.coords.latitude; const base = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&amp;lon=${long}&amp;appid=${api}&amp;units=metric`; // Using fetch to get data fetch(base) .then((response) =&gt; { return response.json(); }) .then((data) =&gt; { const { temp, feels_like } = data.main; const place = data.name; const { description, icon } = data.weather[0]; const { sunrise, sunset } = data.sys; const iconUrl = `http://openweathermap.org/img/wn/${icon}@2x.png`; const fahrenheit = (temp * 9) / 5 + 32; // Converting Epoch(Unix) time to GMT const sunriseGMT = new Date(sunrise * 1000); const sunsetGMT = new Date(sunset * 1000); // Interacting with DOM to show data iconImg.src = iconUrl; loc.textContent = `${place}`; desc.textContent = `${description}`; tempC.textContent = `${temp.toFixed(2)} °C`; tempF.textContent = `${fahrenheit.toFixed(2)} °F`; sunriseDOM.textContent = `${sunriseGMT.toLocaleDateString()}, ${sunriseGMT.toLocaleTimeString()}`; sunsetDOM.textContent = `${sunsetGMT.toLocaleDateString()}, ${sunsetGMT.toLocaleTimeString()}`; }); }); } }); . evalmachine.&lt;anonymous&gt;:2 const api = 6e1adc6d03e5d0ef28a7e75964140dd7; //Replace with your API ^^^ SyntaxError: Invalid or unexpected token at createScript (vm.js:56:10) at Object.runInThisContext (vm.js:97:10) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) at process._tickCallback (internal/process/next_tick.js:104:9) . * { margin: 0; padding: 0; box-sizing: border-box; } body { font-family: &#39;Lora&#39;, serif; } .container { height: 100vh; width: 100vw; display: flex; align-items: center; justify-content: center; flex-direction: column; background: rgb(251, 242, 133); background: radial-gradient( circle, rgba(251, 242, 133, 0.6334908963585435) 0%, rgba(224, 196, 91, 0.8407738095238095) 35%, rgba(230, 224, 113, 1) 100% ); } .weather { display: flex; flex-direction: row; align-items: center; margin: 15px 0; font-size: 1.5rem; } #location { font-size: 3rem; font-weight: 800; font-style: italic; } .desc { font-size: 1.25rem; text-transform: capitalize; } .circle { background-color: black; border-radius: 50px; height: 15px; width: 15px; margin: 0 15px; } . evalmachine.&lt;anonymous&gt;:1 * { ^ SyntaxError: Unexpected token * at createScript (vm.js:56:10) at Object.runInThisContext (vm.js:97:10) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) at process._tickCallback (internal/process/next_tick.js:104:9) .",
            "url": "https://ahadb63.github.io/ahadsblog/2020/02/02/apii.html",
            "relUrl": "/2020/02/02/apii.html",
            "date": " • Feb 2, 2020"
        }
        
    
  
    
        ,"post69": {
            "title": "Hockey API",
            "content": "import requests url = &quot;https://nhl-stats-and-live-data.p.rapidapi.com/standings&quot; querystring = {&quot;season&quot;:&quot;20032004&quot;,&quot;date&quot;:&quot;2018-01-09&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;3d86dd31a2mshca1f32e22e2396cp1f7302jsn610cf54ceeb6&quot;, &quot;X-RapidAPI-Host&quot;: &quot;nhl-stats-and-live-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) print(&quot;Standings&quot;) standing = response.json().get(&quot;id&quot;) for key, value in id.items(): print(key, value) . {&#34;copyright&#34;:&#34;NHL and the NHL Shield are registered trademarks of the National Hockey League. NHL and NHL team marks are the property of the NHL and its teams. u00a9 NHL 2022. All Rights Reserved.&#34;,&#34;records&#34;:[{&#34;conference&#34;:{&#34;id&#34;:5,&#34;link&#34;:&#34;/api/v1/conferences/5&#34;,&#34;name&#34;:&#34;Western&#34;},&#34;division&#34;:{&#34;abbreviation&#34;:&#34;C&#34;,&#34;id&#34;:16,&#34;link&#34;:&#34;/api/v1/divisions/16&#34;,&#34;name&#34;:&#34;Central&#34;,&#34;nameShort&#34;:&#34;CEN&#34;},&#34;league&#34;:{&#34;id&#34;:133,&#34;link&#34;:&#34;/api/v1/league/133&#34;,&#34;name&#34;:&#34;National Hockey League&#34;},&#34;season&#34;:&#34;20032004&#34;,&#34;standingsType&#34;:&#34;regularSeason&#34;,&#34;teamRecords&#34;:[{&#34;clinchIndicator&#34;:&#34;p&#34;,&#34;conferenceHomeRank&#34;:&#34;4&#34;,&#34;conferenceL10Rank&#34;:&#34;11&#34;,&#34;conferenceRank&#34;:&#34;1&#34;,&#34;conferenceRoadRank&#34;:&#34;1&#34;,&#34;divisionHomeRank&#34;:&#34;3&#34;,&#34;divisionL10Rank&#34;:&#34;4&#34;,&#34;divisionRank&#34;:&#34;1&#34;,&#34;divisionRoadRank&#34;:&#34;1&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:211,&#34;goalsScored&#34;:267,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;7&#34;,&#34;leagueL10Rank&#34;:&#34;20&#34;,&#34;leagueRank&#34;:&#34;1&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:18,&#34;ot&#34;:11,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:53},&#34;leagueRoadRank&#34;:&#34;1&#34;,&#34;points&#34;:117,&#34;pointsPercentage&#34;:0.7134146341463414,&#34;ppConferenceRank&#34;:&#34;1&#34;,&#34;ppDivisionRank&#34;:&#34;1&#34;,&#34;ppLeagueRank&#34;:&#34;1&#34;,&#34;row&#34;:47,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W2&#34;,&#34;streakNumber&#34;:2,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:18,&#34;link&#34;:&#34;/api/v1/teams/18&#34;,&#34;name&#34;:&#34;Nashville Predators&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;1&#34;,&#34;conferenceL10Rank&#34;:&#34;1&#34;,&#34;conferenceRank&#34;:&#34;2&#34;,&#34;conferenceRoadRank&#34;:&#34;4&#34;,&#34;divisionHomeRank&#34;:&#34;1&#34;,&#34;divisionL10Rank&#34;:&#34;1&#34;,&#34;divisionRank&#34;:&#34;2&#34;,&#34;divisionRoadRank&#34;:&#34;2&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:218,&#34;goalsScored&#34;:277,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;1&#34;,&#34;leagueL10Rank&#34;:&#34;1&#34;,&#34;leagueRank&#34;:&#34;2&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:20,&#34;ot&#34;:10,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:52},&#34;leagueRoadRank&#34;:&#34;6&#34;,&#34;points&#34;:114,&#34;pointsPercentage&#34;:0.6951219512195121,&#34;ppConferenceRank&#34;:&#34;2&#34;,&#34;ppDivisionRank&#34;:&#34;2&#34;,&#34;ppLeagueRank&#34;:&#34;2&#34;,&#34;row&#34;:48,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W5&#34;,&#34;streakNumber&#34;:5,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:52,&#34;link&#34;:&#34;/api/v1/teams/52&#34;,&#34;name&#34;:&#34;Winnipeg Jets&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;2&#34;,&#34;conferenceL10Rank&#34;:&#34;5&#34;,&#34;conferenceRank&#34;:&#34;4&#34;,&#34;conferenceRoadRank&#34;:&#34;9&#34;,&#34;divisionHomeRank&#34;:&#34;2&#34;,&#34;divisionL10Rank&#34;:&#34;2&#34;,&#34;divisionRank&#34;:&#34;3&#34;,&#34;divisionRoadRank&#34;:&#34;4&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:232,&#34;goalsScored&#34;:253,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;3&#34;,&#34;leagueL10Rank&#34;:&#34;13&#34;,&#34;leagueRank&#34;:&#34;8&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:26,&#34;ot&#34;:11,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:45},&#34;leagueRoadRank&#34;:&#34;17&#34;,&#34;points&#34;:101,&#34;pointsPercentage&#34;:0.6158536585365854,&#34;ppConferenceRank&#34;:&#34;4&#34;,&#34;ppDivisionRank&#34;:&#34;3&#34;,&#34;ppLeagueRank&#34;:&#34;8&#34;,&#34;row&#34;:42,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:30,&#34;link&#34;:&#34;/api/v1/teams/30&#34;,&#34;name&#34;:&#34;Minnesota Wild&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;5&#34;,&#34;conferenceL10Rank&#34;:&#34;12&#34;,&#34;conferenceRank&#34;:&#34;8&#34;,&#34;conferenceRoadRank&#34;:&#34;11&#34;,&#34;divisionHomeRank&#34;:&#34;4&#34;,&#34;divisionL10Rank&#34;:&#34;5&#34;,&#34;divisionRank&#34;:&#34;4&#34;,&#34;divisionRoadRank&#34;:&#34;6&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:237,&#34;goalsScored&#34;:257,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;9&#34;,&#34;leagueL10Rank&#34;:&#34;24&#34;,&#34;leagueRank&#34;:&#34;17&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:30,&#34;ot&#34;:9,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:43},&#34;leagueRoadRank&#34;:&#34;22&#34;,&#34;points&#34;:95,&#34;pointsPercentage&#34;:0.5792682926829268,&#34;ppConferenceRank&#34;:&#34;8&#34;,&#34;ppDivisionRank&#34;:&#34;4&#34;,&#34;ppLeagueRank&#34;:&#34;17&#34;,&#34;row&#34;:41,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:21,&#34;link&#34;:&#34;/api/v1/teams/21&#34;,&#34;name&#34;:&#34;Colorado Avalanche&#34;},&#34;wildCardRank&#34;:&#34;2&#34;},{&#34;conferenceHomeRank&#34;:&#34;10&#34;,&#34;conferenceL10Rank&#34;:&#34;8&#34;,&#34;conferenceRank&#34;:&#34;9&#34;,&#34;conferenceRoadRank&#34;:&#34;6&#34;,&#34;divisionHomeRank&#34;:&#34;6&#34;,&#34;divisionL10Rank&#34;:&#34;3&#34;,&#34;divisionRank&#34;:&#34;5&#34;,&#34;divisionRoadRank&#34;:&#34;3&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:222,&#34;goalsScored&#34;:226,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;19&#34;,&#34;leagueL10Rank&#34;:&#34;17&#34;,&#34;leagueRank&#34;:&#34;18&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:32,&#34;ot&#34;:6,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:44},&#34;leagueRoadRank&#34;:&#34;11&#34;,&#34;points&#34;:94,&#34;pointsPercentage&#34;:0.573170731707317,&#34;ppConferenceRank&#34;:&#34;9&#34;,&#34;ppDivisionRank&#34;:&#34;5&#34;,&#34;ppLeagueRank&#34;:&#34;18&#34;,&#34;row&#34;:41,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:19,&#34;link&#34;:&#34;/api/v1/teams/19&#34;,&#34;name&#34;:&#34;St. Louis Blues&#34;},&#34;wildCardRank&#34;:&#34;3&#34;},{&#34;conferenceHomeRank&#34;:&#34;7&#34;,&#34;conferenceL10Rank&#34;:&#34;13&#34;,&#34;conferenceRank&#34;:&#34;10&#34;,&#34;conferenceRoadRank&#34;:&#34;10&#34;,&#34;divisionHomeRank&#34;:&#34;5&#34;,&#34;divisionL10Rank&#34;:&#34;6&#34;,&#34;divisionRank&#34;:&#34;6&#34;,&#34;divisionRoadRank&#34;:&#34;5&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:225,&#34;goalsScored&#34;:235,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;13&#34;,&#34;leagueL10Rank&#34;:&#34;25&#34;,&#34;leagueRank&#34;:&#34;19&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:32,&#34;ot&#34;:8,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:42},&#34;leagueRoadRank&#34;:&#34;21&#34;,&#34;points&#34;:92,&#34;pointsPercentage&#34;:0.5609756097560976,&#34;ppConferenceRank&#34;:&#34;10&#34;,&#34;ppDivisionRank&#34;:&#34;6&#34;,&#34;ppLeagueRank&#34;:&#34;19&#34;,&#34;row&#34;:38,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:25,&#34;link&#34;:&#34;/api/v1/teams/25&#34;,&#34;name&#34;:&#34;Dallas Stars&#34;},&#34;wildCardRank&#34;:&#34;4&#34;},{&#34;conferenceHomeRank&#34;:&#34;12&#34;,&#34;conferenceL10Rank&#34;:&#34;14&#34;,&#34;conferenceRank&#34;:&#34;13&#34;,&#34;conferenceRoadRank&#34;:&#34;13&#34;,&#34;divisionHomeRank&#34;:&#34;7&#34;,&#34;divisionL10Rank&#34;:&#34;7&#34;,&#34;divisionRank&#34;:&#34;7&#34;,&#34;divisionRoadRank&#34;:&#34;7&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:256,&#34;goalsScored&#34;:229,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;25&#34;,&#34;leagueL10Rank&#34;:&#34;26&#34;,&#34;leagueRank&#34;:&#34;25&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:39,&#34;ot&#34;:10,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:33},&#34;leagueRoadRank&#34;:&#34;24&#34;,&#34;points&#34;:76,&#34;pointsPercentage&#34;:0.4634146341463415,&#34;ppConferenceRank&#34;:&#34;13&#34;,&#34;ppDivisionRank&#34;:&#34;7&#34;,&#34;ppLeagueRank&#34;:&#34;25&#34;,&#34;row&#34;:32,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L2&#34;,&#34;streakNumber&#34;:2,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:16,&#34;link&#34;:&#34;/api/v1/teams/16&#34;,&#34;name&#34;:&#34;Chicago Blackhawks&#34;},&#34;wildCardRank&#34;:&#34;7&#34;}]},{&#34;conference&#34;:{&#34;id&#34;:6,&#34;link&#34;:&#34;/api/v1/conferences/6&#34;,&#34;name&#34;:&#34;Eastern&#34;},&#34;division&#34;:{&#34;abbreviation&#34;:&#34;A&#34;,&#34;id&#34;:17,&#34;link&#34;:&#34;/api/v1/divisions/17&#34;,&#34;name&#34;:&#34;Atlantic&#34;,&#34;nameShort&#34;:&#34;ATL&#34;},&#34;league&#34;:{&#34;id&#34;:133,&#34;link&#34;:&#34;/api/v1/league/133&#34;,&#34;name&#34;:&#34;National Hockey League&#34;},&#34;season&#34;:&#34;20032004&#34;,&#34;standingsType&#34;:&#34;regularSeason&#34;,&#34;teamRecords&#34;:[{&#34;clinchIndicator&#34;:&#34;z&#34;,&#34;conferenceHomeRank&#34;:&#34;3&#34;,&#34;conferenceL10Rank&#34;:&#34;9&#34;,&#34;conferenceRank&#34;:&#34;1&#34;,&#34;conferenceRoadRank&#34;:&#34;1&#34;,&#34;divisionHomeRank&#34;:&#34;2&#34;,&#34;divisionL10Rank&#34;:&#34;4&#34;,&#34;divisionRank&#34;:&#34;1&#34;,&#34;divisionRoadRank&#34;:&#34;1&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:236,&#34;goalsScored&#34;:296,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;6&#34;,&#34;leagueL10Rank&#34;:&#34;16&#34;,&#34;leagueRank&#34;:&#34;3&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:23,&#34;ot&#34;:5,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:54},&#34;leagueRoadRank&#34;:&#34;2&#34;,&#34;points&#34;:113,&#34;pointsPercentage&#34;:0.6890243902439024,&#34;ppConferenceRank&#34;:&#34;1&#34;,&#34;ppDivisionRank&#34;:&#34;1&#34;,&#34;ppLeagueRank&#34;:&#34;3&#34;,&#34;row&#34;:48,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;OT1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;ot&#34;},&#34;team&#34;:{&#34;id&#34;:14,&#34;link&#34;:&#34;/api/v1/teams/14&#34;,&#34;name&#34;:&#34;Tampa Bay Lightning&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;2&#34;,&#34;conferenceL10Rank&#34;:&#34;8&#34;,&#34;conferenceRank&#34;:&#34;2&#34;,&#34;conferenceRoadRank&#34;:&#34;2&#34;,&#34;divisionHomeRank&#34;:&#34;1&#34;,&#34;divisionL10Rank&#34;:&#34;3&#34;,&#34;divisionRank&#34;:&#34;2&#34;,&#34;divisionRoadRank&#34;:&#34;2&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:214,&#34;goalsScored&#34;:270,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;4&#34;,&#34;leagueL10Rank&#34;:&#34;12&#34;,&#34;leagueRank&#34;:&#34;4&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:20,&#34;ot&#34;:12,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:50},&#34;leagueRoadRank&#34;:&#34;3&#34;,&#34;points&#34;:112,&#34;pointsPercentage&#34;:0.6829268292682927,&#34;ppConferenceRank&#34;:&#34;2&#34;,&#34;ppDivisionRank&#34;:&#34;2&#34;,&#34;ppLeagueRank&#34;:&#34;4&#34;,&#34;row&#34;:47,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:6,&#34;link&#34;:&#34;/api/v1/teams/6&#34;,&#34;name&#34;:&#34;Boston Bruins&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;4&#34;,&#34;conferenceL10Rank&#34;:&#34;7&#34;,&#34;conferenceRank&#34;:&#34;4&#34;,&#34;conferenceRoadRank&#34;:&#34;6&#34;,&#34;divisionHomeRank&#34;:&#34;3&#34;,&#34;divisionL10Rank&#34;:&#34;2&#34;,&#34;divisionRank&#34;:&#34;3&#34;,&#34;divisionRoadRank&#34;:&#34;3&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:232,&#34;goalsScored&#34;:277,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;8&#34;,&#34;leagueL10Rank&#34;:&#34;11&#34;,&#34;leagueRank&#34;:&#34;7&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:26,&#34;ot&#34;:7,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:49},&#34;leagueRoadRank&#34;:&#34;13&#34;,&#34;points&#34;:105,&#34;pointsPercentage&#34;:0.6402439024390244,&#34;ppConferenceRank&#34;:&#34;4&#34;,&#34;ppDivisionRank&#34;:&#34;3&#34;,&#34;ppLeagueRank&#34;:&#34;7&#34;,&#34;row&#34;:42,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:10,&#34;link&#34;:&#34;/api/v1/teams/10&#34;,&#34;name&#34;:&#34;Toronto Maple Leafs&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;conferenceHomeRank&#34;:&#34;6&#34;,&#34;conferenceL10Rank&#34;:&#34;2&#34;,&#34;conferenceRank&#34;:&#34;9&#34;,&#34;conferenceRoadRank&#34;:&#34;8&#34;,&#34;divisionHomeRank&#34;:&#34;4&#34;,&#34;divisionL10Rank&#34;:&#34;1&#34;,&#34;divisionRank&#34;:&#34;4&#34;,&#34;divisionRoadRank&#34;:&#34;4&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:246,&#34;goalsScored&#34;:248,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;12&#34;,&#34;leagueL10Rank&#34;:&#34;4&#34;,&#34;leagueRank&#34;:&#34;16&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:30,&#34;ot&#34;:8,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:44},&#34;leagueRoadRank&#34;:&#34;16&#34;,&#34;points&#34;:96,&#34;pointsPercentage&#34;:0.5853658536585366,&#34;ppConferenceRank&#34;:&#34;9&#34;,&#34;ppDivisionRank&#34;:&#34;4&#34;,&#34;ppLeagueRank&#34;:&#34;16&#34;,&#34;row&#34;:41,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W5&#34;,&#34;streakNumber&#34;:5,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:13,&#34;link&#34;:&#34;/api/v1/teams/13&#34;,&#34;name&#34;:&#34;Florida Panthers&#34;},&#34;wildCardRank&#34;:&#34;3&#34;},{&#34;conferenceHomeRank&#34;:&#34;14&#34;,&#34;conferenceL10Rank&#34;:&#34;12&#34;,&#34;conferenceRank&#34;:&#34;13&#34;,&#34;conferenceRoadRank&#34;:&#34;13&#34;,&#34;divisionHomeRank&#34;:&#34;6&#34;,&#34;divisionL10Rank&#34;:&#34;5&#34;,&#34;divisionRank&#34;:&#34;5&#34;,&#34;divisionRoadRank&#34;:&#34;6&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:255,&#34;goalsScored&#34;:217,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;26&#34;,&#34;leagueL10Rank&#34;:&#34;23&#34;,&#34;leagueRank&#34;:&#34;27&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:39,&#34;ot&#34;:13,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:30},&#34;leagueRoadRank&#34;:&#34;28&#34;,&#34;points&#34;:73,&#34;pointsPercentage&#34;:0.4451219512195122,&#34;ppConferenceRank&#34;:&#34;13&#34;,&#34;ppDivisionRank&#34;:&#34;5&#34;,&#34;ppLeagueRank&#34;:&#34;27&#34;,&#34;row&#34;:25,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;OT1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;ot&#34;},&#34;team&#34;:{&#34;id&#34;:17,&#34;link&#34;:&#34;/api/v1/teams/17&#34;,&#34;name&#34;:&#34;Detroit Red Wings&#34;},&#34;wildCardRank&#34;:&#34;7&#34;},{&#34;conferenceHomeRank&#34;:&#34;11&#34;,&#34;conferenceL10Rank&#34;:&#34;13&#34;,&#34;conferenceRank&#34;:&#34;14&#34;,&#34;conferenceRoadRank&#34;:&#34;16&#34;,&#34;divisionHomeRank&#34;:&#34;5&#34;,&#34;divisionL10Rank&#34;:&#34;6&#34;,&#34;divisionRank&#34;:&#34;6&#34;,&#34;divisionRoadRank&#34;:&#34;8&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:264,&#34;goalsScored&#34;:209,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;21&#34;,&#34;leagueL10Rank&#34;:&#34;27&#34;,&#34;leagueRank&#34;:&#34;28&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:40,&#34;ot&#34;:13,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:29},&#34;leagueRoadRank&#34;:&#34;31&#34;,&#34;points&#34;:71,&#34;pointsPercentage&#34;:0.4329268292682927,&#34;ppConferenceRank&#34;:&#34;14&#34;,&#34;ppDivisionRank&#34;:&#34;6&#34;,&#34;ppLeagueRank&#34;:&#34;28&#34;,&#34;row&#34;:27,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:8,&#34;link&#34;:&#34;/api/v1/teams/8&#34;,&#34;name&#34;:&#34;Montr u00e9al Canadiens&#34;},&#34;wildCardRank&#34;:&#34;8&#34;},{&#34;conferenceHomeRank&#34;:&#34;15&#34;,&#34;conferenceL10Rank&#34;:&#34;16&#34;,&#34;conferenceRank&#34;:&#34;15&#34;,&#34;conferenceRoadRank&#34;:&#34;15&#34;,&#34;divisionHomeRank&#34;:&#34;7&#34;,&#34;divisionL10Rank&#34;:&#34;8&#34;,&#34;divisionRank&#34;:&#34;7&#34;,&#34;divisionRoadRank&#34;:&#34;7&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:291,&#34;goalsScored&#34;:221,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;29&#34;,&#34;leagueL10Rank&#34;:&#34;30&#34;,&#34;leagueRank&#34;:&#34;30&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:43,&#34;ot&#34;:11,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:28},&#34;leagueRoadRank&#34;:&#34;30&#34;,&#34;points&#34;:67,&#34;pointsPercentage&#34;:0.40853658536585363,&#34;ppConferenceRank&#34;:&#34;15&#34;,&#34;ppDivisionRank&#34;:&#34;7&#34;,&#34;ppLeagueRank&#34;:&#34;30&#34;,&#34;row&#34;:26,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L2&#34;,&#34;streakNumber&#34;:2,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:9,&#34;link&#34;:&#34;/api/v1/teams/9&#34;,&#34;name&#34;:&#34;Ottawa Senators&#34;},&#34;wildCardRank&#34;:&#34;9&#34;},{&#34;conferenceHomeRank&#34;:&#34;16&#34;,&#34;conferenceL10Rank&#34;:&#34;15&#34;,&#34;conferenceRank&#34;:&#34;16&#34;,&#34;conferenceRoadRank&#34;:&#34;12&#34;,&#34;divisionHomeRank&#34;:&#34;8&#34;,&#34;divisionL10Rank&#34;:&#34;7&#34;,&#34;divisionRank&#34;:&#34;8&#34;,&#34;divisionRoadRank&#34;:&#34;5&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:280,&#34;goalsScored&#34;:199,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;31&#34;,&#34;leagueL10Rank&#34;:&#34;29&#34;,&#34;leagueRank&#34;:&#34;31&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:45,&#34;ot&#34;:12,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:25},&#34;leagueRoadRank&#34;:&#34;25&#34;,&#34;points&#34;:62,&#34;pointsPercentage&#34;:0.3780487804878049,&#34;ppConferenceRank&#34;:&#34;16&#34;,&#34;ppDivisionRank&#34;:&#34;8&#34;,&#34;ppLeagueRank&#34;:&#34;31&#34;,&#34;row&#34;:24,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L4&#34;,&#34;streakNumber&#34;:4,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:7,&#34;link&#34;:&#34;/api/v1/teams/7&#34;,&#34;name&#34;:&#34;Buffalo Sabres&#34;},&#34;wildCardRank&#34;:&#34;10&#34;}]},{&#34;conference&#34;:{&#34;id&#34;:5,&#34;link&#34;:&#34;/api/v1/conferences/5&#34;,&#34;name&#34;:&#34;Western&#34;},&#34;division&#34;:{&#34;abbreviation&#34;:&#34;P&#34;,&#34;id&#34;:15,&#34;link&#34;:&#34;/api/v1/divisions/15&#34;,&#34;name&#34;:&#34;Pacific&#34;,&#34;nameShort&#34;:&#34;PAC&#34;},&#34;league&#34;:{&#34;id&#34;:133,&#34;link&#34;:&#34;/api/v1/league/133&#34;,&#34;name&#34;:&#34;National Hockey League&#34;},&#34;season&#34;:&#34;20032004&#34;,&#34;standingsType&#34;:&#34;regularSeason&#34;,&#34;teamRecords&#34;:[{&#34;clinchIndicator&#34;:&#34;y&#34;,&#34;conferenceHomeRank&#34;:&#34;3&#34;,&#34;conferenceL10Rank&#34;:&#34;6&#34;,&#34;conferenceRank&#34;:&#34;3&#34;,&#34;conferenceRoadRank&#34;:&#34;3&#34;,&#34;divisionHomeRank&#34;:&#34;1&#34;,&#34;divisionL10Rank&#34;:&#34;4&#34;,&#34;divisionRank&#34;:&#34;1&#34;,&#34;divisionRoadRank&#34;:&#34;2&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:228,&#34;goalsScored&#34;:272,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;5&#34;,&#34;leagueL10Rank&#34;:&#34;14&#34;,&#34;leagueRank&#34;:&#34;5&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:24,&#34;ot&#34;:7,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:51},&#34;leagueRoadRank&#34;:&#34;5&#34;,&#34;points&#34;:109,&#34;pointsPercentage&#34;:0.6646341463414634,&#34;ppConferenceRank&#34;:&#34;3&#34;,&#34;ppDivisionRank&#34;:&#34;1&#34;,&#34;ppLeagueRank&#34;:&#34;5&#34;,&#34;row&#34;:47,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L2&#34;,&#34;streakNumber&#34;:2,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:54,&#34;link&#34;:&#34;/api/v1/teams/54&#34;,&#34;name&#34;:&#34;Vegas Golden Knights&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;6&#34;,&#34;conferenceL10Rank&#34;:&#34;2&#34;,&#34;conferenceRank&#34;:&#34;5&#34;,&#34;conferenceRoadRank&#34;:&#34;8&#34;,&#34;divisionHomeRank&#34;:&#34;2&#34;,&#34;divisionL10Rank&#34;:&#34;1&#34;,&#34;divisionRank&#34;:&#34;2&#34;,&#34;divisionRoadRank&#34;:&#34;5&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:216,&#34;goalsScored&#34;:235,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;11&#34;,&#34;leagueL10Rank&#34;:&#34;2&#34;,&#34;leagueRank&#34;:&#34;9&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:25,&#34;ot&#34;:13,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:44},&#34;leagueRoadRank&#34;:&#34;14&#34;,&#34;points&#34;:101,&#34;pointsPercentage&#34;:0.6158536585365854,&#34;ppConferenceRank&#34;:&#34;5&#34;,&#34;ppDivisionRank&#34;:&#34;2&#34;,&#34;ppLeagueRank&#34;:&#34;9&#34;,&#34;row&#34;:40,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W5&#34;,&#34;streakNumber&#34;:5,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:24,&#34;link&#34;:&#34;/api/v1/teams/24&#34;,&#34;name&#34;:&#34;Anaheim Ducks&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;8&#34;,&#34;conferenceL10Rank&#34;:&#34;9&#34;,&#34;conferenceRank&#34;:&#34;6&#34;,&#34;conferenceRoadRank&#34;:&#34;5&#34;,&#34;divisionHomeRank&#34;:&#34;3&#34;,&#34;divisionL10Rank&#34;:&#34;6&#34;,&#34;divisionRank&#34;:&#34;3&#34;,&#34;divisionRoadRank&#34;:&#34;3&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:229,&#34;goalsScored&#34;:252,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;15&#34;,&#34;leagueL10Rank&#34;:&#34;18&#34;,&#34;leagueRank&#34;:&#34;11&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:27,&#34;ot&#34;:10,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:45},&#34;leagueRoadRank&#34;:&#34;10&#34;,&#34;points&#34;:100,&#34;pointsPercentage&#34;:0.6097560975609756,&#34;ppConferenceRank&#34;:&#34;6&#34;,&#34;ppDivisionRank&#34;:&#34;3&#34;,&#34;ppLeagueRank&#34;:&#34;10&#34;,&#34;row&#34;:40,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:28,&#34;link&#34;:&#34;/api/v1/teams/28&#34;,&#34;name&#34;:&#34;San Jose Sharks&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;9&#34;,&#34;conferenceL10Rank&#34;:&#34;3&#34;,&#34;conferenceRank&#34;:&#34;7&#34;,&#34;conferenceRoadRank&#34;:&#34;2&#34;,&#34;divisionHomeRank&#34;:&#34;4&#34;,&#34;divisionL10Rank&#34;:&#34;2&#34;,&#34;divisionRank&#34;:&#34;4&#34;,&#34;divisionRoadRank&#34;:&#34;1&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:203,&#34;goalsScored&#34;:239,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;18&#34;,&#34;leagueL10Rank&#34;:&#34;8&#34;,&#34;leagueRank&#34;:&#34;12&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:29,&#34;ot&#34;:8,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:45},&#34;leagueRoadRank&#34;:&#34;4&#34;,&#34;points&#34;:98,&#34;pointsPercentage&#34;:0.5975609756097561,&#34;ppConferenceRank&#34;:&#34;7&#34;,&#34;ppDivisionRank&#34;:&#34;4&#34;,&#34;ppLeagueRank&#34;:&#34;12&#34;,&#34;row&#34;:43,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:26,&#34;link&#34;:&#34;/api/v1/teams/26&#34;,&#34;name&#34;:&#34;Los Angeles Kings&#34;},&#34;wildCardRank&#34;:&#34;1&#34;},{&#34;conferenceHomeRank&#34;:&#34;14&#34;,&#34;conferenceL10Rank&#34;:&#34;15&#34;,&#34;conferenceRank&#34;:&#34;11&#34;,&#34;conferenceRoadRank&#34;:&#34;7&#34;,&#34;divisionHomeRank&#34;:&#34;7&#34;,&#34;divisionL10Rank&#34;:&#34;8&#34;,&#34;divisionRank&#34;:&#34;5&#34;,&#34;divisionRoadRank&#34;:&#34;4&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:248,&#34;goalsScored&#34;:218,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;28&#34;,&#34;leagueL10Rank&#34;:&#34;31&#34;,&#34;leagueRank&#34;:&#34;20&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:35,&#34;ot&#34;:10,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:37},&#34;leagueRoadRank&#34;:&#34;12&#34;,&#34;points&#34;:84,&#34;pointsPercentage&#34;:0.5121951219512195,&#34;ppConferenceRank&#34;:&#34;11&#34;,&#34;ppDivisionRank&#34;:&#34;5&#34;,&#34;ppLeagueRank&#34;:&#34;20&#34;,&#34;row&#34;:35,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:20,&#34;link&#34;:&#34;/api/v1/teams/20&#34;,&#34;name&#34;:&#34;Calgary Flames&#34;},&#34;wildCardRank&#34;:&#34;5&#34;},{&#34;conferenceHomeRank&#34;:&#34;11&#34;,&#34;conferenceL10Rank&#34;:&#34;10&#34;,&#34;conferenceRank&#34;:&#34;12&#34;,&#34;conferenceRoadRank&#34;:&#34;12&#34;,&#34;divisionHomeRank&#34;:&#34;5&#34;,&#34;divisionL10Rank&#34;:&#34;7&#34;,&#34;divisionRank&#34;:&#34;6&#34;,&#34;divisionRoadRank&#34;:&#34;6&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:263,&#34;goalsScored&#34;:234,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;24&#34;,&#34;leagueL10Rank&#34;:&#34;19&#34;,&#34;leagueRank&#34;:&#34;23&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:40,&#34;ot&#34;:6,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:36},&#34;leagueRoadRank&#34;:&#34;23&#34;,&#34;points&#34;:78,&#34;pointsPercentage&#34;:0.47560975609756095,&#34;ppConferenceRank&#34;:&#34;12&#34;,&#34;ppDivisionRank&#34;:&#34;6&#34;,&#34;ppLeagueRank&#34;:&#34;23&#34;,&#34;row&#34;:31,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W2&#34;,&#34;streakNumber&#34;:2,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:22,&#34;link&#34;:&#34;/api/v1/teams/22&#34;,&#34;name&#34;:&#34;Edmonton Oilers&#34;},&#34;wildCardRank&#34;:&#34;6&#34;},{&#34;conferenceHomeRank&#34;:&#34;13&#34;,&#34;conferenceL10Rank&#34;:&#34;4&#34;,&#34;conferenceRank&#34;:&#34;14&#34;,&#34;conferenceRoadRank&#34;:&#34;14&#34;,&#34;divisionHomeRank&#34;:&#34;6&#34;,&#34;divisionL10Rank&#34;:&#34;3&#34;,&#34;divisionRank&#34;:&#34;7&#34;,&#34;divisionRoadRank&#34;:&#34;7&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:264,&#34;goalsScored&#34;:218,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;27&#34;,&#34;leagueL10Rank&#34;:&#34;9&#34;,&#34;leagueRank&#34;:&#34;26&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:40,&#34;ot&#34;:11,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:31},&#34;leagueRoadRank&#34;:&#34;26&#34;,&#34;points&#34;:73,&#34;pointsPercentage&#34;:0.4451219512195122,&#34;ppConferenceRank&#34;:&#34;14&#34;,&#34;ppDivisionRank&#34;:&#34;7&#34;,&#34;ppLeagueRank&#34;:&#34;26&#34;,&#34;row&#34;:31,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;OT1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;ot&#34;},&#34;team&#34;:{&#34;id&#34;:23,&#34;link&#34;:&#34;/api/v1/teams/23&#34;,&#34;name&#34;:&#34;Vancouver Canucks&#34;},&#34;wildCardRank&#34;:&#34;8&#34;},{&#34;conferenceHomeRank&#34;:&#34;15&#34;,&#34;conferenceL10Rank&#34;:&#34;7&#34;,&#34;conferenceRank&#34;:&#34;15&#34;,&#34;conferenceRoadRank&#34;:&#34;15&#34;,&#34;divisionHomeRank&#34;:&#34;8&#34;,&#34;divisionL10Rank&#34;:&#34;5&#34;,&#34;divisionRank&#34;:&#34;8&#34;,&#34;divisionRoadRank&#34;:&#34;8&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:256,&#34;goalsScored&#34;:208,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;30&#34;,&#34;leagueL10Rank&#34;:&#34;15&#34;,&#34;leagueRank&#34;:&#34;29&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:41,&#34;ot&#34;:12,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:29},&#34;leagueRoadRank&#34;:&#34;27&#34;,&#34;points&#34;:70,&#34;pointsPercentage&#34;:0.4268292682926829,&#34;ppConferenceRank&#34;:&#34;15&#34;,&#34;ppDivisionRank&#34;:&#34;8&#34;,&#34;ppLeagueRank&#34;:&#34;29&#34;,&#34;row&#34;:27,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:53,&#34;link&#34;:&#34;/api/v1/teams/53&#34;,&#34;name&#34;:&#34;Arizona Coyotes&#34;},&#34;wildCardRank&#34;:&#34;9&#34;}]},{&#34;conference&#34;:{&#34;id&#34;:6,&#34;link&#34;:&#34;/api/v1/conferences/6&#34;,&#34;name&#34;:&#34;Eastern&#34;},&#34;division&#34;:{&#34;abbreviation&#34;:&#34;M&#34;,&#34;id&#34;:18,&#34;link&#34;:&#34;/api/v1/divisions/18&#34;,&#34;name&#34;:&#34;Metropolitan&#34;,&#34;nameShort&#34;:&#34;Metro&#34;},&#34;league&#34;:{&#34;id&#34;:133,&#34;link&#34;:&#34;/api/v1/league/133&#34;,&#34;name&#34;:&#34;National Hockey League&#34;},&#34;season&#34;:&#34;20032004&#34;,&#34;standingsType&#34;:&#34;regularSeason&#34;,&#34;teamRecords&#34;:[{&#34;clinchIndicator&#34;:&#34;y&#34;,&#34;conferenceHomeRank&#34;:&#34;5&#34;,&#34;conferenceL10Rank&#34;:&#34;1&#34;,&#34;conferenceRank&#34;:&#34;3&#34;,&#34;conferenceRoadRank&#34;:&#34;4&#34;,&#34;divisionHomeRank&#34;:&#34;2&#34;,&#34;divisionL10Rank&#34;:&#34;1&#34;,&#34;divisionRank&#34;:&#34;1&#34;,&#34;divisionRoadRank&#34;:&#34;2&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:239,&#34;goalsScored&#34;:259,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;10&#34;,&#34;leagueL10Rank&#34;:&#34;3&#34;,&#34;leagueRank&#34;:&#34;6&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:26,&#34;ot&#34;:7,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:49},&#34;leagueRoadRank&#34;:&#34;8&#34;,&#34;points&#34;:105,&#34;pointsPercentage&#34;:0.6402439024390244,&#34;ppConferenceRank&#34;:&#34;3&#34;,&#34;ppDivisionRank&#34;:&#34;1&#34;,&#34;ppLeagueRank&#34;:&#34;6&#34;,&#34;row&#34;:46,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:15,&#34;link&#34;:&#34;/api/v1/teams/15&#34;,&#34;name&#34;:&#34;Washington Capitals&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;1&#34;,&#34;conferenceL10Rank&#34;:&#34;6&#34;,&#34;conferenceRank&#34;:&#34;5&#34;,&#34;conferenceRoadRank&#34;:&#34;10&#34;,&#34;divisionHomeRank&#34;:&#34;1&#34;,&#34;divisionL10Rank&#34;:&#34;5&#34;,&#34;divisionRank&#34;:&#34;2&#34;,&#34;divisionRoadRank&#34;:&#34;6&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:250,&#34;goalsScored&#34;:272,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;2&#34;,&#34;leagueL10Rank&#34;:&#34;10&#34;,&#34;leagueRank&#34;:&#34;10&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:29,&#34;ot&#34;:6,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:47},&#34;leagueRoadRank&#34;:&#34;19&#34;,&#34;points&#34;:100,&#34;pointsPercentage&#34;:0.6097560975609756,&#34;ppConferenceRank&#34;:&#34;5&#34;,&#34;ppDivisionRank&#34;:&#34;2&#34;,&#34;ppLeagueRank&#34;:&#34;11&#34;,&#34;row&#34;:45,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W2&#34;,&#34;streakNumber&#34;:2,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:5,&#34;link&#34;:&#34;/api/v1/teams/5&#34;,&#34;name&#34;:&#34;Pittsburgh Penguins&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;8&#34;,&#34;conferenceL10Rank&#34;:&#34;4&#34;,&#34;conferenceRank&#34;:&#34;6&#34;,&#34;conferenceRoadRank&#34;:&#34;3&#34;,&#34;divisionHomeRank&#34;:&#34;4&#34;,&#34;divisionL10Rank&#34;:&#34;3&#34;,&#34;divisionRank&#34;:&#34;3&#34;,&#34;divisionRoadRank&#34;:&#34;1&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:243,&#34;goalsScored&#34;:251,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;16&#34;,&#34;leagueL10Rank&#34;:&#34;6&#34;,&#34;leagueRank&#34;:&#34;13&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:26,&#34;ot&#34;:14,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:42},&#34;leagueRoadRank&#34;:&#34;7&#34;,&#34;points&#34;:98,&#34;pointsPercentage&#34;:0.5975609756097561,&#34;ppConferenceRank&#34;:&#34;6&#34;,&#34;ppDivisionRank&#34;:&#34;3&#34;,&#34;ppLeagueRank&#34;:&#34;13&#34;,&#34;row&#34;:40,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W2&#34;,&#34;streakNumber&#34;:2,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:4,&#34;link&#34;:&#34;/api/v1/teams/4&#34;,&#34;name&#34;:&#34;Philadelphia Flyers&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;7&#34;,&#34;conferenceL10Rank&#34;:&#34;5&#34;,&#34;conferenceRank&#34;:&#34;7&#34;,&#34;conferenceRoadRank&#34;:&#34;7&#34;,&#34;divisionHomeRank&#34;:&#34;3&#34;,&#34;divisionL10Rank&#34;:&#34;4&#34;,&#34;divisionRank&#34;:&#34;4&#34;,&#34;divisionRoadRank&#34;:&#34;4&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:230,&#34;goalsScored&#34;:242,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;14&#34;,&#34;leagueL10Rank&#34;:&#34;7&#34;,&#34;leagueRank&#34;:&#34;14&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:30,&#34;ot&#34;:7,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:45},&#34;leagueRoadRank&#34;:&#34;15&#34;,&#34;points&#34;:97,&#34;pointsPercentage&#34;:0.5914634146341463,&#34;ppConferenceRank&#34;:&#34;8&#34;,&#34;ppDivisionRank&#34;:&#34;5&#34;,&#34;ppLeagueRank&#34;:&#34;15&#34;,&#34;row&#34;:39,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:29,&#34;link&#34;:&#34;/api/v1/teams/29&#34;,&#34;name&#34;:&#34;Columbus Blue Jackets&#34;},&#34;wildCardRank&#34;:&#34;1&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;9&#34;,&#34;conferenceL10Rank&#34;:&#34;3&#34;,&#34;conferenceRank&#34;:&#34;8&#34;,&#34;conferenceRoadRank&#34;:&#34;5&#34;,&#34;divisionHomeRank&#34;:&#34;5&#34;,&#34;divisionL10Rank&#34;:&#34;2&#34;,&#34;divisionRank&#34;:&#34;5&#34;,&#34;divisionRoadRank&#34;:&#34;3&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:244,&#34;goalsScored&#34;:248,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;17&#34;,&#34;leagueL10Rank&#34;:&#34;5&#34;,&#34;leagueRank&#34;:&#34;15&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:29,&#34;ot&#34;:9,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:44},&#34;leagueRoadRank&#34;:&#34;9&#34;,&#34;points&#34;:97,&#34;pointsPercentage&#34;:0.5914634146341463,&#34;ppConferenceRank&#34;:&#34;7&#34;,&#34;ppDivisionRank&#34;:&#34;4&#34;,&#34;ppLeagueRank&#34;:&#34;14&#34;,&#34;row&#34;:39,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:1,&#34;link&#34;:&#34;/api/v1/teams/1&#34;,&#34;name&#34;:&#34;New Jersey Devils&#34;},&#34;wildCardRank&#34;:&#34;2&#34;},{&#34;conferenceHomeRank&#34;:&#34;12&#34;,&#34;conferenceL10Rank&#34;:&#34;10&#34;,&#34;conferenceRank&#34;:&#34;10&#34;,&#34;conferenceRoadRank&#34;:&#34;9&#34;,&#34;divisionHomeRank&#34;:&#34;7&#34;,&#34;divisionL10Rank&#34;:&#34;6&#34;,&#34;divisionRank&#34;:&#34;6&#34;,&#34;divisionRoadRank&#34;:&#34;5&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:256,&#34;goalsScored&#34;:228,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;22&#34;,&#34;leagueL10Rank&#34;:&#34;21&#34;,&#34;leagueRank&#34;:&#34;21&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:35,&#34;ot&#34;:11,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:36},&#34;leagueRoadRank&#34;:&#34;18&#34;,&#34;points&#34;:83,&#34;pointsPercentage&#34;:0.5060975609756098,&#34;ppConferenceRank&#34;:&#34;10&#34;,&#34;ppDivisionRank&#34;:&#34;6&#34;,&#34;ppLeagueRank&#34;:&#34;21&#34;,&#34;row&#34;:33,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:12,&#34;link&#34;:&#34;/api/v1/teams/12&#34;,&#34;name&#34;:&#34;Carolina Hurricanes&#34;},&#34;wildCardRank&#34;:&#34;4&#34;},{&#34;conferenceHomeRank&#34;:&#34;13&#34;,&#34;conferenceL10Rank&#34;:&#34;11&#34;,&#34;conferenceRank&#34;:&#34;11&#34;,&#34;conferenceRoadRank&#34;:&#34;11&#34;,&#34;divisionHomeRank&#34;:&#34;8&#34;,&#34;divisionL10Rank&#34;:&#34;7&#34;,&#34;divisionRank&#34;:&#34;7&#34;,&#34;divisionRoadRank&#34;:&#34;7&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:296,&#34;goalsScored&#34;:264,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;23&#34;,&#34;leagueL10Rank&#34;:&#34;22&#34;,&#34;leagueRank&#34;:&#34;22&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:37,&#34;ot&#34;:10,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:35},&#34;leagueRoadRank&#34;:&#34;20&#34;,&#34;points&#34;:80,&#34;pointsPercentage&#34;:0.4878048780487805,&#34;ppConferenceRank&#34;:&#34;11&#34;,&#34;ppDivisionRank&#34;:&#34;7&#34;,&#34;ppLeagueRank&#34;:&#34;22&#34;,&#34;row&#34;:32,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W3&#34;,&#34;streakNumber&#34;:3,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:2,&#34;link&#34;:&#34;/api/v1/teams/2&#34;,&#34;name&#34;:&#34;New York Islanders&#34;},&#34;wildCardRank&#34;:&#34;5&#34;},{&#34;conferenceHomeRank&#34;:&#34;10&#34;,&#34;conferenceL10Rank&#34;:&#34;14&#34;,&#34;conferenceRank&#34;:&#34;12&#34;,&#34;conferenceRoadRank&#34;:&#34;14&#34;,&#34;divisionHomeRank&#34;:&#34;6&#34;,&#34;divisionL10Rank&#34;:&#34;8&#34;,&#34;divisionRank&#34;:&#34;8&#34;,&#34;divisionRoadRank&#34;:&#34;8&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:268,&#34;goalsScored&#34;:231,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;20&#34;,&#34;leagueL10Rank&#34;:&#34;28&#34;,&#34;leagueRank&#34;:&#34;24&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:39,&#34;ot&#34;:9,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:34},&#34;leagueRoadRank&#34;:&#34;29&#34;,&#34;points&#34;:77,&#34;pointsPercentage&#34;:0.4695121951219512,&#34;ppConferenceRank&#34;:&#34;12&#34;,&#34;ppDivisionRank&#34;:&#34;8&#34;,&#34;ppLeagueRank&#34;:&#34;24&#34;,&#34;row&#34;:31,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L3&#34;,&#34;streakNumber&#34;:3,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:3,&#34;link&#34;:&#34;/api/v1/teams/3&#34;,&#34;name&#34;:&#34;New York Rangers&#34;},&#34;wildCardRank&#34;:&#34;6&#34;}]}]} Standings . AttributeError Traceback (most recent call last) /vscode/ahadsblog/_notebooks/2020-02-02-api2.ipynb Cell 1 in &lt;cell line: 18&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2020-02-02-api2.ipynb#W0sdnNjb2RlLXJlbW90ZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; print(&#34;Standings&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2020-02-02-api2.ipynb#W0sdnNjb2RlLXJlbW90ZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; standing = response.json().get(&#34;id&#34;) &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2020-02-02-api2.ipynb#W0sdnNjb2RlLXJlbW90ZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; for key, value in id.items(): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2020-02-02-api2.ipynb#W0sdnNjb2RlLXJlbW90ZQ%3D%3D?line=18&#39;&gt;19&lt;/a&gt; print(key, value) AttributeError: &#39;builtin_function_or_method&#39; object has no attribute &#39;items&#39; .",
            "url": "https://ahadb63.github.io/ahadsblog/api/hockey/2020/02/02/api2.html",
            "relUrl": "/api/hockey/2020/02/02/api2.html",
            "date": " • Feb 2, 2020"
        }
        
    
  
    
        ,"post70": {
            "title": "Java Kernel Test",
            "content": "console.log(&quot;hello&quot;) . hello .",
            "url": "https://ahadb63.github.io/ahadsblog/kerneltest/2020/02/02/KernelWorking.html",
            "relUrl": "/kerneltest/2020/02/02/KernelWorking.html",
            "date": " • Feb 2, 2020"
        }
        
    
  
    
        ,"post71": {
            "title": "Final Project Design",
            "content": "Roles . ahad - devops | sabine - frontend | dash - backend | aiden - scrum master | . Our Project . Our project is a website where there will be ltos of minigames to play Minigames will be divided by category . Ex: Board games, Math games, Puzzle games | . What games are we making? . ahad - NA | sabine - NA | dash- blackjack and mario | aiden - tetris | .",
            "url": "https://ahadb63.github.io/ahadsblog/final/project/2020/02/02/Final-Project-Design.html",
            "relUrl": "/final/project/2020/02/02/Final-Project-Design.html",
            "date": " • Feb 2, 2020"
        }
        
    
  
    
        ,"post72": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://ahadb63.github.io/ahadsblog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  

  
      ,"page2": {
          "title": "About Me",
          "content": "about me . Student at DNHS | Graduating class of 2024 | .",
          "url": "https://ahadb63.github.io/ahadsblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  

  
      ,"page9": {
          "title": "Vocab and Notes",
          "content": "Vocab and Notes . Print : The print() function prints the specified message to the screen, or other standard output device. The message can be a string, or any other object, the object will be converted into a string before written to the screen. . | Kernel : The kernel is a computer program at the core of a computer’s operating system and generally has complete control over everything in the system. It is the portion of the operating system code that is always resident in memory and facilitates interactions between hardware and software components. . | Lists [] : A way of grouping data in an ordered sequence . | Dictionaries {} : A way of grouping data into in key-value relationships. Dictionaries are similar to JavaScript Object Notation (JSON). . |",
          "url": "https://ahadb63.github.io/ahadsblog/Vocab/",
          "relUrl": "/Vocab/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  

  

  

  

  
  

  
      ,"page18": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ahadb63.github.io/ahadsblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}