{
  
    
        "post0": {
            "title": "List and Dictionaries",
            "content": "# &quot;List and Dictionaries&quot; &gt; &quot;Customized list and dictionary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . List and Dictionaries . This section is personalized to me and shows the things I like. This uses iteration - while loop . ThingsILike = [] ThingsILike.append({ &quot;FirstName&quot;: &quot;Ahad&quot; &quot;LastName:&quot; &quot;Biabani&quot; &quot;FavoriteFood:&quot; &quot;Steak&quot;, &quot;FavoriteSport&quot;: &quot;Ice Hockey&quot;, &quot;FavoriteVideoGame&quot;: &quot;BattleField 1&quot;, &quot;FavoriteArtist&quot;: &quot;Destroy Lonely&quot;, &quot;Hobbies&quot;: &quot;Ice Hockey and Video Games&quot;, &quot;FavoriteSubject&quot;: &quot;APCSP&quot; }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;FavoriteFood:&quot;, d_rec[&quot;FavoriteFood&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;FavoriteSport:&quot;, d_rec[&quot;FavoriteSport&quot;]) print(&quot; t&quot;, &quot;FavoriteVideoGame:&quot;, d_rec[&quot;FavoriteVideoGame&quot;]) print(&quot; t&quot;, &quot;FavoriteArtist:&quot;, d_rec[&quot;FavoriteArtist&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;,d_rec[&quot;Hobbies&quot;]) print(&quot; t&quot;, &quot;FavoriteSubject: &quot;,d_rec[&quot;FavoriteSubject&quot;]) print(end= &quot;&quot;) print() print(ThingsILike) #for loop algorithm iterates on length of Things I Like def while_loop():# while loop algorithm contains an initial n and an index incrementing statement (n += 1) print(&quot;While loop output n&quot;) i = 0 while i &lt; len(ThingsILike): record = ThingsILike[i] print_data(record) i += 1 return while_loop() # while loop algorithm contains an initial n and an index incrementing statement (n += 1) . This section is also personalized to me. This section uses iteration - for loop . AboutMe = [] AboutMe.append({ &quot;FirstName&quot;: &quot;Ahad&quot;, &quot;LastName&quot;: &quot;Biabani&quot;, &quot;DOB&quot;: &quot;Sept 18&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;aobiabain@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) print() def for_loop(): print(&quot;For loop output n&quot;) for record in AboutMe: print_data(record) for_loop() . . For loop output Ahad Biabani Email: aobiabain@gmail.com Residence: San Diego Birth Day: Sept 18 Cars: None . This section is also personalized to me. This uses iteration - recursive loop . AboutMe = [] AboutMe.append({ &quot;FirstName&quot;: &quot;Ahad&quot;, &quot;LastName&quot;: &quot;Biabani&quot;, &quot;DOB&quot;: &quot;Sept 18&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;aobiabain@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) print() def recursive_loop(i): if i &lt; len(AboutMe): record = AboutMe[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) # recursion algorithm loops incrementing on each call (n + 1) until exit condition is met . . Recursive loop output Ahad Biabani Email: aobiabain@gmail.com Residence: San Diego Birth Day: Sept 18 Cars: None . This is a quiz stored in a list . questions = 4 # number of quiz questions correct = 0 # initialize number of correct answers as 0 print(&quot;This is a 4 question quiz&quot;) def question_and_answer(prompt, answer): print(&quot;Question: &quot; + prompt) # asks user a question user_input = input() # takes user&#39;s input as variable msg print(&quot;Answer: &quot; + user_input) # print user&#39;s input as Answer if answer == user_input.lower(): # convert user&#39;s input to lowercase print(&quot;Correct Answer&quot;) global correct # allows to modify variable outside of current scope correct += 1 # add 1 to correct count else: print (&quot;Incorrect Answer&quot;) return user_input question_1 = question_and_answer(&quot;What is Ahads last name?&quot;, &quot;Biabani&quot;) question_2 = question_and_answer(&quot;What sport does Ahad play&quot;, &quot;Ice Hockey&quot;) question_3 = question_and_answer(&quot;How old is Ahad&quot;, &quot;16&quot;) question_4 = question_and_answer(&quot;When is his birthday?&quot;, &quot;September 18th&quot;) if correct &lt; 3: print(&#39;You scored {correct} correct answers out of 4, ur bad&#39;) elif correct &lt; 5: print(&#39;You scored {correct} correct answers out of 4, okay&#39;) else: print(&#39;You scored {correct} correct answers out of 4, good&#39;) print(&quot;A record of your quiz:&quot;) . This is a 4 question quiz Question: What is Ahads last name? .",
            "url": "https://ahadb63.github.io/ahadsblog/markdown/2022/12/14/list-and-dictionaries.html",
            "relUrl": "/markdown/2022/12/14/list-and-dictionaries.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Kathyleen Beveridge",
            "content": "",
            "url": "https://ahadb63.github.io/ahadsblog/2022/12/14/extracredit.html",
            "relUrl": "/2022/12/14/extracredit.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Notes Week 14",
            "content": "Grades . 3.1 &amp; 3.2 3.3 and 3.4 Total . 0.95/1 | 1/1 | 1.95/2 | . 3.1 and 3.2 . Variables . Using meaningful variable names help with readability and help keep stuff organized | be concisive with variables and thier names | . Integer . numbers | . text/string . words phrases | . Boolean . True or False | . List of data can be stored in variable . easily remove/add/change items into the list | print/retrieve specific values in the list without creating a lot of variables | help reduce need for new variables, simplifying the complexity | . Assignments . assignment operator allows a program to change the value represented by a variable. | assigns values to variables | Different operators lile =, +=, /=, *=, etc are used to change value of a variable | . Data Abstraction . Method used in coding to represent data in a useful form, by taking away aspects of data that aren&#39;t being used in the situation | Variables and lists are primary tools in data abstraction | data abstractions help manage complexity in programs by giving a collection of data a name without refernecing the specific detailsof the representation. | . Lists and Strings . list -&gt; ordered sequence of elements | Element -&gt; individual value in a list that is assigned to a unique index | Index -&gt; a way to reference the elements in a list or string using natural numbers; each element of a string is referenced by an index | String -&gt; ordered sequence of charachters (letters, numbers, special charachters.) | . Lists . allow data abstraction | bundles variables togther | can keep adding elements | can store elemetns as a single variable by using a list | . QuestionsandAnswers= { &quot;#1 | What is the operator that displays only true or false?&quot;: &quot;boolean&quot;, &quot;#2 | What lessons were taught by students this week?&quot;: &quot;3.1-3.4&quot;, &quot;#3 | Who is the best teacher?&quot;: &quot;mr.mort&quot;, &quot;#4 | Why are variables important?&quot;: &quot;meaningful variable names help with readability and help keep stuff organized&quot;, &quot;#5 | What is a list in coding?&quot;: &quot;ordered sequence of elements&quot;, } def QuestionandResponse(Question): # display the question then return a response print(Question) Response = input() return Response Correct = 0 # Setting up the start of the quiz print(&quot;Number of questions: &quot; + str(len(QuestionsandAnswers))) # Looks through code till desired answer for key in QuestionsandAnswers: rsp = QuestionandResponse(key) #answer input is saved to a variable rsp = rsp.lower() # answer is case sensitive, so match response to lowercase for answer key to work if rsp == QuestionsandAnswers[key]: # checks if answer is correct accoring to Questions and answers variale defined at the top. print(f&quot;Correct! --&gt; {rsp}&quot;) correct += 1 else: # if else statement to print either correct or incorrect print(f&quot;{rsp} is super wrong&quot;) percent = str(round(correct/len(QandA), 2)*100) # calculate percentage print(&quot;You scored &quot; + str(correct) +&quot;/&quot; + str(len(QandA))) print(f&quot;This is {percent}%&quot;) # print score and percentage . QuestionsandAnswers= { &quot;#1 | What is the operator that displays only true or false?&quot;: &quot;boolean&quot;, &quot;#2 | What lessons were taught by students this week?&quot;: &quot;3.1-3.4&quot;, &quot;#3 | Who is the best teacher?&quot;: &quot;mr.mort&quot;, &quot;#4 | Why are variables important?&quot;: &quot;meaningful variable names help with readability and help keep stuff organized&quot;, &quot;#5 | What is a list in coding?&quot;: &quot;ordered sequence of elements&quot;, } def QuestionandResponse(Question): # display the question then return a response print(Question) Response = input() return Response Correct = 0 # Setting up the start of the quiz print(&quot;Number of questions: &quot; + str(len(QuestionsandAnswers))) # Looks through code till desired answer for key in QuestionsandAnswers: rsp = QuestionandResponse(key) #answer input is saved to a variable # answer is case sensitive, so match response to lowercase for answer key to work if rsp == QuestionsandAnswers[key]: # checks if answer is correct accoring to Questions and answers variale defined at the top. print(f&quot;Correct! --&gt; {rsp}&quot;) correct += 1 else: # if else statement to print either correct or incorrect print(f&quot;{rsp} is super wrong&quot;) print(&quot;You scored &quot; + str(correct) +&quot;/&quot; + str(len(QuestionsandAnswers))) . colorList=[&quot;green&quot;, &quot;red&quot;, &quot;Blue&quot;] colorlist2=[] print(str(colorList)) . 3.3 and 3.4 . Algorithms can be represeted in different ways . flow charts | . strings . len() finds length | lower() converts to lowercase | concat() returns a string made up of the concatenated strings ex. concat(&quot;string1&quot;, &quot;string2&quot;) would return string1string2 | substring() returns the characters from the string beginning at the at the first position to the last so an example of this would be substring (&quot;abcdefghijk&quot;, 2, 5) would print bcde (pseudocode starts at 1) | . 3.3 and 3.4 hacks . Variable hacks . Problem 1 : 23.91 | Problem 2 : 1.25 | Problem 3 : 17 | Problem 4 : straightbrownshort | . Num1 = 50 Num2 = Num1 % 9 + 15 # 50 / 9 +15 = 20.5 Num3 = Num2 / Num1 + ( Num2 * 2 ) # 20.5/50 + (20.5 x 2) = 44.41 Num4 = Num3 + Num1 / 5 - 10 # 44.41+50/5 -10 Result = Num4 - Num2 RESULT = 23.91 . Num1 = 10 Num2 = Num1 % 3 * 4 #10/12 or 0.83 Num1 = Num2 # num 1 is now alos 0.83 Num3 = Num1 * 3 # num 3 is 2.5 Result = Num3 % 2 #num 3 (2.5) becomes 1.25 Result = 1.25 . valueA = 4 valueB = 90 valueC = 17 valueB = valueC - valueA # 17 - 4 valueA = valueA * 10 # 4 x 10 if valueB &gt; 10: # b is bigger than 10 print(valueC) # c stays 17 Result = 17 . type = &quot;curly&quot; color = &quot;brown&quot; length = &quot;short&quot; type = &quot;straight&quot; hair = type + color + length # straight + brown + short print(hair) . String hacks . Problem 1: &quot; Mr.Mortenson is very handsome. | Problem 2: | . Noun = &quot;Mr.Mortenson&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;Very&quot; Verb = &quot;is&quot; abrev = subtring(Noun, 1, 7) yoda = concat(Adjective2, &quot; &quot;, Adjective, &quot; &quot;, abrev, &quot; &quot;,Verb, &quot;.&quot;) display[yoda] . NameError Traceback (most recent call last) /vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb Cell 13 in &lt;cell line: 5&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb#X15sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; Adjective2 = &#34;Very&#34; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb#X15sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; Verb = &#34;is&#34; -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb#X15sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; abrev = subtring(Noun, 1, 7) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb#X15sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; yoda = concat(Adjective2, &#34; &#34;, Adjective, &#34; &#34;, abrev, &#34; &#34;,Verb, &#34;.&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb#X15sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; display[yoda] NameError: name &#39;subtring&#39; is not defined . cookie = len(&quot;choclate&quot;) # 8 cookie2 = len(&quot;rasin&quot;) # 5 len1 = cookie / 2 # 8/2 = 4 len2 = cookie2 * 45 # 5 x 45 = 225 vote1 = (cookie, &quot;vote&quot;, len2) # 8, vote, 225 vote2 = (cookie2, &quot;vote&quot;, len1) # 5, vote, 4 votes = concat(vote1, &quot; &quot;, vote2) #8 vote 225 5 vote 4 display[votes] # 225 vote chocolate, 4 vote rasin . NameError Traceback (most recent call last) /vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb Cell 14 in &lt;cell line: 7&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; vote1 = (cookie, &#34;vote&#34;, len2) # 8, vote, 225 &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; vote2 = (cookie2, &#34;vote&#34;, len1) # 5, vote, 4 -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; votes = concat(vote1, &#34; &#34;, vote2) #8 vote 225 5 vote 4 &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/202-09-09-Notes.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; display[votes] NameError: name &#39;concat&#39; is not defined . 3.5 , 3.6 , 3.7 Notes and Problems . Boolean: data type with two possible values (true or false) | Selection(conditionals): uses a condition that evaluates to true or false Selection determines which part of an algorithm are executed based on a condition being true or false | . | Algorithm is a finite set of instructions that accomplish a specific task | Nested conditional statements consist of conditional statements within other conditional statements | | . grade1 = 90 grade2 = 65 grade3 = 60 grade4 = 75 grade5 = 95 GradeAverage = (90 + 65 + 75 + 60 + 95) / 5 if GradeAverage &gt; 80 : print(GradeAverage) else : print(&quot;no&quot;) . print(&quot;100 == 100:&quot;,100==100) print(&quot;Hello == Adios:&quot;,&quot;greeting&quot;==&quot;farewell&quot;) print(&quot;Hello != Adios:&quot;,&quot;greeting&quot;!=&quot;farewell&quot;) print(&quot;Hello == Hola:&quot;,&quot;greeting&quot;==&quot;greeting&quot;) print(&quot;5&gt;=4:&quot;, 5&gt;=4) print (&#39;&#39;) # Notice that relational operators can even work on lists! # For lists, the relational operator compares each respective component until an answer is derived print(&quot;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]:&quot;, [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]) print(&quot;[1,2,3,5] &gt; [1,2,3,4]:&quot;, [1,2,3,5] &gt; [1,2,3,4]) print(&quot;[1,2,3,5] &lt; [1,2,3,4]:&quot;, [1,2,3,5] &lt; [1,2,3,4]) print(&quot;[1,2,3,5] == [1,2,3,4]:&quot;, [1,2,3,5] == [1,2,3,4]) . print(&quot;1 &gt; 2 or 5 &lt; 12:&quot;,) # Output TRUE using OR ^ # Output FALSE using NOT print(&quot;24 &gt; 8:&quot;,) # Output FALSE using AND print(&quot;10 &gt; 20:&quot;, 10 &gt; 20 and false) . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) else: print(&quot;x is not greater than y&quot;) . x = 2 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) else: print(&quot;x is not greater than y&quot;) . num1 = 100 num2 = 100 sum = num1 + num2 if sum &gt;= 200: print(&quot;200&quot;) else: print(sum) . Analyzing Code Walkthrough . score = 82 if (score &gt;= 90) { console.log(&quot;You got an A, congrats!&quot;) } else { if (score &gt;= 75) { console.log(&quot;Please come to retake up to a 90 next week at tutorial!&quot;) } else { console.log(&quot;You have detention!&quot;) } } //will print &#39;Please come to retake up to a 90 next week at tutorial!&#39; because score &gt;= 75. //javascript dont work on python base kernel . protein = 25 carbs = 36 sugar = 11 if (carbs &gt;= 55 || protein &lt;= 20 || sugar &gt;= 15) { console.log(&quot;Your lunch is too unhealthy, please pick a new one&quot;) } else { if (carbs &lt; 35 || protein &lt; 25) { console.log (&quot;This lunch is alright but try to add some more carbs or protein&quot;) } else { if (sugar &gt;= 11) { console.log (&quot;Looks great but lets see if we can cut down on sugar, we don&#39;t want diabetes!&quot;) } else { console.log (&quot;Amazing, you created a healthy lunch!!!&quot;) } } } // will print &quot;Looks great but lets see if we can cut down on sugar, we don&#39;t want diabetes!&quot; //javascript dont work on python base kernel . Writing Nested Code Activity . hours = 25 if (hours &lt;= 8) { print(&quot;inexpierenced, 50k salary&quot;) } else { if (hours &gt;= 10) { print(&quot;expierenced, 150k salary&quot;) } else { print(&quot;Expierenced, 90k salary&quot;) } } //javascript dont work on python base kernel . 3.5 - 3.7 hacks . Write a program that fits these conditions using nested conditionals: . If the product is expired, print &quot;this product is no good&quot; If the cost is above 50 dollars, and the product isn&#39;t expired, print &quot;this product is too expensive&quot; If the cost is 25 dollars but under 50, and the product isn&#39;t expired, print &quot;this is a regular product&quot; If the cost is under 25 dollars, print &quot;this is a cheap product&quot; . x = &quot;expired&quot; product = x cost = 70 if (product &lt;= x, cost &lt;= 50): print(&quot;This product good and not expensive&quot; ); else: if (product &gt;= x, cost &gt;= 50): print(&quot;Product is not good and expensive&quot;); else: if (product &lt;= x, cost &lt;= 25): print(&quot;regular product&quot;) else: print(&quot;cheap product&quot;) . This product good and not expensive . x = 0 score = x # Question One print(&quot;What is 1 + 1&quot;) answer_1 = input(&quot;a)1 b)2 c)3 d)4:&quot;) if answer_1.lower() == &quot;b&quot; or answer_1.lower() == &quot;2&quot;: print(&quot;Correct&quot;) x = x + 1 else: print(&quot;Incorrect, 1 + 1 is 2&quot;) # Question Two print(&quot;What is my name?&quot;) answer_2 = input(&quot;a)ahad b)akshat c)xeem d)josh:&quot;) if answer_2.lower() == &quot;a&quot; or answer_2.lower() == &quot;ahad&quot;: print(&quot;Correct&quot;) x = x + 1 else: print(&quot;Incorrect, my name is Ahad&quot;) # Question Three print(&quot;True or False Ahad is 17&quot;) answer_3 = input(&quot;:&quot;) if answer_3.lower() == &quot;true&quot; or answer_3.lower() == &quot;T&quot;: print(&quot;Correct&quot;) x = x + 1 else: print(&quot;Incorrect&quot;) #Total Score score = float(x / 3) * 100 print(x,&quot;out of 3, that is&quot;,score, &quot;%&quot;) . What is 1 + 1 Correct What is my name? Correct True or False Ahad is 17 Incorrect 2 out of 3, that is 66.66666666666666 % .",
            "url": "https://ahadb63.github.io/ahadsblog/notes%2011/28/22/3.1/3.2/2022/12/14/Notes.html",
            "relUrl": "/notes%2011/28/22/3.1/3.2/2022/12/14/Notes.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "MC Corrections and Final Presentation notes/review",
            "content": "Final Presentation Notes . For the final presentations I took notes on Haozuan, Aj, Paaras, and Samarth&#39;s group. . Theme of thier website: Motivational Website They provided a quote generator | quotes -included happy quotes, motivational quotes (used api) | . | They had a tracker/voter-thingy to see how many people disliked or liked the joke | A counter would tell you the stats of the quote | . | . I think this group did a great job on thier site, it was ver9y detailed and appealing. . College Board Quiz Corrections . Q5: My answer was A (II only), Correct answer was B(III only) | Q30: My answer was A (Keeping the numeric values in a list makes it easier to round a number to the nearest integer.) Correct answer is B(Keeping the numeric values in a list makes it easier to apply the same computation to every data element.) | Q34: My answer was C([&quot;flute&quot;, &quot;violin&quot;]), the correct answer was B([&quot;guitar&quot;, &quot;drums&quot;, &quot;bass&quot;]) | Q19: My answer was B(An overflow error will occur because 4 bits is not large enough to represent either of the values 14 or 15.), The correct answer was C(An overflow error will occur because 4 bits is not large enough to represent 29, the sum of 14 and 15.) | Q20: My answer was B(Four bits are not enough to store the eight directions. Eight bits are needed for the new version of the game.), The correct answer was D(Four bits are enough to store the eight directions.) | Q23: My answer was A(The position of the runner is determined by calculating the time difference between the start and the end of the race and making an estimation based on the runner’s average speed.). The correct answer was D(The position of the runner is sampled at regular intervals to approximate the real-word position, and a sequence of bits is used to represent each sample.) | Q37: My answer was A, the correct answer was B | Q41: My answer was D(40), the correct answer was B(20) | Q45: My answer was A(count1 = 2, count2 = 2). The correct answer is B(count1 = 2, count2 = 3) | Q49: My answer was A(wordword ←concat(reverse(word), word)). The correct asnwer is C(word ←&quot;on&quot;word ←concat(reverse(word), word)). | .",
            "url": "https://ahadb63.github.io/ahadsblog/final/2022/12/14/Final.html",
            "relUrl": "/final/2022/12/14/Final.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Week 13 Lesson Planning",
            "content": "Our Group . - .",
            "url": "https://ahadb63.github.io/ahadsblog/week13/2022/11/22/Week-13.html",
            "relUrl": "/week13/2022/11/22/Week-13.html",
            "date": " • Nov 22, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "List and Dictionaries",
            "content": "# &quot;List and Dictionaries&quot; &gt; &quot;Customized list and dictionary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . List and Dictionaries . This section is personalized to me and shows the things I like. This uses iteration - while loop . ThingsILike = [] ThingsILike.append({ &quot;FirstName&quot;: &quot;Ahad&quot; &quot;LastName:&quot; &quot;Biabani&quot; &quot;FavoriteFood:&quot; &quot;Steak&quot;, &quot;FavoriteSport&quot;: &quot;Ice Hockey&quot;, &quot;FavoriteVideoGame&quot;: &quot;BattleField 1&quot;, &quot;FavoriteArtist&quot;: &quot;Destroy Lonely&quot;, &quot;Hobbies&quot;: &quot;Ice Hockey and Video Games&quot;, &quot;FavoriteSubject&quot;: &quot;APCSP&quot; }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;FavoriteFood:&quot;, d_rec[&quot;FavoriteFood&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;FavoriteSport:&quot;, d_rec[&quot;FavoriteSport&quot;]) print(&quot; t&quot;, &quot;FavoriteVideoGame:&quot;, d_rec[&quot;FavoriteVideoGame&quot;]) print(&quot; t&quot;, &quot;FavoriteArtist:&quot;, d_rec[&quot;FavoriteArtist&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;,d_rec[&quot;Hobbies&quot;]) print(&quot; t&quot;, &quot;FavoriteSubject: &quot;,d_rec[&quot;FavoriteSubject&quot;]) print(end= &quot;&quot;) print() print(ThingsILike) #for loop algorithm iterates on length of Things I Like def while_loop():# while loop algorithm contains an initial n and an index incrementing statement (n += 1) print(&quot;While loop output n&quot;) i = 0 while i &lt; len(ThingsILike): record = ThingsILike[i] print_data(record) i += 1 return while_loop() # while loop algorithm contains an initial n and an index incrementing statement (n += 1) . This section is also personalized to me. This section uses iteration - for loop . AboutMe = [] AboutMe.append({ &quot;FirstName&quot;: &quot;Ahad&quot;, &quot;LastName&quot;: &quot;Biabani&quot;, &quot;DOB&quot;: &quot;Sept 18&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;aobiabain@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) print() def for_loop(): print(&quot;For loop output n&quot;) for record in AboutMe: print_data(record) for_loop() . . For loop output Ahad Biabani Email: aobiabain@gmail.com Residence: San Diego Birth Day: Sept 18 Cars: None . This section is also personalized to me. This uses iteration - recursive loop . AboutMe = [] AboutMe.append({ &quot;FirstName&quot;: &quot;Ahad&quot;, &quot;LastName&quot;: &quot;Biabani&quot;, &quot;DOB&quot;: &quot;Sept 18&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;aobiabain@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) print() def recursive_loop(i): if i &lt; len(AboutMe): record = AboutMe[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) # recursion algorithm loops incrementing on each call (n + 1) until exit condition is met . . Recursive loop output Ahad Biabani Email: aobiabain@gmail.com Residence: San Diego Birth Day: Sept 18 Cars: None . This is a quiz stored in a list . questions = 4 # number of quiz questions correct = 0 # initialize number of correct answers as 0 print(&quot;This is a 4 question quiz&quot;) def question_and_answer(prompt, answer): print(&quot;Question: &quot; + prompt) # asks user a question user_input = input() # takes user&#39;s input as variable msg print(&quot;Answer: &quot; + user_input) # print user&#39;s input as Answer if answer == user_input.lower(): # convert user&#39;s input to lowercase print(&quot;Correct Answer&quot;) global correct # allows to modify variable outside of current scope correct += 1 # add 1 to correct count else: print (&quot;Incorrect Answer&quot;) return user_input question_1 = question_and_answer(&quot;What is Ahads last name?&quot;, &quot;Biabani&quot;) question_2 = question_and_answer(&quot;What sport does Ahad play&quot;, &quot;Ice Hockey&quot;) question_3 = question_and_answer(&quot;How old is Ahad&quot;, &quot;16&quot;) question_4 = question_and_answer(&quot;When is his birthday?&quot;, &quot;September 18th&quot;) if correct &lt; 3: print(&#39;You scored {correct} correct answers out of 4, ur bad&#39;) elif correct &lt; 5: print(&#39;You scored {correct} correct answers out of 4, okay&#39;) else: print(&#39;You scored {correct} correct answers out of 4, good&#39;) print(&quot;A record of your quiz:&quot;) . This is a 4 question quiz Question: What is Ahads last name? .",
            "url": "https://ahadb63.github.io/ahadsblog/markdown/2022/11/15/list-and-dictionaries.html",
            "relUrl": "/markdown/2022/11/15/list-and-dictionaries.html",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "MC Corrections and Final Presentation notes/review",
            "content": "Final Presentation Notes . For the final presentations I took notes on Haozuan, Aj, Paaras, and Samarth&#39;s group. . Theme of thier website: Motivational Website They provided a quote generator | quotes -included happy quotes, motivational quotes (used api) | . | They had a tracker/voter-thingy to see how many people disliked or liked the joke | A counter would tell you the stats of the quote | . | . I think this group did a great job on thier site, it was ver9y detailed and appealing. . College Board Quiz Corrections . Q5: My answer was A (II only), Correct answer was B(III only) | Q30: My answer was A (Keeping the numeric values in a list makes it easier to round a number to the nearest integer.) Correct answer is B(Keeping the numeric values in a list makes it easier to apply the same computation to every data element.) | Q34: My answer was C([&quot;flute&quot;, &quot;violin&quot;]), the correct answer was B([&quot;guitar&quot;, &quot;drums&quot;, &quot;bass&quot;]) | Q19: My answer was B(An overflow error will occur because 4 bits is not large enough to represent either of the values 14 or 15.), The correct answer was C(An overflow error will occur because 4 bits is not large enough to represent 29, the sum of 14 and 15.) | Q20: My answer was B(Four bits are not enough to store the eight directions. Eight bits are needed for the new version of the game.), The correct answer was D(Four bits are enough to store the eight directions.) | Q23: My answer was A(The position of the runner is determined by calculating the time difference between the start and the end of the race and making an estimation based on the runner’s average speed.). The correct answer was D(The position of the runner is sampled at regular intervals to approximate the real-word position, and a sequence of bits is used to represent each sample.) | Q37: My answer was A, the correct answer was B | Q41: My answer was D(40), the correct answer was B(20) | Q45: My answer was A(count1 = 2, count2 = 2). The correct answer is B(count1 = 2, count2 = 3) | Q49: My answer was A(wordword ←concat(reverse(word), word)). The correct asnwer is C(word ←&quot;on&quot;word ←concat(reverse(word), word)). | . img .",
            "url": "https://ahadb63.github.io/ahadsblog/final/2022/11/07/Final.html",
            "relUrl": "/final/2022/11/07/Final.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . import http.client conn = http.client.HTTPSConnection(&quot;corona-virus-world-and-india-data.p.rapidapi.com&quot;) headers = { &#39;X-RapidAPI-Key&#39;: &quot;3d86dd31a2mshca1f32e22e2396cp1f7302jsn610cf54ceeb6&quot;, &#39;X-RapidAPI-Host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } conn.request(&quot;GET&quot;, &quot;/api_india_timeline&quot;, headers=headers) res = conn.getresponse() data = res.read() print(data.decode(&quot;utf-8&quot;)) . [{&#34;dailyconfirmed&#34;:&#34;1&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;30 January 2020&#34;,&#34;dateymd&#34;:&#34;2020-01-30&#34;,&#34;totalconfirmed&#34;:&#34;1&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;31 January 2020&#34;,&#34;dateymd&#34;:&#34;2020-01-31&#34;,&#34;totalconfirmed&#34;:&#34;1&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;1 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-01&#34;,&#34;totalconfirmed&#34;:&#34;1&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;1&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;2 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-02&#34;,&#34;totalconfirmed&#34;:&#34;2&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;1&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;3 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-03&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;4 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-04&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;5 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-05&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;6 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-06&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;7 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-07&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;8 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-08&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;9 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-09&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;10 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-10&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;11 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-11&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;12 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-12&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;0&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;1&#34;,&#34;date&#34;:&#34;13 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-13&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;1&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;14 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-14&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;1&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;15 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-15&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;1&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;1&#34;,&#34;date&#34;:&#34;16 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-16&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;2&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;17 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-17&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;2&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;18 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-18&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;2&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;19 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-19&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;2&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;1&#34;,&#34;date&#34;:&#34;20 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-20&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;21 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-21&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;22 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-22&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;23 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-23&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;24 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-24&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;25 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-25&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;26 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-26&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;27 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-27&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;28 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-28&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;29 February 2020&#34;,&#34;dateymd&#34;:&#34;2020-02-29&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;0&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;1 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-01&#34;,&#34;totalconfirmed&#34;:&#34;3&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;2&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;2 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-02&#34;,&#34;totalconfirmed&#34;:&#34;5&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;1&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;3 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-03&#34;,&#34;totalconfirmed&#34;:&#34;6&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;22&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;4 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-04&#34;,&#34;totalconfirmed&#34;:&#34;28&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;2&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;5 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-05&#34;,&#34;totalconfirmed&#34;:&#34;30&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;1&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;6 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-06&#34;,&#34;totalconfirmed&#34;:&#34;31&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;3&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;7 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-07&#34;,&#34;totalconfirmed&#34;:&#34;34&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;5&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;8 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-08&#34;,&#34;totalconfirmed&#34;:&#34;39&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;9&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;9 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-09&#34;,&#34;totalconfirmed&#34;:&#34;48&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;3&#34;},{&#34;dailyconfirmed&#34;:&#34;15&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;1&#34;,&#34;date&#34;:&#34;10 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-10&#34;,&#34;totalconfirmed&#34;:&#34;63&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;4&#34;},{&#34;dailyconfirmed&#34;:&#34;8&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;11 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-11&#34;,&#34;totalconfirmed&#34;:&#34;71&#34;,&#34;totaldeceased&#34;:&#34;0&#34;,&#34;totalrecovered&#34;:&#34;4&#34;},{&#34;dailyconfirmed&#34;:&#34;10&#34;,&#34;dailydeceased&#34;:&#34;1&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;12 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-12&#34;,&#34;totalconfirmed&#34;:&#34;81&#34;,&#34;totaldeceased&#34;:&#34;1&#34;,&#34;totalrecovered&#34;:&#34;4&#34;},{&#34;dailyconfirmed&#34;:&#34;10&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;6&#34;,&#34;date&#34;:&#34;13 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-13&#34;,&#34;totalconfirmed&#34;:&#34;91&#34;,&#34;totaldeceased&#34;:&#34;1&#34;,&#34;totalrecovered&#34;:&#34;10&#34;},{&#34;dailyconfirmed&#34;:&#34;11&#34;,&#34;dailydeceased&#34;:&#34;1&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;14 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-14&#34;,&#34;totalconfirmed&#34;:&#34;102&#34;,&#34;totaldeceased&#34;:&#34;2&#34;,&#34;totalrecovered&#34;:&#34;10&#34;},{&#34;dailyconfirmed&#34;:&#34;10&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;3&#34;,&#34;date&#34;:&#34;15 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-15&#34;,&#34;totalconfirmed&#34;:&#34;112&#34;,&#34;totaldeceased&#34;:&#34;2&#34;,&#34;totalrecovered&#34;:&#34;13&#34;},{&#34;dailyconfirmed&#34;:&#34;14&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;1&#34;,&#34;date&#34;:&#34;16 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-16&#34;,&#34;totalconfirmed&#34;:&#34;126&#34;,&#34;totaldeceased&#34;:&#34;2&#34;,&#34;totalrecovered&#34;:&#34;14&#34;},{&#34;dailyconfirmed&#34;:&#34;20&#34;,&#34;dailydeceased&#34;:&#34;1&#34;,&#34;dailyrecovered&#34;:&#34;1&#34;,&#34;date&#34;:&#34;17 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-17&#34;,&#34;totalconfirmed&#34;:&#34;146&#34;,&#34;totaldeceased&#34;:&#34;3&#34;,&#34;totalrecovered&#34;:&#34;15&#34;},{&#34;dailyconfirmed&#34;:&#34;25&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;18 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-18&#34;,&#34;totalconfirmed&#34;:&#34;171&#34;,&#34;totaldeceased&#34;:&#34;3&#34;,&#34;totalrecovered&#34;:&#34;15&#34;},{&#34;dailyconfirmed&#34;:&#34;27&#34;,&#34;dailydeceased&#34;:&#34;1&#34;,&#34;dailyrecovered&#34;:&#34;5&#34;,&#34;date&#34;:&#34;19 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-19&#34;,&#34;totalconfirmed&#34;:&#34;198&#34;,&#34;totaldeceased&#34;:&#34;4&#34;,&#34;totalrecovered&#34;:&#34;20&#34;},{&#34;dailyconfirmed&#34;:&#34;58&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;3&#34;,&#34;date&#34;:&#34;20 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-20&#34;,&#34;totalconfirmed&#34;:&#34;256&#34;,&#34;totaldeceased&#34;:&#34;4&#34;,&#34;totalrecovered&#34;:&#34;23&#34;},{&#34;dailyconfirmed&#34;:&#34;78&#34;,&#34;dailydeceased&#34;:&#34;0&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;21 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-21&#34;,&#34;totalconfirmed&#34;:&#34;334&#34;,&#34;totaldeceased&#34;:&#34;4&#34;,&#34;totalrecovered&#34;:&#34;23&#34;},{&#34;dailyconfirmed&#34;:&#34;69&#34;,&#34;dailydeceased&#34;:&#34;3&#34;,&#34;dailyrecovered&#34;:&#34;0&#34;,&#34;date&#34;:&#34;22 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-22&#34;,&#34;totalconfirmed&#34;:&#34;403&#34;,&#34;totaldeceased&#34;:&#34;7&#34;,&#34;totalrecovered&#34;:&#34;23&#34;},{&#34;dailyconfirmed&#34;:&#34;94&#34;,&#34;dailydeceased&#34;:&#34;2&#34;,&#34;dailyrecovered&#34;:&#34;2&#34;,&#34;date&#34;:&#34;23 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-23&#34;,&#34;totalconfirmed&#34;:&#34;497&#34;,&#34;totaldeceased&#34;:&#34;9&#34;,&#34;totalrecovered&#34;:&#34;25&#34;},{&#34;dailyconfirmed&#34;:&#34;74&#34;,&#34;dailydeceased&#34;:&#34;1&#34;,&#34;dailyrecovered&#34;:&#34;15&#34;,&#34;date&#34;:&#34;24 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-24&#34;,&#34;totalconfirmed&#34;:&#34;571&#34;,&#34;totaldeceased&#34;:&#34;10&#34;,&#34;totalrecovered&#34;:&#34;40&#34;},{&#34;dailyconfirmed&#34;:&#34;86&#34;,&#34;dailydeceased&#34;:&#34;1&#34;,&#34;dailyrecovered&#34;:&#34;3&#34;,&#34;date&#34;:&#34;25 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-25&#34;,&#34;totalconfirmed&#34;:&#34;657&#34;,&#34;totaldeceased&#34;:&#34;11&#34;,&#34;totalrecovered&#34;:&#34;43&#34;},{&#34;dailyconfirmed&#34;:&#34;73&#34;,&#34;dailydeceased&#34;:&#34;5&#34;,&#34;dailyrecovered&#34;:&#34;7&#34;,&#34;date&#34;:&#34;26 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-26&#34;,&#34;totalconfirmed&#34;:&#34;730&#34;,&#34;totaldeceased&#34;:&#34;16&#34;,&#34;totalrecovered&#34;:&#34;50&#34;},{&#34;dailyconfirmed&#34;:&#34;153&#34;,&#34;dailydeceased&#34;:&#34;3&#34;,&#34;dailyrecovered&#34;:&#34;25&#34;,&#34;date&#34;:&#34;27 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-27&#34;,&#34;totalconfirmed&#34;:&#34;883&#34;,&#34;totaldeceased&#34;:&#34;19&#34;,&#34;totalrecovered&#34;:&#34;75&#34;},{&#34;dailyconfirmed&#34;:&#34;136&#34;,&#34;dailydeceased&#34;:&#34;5&#34;,&#34;dailyrecovered&#34;:&#34;10&#34;,&#34;date&#34;:&#34;28 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-28&#34;,&#34;totalconfirmed&#34;:&#34;1019&#34;,&#34;totaldeceased&#34;:&#34;24&#34;,&#34;totalrecovered&#34;:&#34;85&#34;},{&#34;dailyconfirmed&#34;:&#34;120&#34;,&#34;dailydeceased&#34;:&#34;3&#34;,&#34;dailyrecovered&#34;:&#34;17&#34;,&#34;date&#34;:&#34;29 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-29&#34;,&#34;totalconfirmed&#34;:&#34;1139&#34;,&#34;totaldeceased&#34;:&#34;27&#34;,&#34;totalrecovered&#34;:&#34;102&#34;},{&#34;dailyconfirmed&#34;:&#34;187&#34;,&#34;dailydeceased&#34;:&#34;14&#34;,&#34;dailyrecovered&#34;:&#34;35&#34;,&#34;date&#34;:&#34;30 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-30&#34;,&#34;totalconfirmed&#34;:&#34;1326&#34;,&#34;totaldeceased&#34;:&#34;41&#34;,&#34;totalrecovered&#34;:&#34;137&#34;},{&#34;dailyconfirmed&#34;:&#34;309&#34;,&#34;dailydeceased&#34;:&#34;6&#34;,&#34;dailyrecovered&#34;:&#34;13&#34;,&#34;date&#34;:&#34;31 March 2020&#34;,&#34;dateymd&#34;:&#34;2020-03-31&#34;,&#34;totalconfirmed&#34;:&#34;1635&#34;,&#34;totaldeceased&#34;:&#34;47&#34;,&#34;totalrecovered&#34;:&#34;150&#34;},{&#34;dailyconfirmed&#34;:&#34;424&#34;,&#34;dailydeceased&#34;:&#34;6&#34;,&#34;dailyrecovered&#34;:&#34;19&#34;,&#34;date&#34;:&#34;1 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-01&#34;,&#34;totalconfirmed&#34;:&#34;2059&#34;,&#34;totaldeceased&#34;:&#34;53&#34;,&#34;totalrecovered&#34;:&#34;169&#34;},{&#34;dailyconfirmed&#34;:&#34;486&#34;,&#34;dailydeceased&#34;:&#34;16&#34;,&#34;dailyrecovered&#34;:&#34;22&#34;,&#34;date&#34;:&#34;2 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-02&#34;,&#34;totalconfirmed&#34;:&#34;2545&#34;,&#34;totaldeceased&#34;:&#34;69&#34;,&#34;totalrecovered&#34;:&#34;191&#34;},{&#34;dailyconfirmed&#34;:&#34;560&#34;,&#34;dailydeceased&#34;:&#34;14&#34;,&#34;dailyrecovered&#34;:&#34;39&#34;,&#34;date&#34;:&#34;3 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-03&#34;,&#34;totalconfirmed&#34;:&#34;3105&#34;,&#34;totaldeceased&#34;:&#34;83&#34;,&#34;totalrecovered&#34;:&#34;230&#34;},{&#34;dailyconfirmed&#34;:&#34;579&#34;,&#34;dailydeceased&#34;:&#34;13&#34;,&#34;dailyrecovered&#34;:&#34;56&#34;,&#34;date&#34;:&#34;4 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-04&#34;,&#34;totalconfirmed&#34;:&#34;3684&#34;,&#34;totaldeceased&#34;:&#34;96&#34;,&#34;totalrecovered&#34;:&#34;286&#34;},{&#34;dailyconfirmed&#34;:&#34;609&#34;,&#34;dailydeceased&#34;:&#34;22&#34;,&#34;dailyrecovered&#34;:&#34;43&#34;,&#34;date&#34;:&#34;5 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-05&#34;,&#34;totalconfirmed&#34;:&#34;4293&#34;,&#34;totaldeceased&#34;:&#34;118&#34;,&#34;totalrecovered&#34;:&#34;329&#34;},{&#34;dailyconfirmed&#34;:&#34;484&#34;,&#34;dailydeceased&#34;:&#34;16&#34;,&#34;dailyrecovered&#34;:&#34;65&#34;,&#34;date&#34;:&#34;6 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-06&#34;,&#34;totalconfirmed&#34;:&#34;4777&#34;,&#34;totaldeceased&#34;:&#34;134&#34;,&#34;totalrecovered&#34;:&#34;394&#34;},{&#34;dailyconfirmed&#34;:&#34;573&#34;,&#34;dailydeceased&#34;:&#34;27&#34;,&#34;dailyrecovered&#34;:&#34;75&#34;,&#34;date&#34;:&#34;7 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-07&#34;,&#34;totalconfirmed&#34;:&#34;5350&#34;,&#34;totaldeceased&#34;:&#34;161&#34;,&#34;totalrecovered&#34;:&#34;469&#34;},{&#34;dailyconfirmed&#34;:&#34;565&#34;,&#34;dailydeceased&#34;:&#34;20&#34;,&#34;dailyrecovered&#34;:&#34;96&#34;,&#34;date&#34;:&#34;8 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-08&#34;,&#34;totalconfirmed&#34;:&#34;5915&#34;,&#34;totaldeceased&#34;:&#34;181&#34;,&#34;totalrecovered&#34;:&#34;565&#34;},{&#34;dailyconfirmed&#34;:&#34;813&#34;,&#34;dailydeceased&#34;:&#34;46&#34;,&#34;dailyrecovered&#34;:&#34;70&#34;,&#34;date&#34;:&#34;9 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-09&#34;,&#34;totalconfirmed&#34;:&#34;6728&#34;,&#34;totaldeceased&#34;:&#34;227&#34;,&#34;totalrecovered&#34;:&#34;635&#34;},{&#34;dailyconfirmed&#34;:&#34;871&#34;,&#34;dailydeceased&#34;:&#34;22&#34;,&#34;dailyrecovered&#34;:&#34;151&#34;,&#34;date&#34;:&#34;10 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-10&#34;,&#34;totalconfirmed&#34;:&#34;7599&#34;,&#34;totaldeceased&#34;:&#34;249&#34;,&#34;totalrecovered&#34;:&#34;786&#34;},{&#34;dailyconfirmed&#34;:&#34;854&#34;,&#34;dailydeceased&#34;:&#34;41&#34;,&#34;dailyrecovered&#34;:&#34;186&#34;,&#34;date&#34;:&#34;11 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-11&#34;,&#34;totalconfirmed&#34;:&#34;8453&#34;,&#34;totaldeceased&#34;:&#34;290&#34;,&#34;totalrecovered&#34;:&#34;972&#34;},{&#34;dailyconfirmed&#34;:&#34;758&#34;,&#34;dailydeceased&#34;:&#34;42&#34;,&#34;dailyrecovered&#34;:&#34;114&#34;,&#34;date&#34;:&#34;12 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-12&#34;,&#34;totalconfirmed&#34;:&#34;9211&#34;,&#34;totaldeceased&#34;:&#34;332&#34;,&#34;totalrecovered&#34;:&#34;1086&#34;},{&#34;dailyconfirmed&#34;:&#34;1243&#34;,&#34;dailydeceased&#34;:&#34;27&#34;,&#34;dailyrecovered&#34;:&#34;112&#34;,&#34;date&#34;:&#34;13 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-13&#34;,&#34;totalconfirmed&#34;:&#34;10454&#34;,&#34;totaldeceased&#34;:&#34;359&#34;,&#34;totalrecovered&#34;:&#34;1198&#34;},{&#34;dailyconfirmed&#34;:&#34;1031&#34;,&#34;dailydeceased&#34;:&#34;37&#34;,&#34;dailyrecovered&#34;:&#34;167&#34;,&#34;date&#34;:&#34;14 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-14&#34;,&#34;totalconfirmed&#34;:&#34;11485&#34;,&#34;totaldeceased&#34;:&#34;396&#34;,&#34;totalrecovered&#34;:&#34;1365&#34;},{&#34;dailyconfirmed&#34;:&#34;886&#34;,&#34;dailydeceased&#34;:&#34;27&#34;,&#34;dailyrecovered&#34;:&#34;144&#34;,&#34;date&#34;:&#34;15 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-15&#34;,&#34;totalconfirmed&#34;:&#34;12371&#34;,&#34;totaldeceased&#34;:&#34;423&#34;,&#34;totalrecovered&#34;:&#34;1509&#34;},{&#34;dailyconfirmed&#34;:&#34;1061&#34;,&#34;dailydeceased&#34;:&#34;26&#34;,&#34;dailyrecovered&#34;:&#34;258&#34;,&#34;date&#34;:&#34;16 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-16&#34;,&#34;totalconfirmed&#34;:&#34;13432&#34;,&#34;totaldeceased&#34;:&#34;449&#34;,&#34;totalrecovered&#34;:&#34;1767&#34;},{&#34;dailyconfirmed&#34;:&#34;922&#34;,&#34;dailydeceased&#34;:&#34;38&#34;,&#34;dailyrecovered&#34;:&#34;273&#34;,&#34;date&#34;:&#34;17 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-17&#34;,&#34;totalconfirmed&#34;:&#34;14354&#34;,&#34;totaldeceased&#34;:&#34;487&#34;,&#34;totalrecovered&#34;:&#34;2040&#34;},{&#34;dailyconfirmed&#34;:&#34;1371&#34;,&#34;dailydeceased&#34;:&#34;35&#34;,&#34;dailyrecovered&#34;:&#34;426&#34;,&#34;date&#34;:&#34;18 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-18&#34;,&#34;totalconfirmed&#34;:&#34;15725&#34;,&#34;totaldeceased&#34;:&#34;522&#34;,&#34;totalrecovered&#34;:&#34;2466&#34;},{&#34;dailyconfirmed&#34;:&#34;1580&#34;,&#34;dailydeceased&#34;:&#34;38&#34;,&#34;dailyrecovered&#34;:&#34;388&#34;,&#34;date&#34;:&#34;19 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-19&#34;,&#34;totalconfirmed&#34;:&#34;17305&#34;,&#34;totaldeceased&#34;:&#34;560&#34;,&#34;totalrecovered&#34;:&#34;2854&#34;},{&#34;dailyconfirmed&#34;:&#34;1239&#34;,&#34;dailydeceased&#34;:&#34;33&#34;,&#34;dailyrecovered&#34;:&#34;419&#34;,&#34;date&#34;:&#34;20 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-20&#34;,&#34;totalconfirmed&#34;:&#34;18544&#34;,&#34;totaldeceased&#34;:&#34;593&#34;,&#34;totalrecovered&#34;:&#34;3273&#34;},{&#34;dailyconfirmed&#34;:&#34;1537&#34;,&#34;dailydeceased&#34;:&#34;53&#34;,&#34;dailyrecovered&#34;:&#34;703&#34;,&#34;date&#34;:&#34;21 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-21&#34;,&#34;totalconfirmed&#34;:&#34;20081&#34;,&#34;totaldeceased&#34;:&#34;646&#34;,&#34;totalrecovered&#34;:&#34;3976&#34;},{&#34;dailyconfirmed&#34;:&#34;1292&#34;,&#34;dailydeceased&#34;:&#34;36&#34;,&#34;dailyrecovered&#34;:&#34;394&#34;,&#34;date&#34;:&#34;22 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-22&#34;,&#34;totalconfirmed&#34;:&#34;21373&#34;,&#34;totaldeceased&#34;:&#34;682&#34;,&#34;totalrecovered&#34;:&#34;4370&#34;},{&#34;dailyconfirmed&#34;:&#34;1667&#34;,&#34;dailydeceased&#34;:&#34;40&#34;,&#34;dailyrecovered&#34;:&#34;642&#34;,&#34;date&#34;:&#34;23 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-23&#34;,&#34;totalconfirmed&#34;:&#34;23040&#34;,&#34;totaldeceased&#34;:&#34;722&#34;,&#34;totalrecovered&#34;:&#34;5012&#34;},{&#34;dailyconfirmed&#34;:&#34;1408&#34;,&#34;dailydeceased&#34;:&#34;59&#34;,&#34;dailyrecovered&#34;:&#34;484&#34;,&#34;date&#34;:&#34;24 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-24&#34;,&#34;totalconfirmed&#34;:&#34;24448&#34;,&#34;totaldeceased&#34;:&#34;781&#34;,&#34;totalrecovered&#34;:&#34;5496&#34;},{&#34;dailyconfirmed&#34;:&#34;1835&#34;,&#34;dailydeceased&#34;:&#34;44&#34;,&#34;dailyrecovered&#34;:&#34;442&#34;,&#34;date&#34;:&#34;25 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-25&#34;,&#34;totalconfirmed&#34;:&#34;26283&#34;,&#34;totaldeceased&#34;:&#34;825&#34;,&#34;totalrecovered&#34;:&#34;5938&#34;},{&#34;dailyconfirmed&#34;:&#34;1607&#34;,&#34;dailydeceased&#34;:&#34;56&#34;,&#34;dailyrecovered&#34;:&#34;585&#34;,&#34;date&#34;:&#34;26 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-26&#34;,&#34;totalconfirmed&#34;:&#34;27890&#34;,&#34;totaldeceased&#34;:&#34;881&#34;,&#34;totalrecovered&#34;:&#34;6523&#34;},{&#34;dailyconfirmed&#34;:&#34;1568&#34;,&#34;dailydeceased&#34;:&#34;58&#34;,&#34;dailyrecovered&#34;:&#34;580&#34;,&#34;date&#34;:&#34;27 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-27&#34;,&#34;totalconfirmed&#34;:&#34;29458&#34;,&#34;totaldeceased&#34;:&#34;939&#34;,&#34;totalrecovered&#34;:&#34;7103&#34;},{&#34;dailyconfirmed&#34;:&#34;1902&#34;,&#34;dailydeceased&#34;:&#34;69&#34;,&#34;dailyrecovered&#34;:&#34;636&#34;,&#34;date&#34;:&#34;28 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-28&#34;,&#34;totalconfirmed&#34;:&#34;31360&#34;,&#34;totaldeceased&#34;:&#34;1008&#34;,&#34;totalrecovered&#34;:&#34;7739&#34;},{&#34;dailyconfirmed&#34;:&#34;1705&#34;,&#34;dailydeceased&#34;:&#34;71&#34;,&#34;dailyrecovered&#34;:&#34;690&#34;,&#34;date&#34;:&#34;29 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-29&#34;,&#34;totalconfirmed&#34;:&#34;33065&#34;,&#34;totaldeceased&#34;:&#34;1079&#34;,&#34;totalrecovered&#34;:&#34;8429&#34;},{&#34;dailyconfirmed&#34;:&#34;1801&#34;,&#34;dailydeceased&#34;:&#34;75&#34;,&#34;dailyrecovered&#34;:&#34;630&#34;,&#34;date&#34;:&#34;30 April 2020&#34;,&#34;dateymd&#34;:&#34;2020-04-30&#34;,&#34;totalconfirmed&#34;:&#34;34866&#34;,&#34;totaldeceased&#34;:&#34;1154&#34;,&#34;totalrecovered&#34;:&#34;9059&#34;},{&#34;dailyconfirmed&#34;:&#34;2396&#34;,&#34;dailydeceased&#34;:&#34;77&#34;,&#34;dailyrecovered&#34;:&#34;962&#34;,&#34;date&#34;:&#34;1 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-01&#34;,&#34;totalconfirmed&#34;:&#34;37262&#34;,&#34;totaldeceased&#34;:&#34;1231&#34;,&#34;totalrecovered&#34;:&#34;10021&#34;},{&#34;dailyconfirmed&#34;:&#34;2564&#34;,&#34;dailydeceased&#34;:&#34;92&#34;,&#34;dailyrecovered&#34;:&#34;831&#34;,&#34;date&#34;:&#34;2 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-02&#34;,&#34;totalconfirmed&#34;:&#34;39826&#34;,&#34;totaldeceased&#34;:&#34;1323&#34;,&#34;totalrecovered&#34;:&#34;10852&#34;},{&#34;dailyconfirmed&#34;:&#34;2952&#34;,&#34;dailydeceased&#34;:&#34;140&#34;,&#34;dailyrecovered&#34;:&#34;911&#34;,&#34;date&#34;:&#34;3 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-03&#34;,&#34;totalconfirmed&#34;:&#34;42778&#34;,&#34;totaldeceased&#34;:&#34;1463&#34;,&#34;totalrecovered&#34;:&#34;11763&#34;},{&#34;dailyconfirmed&#34;:&#34;3656&#34;,&#34;dailydeceased&#34;:&#34;103&#34;,&#34;dailyrecovered&#34;:&#34;1082&#34;,&#34;date&#34;:&#34;4 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-04&#34;,&#34;totalconfirmed&#34;:&#34;46434&#34;,&#34;totaldeceased&#34;:&#34;1566&#34;,&#34;totalrecovered&#34;:&#34;12845&#34;},{&#34;dailyconfirmed&#34;:&#34;2971&#34;,&#34;dailydeceased&#34;:&#34;128&#34;,&#34;dailyrecovered&#34;:&#34;1295&#34;,&#34;date&#34;:&#34;5 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-05&#34;,&#34;totalconfirmed&#34;:&#34;49405&#34;,&#34;totaldeceased&#34;:&#34;1694&#34;,&#34;totalrecovered&#34;:&#34;14140&#34;},{&#34;dailyconfirmed&#34;:&#34;3602&#34;,&#34;dailydeceased&#34;:&#34;91&#34;,&#34;dailyrecovered&#34;:&#34;1161&#34;,&#34;date&#34;:&#34;6 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-06&#34;,&#34;totalconfirmed&#34;:&#34;53007&#34;,&#34;totaldeceased&#34;:&#34;1785&#34;,&#34;totalrecovered&#34;:&#34;15301&#34;},{&#34;dailyconfirmed&#34;:&#34;3344&#34;,&#34;dailydeceased&#34;:&#34;104&#34;,&#34;dailyrecovered&#34;:&#34;1475&#34;,&#34;date&#34;:&#34;7 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-07&#34;,&#34;totalconfirmed&#34;:&#34;56351&#34;,&#34;totaldeceased&#34;:&#34;1889&#34;,&#34;totalrecovered&#34;:&#34;16776&#34;},{&#34;dailyconfirmed&#34;:&#34;3339&#34;,&#34;dailydeceased&#34;:&#34;97&#34;,&#34;dailyrecovered&#34;:&#34;1111&#34;,&#34;date&#34;:&#34;8 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-08&#34;,&#34;totalconfirmed&#34;:&#34;59690&#34;,&#34;totaldeceased&#34;:&#34;1986&#34;,&#34;totalrecovered&#34;:&#34;17887&#34;},{&#34;dailyconfirmed&#34;:&#34;3175&#34;,&#34;dailydeceased&#34;:&#34;115&#34;,&#34;dailyrecovered&#34;:&#34;1414&#34;,&#34;date&#34;:&#34;9 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-09&#34;,&#34;totalconfirmed&#34;:&#34;62865&#34;,&#34;totaldeceased&#34;:&#34;2101&#34;,&#34;totalrecovered&#34;:&#34;19301&#34;},{&#34;dailyconfirmed&#34;:&#34;4311&#34;,&#34;dailydeceased&#34;:&#34;112&#34;,&#34;dailyrecovered&#34;:&#34;1669&#34;,&#34;date&#34;:&#34;10 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-10&#34;,&#34;totalconfirmed&#34;:&#34;67176&#34;,&#34;totaldeceased&#34;:&#34;2213&#34;,&#34;totalrecovered&#34;:&#34;20970&#34;},{&#34;dailyconfirmed&#34;:&#34;3592&#34;,&#34;dailydeceased&#34;:&#34;81&#34;,&#34;dailyrecovered&#34;:&#34;1579&#34;,&#34;date&#34;:&#34;11 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-11&#34;,&#34;totalconfirmed&#34;:&#34;70768&#34;,&#34;totaldeceased&#34;:&#34;2294&#34;,&#34;totalrecovered&#34;:&#34;22549&#34;},{&#34;dailyconfirmed&#34;:&#34;3562&#34;,&#34;dailydeceased&#34;:&#34;120&#34;,&#34;dailyrecovered&#34;:&#34;1905&#34;,&#34;date&#34;:&#34;12 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-12&#34;,&#34;totalconfirmed&#34;:&#34;74330&#34;,&#34;totaldeceased&#34;:&#34;2414&#34;,&#34;totalrecovered&#34;:&#34;24454&#34;},{&#34;dailyconfirmed&#34;:&#34;3726&#34;,&#34;dailydeceased&#34;:&#34;137&#34;,&#34;dailyrecovered&#34;:&#34;1963&#34;,&#34;date&#34;:&#34;13 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-13&#34;,&#34;totalconfirmed&#34;:&#34;78056&#34;,&#34;totaldeceased&#34;:&#34;2551&#34;,&#34;totalrecovered&#34;:&#34;26417&#34;},{&#34;dailyconfirmed&#34;:&#34;3991&#34;,&#34;dailydeceased&#34;:&#34;97&#34;,&#34;dailyrecovered&#34;:&#34;1594&#34;,&#34;date&#34;:&#34;14 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-14&#34;,&#34;totalconfirmed&#34;:&#34;82047&#34;,&#34;totaldeceased&#34;:&#34;2648&#34;,&#34;totalrecovered&#34;:&#34;28011&#34;},{&#34;dailyconfirmed&#34;:&#34;3808&#34;,&#34;dailydeceased&#34;:&#34;104&#34;,&#34;dailyrecovered&#34;:&#34;2234&#34;,&#34;date&#34;:&#34;15 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-15&#34;,&#34;totalconfirmed&#34;:&#34;85855&#34;,&#34;totaldeceased&#34;:&#34;2752&#34;,&#34;totalrecovered&#34;:&#34;30245&#34;},{&#34;dailyconfirmed&#34;:&#34;4794&#34;,&#34;dailydeceased&#34;:&#34;120&#34;,&#34;dailyrecovered&#34;:&#34;4012&#34;,&#34;date&#34;:&#34;16 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-16&#34;,&#34;totalconfirmed&#34;:&#34;90649&#34;,&#34;totaldeceased&#34;:&#34;2872&#34;,&#34;totalrecovered&#34;:&#34;34257&#34;},{&#34;dailyconfirmed&#34;:&#34;5049&#34;,&#34;dailydeceased&#34;:&#34;152&#34;,&#34;dailyrecovered&#34;:&#34;2538&#34;,&#34;date&#34;:&#34;17 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-17&#34;,&#34;totalconfirmed&#34;:&#34;95698&#34;,&#34;totaldeceased&#34;:&#34;3024&#34;,&#34;totalrecovered&#34;:&#34;36795&#34;},{&#34;dailyconfirmed&#34;:&#34;4628&#34;,&#34;dailydeceased&#34;:&#34;131&#34;,&#34;dailyrecovered&#34;:&#34;2482&#34;,&#34;date&#34;:&#34;18 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-18&#34;,&#34;totalconfirmed&#34;:&#34;100326&#34;,&#34;totaldeceased&#34;:&#34;3155&#34;,&#34;totalrecovered&#34;:&#34;39277&#34;},{&#34;dailyconfirmed&#34;:&#34;6154&#34;,&#34;dailydeceased&#34;:&#34;146&#34;,&#34;dailyrecovered&#34;:&#34;3032&#34;,&#34;date&#34;:&#34;19 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-19&#34;,&#34;totalconfirmed&#34;:&#34;106480&#34;,&#34;totaldeceased&#34;:&#34;3301&#34;,&#34;totalrecovered&#34;:&#34;42309&#34;},{&#34;dailyconfirmed&#34;:&#34;5720&#34;,&#34;dailydeceased&#34;:&#34;134&#34;,&#34;dailyrecovered&#34;:&#34;3113&#34;,&#34;date&#34;:&#34;20 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-20&#34;,&#34;totalconfirmed&#34;:&#34;112200&#34;,&#34;totaldeceased&#34;:&#34;3435&#34;,&#34;totalrecovered&#34;:&#34;45422&#34;},{&#34;dailyconfirmed&#34;:&#34;6023&#34;,&#34;dailydeceased&#34;:&#34;148&#34;,&#34;dailyrecovered&#34;:&#34;3131&#34;,&#34;date&#34;:&#34;21 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-21&#34;,&#34;totalconfirmed&#34;:&#34;118223&#34;,&#34;totaldeceased&#34;:&#34;3583&#34;,&#34;totalrecovered&#34;:&#34;48553&#34;},{&#34;dailyconfirmed&#34;:&#34;6536&#34;,&#34;dailydeceased&#34;:&#34;142&#34;,&#34;dailyrecovered&#34;:&#34;3280&#34;,&#34;date&#34;:&#34;22 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-22&#34;,&#34;totalconfirmed&#34;:&#34;124759&#34;,&#34;totaldeceased&#34;:&#34;3725&#34;,&#34;totalrecovered&#34;:&#34;51833&#34;},{&#34;dailyconfirmed&#34;:&#34;6667&#34;,&#34;dailydeceased&#34;:&#34;142&#34;,&#34;dailyrecovered&#34;:&#34;2576&#34;,&#34;date&#34;:&#34;23 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-23&#34;,&#34;totalconfirmed&#34;:&#34;131424&#34;,&#34;totaldeceased&#34;:&#34;3867&#34;,&#34;totalrecovered&#34;:&#34;54409&#34;},{&#34;dailyconfirmed&#34;:&#34;7111&#34;,&#34;dailydeceased&#34;:&#34;156&#34;,&#34;dailyrecovered&#34;:&#34;3285&#34;,&#34;date&#34;:&#34;24 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-24&#34;,&#34;totalconfirmed&#34;:&#34;138537&#34;,&#34;totaldeceased&#34;:&#34;4023&#34;,&#34;totalrecovered&#34;:&#34;57694&#34;},{&#34;dailyconfirmed&#34;:&#34;6414&#34;,&#34;dailydeceased&#34;:&#34;150&#34;,&#34;dailyrecovered&#34;:&#34;3012&#34;,&#34;date&#34;:&#34;25 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-25&#34;,&#34;totalconfirmed&#34;:&#34;144951&#34;,&#34;totaldeceased&#34;:&#34;4173&#34;,&#34;totalrecovered&#34;:&#34;60706&#34;},{&#34;dailyconfirmed&#34;:&#34;5907&#34;,&#34;dailydeceased&#34;:&#34;173&#34;,&#34;dailyrecovered&#34;:&#34;3585&#34;,&#34;date&#34;:&#34;26 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-26&#34;,&#34;totalconfirmed&#34;:&#34;150858&#34;,&#34;totaldeceased&#34;:&#34;4346&#34;,&#34;totalrecovered&#34;:&#34;64291&#34;},{&#34;dailyconfirmed&#34;:&#34;7246&#34;,&#34;dailydeceased&#34;:&#34;188&#34;,&#34;dailyrecovered&#34;:&#34;3434&#34;,&#34;date&#34;:&#34;27 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-27&#34;,&#34;totalconfirmed&#34;:&#34;158104&#34;,&#34;totaldeceased&#34;:&#34;4534&#34;,&#34;totalrecovered&#34;:&#34;67725&#34;},{&#34;dailyconfirmed&#34;:&#34;7254&#34;,&#34;dailydeceased&#34;:&#34;176&#34;,&#34;dailyrecovered&#34;:&#34;3171&#34;,&#34;date&#34;:&#34;28 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-28&#34;,&#34;totalconfirmed&#34;:&#34;165358&#34;,&#34;totaldeceased&#34;:&#34;4710&#34;,&#34;totalrecovered&#34;:&#34;70896&#34;},{&#34;dailyconfirmed&#34;:&#34;8138&#34;,&#34;dailydeceased&#34;:&#34;269&#34;,&#34;dailyrecovered&#34;:&#34;11735&#34;,&#34;date&#34;:&#34;29 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-29&#34;,&#34;totalconfirmed&#34;:&#34;173496&#34;,&#34;totaldeceased&#34;:&#34;4979&#34;,&#34;totalrecovered&#34;:&#34;82631&#34;},{&#34;dailyconfirmed&#34;:&#34;8364&#34;,&#34;dailydeceased&#34;:&#34;205&#34;,&#34;dailyrecovered&#34;:&#34;4303&#34;,&#34;date&#34;:&#34;30 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-30&#34;,&#34;totalconfirmed&#34;:&#34;181860&#34;,&#34;totaldeceased&#34;:&#34;5184&#34;,&#34;totalrecovered&#34;:&#34;86934&#34;},{&#34;dailyconfirmed&#34;:&#34;8789&#34;,&#34;dailydeceased&#34;:&#34;222&#34;,&#34;dailyrecovered&#34;:&#34;4928&#34;,&#34;date&#34;:&#34;31 May 2020&#34;,&#34;dateymd&#34;:&#34;2020-05-31&#34;,&#34;totalconfirmed&#34;:&#34;190649&#34;,&#34;totaldeceased&#34;:&#34;5406&#34;,&#34;totalrecovered&#34;:&#34;91862&#34;},{&#34;dailyconfirmed&#34;:&#34;7723&#34;,&#34;dailydeceased&#34;:&#34;201&#34;,&#34;dailyrecovered&#34;:&#34;3882&#34;,&#34;date&#34;:&#34;1 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-01&#34;,&#34;totalconfirmed&#34;:&#34;198372&#34;,&#34;totaldeceased&#34;:&#34;5607&#34;,&#34;totalrecovered&#34;:&#34;95744&#34;},{&#34;dailyconfirmed&#34;:&#34;8812&#34;,&#34;dailydeceased&#34;:&#34;222&#34;,&#34;dailyrecovered&#34;:&#34;4531&#34;,&#34;date&#34;:&#34;2 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-02&#34;,&#34;totalconfirmed&#34;:&#34;207187&#34;,&#34;totaldeceased&#34;:&#34;5829&#34;,&#34;totalrecovered&#34;:&#34;100275&#34;},{&#34;dailyconfirmed&#34;:&#34;9689&#34;,&#34;dailydeceased&#34;:&#34;259&#34;,&#34;dailyrecovered&#34;:&#34;3789&#34;,&#34;date&#34;:&#34;3 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-03&#34;,&#34;totalconfirmed&#34;:&#34;216876&#34;,&#34;totaldeceased&#34;:&#34;6088&#34;,&#34;totalrecovered&#34;:&#34;104064&#34;},{&#34;dailyconfirmed&#34;:&#34;9847&#34;,&#34;dailydeceased&#34;:&#34;274&#34;,&#34;dailyrecovered&#34;:&#34;4390&#34;,&#34;date&#34;:&#34;4 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-04&#34;,&#34;totalconfirmed&#34;:&#34;226723&#34;,&#34;totaldeceased&#34;:&#34;6362&#34;,&#34;totalrecovered&#34;:&#34;108454&#34;},{&#34;dailyconfirmed&#34;:&#34;9472&#34;,&#34;dailydeceased&#34;:&#34;286&#34;,&#34;dailyrecovered&#34;:&#34;4770&#34;,&#34;date&#34;:&#34;5 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-05&#34;,&#34;totalconfirmed&#34;:&#34;236195&#34;,&#34;totaldeceased&#34;:&#34;6648&#34;,&#34;totalrecovered&#34;:&#34;113224&#34;},{&#34;dailyconfirmed&#34;:&#34;10408&#34;,&#34;dailydeceased&#34;:&#34;297&#34;,&#34;dailyrecovered&#34;:&#34;5433&#34;,&#34;date&#34;:&#34;6 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-06&#34;,&#34;totalconfirmed&#34;:&#34;246603&#34;,&#34;totaldeceased&#34;:&#34;6945&#34;,&#34;totalrecovered&#34;:&#34;118657&#34;},{&#34;dailyconfirmed&#34;:&#34;10882&#34;,&#34;dailydeceased&#34;:&#34;261&#34;,&#34;dailyrecovered&#34;:&#34;5191&#34;,&#34;date&#34;:&#34;7 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-07&#34;,&#34;totalconfirmed&#34;:&#34;257485&#34;,&#34;totaldeceased&#34;:&#34;7206&#34;,&#34;totalrecovered&#34;:&#34;123848&#34;},{&#34;dailyconfirmed&#34;:&#34;8536&#34;,&#34;dailydeceased&#34;:&#34;271&#34;,&#34;dailyrecovered&#34;:&#34;5171&#34;,&#34;date&#34;:&#34;8 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-08&#34;,&#34;totalconfirmed&#34;:&#34;266021&#34;,&#34;totaldeceased&#34;:&#34;7477&#34;,&#34;totalrecovered&#34;:&#34;129019&#34;},{&#34;dailyconfirmed&#34;:&#34;9981&#34;,&#34;dailydeceased&#34;:&#34;272&#34;,&#34;dailyrecovered&#34;:&#34;5634&#34;,&#34;date&#34;:&#34;9 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-09&#34;,&#34;totalconfirmed&#34;:&#34;276002&#34;,&#34;totaldeceased&#34;:&#34;7749&#34;,&#34;totalrecovered&#34;:&#34;134653&#34;},{&#34;dailyconfirmed&#34;:&#34;11156&#34;,&#34;dailydeceased&#34;:&#34;358&#34;,&#34;dailyrecovered&#34;:&#34;6275&#34;,&#34;date&#34;:&#34;10 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-10&#34;,&#34;totalconfirmed&#34;:&#34;287158&#34;,&#34;totaldeceased&#34;:&#34;8107&#34;,&#34;totalrecovered&#34;:&#34;140928&#34;},{&#34;dailyconfirmed&#34;:&#34;11135&#34;,&#34;dailydeceased&#34;:&#34;394&#34;,&#34;dailyrecovered&#34;:&#34;6044&#34;,&#34;date&#34;:&#34;11 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-11&#34;,&#34;totalconfirmed&#34;:&#34;298293&#34;,&#34;totaldeceased&#34;:&#34;8501&#34;,&#34;totalrecovered&#34;:&#34;146972&#34;},{&#34;dailyconfirmed&#34;:&#34;11306&#34;,&#34;dailydeceased&#34;:&#34;388&#34;,&#34;dailyrecovered&#34;:&#34;7263&#34;,&#34;date&#34;:&#34;12 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-12&#34;,&#34;totalconfirmed&#34;:&#34;309599&#34;,&#34;totaldeceased&#34;:&#34;8889&#34;,&#34;totalrecovered&#34;:&#34;154235&#34;},{&#34;dailyconfirmed&#34;:&#34;12039&#34;,&#34;dailydeceased&#34;:&#34;309&#34;,&#34;dailyrecovered&#34;:&#34;8092&#34;,&#34;date&#34;:&#34;13 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-13&#34;,&#34;totalconfirmed&#34;:&#34;321638&#34;,&#34;totaldeceased&#34;:&#34;9198&#34;,&#34;totalrecovered&#34;:&#34;162327&#34;},{&#34;dailyconfirmed&#34;:&#34;11405&#34;,&#34;dailydeceased&#34;:&#34;324&#34;,&#34;dailyrecovered&#34;:&#34;7358&#34;,&#34;date&#34;:&#34;14 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-14&#34;,&#34;totalconfirmed&#34;:&#34;333043&#34;,&#34;totaldeceased&#34;:&#34;9522&#34;,&#34;totalrecovered&#34;:&#34;169685&#34;},{&#34;dailyconfirmed&#34;:&#34;10032&#34;,&#34;dailydeceased&#34;:&#34;396&#34;,&#34;dailyrecovered&#34;:&#34;10639&#34;,&#34;date&#34;:&#34;15 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-15&#34;,&#34;totalconfirmed&#34;:&#34;343075&#34;,&#34;totaldeceased&#34;:&#34;9918&#34;,&#34;totalrecovered&#34;:&#34;180324&#34;},{&#34;dailyconfirmed&#34;:&#34;11086&#34;,&#34;dailydeceased&#34;:&#34;2004&#34;,&#34;dailyrecovered&#34;:&#34;7226&#34;,&#34;date&#34;:&#34;16 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-16&#34;,&#34;totalconfirmed&#34;:&#34;354161&#34;,&#34;totaldeceased&#34;:&#34;11922&#34;,&#34;totalrecovered&#34;:&#34;187550&#34;},{&#34;dailyconfirmed&#34;:&#34;13108&#34;,&#34;dailydeceased&#34;:&#34;341&#34;,&#34;dailyrecovered&#34;:&#34;6890&#34;,&#34;date&#34;:&#34;17 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-17&#34;,&#34;totalconfirmed&#34;:&#34;367269&#34;,&#34;totaldeceased&#34;:&#34;12263&#34;,&#34;totalrecovered&#34;:&#34;194440&#34;},{&#34;dailyconfirmed&#34;:&#34;13829&#34;,&#34;dailydeceased&#34;:&#34;343&#34;,&#34;dailyrecovered&#34;:&#34;10741&#34;,&#34;date&#34;:&#34;18 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-18&#34;,&#34;totalconfirmed&#34;:&#34;381098&#34;,&#34;totaldeceased&#34;:&#34;12606&#34;,&#34;totalrecovered&#34;:&#34;205181&#34;},{&#34;dailyconfirmed&#34;:&#34;14740&#34;,&#34;dailydeceased&#34;:&#34;364&#34;,&#34;dailyrecovered&#34;:&#34;9029&#34;,&#34;date&#34;:&#34;19 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-19&#34;,&#34;totalconfirmed&#34;:&#34;395838&#34;,&#34;totaldeceased&#34;:&#34;12970&#34;,&#34;totalrecovered&#34;:&#34;214210&#34;},{&#34;dailyconfirmed&#34;:&#34;15918&#34;,&#34;dailydeceased&#34;:&#34;308&#34;,&#34;dailyrecovered&#34;:&#34;13974&#34;,&#34;date&#34;:&#34;20 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-20&#34;,&#34;totalconfirmed&#34;:&#34;411753&#34;,&#34;totaldeceased&#34;:&#34;13278&#34;,&#34;totalrecovered&#34;:&#34;228184&#34;},{&#34;dailyconfirmed&#34;:&#34;15151&#34;,&#34;dailydeceased&#34;:&#34;426&#34;,&#34;dailyrecovered&#34;:&#34;9075&#34;,&#34;date&#34;:&#34;21 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-21&#34;,&#34;totalconfirmed&#34;:&#34;426904&#34;,&#34;totaldeceased&#34;:&#34;13704&#34;,&#34;totalrecovered&#34;:&#34;237259&#34;},{&#34;dailyconfirmed&#34;:&#34;13560&#34;,&#34;dailydeceased&#34;:&#34;312&#34;,&#34;dailyrecovered&#34;:&#34;10879&#34;,&#34;date&#34;:&#34;22 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-22&#34;,&#34;totalconfirmed&#34;:&#34;440464&#34;,&#34;totaldeceased&#34;:&#34;14016&#34;,&#34;totalrecovered&#34;:&#34;248138&#34;},{&#34;dailyconfirmed&#34;:&#34;15656&#34;,&#34;dailydeceased&#34;:&#34;468&#34;,&#34;dailyrecovered&#34;:&#34;10462&#34;,&#34;date&#34;:&#34;23 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-23&#34;,&#34;totalconfirmed&#34;:&#34;456120&#34;,&#34;totaldeceased&#34;:&#34;14484&#34;,&#34;totalrecovered&#34;:&#34;258600&#34;},{&#34;dailyconfirmed&#34;:&#34;16868&#34;,&#34;dailydeceased&#34;:&#34;424&#34;,&#34;dailyrecovered&#34;:&#34;13089&#34;,&#34;date&#34;:&#34;24 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-24&#34;,&#34;totalconfirmed&#34;:&#34;472988&#34;,&#34;totaldeceased&#34;:&#34;14908&#34;,&#34;totalrecovered&#34;:&#34;271689&#34;},{&#34;dailyconfirmed&#34;:&#34;18205&#34;,&#34;dailydeceased&#34;:&#34;401&#34;,&#34;dailyrecovered&#34;:&#34;13983&#34;,&#34;date&#34;:&#34;25 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-25&#34;,&#34;totalconfirmed&#34;:&#34;491193&#34;,&#34;totaldeceased&#34;:&#34;15309&#34;,&#34;totalrecovered&#34;:&#34;285672&#34;},{&#34;dailyconfirmed&#34;:&#34;18255&#34;,&#34;dailydeceased&#34;:&#34;381&#34;,&#34;dailyrecovered&#34;:&#34;10246&#34;,&#34;date&#34;:&#34;26 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-26&#34;,&#34;totalconfirmed&#34;:&#34;509448&#34;,&#34;totaldeceased&#34;:&#34;15690&#34;,&#34;totalrecovered&#34;:&#34;295918&#34;},{&#34;dailyconfirmed&#34;:&#34;20142&#34;,&#34;dailydeceased&#34;:&#34;414&#34;,&#34;dailyrecovered&#34;:&#34;14229&#34;,&#34;date&#34;:&#34;27 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-27&#34;,&#34;totalconfirmed&#34;:&#34;529590&#34;,&#34;totaldeceased&#34;:&#34;16104&#34;,&#34;totalrecovered&#34;:&#34;310147&#34;},{&#34;dailyconfirmed&#34;:&#34;19610&#34;,&#34;dailydeceased&#34;:&#34;384&#34;,&#34;dailyrecovered&#34;:&#34;11631&#34;,&#34;date&#34;:&#34;28 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-28&#34;,&#34;totalconfirmed&#34;:&#34;549200&#34;,&#34;totaldeceased&#34;:&#34;16488&#34;,&#34;totalrecovered&#34;:&#34;321778&#34;},{&#34;dailyconfirmed&#34;:&#34;18339&#34;,&#34;dailydeceased&#34;:&#34;417&#34;,&#34;dailyrecovered&#34;:&#34;13497&#34;,&#34;date&#34;:&#34;29 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-29&#34;,&#34;totalconfirmed&#34;:&#34;567539&#34;,&#34;totaldeceased&#34;:&#34;16905&#34;,&#34;totalrecovered&#34;:&#34;335275&#34;},{&#34;dailyconfirmed&#34;:&#34;18256&#34;,&#34;dailydeceased&#34;:&#34;506&#34;,&#34;dailyrecovered&#34;:&#34;12565&#34;,&#34;date&#34;:&#34;30 June 2020&#34;,&#34;dateymd&#34;:&#34;2020-06-30&#34;,&#34;totalconfirmed&#34;:&#34;585795&#34;,&#34;totaldeceased&#34;:&#34;17411&#34;,&#34;totalrecovered&#34;:&#34;347840&#34;},{&#34;dailyconfirmed&#34;:&#34;19429&#34;,&#34;dailydeceased&#34;:&#34;438&#34;,&#34;dailyrecovered&#34;:&#34;12064&#34;,&#34;date&#34;:&#34;1 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-01&#34;,&#34;totalconfirmed&#34;:&#34;605224&#34;,&#34;totaldeceased&#34;:&#34;17849&#34;,&#34;totalrecovered&#34;:&#34;359904&#34;},{&#34;dailyconfirmed&#34;:&#34;21947&#34;,&#34;dailydeceased&#34;:&#34;378&#34;,&#34;dailyrecovered&#34;:&#34;19999&#34;,&#34;date&#34;:&#34;2 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-02&#34;,&#34;totalconfirmed&#34;:&#34;627171&#34;,&#34;totaldeceased&#34;:&#34;18227&#34;,&#34;totalrecovered&#34;:&#34;379903&#34;},{&#34;dailyconfirmed&#34;:&#34;22718&#34;,&#34;dailydeceased&#34;:&#34;444&#34;,&#34;dailyrecovered&#34;:&#34;14417&#34;,&#34;date&#34;:&#34;3 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-03&#34;,&#34;totalconfirmed&#34;:&#34;649889&#34;,&#34;totaldeceased&#34;:&#34;18671&#34;,&#34;totalrecovered&#34;:&#34;394320&#34;},{&#34;dailyconfirmed&#34;:&#34;24018&#34;,&#34;dailydeceased&#34;:&#34;611&#34;,&#34;dailyrecovered&#34;:&#34;14746&#34;,&#34;date&#34;:&#34;4 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-04&#34;,&#34;totalconfirmed&#34;:&#34;673907&#34;,&#34;totaldeceased&#34;:&#34;19282&#34;,&#34;totalrecovered&#34;:&#34;409066&#34;},{&#34;dailyconfirmed&#34;:&#34;23942&#34;,&#34;dailydeceased&#34;:&#34;421&#34;,&#34;dailyrecovered&#34;:&#34;15829&#34;,&#34;date&#34;:&#34;5 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-05&#34;,&#34;totalconfirmed&#34;:&#34;697849&#34;,&#34;totaldeceased&#34;:&#34;19703&#34;,&#34;totalrecovered&#34;:&#34;424895&#34;},{&#34;dailyconfirmed&#34;:&#34;22500&#34;,&#34;dailydeceased&#34;:&#34;473&#34;,&#34;dailyrecovered&#34;:&#34;15315&#34;,&#34;date&#34;:&#34;6 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-06&#34;,&#34;totalconfirmed&#34;:&#34;720349&#34;,&#34;totaldeceased&#34;:&#34;20176&#34;,&#34;totalrecovered&#34;:&#34;440210&#34;},{&#34;dailyconfirmed&#34;:&#34;23147&#34;,&#34;dailydeceased&#34;:&#34;479&#34;,&#34;dailyrecovered&#34;:&#34;16836&#34;,&#34;date&#34;:&#34;7 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-07&#34;,&#34;totalconfirmed&#34;:&#34;743496&#34;,&#34;totaldeceased&#34;:&#34;20655&#34;,&#34;totalrecovered&#34;:&#34;457046&#34;},{&#34;dailyconfirmed&#34;:&#34;25561&#34;,&#34;dailydeceased&#34;:&#34;492&#34;,&#34;dailyrecovered&#34;:&#34;19508&#34;,&#34;date&#34;:&#34;8 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-08&#34;,&#34;totalconfirmed&#34;:&#34;769057&#34;,&#34;totaldeceased&#34;:&#34;21147&#34;,&#34;totalrecovered&#34;:&#34;476554&#34;},{&#34;dailyconfirmed&#34;:&#34;25790&#34;,&#34;dailydeceased&#34;:&#34;479&#34;,&#34;dailyrecovered&#34;:&#34;19408&#34;,&#34;date&#34;:&#34;9 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-09&#34;,&#34;totalconfirmed&#34;:&#34;794847&#34;,&#34;totaldeceased&#34;:&#34;21626&#34;,&#34;totalrecovered&#34;:&#34;495962&#34;},{&#34;dailyconfirmed&#34;:&#34;27762&#34;,&#34;dailydeceased&#34;:&#34;520&#34;,&#34;dailyrecovered&#34;:&#34;20289&#34;,&#34;date&#34;:&#34;10 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-10&#34;,&#34;totalconfirmed&#34;:&#34;822609&#34;,&#34;totaldeceased&#34;:&#34;22146&#34;,&#34;totalrecovered&#34;:&#34;516251&#34;},{&#34;dailyconfirmed&#34;:&#34;27757&#34;,&#34;dailydeceased&#34;:&#34;543&#34;,&#34;dailyrecovered&#34;:&#34;19981&#34;,&#34;date&#34;:&#34;11 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-11&#34;,&#34;totalconfirmed&#34;:&#34;850366&#34;,&#34;totaldeceased&#34;:&#34;22689&#34;,&#34;totalrecovered&#34;:&#34;536232&#34;},{&#34;dailyconfirmed&#34;:&#34;29106&#34;,&#34;dailydeceased&#34;:&#34;500&#34;,&#34;dailyrecovered&#34;:&#34;18198&#34;,&#34;date&#34;:&#34;12 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-12&#34;,&#34;totalconfirmed&#34;:&#34;879472&#34;,&#34;totaldeceased&#34;:&#34;23189&#34;,&#34;totalrecovered&#34;:&#34;554430&#34;},{&#34;dailyconfirmed&#34;:&#34;28178&#34;,&#34;dailydeceased&#34;:&#34;541&#34;,&#34;dailyrecovered&#34;:&#34;17683&#34;,&#34;date&#34;:&#34;13 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-13&#34;,&#34;totalconfirmed&#34;:&#34;907650&#34;,&#34;totaldeceased&#34;:&#34;23730&#34;,&#34;totalrecovered&#34;:&#34;572113&#34;},{&#34;dailyconfirmed&#34;:&#34;29917&#34;,&#34;dailydeceased&#34;:&#34;587&#34;,&#34;dailyrecovered&#34;:&#34;20977&#34;,&#34;date&#34;:&#34;14 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-14&#34;,&#34;totalconfirmed&#34;:&#34;937567&#34;,&#34;totaldeceased&#34;:&#34;24317&#34;,&#34;totalrecovered&#34;:&#34;593090&#34;},{&#34;dailyconfirmed&#34;:&#34;32607&#34;,&#34;dailydeceased&#34;:&#34;614&#34;,&#34;dailyrecovered&#34;:&#34;20646&#34;,&#34;date&#34;:&#34;15 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-15&#34;,&#34;totalconfirmed&#34;:&#34;970174&#34;,&#34;totaldeceased&#34;:&#34;24931&#34;,&#34;totalrecovered&#34;:&#34;613736&#34;},{&#34;dailyconfirmed&#34;:&#34;35468&#34;,&#34;dailydeceased&#34;:&#34;680&#34;,&#34;dailyrecovered&#34;:&#34;22867&#34;,&#34;date&#34;:&#34;16 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-16&#34;,&#34;totalconfirmed&#34;:&#34;1005642&#34;,&#34;totaldeceased&#34;:&#34;25611&#34;,&#34;totalrecovered&#34;:&#34;636603&#34;},{&#34;dailyconfirmed&#34;:&#34;34820&#34;,&#34;dailydeceased&#34;:&#34;676&#34;,&#34;dailyrecovered&#34;:&#34;17476&#34;,&#34;date&#34;:&#34;17 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-17&#34;,&#34;totalconfirmed&#34;:&#34;1040462&#34;,&#34;totaldeceased&#34;:&#34;26287&#34;,&#34;totalrecovered&#34;:&#34;654079&#34;},{&#34;dailyconfirmed&#34;:&#34;37411&#34;,&#34;dailydeceased&#34;:&#34;543&#34;,&#34;dailyrecovered&#34;:&#34;23583&#34;,&#34;date&#34;:&#34;18 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-18&#34;,&#34;totalconfirmed&#34;:&#34;1077873&#34;,&#34;totaldeceased&#34;:&#34;26830&#34;,&#34;totalrecovered&#34;:&#34;677662&#34;},{&#34;dailyconfirmed&#34;:&#34;40235&#34;,&#34;dailydeceased&#34;:&#34;675&#34;,&#34;dailyrecovered&#34;:&#34;22730&#34;,&#34;date&#34;:&#34;19 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-19&#34;,&#34;totalconfirmed&#34;:&#34;1118108&#34;,&#34;totaldeceased&#34;:&#34;27505&#34;,&#34;totalrecovered&#34;:&#34;700392&#34;},{&#34;dailyconfirmed&#34;:&#34;36806&#34;,&#34;dailydeceased&#34;:&#34;596&#34;,&#34;dailyrecovered&#34;:&#34;24303&#34;,&#34;date&#34;:&#34;20 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-20&#34;,&#34;totalconfirmed&#34;:&#34;1154914&#34;,&#34;totaldeceased&#34;:&#34;28101&#34;,&#34;totalrecovered&#34;:&#34;724695&#34;},{&#34;dailyconfirmed&#34;:&#34;39170&#34;,&#34;dailydeceased&#34;:&#34;671&#34;,&#34;dailyrecovered&#34;:&#34;27589&#34;,&#34;date&#34;:&#34;21 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-21&#34;,&#34;totalconfirmed&#34;:&#34;1194084&#34;,&#34;totaldeceased&#34;:&#34;28772&#34;,&#34;totalrecovered&#34;:&#34;752284&#34;},{&#34;dailyconfirmed&#34;:&#34;45601&#34;,&#34;dailydeceased&#34;:&#34;1130&#34;,&#34;dailyrecovered&#34;:&#34;31875&#34;,&#34;date&#34;:&#34;22 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-22&#34;,&#34;totalconfirmed&#34;:&#34;1239685&#34;,&#34;totaldeceased&#34;:&#34;29902&#34;,&#34;totalrecovered&#34;:&#34;784159&#34;},{&#34;dailyconfirmed&#34;:&#34;48443&#34;,&#34;dailydeceased&#34;:&#34;755&#34;,&#34;dailyrecovered&#34;:&#34;33326&#34;,&#34;date&#34;:&#34;23 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-23&#34;,&#34;totalconfirmed&#34;:&#34;1288128&#34;,&#34;totaldeceased&#34;:&#34;30657&#34;,&#34;totalrecovered&#34;:&#34;817485&#34;},{&#34;dailyconfirmed&#34;:&#34;48888&#34;,&#34;dailydeceased&#34;:&#34;763&#34;,&#34;dailyrecovered&#34;:&#34;32514&#34;,&#34;date&#34;:&#34;24 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-24&#34;,&#34;totalconfirmed&#34;:&#34;1337016&#34;,&#34;totaldeceased&#34;:&#34;31420&#34;,&#34;totalrecovered&#34;:&#34;849999&#34;},{&#34;dailyconfirmed&#34;:&#34;50072&#34;,&#34;dailydeceased&#34;:&#34;703&#34;,&#34;dailyrecovered&#34;:&#34;37125&#34;,&#34;date&#34;:&#34;25 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-25&#34;,&#34;totalconfirmed&#34;:&#34;1387088&#34;,&#34;totaldeceased&#34;:&#34;32123&#34;,&#34;totalrecovered&#34;:&#34;887124&#34;},{&#34;dailyconfirmed&#34;:&#34;48932&#34;,&#34;dailydeceased&#34;:&#34;704&#34;,&#34;dailyrecovered&#34;:&#34;31512&#34;,&#34;date&#34;:&#34;26 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-26&#34;,&#34;totalconfirmed&#34;:&#34;1436020&#34;,&#34;totaldeceased&#34;:&#34;32827&#34;,&#34;totalrecovered&#34;:&#34;918636&#34;},{&#34;dailyconfirmed&#34;:&#34;46484&#34;,&#34;dailydeceased&#34;:&#34;642&#34;,&#34;dailyrecovered&#34;:&#34;34354&#34;,&#34;date&#34;:&#34;27 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-27&#34;,&#34;totalconfirmed&#34;:&#34;1482504&#34;,&#34;totaldeceased&#34;:&#34;33469&#34;,&#34;totalrecovered&#34;:&#34;952990&#34;},{&#34;dailyconfirmed&#34;:&#34;49631&#34;,&#34;dailydeceased&#34;:&#34;774&#34;,&#34;dailyrecovered&#34;:&#34;35683&#34;,&#34;date&#34;:&#34;28 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-28&#34;,&#34;totalconfirmed&#34;:&#34;1532135&#34;,&#34;totaldeceased&#34;:&#34;34243&#34;,&#34;totalrecovered&#34;:&#34;988673&#34;},{&#34;dailyconfirmed&#34;:&#34;52479&#34;,&#34;dailydeceased&#34;:&#34;775&#34;,&#34;dailyrecovered&#34;:&#34;32886&#34;,&#34;date&#34;:&#34;29 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-29&#34;,&#34;totalconfirmed&#34;:&#34;1584614&#34;,&#34;totaldeceased&#34;:&#34;35018&#34;,&#34;totalrecovered&#34;:&#34;1021559&#34;},{&#34;dailyconfirmed&#34;:&#34;54968&#34;,&#34;dailydeceased&#34;:&#34;784&#34;,&#34;dailyrecovered&#34;:&#34;37425&#34;,&#34;date&#34;:&#34;30 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-30&#34;,&#34;totalconfirmed&#34;:&#34;1639582&#34;,&#34;totaldeceased&#34;:&#34;35802&#34;,&#34;totalrecovered&#34;:&#34;1058984&#34;},{&#34;dailyconfirmed&#34;:&#34;57486&#34;,&#34;dailydeceased&#34;:&#34;764&#34;,&#34;dailyrecovered&#34;:&#34;36554&#34;,&#34;date&#34;:&#34;31 July 2020&#34;,&#34;dateymd&#34;:&#34;2020-07-31&#34;,&#34;totalconfirmed&#34;:&#34;1697068&#34;,&#34;totaldeceased&#34;:&#34;36566&#34;,&#34;totalrecovered&#34;:&#34;1095538&#34;},{&#34;dailyconfirmed&#34;:&#34;55117&#34;,&#34;dailydeceased&#34;:&#34;854&#34;,&#34;dailyrecovered&#34;:&#34;51368&#34;,&#34;date&#34;:&#34;1 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-01&#34;,&#34;totalconfirmed&#34;:&#34;1752185&#34;,&#34;totaldeceased&#34;:&#34;37420&#34;,&#34;totalrecovered&#34;:&#34;1146906&#34;},{&#34;dailyconfirmed&#34;:&#34;52672&#34;,&#34;dailydeceased&#34;:&#34;760&#34;,&#34;dailyrecovered&#34;:&#34;40355&#34;,&#34;date&#34;:&#34;2 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-02&#34;,&#34;totalconfirmed&#34;:&#34;1804857&#34;,&#34;totaldeceased&#34;:&#34;38180&#34;,&#34;totalrecovered&#34;:&#34;1187261&#34;},{&#34;dailyconfirmed&#34;:&#34;50488&#34;,&#34;dailydeceased&#34;:&#34;806&#34;,&#34;dailyrecovered&#34;:&#34;43070&#34;,&#34;date&#34;:&#34;3 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-03&#34;,&#34;totalconfirmed&#34;:&#34;1855345&#34;,&#34;totaldeceased&#34;:&#34;38986&#34;,&#34;totalrecovered&#34;:&#34;1230331&#34;},{&#34;dailyconfirmed&#34;:&#34;51282&#34;,&#34;dailydeceased&#34;:&#34;849&#34;,&#34;dailyrecovered&#34;:&#34;51220&#34;,&#34;date&#34;:&#34;4 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-04&#34;,&#34;totalconfirmed&#34;:&#34;1906627&#34;,&#34;totaldeceased&#34;:&#34;39835&#34;,&#34;totalrecovered&#34;:&#34;1281551&#34;},{&#34;dailyconfirmed&#34;:&#34;56626&#34;,&#34;dailydeceased&#34;:&#34;919&#34;,&#34;dailyrecovered&#34;:&#34;45583&#34;,&#34;date&#34;:&#34;5 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-05&#34;,&#34;totalconfirmed&#34;:&#34;1963253&#34;,&#34;totaldeceased&#34;:&#34;40754&#34;,&#34;totalrecovered&#34;:&#34;1327134&#34;},{&#34;dailyconfirmed&#34;:&#34;62170&#34;,&#34;dailydeceased&#34;:&#34;899&#34;,&#34;dailyrecovered&#34;:&#34;50141&#34;,&#34;date&#34;:&#34;6 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-06&#34;,&#34;totalconfirmed&#34;:&#34;2025423&#34;,&#34;totaldeceased&#34;:&#34;41653&#34;,&#34;totalrecovered&#34;:&#34;1377275&#34;},{&#34;dailyconfirmed&#34;:&#34;61455&#34;,&#34;dailydeceased&#34;:&#34;936&#34;,&#34;dailyrecovered&#34;:&#34;50387&#34;,&#34;date&#34;:&#34;7 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-07&#34;,&#34;totalconfirmed&#34;:&#34;2086878&#34;,&#34;totaldeceased&#34;:&#34;42589&#34;,&#34;totalrecovered&#34;:&#34;1427662&#34;},{&#34;dailyconfirmed&#34;:&#34;65156&#34;,&#34;dailydeceased&#34;:&#34;875&#34;,&#34;dailyrecovered&#34;:&#34;52135&#34;,&#34;date&#34;:&#34;8 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-08&#34;,&#34;totalconfirmed&#34;:&#34;2152034&#34;,&#34;totaldeceased&#34;:&#34;43464&#34;,&#34;totalrecovered&#34;:&#34;1479797&#34;},{&#34;dailyconfirmed&#34;:&#34;62117&#34;,&#34;dailydeceased&#34;:&#34;1013&#34;,&#34;dailyrecovered&#34;:&#34;54474&#34;,&#34;date&#34;:&#34;9 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-09&#34;,&#34;totalconfirmed&#34;:&#34;2214151&#34;,&#34;totaldeceased&#34;:&#34;44477&#34;,&#34;totalrecovered&#34;:&#34;1534271&#34;},{&#34;dailyconfirmed&#34;:&#34;53016&#34;,&#34;dailydeceased&#34;:&#34;887&#34;,&#34;dailyrecovered&#34;:&#34;47362&#34;,&#34;date&#34;:&#34;10 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-10&#34;,&#34;totalconfirmed&#34;:&#34;2267167&#34;,&#34;totaldeceased&#34;:&#34;45364&#34;,&#34;totalrecovered&#34;:&#34;1581633&#34;},{&#34;dailyconfirmed&#34;:&#34;61252&#34;,&#34;dailydeceased&#34;:&#34;835&#34;,&#34;dailyrecovered&#34;:&#34;56461&#34;,&#34;date&#34;:&#34;11 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-11&#34;,&#34;totalconfirmed&#34;:&#34;2328419&#34;,&#34;totaldeceased&#34;:&#34;46199&#34;,&#34;totalrecovered&#34;:&#34;1638094&#34;},{&#34;dailyconfirmed&#34;:&#34;67066&#34;,&#34;dailydeceased&#34;:&#34;950&#34;,&#34;dailyrecovered&#34;:&#34;57759&#34;,&#34;date&#34;:&#34;12 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-12&#34;,&#34;totalconfirmed&#34;:&#34;2395485&#34;,&#34;totaldeceased&#34;:&#34;47149&#34;,&#34;totalrecovered&#34;:&#34;1695853&#34;},{&#34;dailyconfirmed&#34;:&#34;64141&#34;,&#34;dailydeceased&#34;:&#34;1006&#34;,&#34;dailyrecovered&#34;:&#34;54776&#34;,&#34;date&#34;:&#34;13 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-13&#34;,&#34;totalconfirmed&#34;:&#34;2459626&#34;,&#34;totaldeceased&#34;:&#34;48155&#34;,&#34;totalrecovered&#34;:&#34;1750629&#34;},{&#34;dailyconfirmed&#34;:&#34;65610&#34;,&#34;dailydeceased&#34;:&#34;989&#34;,&#34;dailyrecovered&#34;:&#34;56920&#34;,&#34;date&#34;:&#34;14 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-14&#34;,&#34;totalconfirmed&#34;:&#34;2525236&#34;,&#34;totaldeceased&#34;:&#34;49144&#34;,&#34;totalrecovered&#34;:&#34;1807549&#34;},{&#34;dailyconfirmed&#34;:&#34;63986&#34;,&#34;dailydeceased&#34;:&#34;952&#34;,&#34;dailyrecovered&#34;:&#34;53116&#34;,&#34;date&#34;:&#34;15 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-15&#34;,&#34;totalconfirmed&#34;:&#34;2589222&#34;,&#34;totaldeceased&#34;:&#34;50096&#34;,&#34;totalrecovered&#34;:&#34;1860665&#34;},{&#34;dailyconfirmed&#34;:&#34;58096&#34;,&#34;dailydeceased&#34;:&#34;952&#34;,&#34;dailyrecovered&#34;:&#34;57404&#34;,&#34;date&#34;:&#34;16 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-16&#34;,&#34;totalconfirmed&#34;:&#34;2647318&#34;,&#34;totaldeceased&#34;:&#34;51048&#34;,&#34;totalrecovered&#34;:&#34;1918069&#34;},{&#34;dailyconfirmed&#34;:&#34;54298&#34;,&#34;dailydeceased&#34;:&#34;880&#34;,&#34;dailyrecovered&#34;:&#34;58172&#34;,&#34;date&#34;:&#34;17 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-17&#34;,&#34;totalconfirmed&#34;:&#34;2701616&#34;,&#34;totaldeceased&#34;:&#34;51928&#34;,&#34;totalrecovered&#34;:&#34;1976241&#34;},{&#34;dailyconfirmed&#34;:&#34;65024&#34;,&#34;dailydeceased&#34;:&#34;1099&#34;,&#34;dailyrecovered&#34;:&#34;60455&#34;,&#34;date&#34;:&#34;18 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-18&#34;,&#34;totalconfirmed&#34;:&#34;2766640&#34;,&#34;totaldeceased&#34;:&#34;53027&#34;,&#34;totalrecovered&#34;:&#34;2036696&#34;},{&#34;dailyconfirmed&#34;:&#34;69196&#34;,&#34;dailydeceased&#34;:&#34;979&#34;,&#34;dailyrecovered&#34;:&#34;59365&#34;,&#34;date&#34;:&#34;19 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-19&#34;,&#34;totalconfirmed&#34;:&#34;2835836&#34;,&#34;totaldeceased&#34;:&#34;54006&#34;,&#34;totalrecovered&#34;:&#34;2096061&#34;},{&#34;dailyconfirmed&#34;:&#34;68518&#34;,&#34;dailydeceased&#34;:&#34;981&#34;,&#34;dailyrecovered&#34;:&#34;61873&#34;,&#34;date&#34;:&#34;20 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-20&#34;,&#34;totalconfirmed&#34;:&#34;2904354&#34;,&#34;totaldeceased&#34;:&#34;54987&#34;,&#34;totalrecovered&#34;:&#34;2157934&#34;},{&#34;dailyconfirmed&#34;:&#34;69029&#34;,&#34;dailydeceased&#34;:&#34;953&#34;,&#34;dailyrecovered&#34;:&#34;62858&#34;,&#34;date&#34;:&#34;21 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-21&#34;,&#34;totalconfirmed&#34;:&#34;2973383&#34;,&#34;totaldeceased&#34;:&#34;55940&#34;,&#34;totalrecovered&#34;:&#34;2220792&#34;},{&#34;dailyconfirmed&#34;:&#34;70067&#34;,&#34;dailydeceased&#34;:&#34;918&#34;,&#34;dailyrecovered&#34;:&#34;59101&#34;,&#34;date&#34;:&#34;22 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-22&#34;,&#34;totalconfirmed&#34;:&#34;3043450&#34;,&#34;totaldeceased&#34;:&#34;56858&#34;,&#34;totalrecovered&#34;:&#34;2279893&#34;},{&#34;dailyconfirmed&#34;:&#34;61749&#34;,&#34;dailydeceased&#34;:&#34;846&#34;,&#34;dailyrecovered&#34;:&#34;56896&#34;,&#34;date&#34;:&#34;23 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-23&#34;,&#34;totalconfirmed&#34;:&#34;3105199&#34;,&#34;totaldeceased&#34;:&#34;57704&#34;,&#34;totalrecovered&#34;:&#34;2336789&#34;},{&#34;dailyconfirmed&#34;:&#34;59696&#34;,&#34;dailydeceased&#34;:&#34;854&#34;,&#34;dailyrecovered&#34;:&#34;66305&#34;,&#34;date&#34;:&#34;24 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-24&#34;,&#34;totalconfirmed&#34;:&#34;3164895&#34;,&#34;totaldeceased&#34;:&#34;58558&#34;,&#34;totalrecovered&#34;:&#34;2403094&#34;},{&#34;dailyconfirmed&#34;:&#34;66873&#34;,&#34;dailydeceased&#34;:&#34;1066&#34;,&#34;dailyrecovered&#34;:&#34;64151&#34;,&#34;date&#34;:&#34;25 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-25&#34;,&#34;totalconfirmed&#34;:&#34;3231768&#34;,&#34;totaldeceased&#34;:&#34;59624&#34;,&#34;totalrecovered&#34;:&#34;2467245&#34;},{&#34;dailyconfirmed&#34;:&#34;75995&#34;,&#34;dailydeceased&#34;:&#34;1017&#34;,&#34;dailyrecovered&#34;:&#34;56191&#34;,&#34;date&#34;:&#34;26 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-26&#34;,&#34;totalconfirmed&#34;:&#34;3307763&#34;,&#34;totaldeceased&#34;:&#34;60641&#34;,&#34;totalrecovered&#34;:&#34;2523436&#34;},{&#34;dailyconfirmed&#34;:&#34;76827&#34;,&#34;dailydeceased&#34;:&#34;1066&#34;,&#34;dailyrecovered&#34;:&#34;59620&#34;,&#34;date&#34;:&#34;27 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-27&#34;,&#34;totalconfirmed&#34;:&#34;3384590&#34;,&#34;totaldeceased&#34;:&#34;61707&#34;,&#34;totalrecovered&#34;:&#34;2583056&#34;},{&#34;dailyconfirmed&#34;:&#34;76657&#34;,&#34;dailydeceased&#34;:&#34;1019&#34;,&#34;dailyrecovered&#34;:&#34;64475&#34;,&#34;date&#34;:&#34;28 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-28&#34;,&#34;totalconfirmed&#34;:&#34;3461247&#34;,&#34;totaldeceased&#34;:&#34;62726&#34;,&#34;totalrecovered&#34;:&#34;2647531&#34;},{&#34;dailyconfirmed&#34;:&#34;78479&#34;,&#34;dailydeceased&#34;:&#34;943&#34;,&#34;dailyrecovered&#34;:&#34;64982&#34;,&#34;date&#34;:&#34;29 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-29&#34;,&#34;totalconfirmed&#34;:&#34;3539726&#34;,&#34;totaldeceased&#34;:&#34;63669&#34;,&#34;totalrecovered&#34;:&#34;2712513&#34;},{&#34;dailyconfirmed&#34;:&#34;79461&#34;,&#34;dailydeceased&#34;:&#34;960&#34;,&#34;dailyrecovered&#34;:&#34;60422&#34;,&#34;date&#34;:&#34;30 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-30&#34;,&#34;totalconfirmed&#34;:&#34;3619187&#34;,&#34;totaldeceased&#34;:&#34;64629&#34;,&#34;totalrecovered&#34;:&#34;2772935&#34;},{&#34;dailyconfirmed&#34;:&#34;68766&#34;,&#34;dailydeceased&#34;:&#34;816&#34;,&#34;dailyrecovered&#34;:&#34;64435&#34;,&#34;date&#34;:&#34;31 August 2020&#34;,&#34;dateymd&#34;:&#34;2020-08-31&#34;,&#34;totalconfirmed&#34;:&#34;3687953&#34;,&#34;totaldeceased&#34;:&#34;65445&#34;,&#34;totalrecovered&#34;:&#34;2837370&#34;},{&#34;dailyconfirmed&#34;:&#34;78168&#34;,&#34;dailydeceased&#34;:&#34;892&#34;,&#34;dailyrecovered&#34;:&#34;62145&#34;,&#34;date&#34;:&#34;1 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-01&#34;,&#34;totalconfirmed&#34;:&#34;3766121&#34;,&#34;totaldeceased&#34;:&#34;66337&#34;,&#34;totalrecovered&#34;:&#34;2899515&#34;},{&#34;dailyconfirmed&#34;:&#34;82860&#34;,&#34;dailydeceased&#34;:&#34;913&#34;,&#34;dailyrecovered&#34;:&#34;67874&#34;,&#34;date&#34;:&#34;2 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-02&#34;,&#34;totalconfirmed&#34;:&#34;3848981&#34;,&#34;totaldeceased&#34;:&#34;67250&#34;,&#34;totalrecovered&#34;:&#34;2967389&#34;},{&#34;dailyconfirmed&#34;:&#34;84156&#34;,&#34;dailydeceased&#34;:&#34;979&#34;,&#34;dailyrecovered&#34;:&#34;67491&#34;,&#34;date&#34;:&#34;3 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-03&#34;,&#34;totalconfirmed&#34;:&#34;3933137&#34;,&#34;totaldeceased&#34;:&#34;68229&#34;,&#34;totalrecovered&#34;:&#34;3034880&#34;},{&#34;dailyconfirmed&#34;:&#34;87115&#34;,&#34;dailydeceased&#34;:&#34;950&#34;,&#34;dailyrecovered&#34;:&#34;69625&#34;,&#34;date&#34;:&#34;4 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-04&#34;,&#34;totalconfirmed&#34;:&#34;4020252&#34;,&#34;totaldeceased&#34;:&#34;69179&#34;,&#34;totalrecovered&#34;:&#34;3104505&#34;},{&#34;dailyconfirmed&#34;:&#34;90600&#34;,&#34;dailydeceased&#34;:&#34;916&#34;,&#34;dailyrecovered&#34;:&#34;73161&#34;,&#34;date&#34;:&#34;5 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-05&#34;,&#34;totalconfirmed&#34;:&#34;4110852&#34;,&#34;totaldeceased&#34;:&#34;70095&#34;,&#34;totalrecovered&#34;:&#34;3177666&#34;},{&#34;dailyconfirmed&#34;:&#34;91725&#34;,&#34;dailydeceased&#34;:&#34;1005&#34;,&#34;dailyrecovered&#34;:&#34;69630&#34;,&#34;date&#34;:&#34;6 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-06&#34;,&#34;totalconfirmed&#34;:&#34;4202577&#34;,&#34;totaldeceased&#34;:&#34;71100&#34;,&#34;totalrecovered&#34;:&#34;3247296&#34;},{&#34;dailyconfirmed&#34;:&#34;75015&#34;,&#34;dailydeceased&#34;:&#34;1129&#34;,&#34;dailyrecovered&#34;:&#34;74116&#34;,&#34;date&#34;:&#34;7 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-07&#34;,&#34;totalconfirmed&#34;:&#34;4277592&#34;,&#34;totaldeceased&#34;:&#34;72229&#34;,&#34;totalrecovered&#34;:&#34;3321412&#34;},{&#34;dailyconfirmed&#34;:&#34;89855&#34;,&#34;dailydeceased&#34;:&#34;1107&#34;,&#34;dailyrecovered&#34;:&#34;74608&#34;,&#34;date&#34;:&#34;8 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-08&#34;,&#34;totalconfirmed&#34;:&#34;4367447&#34;,&#34;totaldeceased&#34;:&#34;73336&#34;,&#34;totalrecovered&#34;:&#34;3396020&#34;},{&#34;dailyconfirmed&#34;:&#34;95536&#34;,&#34;dailydeceased&#34;:&#34;1168&#34;,&#34;dailyrecovered&#34;:&#34;73062&#34;,&#34;date&#34;:&#34;9 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-09&#34;,&#34;totalconfirmed&#34;:&#34;4462983&#34;,&#34;totaldeceased&#34;:&#34;74504&#34;,&#34;totalrecovered&#34;:&#34;3469082&#34;},{&#34;dailyconfirmed&#34;:&#34;96762&#34;,&#34;dailydeceased&#34;:&#34;1213&#34;,&#34;dailyrecovered&#34;:&#34;70904&#34;,&#34;date&#34;:&#34;10 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-10&#34;,&#34;totalconfirmed&#34;:&#34;4559745&#34;,&#34;totaldeceased&#34;:&#34;75717&#34;,&#34;totalrecovered&#34;:&#34;3539986&#34;},{&#34;dailyconfirmed&#34;:&#34;97655&#34;,&#34;dailydeceased&#34;:&#34;1202&#34;,&#34;dailyrecovered&#34;:&#34;81456&#34;,&#34;date&#34;:&#34;11 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-11&#34;,&#34;totalconfirmed&#34;:&#34;4657400&#34;,&#34;totaldeceased&#34;:&#34;76919&#34;,&#34;totalrecovered&#34;:&#34;3621442&#34;},{&#34;dailyconfirmed&#34;:&#34;94414&#34;,&#34;dailydeceased&#34;:&#34;1111&#34;,&#34;dailyrecovered&#34;:&#34;77862&#34;,&#34;date&#34;:&#34;12 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-12&#34;,&#34;totalconfirmed&#34;:&#34;4751814&#34;,&#34;totaldeceased&#34;:&#34;78030&#34;,&#34;totalrecovered&#34;:&#34;3699304&#34;},{&#34;dailyconfirmed&#34;:&#34;93220&#34;,&#34;dailydeceased&#34;:&#34;1140&#34;,&#34;dailyrecovered&#34;:&#34;77748&#34;,&#34;date&#34;:&#34;13 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-13&#34;,&#34;totalconfirmed&#34;:&#34;4845034&#34;,&#34;totaldeceased&#34;:&#34;79170&#34;,&#34;totalrecovered&#34;:&#34;3777052&#34;},{&#34;dailyconfirmed&#34;:&#34;81913&#34;,&#34;dailydeceased&#34;:&#34;1054&#34;,&#34;dailyrecovered&#34;:&#34;79213&#34;,&#34;date&#34;:&#34;14 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-14&#34;,&#34;totalconfirmed&#34;:&#34;4926947&#34;,&#34;totaldeceased&#34;:&#34;80224&#34;,&#34;totalrecovered&#34;:&#34;3856265&#34;},{&#34;dailyconfirmed&#34;:&#34;91098&#34;,&#34;dailydeceased&#34;:&#34;1281&#34;,&#34;dailyrecovered&#34;:&#34;82849&#34;,&#34;date&#34;:&#34;15 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-15&#34;,&#34;totalconfirmed&#34;:&#34;5018045&#34;,&#34;totaldeceased&#34;:&#34;81505&#34;,&#34;totalrecovered&#34;:&#34;3939114&#34;},{&#34;dailyconfirmed&#34;:&#34;97860&#34;,&#34;dailydeceased&#34;:&#34;1140&#34;,&#34;dailyrecovered&#34;:&#34;82924&#34;,&#34;date&#34;:&#34;16 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-16&#34;,&#34;totalconfirmed&#34;:&#34;5115905&#34;,&#34;totaldeceased&#34;:&#34;82645&#34;,&#34;totalrecovered&#34;:&#34;4022038&#34;},{&#34;dailyconfirmed&#34;:&#34;96787&#34;,&#34;dailydeceased&#34;:&#34;1175&#34;,&#34;dailyrecovered&#34;:&#34;87788&#34;,&#34;date&#34;:&#34;17 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-17&#34;,&#34;totalconfirmed&#34;:&#34;5212692&#34;,&#34;totaldeceased&#34;:&#34;83820&#34;,&#34;totalrecovered&#34;:&#34;4109826&#34;},{&#34;dailyconfirmed&#34;:&#34;92973&#34;,&#34;dailydeceased&#34;:&#34;1221&#34;,&#34;dailyrecovered&#34;:&#34;95515&#34;,&#34;date&#34;:&#34;18 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-18&#34;,&#34;totalconfirmed&#34;:&#34;5305665&#34;,&#34;totaldeceased&#34;:&#34;85041&#34;,&#34;totalrecovered&#34;:&#34;4205341&#34;},{&#34;dailyconfirmed&#34;:&#34;92574&#34;,&#34;dailydeceased&#34;:&#34;1149&#34;,&#34;dailyrecovered&#34;:&#34;94389&#34;,&#34;date&#34;:&#34;19 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-19&#34;,&#34;totalconfirmed&#34;:&#34;5398239&#34;,&#34;totaldeceased&#34;:&#34;86190&#34;,&#34;totalrecovered&#34;:&#34;4299730&#34;},{&#34;dailyconfirmed&#34;:&#34;87395&#34;,&#34;dailydeceased&#34;:&#34;1135&#34;,&#34;dailyrecovered&#34;:&#34;92926&#34;,&#34;date&#34;:&#34;20 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-20&#34;,&#34;totalconfirmed&#34;:&#34;5485634&#34;,&#34;totaldeceased&#34;:&#34;87325&#34;,&#34;totalrecovered&#34;:&#34;4392656&#34;},{&#34;dailyconfirmed&#34;:&#34;74493&#34;,&#34;dailydeceased&#34;:&#34;1056&#34;,&#34;dailyrecovered&#34;:&#34;102070&#34;,&#34;date&#34;:&#34;21 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-21&#34;,&#34;totalconfirmed&#34;:&#34;5560127&#34;,&#34;totaldeceased&#34;:&#34;88381&#34;,&#34;totalrecovered&#34;:&#34;4494726&#34;},{&#34;dailyconfirmed&#34;:&#34;83362&#34;,&#34;dailydeceased&#34;:&#34;1085&#34;,&#34;dailyrecovered&#34;:&#34;89657&#34;,&#34;date&#34;:&#34;22 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-22&#34;,&#34;totalconfirmed&#34;:&#34;5643489&#34;,&#34;totaldeceased&#34;:&#34;89466&#34;,&#34;totalrecovered&#34;:&#34;4584383&#34;},{&#34;dailyconfirmed&#34;:&#34;86703&#34;,&#34;dailydeceased&#34;:&#34;1123&#34;,&#34;dailyrecovered&#34;:&#34;87459&#34;,&#34;date&#34;:&#34;23 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-23&#34;,&#34;totalconfirmed&#34;:&#34;5730192&#34;,&#34;totaldeceased&#34;:&#34;90589&#34;,&#34;totalrecovered&#34;:&#34;4671842&#34;},{&#34;dailyconfirmed&#34;:&#34;85921&#34;,&#34;dailydeceased&#34;:&#34;1144&#34;,&#34;dailyrecovered&#34;:&#34;81142&#34;,&#34;date&#34;:&#34;24 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-24&#34;,&#34;totalconfirmed&#34;:&#34;5816113&#34;,&#34;totaldeceased&#34;:&#34;91733&#34;,&#34;totalrecovered&#34;:&#34;4752984&#34;},{&#34;dailyconfirmed&#34;:&#34;85717&#34;,&#34;dailydeceased&#34;:&#34;1093&#34;,&#34;dailyrecovered&#34;:&#34;93331&#34;,&#34;date&#34;:&#34;25 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-25&#34;,&#34;totalconfirmed&#34;:&#34;5901830&#34;,&#34;totaldeceased&#34;:&#34;92826&#34;,&#34;totalrecovered&#34;:&#34;4846315&#34;},{&#34;dailyconfirmed&#34;:&#34;88759&#34;,&#34;dailydeceased&#34;:&#34;1124&#34;,&#34;dailyrecovered&#34;:&#34;92365&#34;,&#34;date&#34;:&#34;26 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-26&#34;,&#34;totalconfirmed&#34;:&#34;5990589&#34;,&#34;totaldeceased&#34;:&#34;93950&#34;,&#34;totalrecovered&#34;:&#34;4938680&#34;},{&#34;dailyconfirmed&#34;:&#34;82770&#34;,&#34;dailydeceased&#34;:&#34;1040&#34;,&#34;dailyrecovered&#34;:&#34;74691&#34;,&#34;date&#34;:&#34;27 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-27&#34;,&#34;totalconfirmed&#34;:&#34;6073359&#34;,&#34;totaldeceased&#34;:&#34;94990&#34;,&#34;totalrecovered&#34;:&#34;5013371&#34;},{&#34;dailyconfirmed&#34;:&#34;69669&#34;,&#34;dailydeceased&#34;:&#34;775&#34;,&#34;dailyrecovered&#34;:&#34;85198&#34;,&#34;date&#34;:&#34;28 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-28&#34;,&#34;totalconfirmed&#34;:&#34;6143028&#34;,&#34;totaldeceased&#34;:&#34;95765&#34;,&#34;totalrecovered&#34;:&#34;5098569&#34;},{&#34;dailyconfirmed&#34;:&#34;80500&#34;,&#34;dailydeceased&#34;:&#34;1178&#34;,&#34;dailyrecovered&#34;:&#34;86150&#34;,&#34;date&#34;:&#34;29 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-29&#34;,&#34;totalconfirmed&#34;:&#34;6223528&#34;,&#34;totaldeceased&#34;:&#34;96943&#34;,&#34;totalrecovered&#34;:&#34;5184719&#34;},{&#34;dailyconfirmed&#34;:&#34;86748&#34;,&#34;dailydeceased&#34;:&#34;1179&#34;,&#34;dailyrecovered&#34;:&#34;85274&#34;,&#34;date&#34;:&#34;30 September 2020&#34;,&#34;dateymd&#34;:&#34;2020-09-30&#34;,&#34;totalconfirmed&#34;:&#34;6310276&#34;,&#34;totaldeceased&#34;:&#34;98122&#34;,&#34;totalrecovered&#34;:&#34;5269993&#34;},{&#34;dailyconfirmed&#34;:&#34;81784&#34;,&#34;dailydeceased&#34;:&#34;1099&#34;,&#34;dailyrecovered&#34;:&#34;78731&#34;,&#34;date&#34;:&#34;1 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-01&#34;,&#34;totalconfirmed&#34;:&#34;6392060&#34;,&#34;totaldeceased&#34;:&#34;99221&#34;,&#34;totalrecovered&#34;:&#34;5348724&#34;},{&#34;dailyconfirmed&#34;:&#34;79883&#34;,&#34;dailydeceased&#34;:&#34;1068&#34;,&#34;dailyrecovered&#34;:&#34;76339&#34;,&#34;date&#34;:&#34;2 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-02&#34;,&#34;totalconfirmed&#34;:&#34;6471943&#34;,&#34;totaldeceased&#34;:&#34;100289&#34;,&#34;totalrecovered&#34;:&#34;5425063&#34;},{&#34;dailyconfirmed&#34;:&#34;75479&#34;,&#34;dailydeceased&#34;:&#34;937&#34;,&#34;dailyrecovered&#34;:&#34;81655&#34;,&#34;date&#34;:&#34;3 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-03&#34;,&#34;totalconfirmed&#34;:&#34;6547422&#34;,&#34;totaldeceased&#34;:&#34;101226&#34;,&#34;totalrecovered&#34;:&#34;5506718&#34;},{&#34;dailyconfirmed&#34;:&#34;74770&#34;,&#34;dailydeceased&#34;:&#34;903&#34;,&#34;dailyrecovered&#34;:&#34;76713&#34;,&#34;date&#34;:&#34;4 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-04&#34;,&#34;totalconfirmed&#34;:&#34;6622192&#34;,&#34;totaldeceased&#34;:&#34;102129&#34;,&#34;totalrecovered&#34;:&#34;5583431&#34;},{&#34;dailyconfirmed&#34;:&#34;60130&#34;,&#34;dailydeceased&#34;:&#34;886&#34;,&#34;dailyrecovered&#34;:&#34;75855&#34;,&#34;date&#34;:&#34;5 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-05&#34;,&#34;totalconfirmed&#34;:&#34;6682322&#34;,&#34;totaldeceased&#34;:&#34;103015&#34;,&#34;totalrecovered&#34;:&#34;5659286&#34;},{&#34;dailyconfirmed&#34;:&#34;71869&#34;,&#34;dailydeceased&#34;:&#34;990&#34;,&#34;dailyrecovered&#34;:&#34;81945&#34;,&#34;date&#34;:&#34;6 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-06&#34;,&#34;totalconfirmed&#34;:&#34;6754191&#34;,&#34;totaldeceased&#34;:&#34;104005&#34;,&#34;totalrecovered&#34;:&#34;5741231&#34;},{&#34;dailyconfirmed&#34;:&#34;78809&#34;,&#34;dailydeceased&#34;:&#34;963&#34;,&#34;dailyrecovered&#34;:&#34;83209&#34;,&#34;date&#34;:&#34;7 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-07&#34;,&#34;totalconfirmed&#34;:&#34;6833000&#34;,&#34;totaldeceased&#34;:&#34;104968&#34;,&#34;totalrecovered&#34;:&#34;5824440&#34;},{&#34;dailyconfirmed&#34;:&#34;70797&#34;,&#34;dailydeceased&#34;:&#34;967&#34;,&#34;dailyrecovered&#34;:&#34;78745&#34;,&#34;date&#34;:&#34;8 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-08&#34;,&#34;totalconfirmed&#34;:&#34;6903797&#34;,&#34;totaldeceased&#34;:&#34;105935&#34;,&#34;totalrecovered&#34;:&#34;5903185&#34;},{&#34;dailyconfirmed&#34;:&#34;73305&#34;,&#34;dailydeceased&#34;:&#34;929&#34;,&#34;dailyrecovered&#34;:&#34;82628&#34;,&#34;date&#34;:&#34;9 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-09&#34;,&#34;totalconfirmed&#34;:&#34;6977102&#34;,&#34;totaldeceased&#34;:&#34;106864&#34;,&#34;totalrecovered&#34;:&#34;5985813&#34;},{&#34;dailyconfirmed&#34;:&#34;74418&#34;,&#34;dailydeceased&#34;:&#34;921&#34;,&#34;dailyrecovered&#34;:&#34;89024&#34;,&#34;date&#34;:&#34;10 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-10&#34;,&#34;totalconfirmed&#34;:&#34;7051520&#34;,&#34;totaldeceased&#34;:&#34;107785&#34;,&#34;totalrecovered&#34;:&#34;6074837&#34;},{&#34;dailyconfirmed&#34;:&#34;67789&#34;,&#34;dailydeceased&#34;:&#34;813&#34;,&#34;dailyrecovered&#34;:&#34;71565&#34;,&#34;date&#34;:&#34;11 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-11&#34;,&#34;totalconfirmed&#34;:&#34;7119309&#34;,&#34;totaldeceased&#34;:&#34;108598&#34;,&#34;totalrecovered&#34;:&#34;6146402&#34;},{&#34;dailyconfirmed&#34;:&#34;54262&#34;,&#34;dailydeceased&#34;:&#34;710&#34;,&#34;dailyrecovered&#34;:&#34;78365&#34;,&#34;date&#34;:&#34;12 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-12&#34;,&#34;totalconfirmed&#34;:&#34;7173571&#34;,&#34;totaldeceased&#34;:&#34;109308&#34;,&#34;totalrecovered&#34;:&#34;6224767&#34;},{&#34;dailyconfirmed&#34;:&#34;63717&#34;,&#34;dailydeceased&#34;:&#34;727&#34;,&#34;dailyrecovered&#34;:&#34;74079&#34;,&#34;date&#34;:&#34;13 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-13&#34;,&#34;totalconfirmed&#34;:&#34;7237288&#34;,&#34;totaldeceased&#34;:&#34;110035&#34;,&#34;totalrecovered&#34;:&#34;6298846&#34;},{&#34;dailyconfirmed&#34;:&#34;67811&#34;,&#34;dailydeceased&#34;:&#34;690&#34;,&#34;dailyrecovered&#34;:&#34;81582&#34;,&#34;date&#34;:&#34;14 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-14&#34;,&#34;totalconfirmed&#34;:&#34;7305099&#34;,&#34;totaldeceased&#34;:&#34;110725&#34;,&#34;totalrecovered&#34;:&#34;6380428&#34;},{&#34;dailyconfirmed&#34;:&#34;63441&#34;,&#34;dailydeceased&#34;:&#34;882&#34;,&#34;dailyrecovered&#34;:&#34;70792&#34;,&#34;date&#34;:&#34;15 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-15&#34;,&#34;totalconfirmed&#34;:&#34;7368540&#34;,&#34;totaldeceased&#34;:&#34;111607&#34;,&#34;totalrecovered&#34;:&#34;6451220&#34;},{&#34;dailyconfirmed&#34;:&#34;62304&#34;,&#34;dailydeceased&#34;:&#34;840&#34;,&#34;dailyrecovered&#34;:&#34;70568&#34;,&#34;date&#34;:&#34;16 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-16&#34;,&#34;totalconfirmed&#34;:&#34;7430844&#34;,&#34;totaldeceased&#34;:&#34;112447&#34;,&#34;totalrecovered&#34;:&#34;6521788&#34;},{&#34;dailyconfirmed&#34;:&#34;61893&#34;,&#34;dailydeceased&#34;:&#34;1032&#34;,&#34;dailyrecovered&#34;:&#34;72583&#34;,&#34;date&#34;:&#34;17 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-17&#34;,&#34;totalconfirmed&#34;:&#34;7492737&#34;,&#34;totaldeceased&#34;:&#34;113479&#34;,&#34;totalrecovered&#34;:&#34;6594371&#34;},{&#34;dailyconfirmed&#34;:&#34;56519&#34;,&#34;dailydeceased&#34;:&#34;582&#34;,&#34;dailyrecovered&#34;:&#34;66418&#34;,&#34;date&#34;:&#34;18 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-18&#34;,&#34;totalconfirmed&#34;:&#34;7549256&#34;,&#34;totaldeceased&#34;:&#34;114061&#34;,&#34;totalrecovered&#34;:&#34;6660789&#34;},{&#34;dailyconfirmed&#34;:&#34;45506&#34;,&#34;dailydeceased&#34;:&#34;589&#34;,&#34;dailyrecovered&#34;:&#34;69800&#34;,&#34;date&#34;:&#34;19 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-19&#34;,&#34;totalconfirmed&#34;:&#34;7594762&#34;,&#34;totaldeceased&#34;:&#34;114650&#34;,&#34;totalrecovered&#34;:&#34;6730589&#34;},{&#34;dailyconfirmed&#34;:&#34;54348&#34;,&#34;dailydeceased&#34;:&#34;714&#34;,&#34;dailyrecovered&#34;:&#34;61828&#34;,&#34;date&#34;:&#34;20 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-20&#34;,&#34;totalconfirmed&#34;:&#34;7649110&#34;,&#34;totaldeceased&#34;:&#34;115364&#34;,&#34;totalrecovered&#34;:&#34;6792417&#34;},{&#34;dailyconfirmed&#34;:&#34;56264&#34;,&#34;dailydeceased&#34;:&#34;701&#34;,&#34;dailyrecovered&#34;:&#34;79561&#34;,&#34;date&#34;:&#34;21 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-21&#34;,&#34;totalconfirmed&#34;:&#34;7705374&#34;,&#34;totaldeceased&#34;:&#34;116065&#34;,&#34;totalrecovered&#34;:&#34;6871978&#34;},{&#34;dailyconfirmed&#34;:&#34;54371&#34;,&#34;dailydeceased&#34;:&#34;686&#34;,&#34;dailyrecovered&#34;:&#34;74569&#34;,&#34;date&#34;:&#34;22 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-22&#34;,&#34;totalconfirmed&#34;:&#34;7759745&#34;,&#34;totaldeceased&#34;:&#34;116751&#34;,&#34;totalrecovered&#34;:&#34;6946547&#34;},{&#34;dailyconfirmed&#34;:&#34;53931&#34;,&#34;dailydeceased&#34;:&#34;655&#34;,&#34;dailyrecovered&#34;:&#34;66994&#34;,&#34;date&#34;:&#34;23 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-23&#34;,&#34;totalconfirmed&#34;:&#34;7813676&#34;,&#34;totaldeceased&#34;:&#34;117406&#34;,&#34;totalrecovered&#34;:&#34;7013541&#34;},{&#34;dailyconfirmed&#34;:&#34;50366&#34;,&#34;dailydeceased&#34;:&#34;578&#34;,&#34;dailyrecovered&#34;:&#34;62270&#34;,&#34;date&#34;:&#34;24 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-24&#34;,&#34;totalconfirmed&#34;:&#34;7864042&#34;,&#34;totaldeceased&#34;:&#34;117984&#34;,&#34;totalrecovered&#34;:&#34;7075811&#34;},{&#34;dailyconfirmed&#34;:&#34;45922&#34;,&#34;dailydeceased&#34;:&#34;483&#34;,&#34;dailyrecovered&#34;:&#34;59304&#34;,&#34;date&#34;:&#34;25 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-25&#34;,&#34;totalconfirmed&#34;:&#34;7909964&#34;,&#34;totaldeceased&#34;:&#34;118467&#34;,&#34;totalrecovered&#34;:&#34;7135115&#34;},{&#34;dailyconfirmed&#34;:&#34;36019&#34;,&#34;dailydeceased&#34;:&#34;485&#34;,&#34;dailyrecovered&#34;:&#34;63734&#34;,&#34;date&#34;:&#34;26 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-26&#34;,&#34;totalconfirmed&#34;:&#34;7945983&#34;,&#34;totaldeceased&#34;:&#34;118952&#34;,&#34;totalrecovered&#34;:&#34;7198849&#34;},{&#34;dailyconfirmed&#34;:&#34;43036&#34;,&#34;dailydeceased&#34;:&#34;511&#34;,&#34;dailyrecovered&#34;:&#34;58429&#34;,&#34;date&#34;:&#34;27 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-27&#34;,&#34;totalconfirmed&#34;:&#34;7989019&#34;,&#34;totaldeceased&#34;:&#34;119463&#34;,&#34;totalrecovered&#34;:&#34;7257278&#34;},{&#34;dailyconfirmed&#34;:&#34;50188&#34;,&#34;dailydeceased&#34;:&#34;515&#34;,&#34;dailyrecovered&#34;:&#34;56594&#34;,&#34;date&#34;:&#34;28 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-28&#34;,&#34;totalconfirmed&#34;:&#34;8039207&#34;,&#34;totaldeceased&#34;:&#34;119978&#34;,&#34;totalrecovered&#34;:&#34;7313872&#34;},{&#34;dailyconfirmed&#34;:&#34;48765&#34;,&#34;dailydeceased&#34;:&#34;562&#34;,&#34;dailyrecovered&#34;:&#34;57867&#34;,&#34;date&#34;:&#34;29 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-29&#34;,&#34;totalconfirmed&#34;:&#34;8087972&#34;,&#34;totaldeceased&#34;:&#34;120540&#34;,&#34;totalrecovered&#34;:&#34;7371739&#34;},{&#34;dailyconfirmed&#34;:&#34;48117&#34;,&#34;dailydeceased&#34;:&#34;550&#34;,&#34;dailyrecovered&#34;:&#34;59005&#34;,&#34;date&#34;:&#34;30 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-30&#34;,&#34;totalconfirmed&#34;:&#34;8136089&#34;,&#34;totaldeceased&#34;:&#34;121090&#34;,&#34;totalrecovered&#34;:&#34;7430744&#34;},{&#34;dailyconfirmed&#34;:&#34;47228&#34;,&#34;dailydeceased&#34;:&#34;469&#34;,&#34;dailyrecovered&#34;:&#34;58682&#34;,&#34;date&#34;:&#34;31 October 2020&#34;,&#34;dateymd&#34;:&#34;2020-10-31&#34;,&#34;totalconfirmed&#34;:&#34;8183317&#34;,&#34;totaldeceased&#34;:&#34;121559&#34;,&#34;totalrecovered&#34;:&#34;7489426&#34;},{&#34;dailyconfirmed&#34;:&#34;45928&#34;,&#34;dailydeceased&#34;:&#34;491&#34;,&#34;dailyrecovered&#34;:&#34;53312&#34;,&#34;date&#34;:&#34;1 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-01&#34;,&#34;totalconfirmed&#34;:&#34;8229245&#34;,&#34;totaldeceased&#34;:&#34;122050&#34;,&#34;totalrecovered&#34;:&#34;7542738&#34;},{&#34;dailyconfirmed&#34;:&#34;37592&#34;,&#34;dailydeceased&#34;:&#34;498&#34;,&#34;dailyrecovered&#34;:&#34;58524&#34;,&#34;date&#34;:&#34;2 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-02&#34;,&#34;totalconfirmed&#34;:&#34;8266837&#34;,&#34;totaldeceased&#34;:&#34;122548&#34;,&#34;totalrecovered&#34;:&#34;7601262&#34;},{&#34;dailyconfirmed&#34;:&#34;46027&#34;,&#34;dailydeceased&#34;:&#34;510&#34;,&#34;dailyrecovered&#34;:&#34;53328&#34;,&#34;date&#34;:&#34;3 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-03&#34;,&#34;totalconfirmed&#34;:&#34;8312864&#34;,&#34;totaldeceased&#34;:&#34;123058&#34;,&#34;totalrecovered&#34;:&#34;7654590&#34;},{&#34;dailyconfirmed&#34;:&#34;50465&#34;,&#34;dailydeceased&#34;:&#34;707&#34;,&#34;dailyrecovered&#34;:&#34;55873&#34;,&#34;date&#34;:&#34;4 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-04&#34;,&#34;totalconfirmed&#34;:&#34;8363329&#34;,&#34;totaldeceased&#34;:&#34;123765&#34;,&#34;totalrecovered&#34;:&#34;7710463&#34;},{&#34;dailyconfirmed&#34;:&#34;47628&#34;,&#34;dailydeceased&#34;:&#34;672&#34;,&#34;dailyrecovered&#34;:&#34;54133&#34;,&#34;date&#34;:&#34;5 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-05&#34;,&#34;totalconfirmed&#34;:&#34;8410957&#34;,&#34;totaldeceased&#34;:&#34;124437&#34;,&#34;totalrecovered&#34;:&#34;7764596&#34;},{&#34;dailyconfirmed&#34;:&#34;50017&#34;,&#34;dailydeceased&#34;:&#34;577&#34;,&#34;dailyrecovered&#34;:&#34;53946&#34;,&#34;date&#34;:&#34;6 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-06&#34;,&#34;totalconfirmed&#34;:&#34;8460974&#34;,&#34;totaldeceased&#34;:&#34;125014&#34;,&#34;totalrecovered&#34;:&#34;7818542&#34;},{&#34;dailyconfirmed&#34;:&#34;46153&#34;,&#34;dailydeceased&#34;:&#34;557&#34;,&#34;dailyrecovered&#34;:&#34;48582&#34;,&#34;date&#34;:&#34;7 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-07&#34;,&#34;totalconfirmed&#34;:&#34;8507127&#34;,&#34;totaldeceased&#34;:&#34;125571&#34;,&#34;totalrecovered&#34;:&#34;7867124&#34;},{&#34;dailyconfirmed&#34;:&#34;46707&#34;,&#34;dailydeceased&#34;:&#34;491&#34;,&#34;dailyrecovered&#34;:&#34;48465&#34;,&#34;date&#34;:&#34;8 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-08&#34;,&#34;totalconfirmed&#34;:&#34;8553834&#34;,&#34;totaldeceased&#34;:&#34;126062&#34;,&#34;totalrecovered&#34;:&#34;7915589&#34;},{&#34;dailyconfirmed&#34;:&#34;37119&#34;,&#34;dailydeceased&#34;:&#34;450&#34;,&#34;dailyrecovered&#34;:&#34;41449&#34;,&#34;date&#34;:&#34;9 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-09&#34;,&#34;totalconfirmed&#34;:&#34;8590953&#34;,&#34;totaldeceased&#34;:&#34;126512&#34;,&#34;totalrecovered&#34;:&#34;7957038&#34;},{&#34;dailyconfirmed&#34;:&#34;44724&#34;,&#34;dailydeceased&#34;:&#34;511&#34;,&#34;dailyrecovered&#34;:&#34;54639&#34;,&#34;date&#34;:&#34;10 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-10&#34;,&#34;totalconfirmed&#34;:&#34;8635677&#34;,&#34;totaldeceased&#34;:&#34;127023&#34;,&#34;totalrecovered&#34;:&#34;8011677&#34;},{&#34;dailyconfirmed&#34;:&#34;48285&#34;,&#34;dailydeceased&#34;:&#34;550&#34;,&#34;dailyrecovered&#34;:&#34;52704&#34;,&#34;date&#34;:&#34;11 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-11&#34;,&#34;totalconfirmed&#34;:&#34;8683962&#34;,&#34;totaldeceased&#34;:&#34;127573&#34;,&#34;totalrecovered&#34;:&#34;8064381&#34;},{&#34;dailyconfirmed&#34;:&#34;44585&#34;,&#34;dailydeceased&#34;:&#34;544&#34;,&#34;dailyrecovered&#34;:&#34;49354&#34;,&#34;date&#34;:&#34;12 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-12&#34;,&#34;totalconfirmed&#34;:&#34;8728547&#34;,&#34;totaldeceased&#34;:&#34;128117&#34;,&#34;totalrecovered&#34;:&#34;8113735&#34;},{&#34;dailyconfirmed&#34;:&#34;44620&#34;,&#34;dailydeceased&#34;:&#34;517&#34;,&#34;dailyrecovered&#34;:&#34;47620&#34;,&#34;date&#34;:&#34;13 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-13&#34;,&#34;totalconfirmed&#34;:&#34;8773167&#34;,&#34;totaldeceased&#34;:&#34;128634&#34;,&#34;totalrecovered&#34;:&#34;8161355&#34;},{&#34;dailyconfirmed&#34;:&#34;41692&#34;,&#34;dailydeceased&#34;:&#34;450&#34;,&#34;dailyrecovered&#34;:&#34;42317&#34;,&#34;date&#34;:&#34;14 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-14&#34;,&#34;totalconfirmed&#34;:&#34;8814859&#34;,&#34;totaldeceased&#34;:&#34;129084&#34;,&#34;totalrecovered&#34;:&#34;8203672&#34;},{&#34;dailyconfirmed&#34;:&#34;30681&#34;,&#34;dailydeceased&#34;:&#34;434&#34;,&#34;dailyrecovered&#34;:&#34;44111&#34;,&#34;date&#34;:&#34;15 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-15&#34;,&#34;totalconfirmed&#34;:&#34;8845540&#34;,&#34;totaldeceased&#34;:&#34;129518&#34;,&#34;totalrecovered&#34;:&#34;8247783&#34;},{&#34;dailyconfirmed&#34;:&#34;28609&#34;,&#34;dailydeceased&#34;:&#34;451&#34;,&#34;dailyrecovered&#34;:&#34;40392&#34;,&#34;date&#34;:&#34;16 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-16&#34;,&#34;totalconfirmed&#34;:&#34;8874149&#34;,&#34;totaldeceased&#34;:&#34;129969&#34;,&#34;totalrecovered&#34;:&#34;8288175&#34;},{&#34;dailyconfirmed&#34;:&#34;38548&#34;,&#34;dailydeceased&#34;:&#34;472&#34;,&#34;dailyrecovered&#34;:&#34;44753&#34;,&#34;date&#34;:&#34;17 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-17&#34;,&#34;totalconfirmed&#34;:&#34;8912697&#34;,&#34;totaldeceased&#34;:&#34;130441&#34;,&#34;totalrecovered&#34;:&#34;8332928&#34;},{&#34;dailyconfirmed&#34;:&#34;45366&#34;,&#34;dailydeceased&#34;:&#34;586&#34;,&#34;dailyrecovered&#34;:&#34;48675&#34;,&#34;date&#34;:&#34;18 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-18&#34;,&#34;totalconfirmed&#34;:&#34;8958063&#34;,&#34;totaldeceased&#34;:&#34;131027&#34;,&#34;totalrecovered&#34;:&#34;8381603&#34;},{&#34;dailyconfirmed&#34;:&#34;46185&#34;,&#34;dailydeceased&#34;:&#34;582&#34;,&#34;dailyrecovered&#34;:&#34;45246&#34;,&#34;date&#34;:&#34;19 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-19&#34;,&#34;totalconfirmed&#34;:&#34;9004248&#34;,&#34;totaldeceased&#34;:&#34;131609&#34;,&#34;totalrecovered&#34;:&#34;8426849&#34;},{&#34;dailyconfirmed&#34;:&#34;46283&#34;,&#34;dailydeceased&#34;:&#34;564&#34;,&#34;dailyrecovered&#34;:&#34;48968&#34;,&#34;date&#34;:&#34;20 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-20&#34;,&#34;totalconfirmed&#34;:&#34;9050531&#34;,&#34;totaldeceased&#34;:&#34;132173&#34;,&#34;totalrecovered&#34;:&#34;8475817&#34;},{&#34;dailyconfirmed&#34;:&#34;45301&#34;,&#34;dailydeceased&#34;:&#34;499&#34;,&#34;dailyrecovered&#34;:&#34;44055&#34;,&#34;date&#34;:&#34;21 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-21&#34;,&#34;totalconfirmed&#34;:&#34;9095832&#34;,&#34;totaldeceased&#34;:&#34;132672&#34;,&#34;totalrecovered&#34;:&#34;8519872&#34;},{&#34;dailyconfirmed&#34;:&#34;44404&#34;,&#34;dailydeceased&#34;:&#34;510&#34;,&#34;dailyrecovered&#34;:&#34;41405&#34;,&#34;date&#34;:&#34;22 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-22&#34;,&#34;totalconfirmed&#34;:&#34;9140236&#34;,&#34;totaldeceased&#34;:&#34;133182&#34;,&#34;totalrecovered&#34;:&#34;8561277&#34;},{&#34;dailyconfirmed&#34;:&#34;37441&#34;,&#34;dailydeceased&#34;:&#34;481&#34;,&#34;dailyrecovered&#34;:&#34;42195&#34;,&#34;date&#34;:&#34;23 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-23&#34;,&#34;totalconfirmed&#34;:&#34;9177677&#34;,&#34;totaldeceased&#34;:&#34;133663&#34;,&#34;totalrecovered&#34;:&#34;8603472&#34;},{&#34;dailyconfirmed&#34;:&#34;44245&#34;,&#34;dailydeceased&#34;:&#34;489&#34;,&#34;dailyrecovered&#34;:&#34;37765&#34;,&#34;date&#34;:&#34;24 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-24&#34;,&#34;totalconfirmed&#34;:&#34;9221922&#34;,&#34;totaldeceased&#34;:&#34;134152&#34;,&#34;totalrecovered&#34;:&#34;8641237&#34;},{&#34;dailyconfirmed&#34;:&#34;44699&#34;,&#34;dailydeceased&#34;:&#34;518&#34;,&#34;dailyrecovered&#34;:&#34;36582&#34;,&#34;date&#34;:&#34;25 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-25&#34;,&#34;totalconfirmed&#34;:&#34;9266621&#34;,&#34;totaldeceased&#34;:&#34;134670&#34;,&#34;totalrecovered&#34;:&#34;8677819&#34;},{&#34;dailyconfirmed&#34;:&#34;43174&#34;,&#34;dailydeceased&#34;:&#34;491&#34;,&#34;dailyrecovered&#34;:&#34;39723&#34;,&#34;date&#34;:&#34;26 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-26&#34;,&#34;totalconfirmed&#34;:&#34;9309795&#34;,&#34;totaldeceased&#34;:&#34;135161&#34;,&#34;totalrecovered&#34;:&#34;8717542&#34;},{&#34;dailyconfirmed&#34;:&#34;41353&#34;,&#34;dailydeceased&#34;:&#34;486&#34;,&#34;dailyrecovered&#34;:&#34;41177&#34;,&#34;date&#34;:&#34;27 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-27&#34;,&#34;totalconfirmed&#34;:&#34;9351148&#34;,&#34;totaldeceased&#34;:&#34;135647&#34;,&#34;totalrecovered&#34;:&#34;8758719&#34;},{&#34;dailyconfirmed&#34;:&#34;41815&#34;,&#34;dailydeceased&#34;:&#34;495&#34;,&#34;dailyrecovered&#34;:&#34;42275&#34;,&#34;date&#34;:&#34;28 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-28&#34;,&#34;totalconfirmed&#34;:&#34;9392963&#34;,&#34;totaldeceased&#34;:&#34;136142&#34;,&#34;totalrecovered&#34;:&#34;8800994&#34;},{&#34;dailyconfirmed&#34;:&#34;39036&#34;,&#34;dailydeceased&#34;:&#34;444&#34;,&#34;dailyrecovered&#34;:&#34;45152&#34;,&#34;date&#34;:&#34;29 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-29&#34;,&#34;totalconfirmed&#34;:&#34;9431999&#34;,&#34;totaldeceased&#34;:&#34;136586&#34;,&#34;totalrecovered&#34;:&#34;8846146&#34;},{&#34;dailyconfirmed&#34;:&#34;31179&#34;,&#34;dailydeceased&#34;:&#34;482&#34;,&#34;dailyrecovered&#34;:&#34;42282&#34;,&#34;date&#34;:&#34;30 November 2020&#34;,&#34;dateymd&#34;:&#34;2020-11-30&#34;,&#34;totalconfirmed&#34;:&#34;9463178&#34;,&#34;totaldeceased&#34;:&#34;137068&#34;,&#34;totalrecovered&#34;:&#34;8888428&#34;},{&#34;dailyconfirmed&#34;:&#34;36474&#34;,&#34;dailydeceased&#34;:&#34;501&#34;,&#34;dailyrecovered&#34;:&#34;43208&#34;,&#34;date&#34;:&#34;1 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-01&#34;,&#34;totalconfirmed&#34;:&#34;9499652&#34;,&#34;totaldeceased&#34;:&#34;137569&#34;,&#34;totalrecovered&#34;:&#34;8931636&#34;},{&#34;dailyconfirmed&#34;:&#34;35506&#34;,&#34;dailydeceased&#34;:&#34;526&#34;,&#34;dailyrecovered&#34;:&#34;40908&#34;,&#34;date&#34;:&#34;2 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-02&#34;,&#34;totalconfirmed&#34;:&#34;9535158&#34;,&#34;totaldeceased&#34;:&#34;138095&#34;,&#34;totalrecovered&#34;:&#34;8972544&#34;},{&#34;dailyconfirmed&#34;:&#34;36574&#34;,&#34;dailydeceased&#34;:&#34;541&#34;,&#34;dailyrecovered&#34;:&#34;42991&#34;,&#34;date&#34;:&#34;3 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-03&#34;,&#34;totalconfirmed&#34;:&#34;9571732&#34;,&#34;totaldeceased&#34;:&#34;138636&#34;,&#34;totalrecovered&#34;:&#34;9015535&#34;},{&#34;dailyconfirmed&#34;:&#34;36711&#34;,&#34;dailydeceased&#34;:&#34;511&#34;,&#34;dailyrecovered&#34;:&#34;42359&#34;,&#34;date&#34;:&#34;4 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-04&#34;,&#34;totalconfirmed&#34;:&#34;9608443&#34;,&#34;totaldeceased&#34;:&#34;139147&#34;,&#34;totalrecovered&#34;:&#34;9057894&#34;},{&#34;dailyconfirmed&#34;:&#34;36010&#34;,&#34;dailydeceased&#34;:&#34;482&#34;,&#34;dailyrecovered&#34;:&#34;41885&#34;,&#34;date&#34;:&#34;5 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-05&#34;,&#34;totalconfirmed&#34;:&#34;9644453&#34;,&#34;totaldeceased&#34;:&#34;139629&#34;,&#34;totalrecovered&#34;:&#34;9099779&#34;},{&#34;dailyconfirmed&#34;:&#34;33178&#34;,&#34;dailydeceased&#34;:&#34;390&#34;,&#34;dailyrecovered&#34;:&#34;39078&#34;,&#34;date&#34;:&#34;6 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-06&#34;,&#34;totalconfirmed&#34;:&#34;9677631&#34;,&#34;totaldeceased&#34;:&#34;140019&#34;,&#34;totalrecovered&#34;:&#34;9138857&#34;},{&#34;dailyconfirmed&#34;:&#34;26227&#34;,&#34;dailydeceased&#34;:&#34;386&#34;,&#34;dailyrecovered&#34;:&#34;39293&#34;,&#34;date&#34;:&#34;7 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-07&#34;,&#34;totalconfirmed&#34;:&#34;9703858&#34;,&#34;totaldeceased&#34;:&#34;140405&#34;,&#34;totalrecovered&#34;:&#34;9178150&#34;},{&#34;dailyconfirmed&#34;:&#34;32083&#34;,&#34;dailydeceased&#34;:&#34;402&#34;,&#34;dailyrecovered&#34;:&#34;36583&#34;,&#34;date&#34;:&#34;8 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-08&#34;,&#34;totalconfirmed&#34;:&#34;9735941&#34;,&#34;totaldeceased&#34;:&#34;140807&#34;,&#34;totalrecovered&#34;:&#34;9214733&#34;},{&#34;dailyconfirmed&#34;:&#34;31637&#34;,&#34;dailydeceased&#34;:&#34;413&#34;,&#34;dailyrecovered&#34;:&#34;37693&#34;,&#34;date&#34;:&#34;9 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-09&#34;,&#34;totalconfirmed&#34;:&#34;9767578&#34;,&#34;totaldeceased&#34;:&#34;141220&#34;,&#34;totalrecovered&#34;:&#34;9252426&#34;},{&#34;dailyconfirmed&#34;:&#34;29411&#34;,&#34;dailydeceased&#34;:&#34;411&#34;,&#34;dailyrecovered&#34;:&#34;37707&#34;,&#34;date&#34;:&#34;10 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-10&#34;,&#34;totalconfirmed&#34;:&#34;9796989&#34;,&#34;totaldeceased&#34;:&#34;141631&#34;,&#34;totalrecovered&#34;:&#34;9290133&#34;},{&#34;dailyconfirmed&#34;:&#34;29961&#34;,&#34;dailydeceased&#34;:&#34;442&#34;,&#34;dailyrecovered&#34;:&#34;33492&#34;,&#34;date&#34;:&#34;11 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-11&#34;,&#34;totalconfirmed&#34;:&#34;9826950&#34;,&#34;totaldeceased&#34;:&#34;142073&#34;,&#34;totalrecovered&#34;:&#34;9323625&#34;},{&#34;dailyconfirmed&#34;:&#34;30354&#34;,&#34;dailydeceased&#34;:&#34;391&#34;,&#34;dailyrecovered&#34;:&#34;33087&#34;,&#34;date&#34;:&#34;12 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-12&#34;,&#34;totalconfirmed&#34;:&#34;9857304&#34;,&#34;totaldeceased&#34;:&#34;142464&#34;,&#34;totalrecovered&#34;:&#34;9356712&#34;},{&#34;dailyconfirmed&#34;:&#34;27336&#34;,&#34;dailydeceased&#34;:&#34;338&#34;,&#34;dailyrecovered&#34;:&#34;30640&#34;,&#34;date&#34;:&#34;13 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-13&#34;,&#34;totalconfirmed&#34;:&#34;9884640&#34;,&#34;totaldeceased&#34;:&#34;142802&#34;,&#34;totalrecovered&#34;:&#34;9387352&#34;},{&#34;dailyconfirmed&#34;:&#34;21941&#34;,&#34;dailydeceased&#34;:&#34;354&#34;,&#34;dailyrecovered&#34;:&#34;34421&#34;,&#34;date&#34;:&#34;14 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-14&#34;,&#34;totalconfirmed&#34;:&#34;9906581&#34;,&#34;totaldeceased&#34;:&#34;143156&#34;,&#34;totalrecovered&#34;:&#34;9421773&#34;},{&#34;dailyconfirmed&#34;:&#34;26251&#34;,&#34;dailydeceased&#34;:&#34;384&#34;,&#34;dailyrecovered&#34;:&#34;33853&#34;,&#34;date&#34;:&#34;15 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-15&#34;,&#34;totalconfirmed&#34;:&#34;9932832&#34;,&#34;totaldeceased&#34;:&#34;143540&#34;,&#34;totalrecovered&#34;:&#34;9455626&#34;},{&#34;dailyconfirmed&#34;:&#34;18172&#34;,&#34;dailydeceased&#34;:&#34;356&#34;,&#34;dailyrecovered&#34;:&#34;33360&#34;,&#34;date&#34;:&#34;16 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-16&#34;,&#34;totalconfirmed&#34;:&#34;9951004&#34;,&#34;totaldeceased&#34;:&#34;143896&#34;,&#34;totalrecovered&#34;:&#34;9488986&#34;},{&#34;dailyconfirmed&#34;:&#34;26754&#34;,&#34;dailydeceased&#34;:&#34;342&#34;,&#34;dailyrecovered&#34;:&#34;30891&#34;,&#34;date&#34;:&#34;17 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-17&#34;,&#34;totalconfirmed&#34;:&#34;9977758&#34;,&#34;totaldeceased&#34;:&#34;144238&#34;,&#34;totalrecovered&#34;:&#34;9519877&#34;},{&#34;dailyconfirmed&#34;:&#34;26991&#34;,&#34;dailydeceased&#34;:&#34;342&#34;,&#34;dailyrecovered&#34;:&#34;29879&#34;,&#34;date&#34;:&#34;18 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-18&#34;,&#34;totalconfirmed&#34;:&#34;10004749&#34;,&#34;totaldeceased&#34;:&#34;144580&#34;,&#34;totalrecovered&#34;:&#34;9549756&#34;},{&#34;dailyconfirmed&#34;:&#34;26834&#34;,&#34;dailydeceased&#34;:&#34;342&#34;,&#34;dailyrecovered&#34;:&#34;29758&#34;,&#34;date&#34;:&#34;19 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-19&#34;,&#34;totalconfirmed&#34;:&#34;10031583&#34;,&#34;totaldeceased&#34;:&#34;144922&#34;,&#34;totalrecovered&#34;:&#34;9579514&#34;},{&#34;dailyconfirmed&#34;:&#34;24622&#34;,&#34;dailydeceased&#34;:&#34;332&#34;,&#34;dailyrecovered&#34;:&#34;25734&#34;,&#34;date&#34;:&#34;20 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-20&#34;,&#34;totalconfirmed&#34;:&#34;10056205&#34;,&#34;totaldeceased&#34;:&#34;145254&#34;,&#34;totalrecovered&#34;:&#34;9605248&#34;},{&#34;dailyconfirmed&#34;:&#34;19147&#34;,&#34;dailydeceased&#34;:&#34;302&#34;,&#34;dailyrecovered&#34;:&#34;30250&#34;,&#34;date&#34;:&#34;21 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-21&#34;,&#34;totalconfirmed&#34;:&#34;10075352&#34;,&#34;totaldeceased&#34;:&#34;145556&#34;,&#34;totalrecovered&#34;:&#34;9635498&#34;},{&#34;dailyconfirmed&#34;:&#34;23880&#34;,&#34;dailydeceased&#34;:&#34;329&#34;,&#34;dailyrecovered&#34;:&#34;27032&#34;,&#34;date&#34;:&#34;22 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-22&#34;,&#34;totalconfirmed&#34;:&#34;10099232&#34;,&#34;totaldeceased&#34;:&#34;145885&#34;,&#34;totalrecovered&#34;:&#34;9662530&#34;},{&#34;dailyconfirmed&#34;:&#34;24716&#34;,&#34;dailydeceased&#34;:&#34;315&#34;,&#34;dailyrecovered&#34;:&#34;29946&#34;,&#34;date&#34;:&#34;23 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-23&#34;,&#34;totalconfirmed&#34;:&#34;10123948&#34;,&#34;totaldeceased&#34;:&#34;146200&#34;,&#34;totalrecovered&#34;:&#34;9692476&#34;},{&#34;dailyconfirmed&#34;:&#34;23444&#34;,&#34;dailydeceased&#34;:&#34;337&#34;,&#34;dailyrecovered&#34;:&#34;24555&#34;,&#34;date&#34;:&#34;24 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-24&#34;,&#34;totalconfirmed&#34;:&#34;10147392&#34;,&#34;totaldeceased&#34;:&#34;146537&#34;,&#34;totalrecovered&#34;:&#34;9717031&#34;},{&#34;dailyconfirmed&#34;:&#34;22349&#34;,&#34;dailydeceased&#34;:&#34;251&#34;,&#34;dailyrecovered&#34;:&#34;22184&#34;,&#34;date&#34;:&#34;25 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-25&#34;,&#34;totalconfirmed&#34;:&#34;10169741&#34;,&#34;totaldeceased&#34;:&#34;146788&#34;,&#34;totalrecovered&#34;:&#34;9739215&#34;},{&#34;dailyconfirmed&#34;:&#34;18575&#34;,&#34;dailydeceased&#34;:&#34;280&#34;,&#34;dailyrecovered&#34;:&#34;21466&#34;,&#34;date&#34;:&#34;26 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-26&#34;,&#34;totalconfirmed&#34;:&#34;10188316&#34;,&#34;totaldeceased&#34;:&#34;147068&#34;,&#34;totalrecovered&#34;:&#34;9760681&#34;},{&#34;dailyconfirmed&#34;:&#34;20333&#34;,&#34;dailydeceased&#34;:&#34;281&#34;,&#34;dailyrecovered&#34;:&#34;21097&#34;,&#34;date&#34;:&#34;27 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-27&#34;,&#34;totalconfirmed&#34;:&#34;10208649&#34;,&#34;totaldeceased&#34;:&#34;147349&#34;,&#34;totalrecovered&#34;:&#34;9781778&#34;},{&#34;dailyconfirmed&#34;:&#34;16072&#34;,&#34;dailydeceased&#34;:&#34;250&#34;,&#34;dailyrecovered&#34;:&#34;24822&#34;,&#34;date&#34;:&#34;28 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-28&#34;,&#34;totalconfirmed&#34;:&#34;10224721&#34;,&#34;totaldeceased&#34;:&#34;147599&#34;,&#34;totalrecovered&#34;:&#34;9806600&#34;},{&#34;dailyconfirmed&#34;:&#34;20542&#34;,&#34;dailydeceased&#34;:&#34;285&#34;,&#34;dailyrecovered&#34;:&#34;26589&#34;,&#34;date&#34;:&#34;29 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-29&#34;,&#34;totalconfirmed&#34;:&#34;10245263&#34;,&#34;totaldeceased&#34;:&#34;147884&#34;,&#34;totalrecovered&#34;:&#34;9833189&#34;},{&#34;dailyconfirmed&#34;:&#34;21945&#34;,&#34;dailydeceased&#34;:&#34;299&#34;,&#34;dailyrecovered&#34;:&#34;26407&#34;,&#34;date&#34;:&#34;30 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-30&#34;,&#34;totalconfirmed&#34;:&#34;10267208&#34;,&#34;totaldeceased&#34;:&#34;148183&#34;,&#34;totalrecovered&#34;:&#34;9859596&#34;},{&#34;dailyconfirmed&#34;:&#34;19026&#34;,&#34;dailydeceased&#34;:&#34;244&#34;,&#34;dailyrecovered&#34;:&#34;21969&#34;,&#34;date&#34;:&#34;31 December 2020&#34;,&#34;dateymd&#34;:&#34;2020-12-31&#34;,&#34;totalconfirmed&#34;:&#34;10286234&#34;,&#34;totaldeceased&#34;:&#34;148427&#34;,&#34;totalrecovered&#34;:&#34;9881565&#34;},{&#34;dailyconfirmed&#34;:&#34;20159&#34;,&#34;dailydeceased&#34;:&#34;237&#34;,&#34;dailyrecovered&#34;:&#34;23838&#34;,&#34;date&#34;:&#34;1 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-01&#34;,&#34;totalconfirmed&#34;:&#34;10306393&#34;,&#34;totaldeceased&#34;:&#34;148664&#34;,&#34;totalrecovered&#34;:&#34;9905403&#34;},{&#34;dailyconfirmed&#34;:&#34;18144&#34;,&#34;dailydeceased&#34;:&#34;216&#34;,&#34;dailyrecovered&#34;:&#34;20903&#34;,&#34;date&#34;:&#34;2 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-02&#34;,&#34;totalconfirmed&#34;:&#34;10324537&#34;,&#34;totaldeceased&#34;:&#34;148880&#34;,&#34;totalrecovered&#34;:&#34;9926306&#34;},{&#34;dailyconfirmed&#34;:&#34;16678&#34;,&#34;dailydeceased&#34;:&#34;215&#34;,&#34;dailyrecovered&#34;:&#34;19658&#34;,&#34;date&#34;:&#34;3 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-03&#34;,&#34;totalconfirmed&#34;:&#34;10341215&#34;,&#34;totaldeceased&#34;:&#34;149095&#34;,&#34;totalrecovered&#34;:&#34;9945964&#34;},{&#34;dailyconfirmed&#34;:&#34;16278&#34;,&#34;dailydeceased&#34;:&#34;200&#34;,&#34;dailyrecovered&#34;:&#34;29209&#34;,&#34;date&#34;:&#34;4 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-04&#34;,&#34;totalconfirmed&#34;:&#34;10357493&#34;,&#34;totaldeceased&#34;:&#34;149295&#34;,&#34;totalrecovered&#34;:&#34;9975173&#34;},{&#34;dailyconfirmed&#34;:&#34;17909&#34;,&#34;dailydeceased&#34;:&#34;265&#34;,&#34;dailyrecovered&#34;:&#34;21161&#34;,&#34;date&#34;:&#34;5 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-05&#34;,&#34;totalconfirmed&#34;:&#34;10375402&#34;,&#34;totaldeceased&#34;:&#34;149560&#34;,&#34;totalrecovered&#34;:&#34;9996334&#34;},{&#34;dailyconfirmed&#34;:&#34;20472&#34;,&#34;dailydeceased&#34;:&#34;222&#34;,&#34;dailyrecovered&#34;:&#34;19689&#34;,&#34;date&#34;:&#34;6 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-06&#34;,&#34;totalconfirmed&#34;:&#34;10395874&#34;,&#34;totaldeceased&#34;:&#34;149782&#34;,&#34;totalrecovered&#34;:&#34;10016023&#34;},{&#34;dailyconfirmed&#34;:&#34;18123&#34;,&#34;dailydeceased&#34;:&#34;233&#34;,&#34;dailyrecovered&#34;:&#34;20503&#34;,&#34;date&#34;:&#34;7 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-07&#34;,&#34;totalconfirmed&#34;:&#34;10413997&#34;,&#34;totaldeceased&#34;:&#34;150015&#34;,&#34;totalrecovered&#34;:&#34;10036526&#34;},{&#34;dailyconfirmed&#34;:&#34;18453&#34;,&#34;dailydeceased&#34;:&#34;229&#34;,&#34;dailyrecovered&#34;:&#34;19242&#34;,&#34;date&#34;:&#34;8 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-08&#34;,&#34;totalconfirmed&#34;:&#34;10432450&#34;,&#34;totaldeceased&#34;:&#34;150244&#34;,&#34;totalrecovered&#34;:&#34;10055768&#34;},{&#34;dailyconfirmed&#34;:&#34;18820&#34;,&#34;dailydeceased&#34;:&#34;213&#34;,&#34;dailyrecovered&#34;:&#34;19460&#34;,&#34;date&#34;:&#34;9 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-09&#34;,&#34;totalconfirmed&#34;:&#34;10451270&#34;,&#34;totaldeceased&#34;:&#34;150457&#34;,&#34;totalrecovered&#34;:&#34;10075228&#34;},{&#34;dailyconfirmed&#34;:&#34;16086&#34;,&#34;dailydeceased&#34;:&#34;150&#34;,&#34;dailyrecovered&#34;:&#34;16737&#34;,&#34;date&#34;:&#34;10 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-10&#34;,&#34;totalconfirmed&#34;:&#34;10467356&#34;,&#34;totaldeceased&#34;:&#34;150607&#34;,&#34;totalrecovered&#34;:&#34;10091965&#34;},{&#34;dailyconfirmed&#34;:&#34;12481&#34;,&#34;dailydeceased&#34;:&#34;166&#34;,&#34;dailyrecovered&#34;:&#34;18578&#34;,&#34;date&#34;:&#34;11 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-11&#34;,&#34;totalconfirmed&#34;:&#34;10479837&#34;,&#34;totaldeceased&#34;:&#34;150773&#34;,&#34;totalrecovered&#34;:&#34;10110543&#34;},{&#34;dailyconfirmed&#34;:&#34;15903&#34;,&#34;dailydeceased&#34;:&#34;200&#34;,&#34;dailyrecovered&#34;:&#34;17762&#34;,&#34;date&#34;:&#34;12 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-12&#34;,&#34;totalconfirmed&#34;:&#34;10495740&#34;,&#34;totaldeceased&#34;:&#34;150973&#34;,&#34;totalrecovered&#34;:&#34;10128305&#34;},{&#34;dailyconfirmed&#34;:&#34;17015&#34;,&#34;dailydeceased&#34;:&#34;201&#34;,&#34;dailyrecovered&#34;:&#34;17797&#34;,&#34;date&#34;:&#34;13 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-13&#34;,&#34;totalconfirmed&#34;:&#34;10512755&#34;,&#34;totaldeceased&#34;:&#34;151174&#34;,&#34;totalrecovered&#34;:&#34;10146102&#34;},{&#34;dailyconfirmed&#34;:&#34;15677&#34;,&#34;dailydeceased&#34;:&#34;189&#34;,&#34;dailyrecovered&#34;:&#34;15943&#34;,&#34;date&#34;:&#34;14 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-14&#34;,&#34;totalconfirmed&#34;:&#34;10528432&#34;,&#34;totaldeceased&#34;:&#34;151363&#34;,&#34;totalrecovered&#34;:&#34;10162045&#34;},{&#34;dailyconfirmed&#34;:&#34;15155&#34;,&#34;dailydeceased&#34;:&#34;176&#34;,&#34;dailyrecovered&#34;:&#34;16809&#34;,&#34;date&#34;:&#34;15 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-15&#34;,&#34;totalconfirmed&#34;:&#34;10543587&#34;,&#34;totaldeceased&#34;:&#34;151539&#34;,&#34;totalrecovered&#34;:&#34;10178854&#34;},{&#34;dailyconfirmed&#34;:&#34;15050&#34;,&#34;dailydeceased&#34;:&#34;181&#34;,&#34;dailyrecovered&#34;:&#34;17202&#34;,&#34;date&#34;:&#34;16 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-16&#34;,&#34;totalconfirmed&#34;:&#34;10558637&#34;,&#34;totaldeceased&#34;:&#34;151720&#34;,&#34;totalrecovered&#34;:&#34;10196056&#34;},{&#34;dailyconfirmed&#34;:&#34;13962&#34;,&#34;dailydeceased&#34;:&#34;145&#34;,&#34;dailyrecovered&#34;:&#34;14513&#34;,&#34;date&#34;:&#34;17 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-17&#34;,&#34;totalconfirmed&#34;:&#34;10572599&#34;,&#34;totaldeceased&#34;:&#34;151865&#34;,&#34;totalrecovered&#34;:&#34;10210569&#34;},{&#34;dailyconfirmed&#34;:&#34;9987&#34;,&#34;dailydeceased&#34;:&#34;137&#34;,&#34;dailyrecovered&#34;:&#34;17127&#34;,&#34;date&#34;:&#34;18 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-18&#34;,&#34;totalconfirmed&#34;:&#34;10582586&#34;,&#34;totaldeceased&#34;:&#34;152002&#34;,&#34;totalrecovered&#34;:&#34;10227696&#34;},{&#34;dailyconfirmed&#34;:&#34;13787&#34;,&#34;dailydeceased&#34;:&#34;162&#34;,&#34;dailyrecovered&#34;:&#34;17229&#34;,&#34;date&#34;:&#34;19 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-19&#34;,&#34;totalconfirmed&#34;:&#34;10596373&#34;,&#34;totaldeceased&#34;:&#34;152164&#34;,&#34;totalrecovered&#34;:&#34;10244925&#34;},{&#34;dailyconfirmed&#34;:&#34;15279&#34;,&#34;dailydeceased&#34;:&#34;152&#34;,&#34;dailyrecovered&#34;:&#34;20071&#34;,&#34;date&#34;:&#34;20 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-20&#34;,&#34;totalconfirmed&#34;:&#34;10611652&#34;,&#34;totaldeceased&#34;:&#34;152316&#34;,&#34;totalrecovered&#34;:&#34;10264996&#34;},{&#34;dailyconfirmed&#34;:&#34;14495&#34;,&#34;dailydeceased&#34;:&#34;161&#34;,&#34;dailyrecovered&#34;:&#34;17734&#34;,&#34;date&#34;:&#34;21 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-21&#34;,&#34;totalconfirmed&#34;:&#34;10626147&#34;,&#34;totaldeceased&#34;:&#34;152477&#34;,&#34;totalrecovered&#34;:&#34;10282730&#34;},{&#34;dailyconfirmed&#34;:&#34;14323&#34;,&#34;dailydeceased&#34;:&#34;153&#34;,&#34;dailyrecovered&#34;:&#34;17166&#34;,&#34;date&#34;:&#34;22 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-22&#34;,&#34;totalconfirmed&#34;:&#34;10640470&#34;,&#34;totaldeceased&#34;:&#34;152630&#34;,&#34;totalrecovered&#34;:&#34;10299896&#34;},{&#34;dailyconfirmed&#34;:&#34;14896&#34;,&#34;dailydeceased&#34;:&#34;156&#34;,&#34;dailyrecovered&#34;:&#34;16033&#34;,&#34;date&#34;:&#34;23 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-23&#34;,&#34;totalconfirmed&#34;:&#34;10655366&#34;,&#34;totaldeceased&#34;:&#34;152786&#34;,&#34;totalrecovered&#34;:&#34;10315929&#34;},{&#34;dailyconfirmed&#34;:&#34;13232&#34;,&#34;dailydeceased&#34;:&#34;131&#34;,&#34;dailyrecovered&#34;:&#34;13148&#34;,&#34;date&#34;:&#34;24 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-24&#34;,&#34;totalconfirmed&#34;:&#34;10668598&#34;,&#34;totaldeceased&#34;:&#34;152917&#34;,&#34;totalrecovered&#34;:&#34;10329077&#34;},{&#34;dailyconfirmed&#34;:&#34;9098&#34;,&#34;dailydeceased&#34;:&#34;116&#34;,&#34;dailyrecovered&#34;:&#34;16092&#34;,&#34;date&#34;:&#34;25 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-25&#34;,&#34;totalconfirmed&#34;:&#34;10677696&#34;,&#34;totaldeceased&#34;:&#34;153033&#34;,&#34;totalrecovered&#34;:&#34;10345169&#34;},{&#34;dailyconfirmed&#34;:&#34;12733&#34;,&#34;dailydeceased&#34;:&#34;138&#34;,&#34;dailyrecovered&#34;:&#34;13250&#34;,&#34;date&#34;:&#34;26 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-26&#34;,&#34;totalconfirmed&#34;:&#34;10690429&#34;,&#34;totaldeceased&#34;:&#34;153171&#34;,&#34;totalrecovered&#34;:&#34;10358419&#34;},{&#34;dailyconfirmed&#34;:&#34;11556&#34;,&#34;dailydeceased&#34;:&#34;123&#34;,&#34;dailyrecovered&#34;:&#34;14261&#34;,&#34;date&#34;:&#34;27 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-27&#34;,&#34;totalconfirmed&#34;:&#34;10701985&#34;,&#34;totaldeceased&#34;:&#34;153294&#34;,&#34;totalrecovered&#34;:&#34;10372680&#34;},{&#34;dailyconfirmed&#34;:&#34;18912&#34;,&#34;dailydeceased&#34;:&#34;162&#34;,&#34;dailyrecovered&#34;:&#34;20315&#34;,&#34;date&#34;:&#34;28 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-28&#34;,&#34;totalconfirmed&#34;:&#34;10720897&#34;,&#34;totaldeceased&#34;:&#34;153456&#34;,&#34;totalrecovered&#34;:&#34;10392995&#34;},{&#34;dailyconfirmed&#34;:&#34;13054&#34;,&#34;dailydeceased&#34;:&#34;137&#34;,&#34;dailyrecovered&#34;:&#34;14886&#34;,&#34;date&#34;:&#34;29 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-29&#34;,&#34;totalconfirmed&#34;:&#34;10733951&#34;,&#34;totaldeceased&#34;:&#34;153593&#34;,&#34;totalrecovered&#34;:&#34;10407881&#34;},{&#34;dailyconfirmed&#34;:&#34;13073&#34;,&#34;dailydeceased&#34;:&#34;128&#34;,&#34;dailyrecovered&#34;:&#34;14077&#34;,&#34;date&#34;:&#34;30 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-30&#34;,&#34;totalconfirmed&#34;:&#34;10747024&#34;,&#34;totaldeceased&#34;:&#34;153721&#34;,&#34;totalrecovered&#34;:&#34;10421958&#34;},{&#34;dailyconfirmed&#34;:&#34;11527&#34;,&#34;dailydeceased&#34;:&#34;116&#34;,&#34;dailyrecovered&#34;:&#34;11882&#34;,&#34;date&#34;:&#34;31 January 2021&#34;,&#34;dateymd&#34;:&#34;2021-01-31&#34;,&#34;totalconfirmed&#34;:&#34;10758551&#34;,&#34;totaldeceased&#34;:&#34;153837&#34;,&#34;totalrecovered&#34;:&#34;10433840&#34;},{&#34;dailyconfirmed&#34;:&#34;8579&#34;,&#34;dailydeceased&#34;:&#34;94&#34;,&#34;dailyrecovered&#34;:&#34;13443&#34;,&#34;date&#34;:&#34;1 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-01&#34;,&#34;totalconfirmed&#34;:&#34;10767130&#34;,&#34;totaldeceased&#34;:&#34;153931&#34;,&#34;totalrecovered&#34;:&#34;10447283&#34;},{&#34;dailyconfirmed&#34;:&#34;11001&#34;,&#34;dailydeceased&#34;:&#34;113&#34;,&#34;dailyrecovered&#34;:&#34;14250&#34;,&#34;date&#34;:&#34;2 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-02&#34;,&#34;totalconfirmed&#34;:&#34;10778131&#34;,&#34;totaldeceased&#34;:&#34;154044&#34;,&#34;totalrecovered&#34;:&#34;10461533&#34;},{&#34;dailyconfirmed&#34;:&#34;12925&#34;,&#34;dailydeceased&#34;:&#34;107&#34;,&#34;dailyrecovered&#34;:&#34;17813&#34;,&#34;date&#34;:&#34;3 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-03&#34;,&#34;totalconfirmed&#34;:&#34;10791056&#34;,&#34;totaldeceased&#34;:&#34;154151&#34;,&#34;totalrecovered&#34;:&#34;10479346&#34;},{&#34;dailyconfirmed&#34;:&#34;12401&#34;,&#34;dailydeceased&#34;:&#34;120&#34;,&#34;dailyrecovered&#34;:&#34;15788&#34;,&#34;date&#34;:&#34;4 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-04&#34;,&#34;totalconfirmed&#34;:&#34;10803457&#34;,&#34;totaldeceased&#34;:&#34;154271&#34;,&#34;totalrecovered&#34;:&#34;10495134&#34;},{&#34;dailyconfirmed&#34;:&#34;11711&#34;,&#34;dailydeceased&#34;:&#34;95&#34;,&#34;dailyrecovered&#34;:&#34;14512&#34;,&#34;date&#34;:&#34;5 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-05&#34;,&#34;totalconfirmed&#34;:&#34;10815168&#34;,&#34;totaldeceased&#34;:&#34;154366&#34;,&#34;totalrecovered&#34;:&#34;10509646&#34;},{&#34;dailyconfirmed&#34;:&#34;12069&#34;,&#34;dailydeceased&#34;:&#34;75&#34;,&#34;dailyrecovered&#34;:&#34;11761&#34;,&#34;date&#34;:&#34;6 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-06&#34;,&#34;totalconfirmed&#34;:&#34;10827237&#34;,&#34;totaldeceased&#34;:&#34;154441&#34;,&#34;totalrecovered&#34;:&#34;10521407&#34;},{&#34;dailyconfirmed&#34;:&#34;11786&#34;,&#34;dailydeceased&#34;:&#34;86&#34;,&#34;dailyrecovered&#34;:&#34;11756&#34;,&#34;date&#34;:&#34;7 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-07&#34;,&#34;totalconfirmed&#34;:&#34;10839023&#34;,&#34;totaldeceased&#34;:&#34;154527&#34;,&#34;totalrecovered&#34;:&#34;10533163&#34;},{&#34;dailyconfirmed&#34;:&#34;8715&#34;,&#34;dailydeceased&#34;:&#34;78&#34;,&#34;dailyrecovered&#34;:&#34;13600&#34;,&#34;date&#34;:&#34;8 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-08&#34;,&#34;totalconfirmed&#34;:&#34;10847738&#34;,&#34;totaldeceased&#34;:&#34;154605&#34;,&#34;totalrecovered&#34;:&#34;10546763&#34;},{&#34;dailyconfirmed&#34;:&#34;10731&#34;,&#34;dailydeceased&#34;:&#34;94&#34;,&#34;dailyrecovered&#34;:&#34;12928&#34;,&#34;date&#34;:&#34;9 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-09&#34;,&#34;totalconfirmed&#34;:&#34;10858469&#34;,&#34;totaldeceased&#34;:&#34;154699&#34;,&#34;totalrecovered&#34;:&#34;10559691&#34;},{&#34;dailyconfirmed&#34;:&#34;12539&#34;,&#34;dailydeceased&#34;:&#34;110&#34;,&#34;dailyrecovered&#34;:&#34;11796&#34;,&#34;date&#34;:&#34;10 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-10&#34;,&#34;totalconfirmed&#34;:&#34;10871008&#34;,&#34;totaldeceased&#34;:&#34;154809&#34;,&#34;totalrecovered&#34;:&#34;10571487&#34;},{&#34;dailyconfirmed&#34;:&#34;9353&#34;,&#34;dailydeceased&#34;:&#34;85&#34;,&#34;dailyrecovered&#34;:&#34;15722&#34;,&#34;date&#34;:&#34;11 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-11&#34;,&#34;totalconfirmed&#34;:&#34;10880361&#34;,&#34;totaldeceased&#34;:&#34;154894&#34;,&#34;totalrecovered&#34;:&#34;10587209&#34;},{&#34;dailyconfirmed&#34;:&#34;12137&#34;,&#34;dailydeceased&#34;:&#34;104&#34;,&#34;dailyrecovered&#34;:&#34;11358&#34;,&#34;date&#34;:&#34;12 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-12&#34;,&#34;totalconfirmed&#34;:&#34;10892498&#34;,&#34;totaldeceased&#34;:&#34;154998&#34;,&#34;totalrecovered&#34;:&#34;10598567&#34;},{&#34;dailyconfirmed&#34;:&#34;12198&#34;,&#34;dailydeceased&#34;:&#34;89&#34;,&#34;dailyrecovered&#34;:&#34;11107&#34;,&#34;date&#34;:&#34;13 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-13&#34;,&#34;totalconfirmed&#34;:&#34;10904696&#34;,&#34;totaldeceased&#34;:&#34;155087&#34;,&#34;totalrecovered&#34;:&#34;10609674&#34;},{&#34;dailyconfirmed&#34;:&#34;11706&#34;,&#34;dailydeceased&#34;:&#34;91&#34;,&#34;dailyrecovered&#34;:&#34;9500&#34;,&#34;date&#34;:&#34;14 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-14&#34;,&#34;totalconfirmed&#34;:&#34;10916402&#34;,&#34;totaldeceased&#34;:&#34;155178&#34;,&#34;totalrecovered&#34;:&#34;10619174&#34;},{&#34;dailyconfirmed&#34;:&#34;9086&#34;,&#34;dailydeceased&#34;:&#34;82&#34;,&#34;dailyrecovered&#34;:&#34;11793&#34;,&#34;date&#34;:&#34;15 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-15&#34;,&#34;totalconfirmed&#34;:&#34;10925488&#34;,&#34;totaldeceased&#34;:&#34;155260&#34;,&#34;totalrecovered&#34;:&#34;10630967&#34;},{&#34;dailyconfirmed&#34;:&#34;11592&#34;,&#34;dailydeceased&#34;:&#34;99&#34;,&#34;dailyrecovered&#34;:&#34;11836&#34;,&#34;date&#34;:&#34;16 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-16&#34;,&#34;totalconfirmed&#34;:&#34;10937080&#34;,&#34;totaldeceased&#34;:&#34;155359&#34;,&#34;totalrecovered&#34;:&#34;10642803&#34;},{&#34;dailyconfirmed&#34;:&#34;12862&#34;,&#34;dailydeceased&#34;:&#34;100&#34;,&#34;dailyrecovered&#34;:&#34;12028&#34;,&#34;date&#34;:&#34;17 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-17&#34;,&#34;totalconfirmed&#34;:&#34;10949942&#34;,&#34;totaldeceased&#34;:&#34;155459&#34;,&#34;totalrecovered&#34;:&#34;10654831&#34;},{&#34;dailyconfirmed&#34;:&#34;13237&#34;,&#34;dailydeceased&#34;:&#34;100&#34;,&#34;dailyrecovered&#34;:&#34;10914&#34;,&#34;date&#34;:&#34;18 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-18&#34;,&#34;totalconfirmed&#34;:&#34;10963179&#34;,&#34;totaldeceased&#34;:&#34;155559&#34;,&#34;totalrecovered&#34;:&#34;10665745&#34;},{&#34;dailyconfirmed&#34;:&#34;13916&#34;,&#34;dailydeceased&#34;:&#34;100&#34;,&#34;dailyrecovered&#34;:&#34;10214&#34;,&#34;date&#34;:&#34;19 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-19&#34;,&#34;totalconfirmed&#34;:&#34;10977095&#34;,&#34;totaldeceased&#34;:&#34;155659&#34;,&#34;totalrecovered&#34;:&#34;10675959&#34;},{&#34;dailyconfirmed&#34;:&#34;13919&#34;,&#34;dailydeceased&#34;:&#34;89&#34;,&#34;dailyrecovered&#34;:&#34;11413&#34;,&#34;date&#34;:&#34;20 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-20&#34;,&#34;totalconfirmed&#34;:&#34;10991014&#34;,&#34;totaldeceased&#34;:&#34;155748&#34;,&#34;totalrecovered&#34;:&#34;10687372&#34;},{&#34;dailyconfirmed&#34;:&#34;14278&#34;,&#34;dailydeceased&#34;:&#34;83&#34;,&#34;dailyrecovered&#34;:&#34;9715&#34;,&#34;date&#34;:&#34;21 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-21&#34;,&#34;totalconfirmed&#34;:&#34;11005292&#34;,&#34;totaldeceased&#34;:&#34;155831&#34;,&#34;totalrecovered&#34;:&#34;10697087&#34;},{&#34;dailyconfirmed&#34;:&#34;10494&#34;,&#34;dailydeceased&#34;:&#34;76&#34;,&#34;dailyrecovered&#34;:&#34;13233&#34;,&#34;date&#34;:&#34;22 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-22&#34;,&#34;totalconfirmed&#34;:&#34;11015786&#34;,&#34;totaldeceased&#34;:&#34;155907&#34;,&#34;totalrecovered&#34;:&#34;10710320&#34;},{&#34;dailyconfirmed&#34;:&#34;13682&#34;,&#34;dailydeceased&#34;:&#34;103&#34;,&#34;dailyrecovered&#34;:&#34;13969&#34;,&#34;date&#34;:&#34;23 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-23&#34;,&#34;totalconfirmed&#34;:&#34;11029468&#34;,&#34;totaldeceased&#34;:&#34;156010&#34;,&#34;totalrecovered&#34;:&#34;10724289&#34;},{&#34;dailyconfirmed&#34;:&#34;16930&#34;,&#34;dailydeceased&#34;:&#34;141&#34;,&#34;dailyrecovered&#34;:&#34;12100&#34;,&#34;date&#34;:&#34;24 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-24&#34;,&#34;totalconfirmed&#34;:&#34;11046398&#34;,&#34;totaldeceased&#34;:&#34;156151&#34;,&#34;totalrecovered&#34;:&#34;10736389&#34;},{&#34;dailyconfirmed&#34;:&#34;16599&#34;,&#34;dailydeceased&#34;:&#34;119&#34;,&#34;dailyrecovered&#34;:&#34;12222&#34;,&#34;date&#34;:&#34;25 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-25&#34;,&#34;totalconfirmed&#34;:&#34;11062997&#34;,&#34;totaldeceased&#34;:&#34;156270&#34;,&#34;totalrecovered&#34;:&#34;10748611&#34;},{&#34;dailyconfirmed&#34;:&#34;16562&#34;,&#34;dailydeceased&#34;:&#34;114&#34;,&#34;dailyrecovered&#34;:&#34;12790&#34;,&#34;date&#34;:&#34;26 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-26&#34;,&#34;totalconfirmed&#34;:&#34;11079559&#34;,&#34;totaldeceased&#34;:&#34;156384&#34;,&#34;totalrecovered&#34;:&#34;10761401&#34;},{&#34;dailyconfirmed&#34;:&#34;16805&#34;,&#34;dailydeceased&#34;:&#34;111&#34;,&#34;dailyrecovered&#34;:&#34;11709&#34;,&#34;date&#34;:&#34;27 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-27&#34;,&#34;totalconfirmed&#34;:&#34;11096364&#34;,&#34;totaldeceased&#34;:&#34;156495&#34;,&#34;totalrecovered&#34;:&#34;10773110&#34;},{&#34;dailyconfirmed&#34;:&#34;15614&#34;,&#34;dailydeceased&#34;:&#34;108&#34;,&#34;dailyrecovered&#34;:&#34;11291&#34;,&#34;date&#34;:&#34;28 February 2021&#34;,&#34;dateymd&#34;:&#34;2021-02-28&#34;,&#34;totalconfirmed&#34;:&#34;11111978&#34;,&#34;totaldeceased&#34;:&#34;156603&#34;,&#34;totalrecovered&#34;:&#34;10784401&#34;},{&#34;dailyconfirmed&#34;:&#34;12270&#34;,&#34;dailydeceased&#34;:&#34;92&#34;,&#34;dailyrecovered&#34;:&#34;12472&#34;,&#34;date&#34;:&#34;1 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-01&#34;,&#34;totalconfirmed&#34;:&#34;11124248&#34;,&#34;totaldeceased&#34;:&#34;156695&#34;,&#34;totalrecovered&#34;:&#34;10796873&#34;},{&#34;dailyconfirmed&#34;:&#34;14998&#34;,&#34;dailydeceased&#34;:&#34;98&#34;,&#34;dailyrecovered&#34;:&#34;13113&#34;,&#34;date&#34;:&#34;2 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-02&#34;,&#34;totalconfirmed&#34;:&#34;11139246&#34;,&#34;totaldeceased&#34;:&#34;156793&#34;,&#34;totalrecovered&#34;:&#34;10809986&#34;},{&#34;dailyconfirmed&#34;:&#34;17425&#34;,&#34;dailydeceased&#34;:&#34;87&#34;,&#34;dailyrecovered&#34;:&#34;14071&#34;,&#34;date&#34;:&#34;3 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-03&#34;,&#34;totalconfirmed&#34;:&#34;11156671&#34;,&#34;totaldeceased&#34;:&#34;156880&#34;,&#34;totalrecovered&#34;:&#34;10824057&#34;},{&#34;dailyconfirmed&#34;:&#34;16824&#34;,&#34;dailydeceased&#34;:&#34;113&#34;,&#34;dailyrecovered&#34;:&#34;13788&#34;,&#34;date&#34;:&#34;4 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-04&#34;,&#34;totalconfirmed&#34;:&#34;11173495&#34;,&#34;totaldeceased&#34;:&#34;156993&#34;,&#34;totalrecovered&#34;:&#34;10837845&#34;},{&#34;dailyconfirmed&#34;:&#34;18324&#34;,&#34;dailydeceased&#34;:&#34;109&#34;,&#34;dailyrecovered&#34;:&#34;14186&#34;,&#34;date&#34;:&#34;5 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-05&#34;,&#34;totalconfirmed&#34;:&#34;11191819&#34;,&#34;totaldeceased&#34;:&#34;157102&#34;,&#34;totalrecovered&#34;:&#34;10852031&#34;},{&#34;dailyconfirmed&#34;:&#34;18724&#34;,&#34;dailydeceased&#34;:&#34;100&#34;,&#34;dailyrecovered&#34;:&#34;14379&#34;,&#34;date&#34;:&#34;6 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-06&#34;,&#34;totalconfirmed&#34;:&#34;11210543&#34;,&#34;totaldeceased&#34;:&#34;157202&#34;,&#34;totalrecovered&#34;:&#34;10866410&#34;},{&#34;dailyconfirmed&#34;:&#34;18650&#34;,&#34;dailydeceased&#34;:&#34;97&#34;,&#34;dailyrecovered&#34;:&#34;14303&#34;,&#34;date&#34;:&#34;7 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-07&#34;,&#34;totalconfirmed&#34;:&#34;11229193&#34;,&#34;totaldeceased&#34;:&#34;157299&#34;,&#34;totalrecovered&#34;:&#34;10880713&#34;},{&#34;dailyconfirmed&#34;:&#34;15353&#34;,&#34;dailydeceased&#34;:&#34;76&#34;,&#34;dailyrecovered&#34;:&#34;16606&#34;,&#34;date&#34;:&#34;8 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-08&#34;,&#34;totalconfirmed&#34;:&#34;11244546&#34;,&#34;totaldeceased&#34;:&#34;157375&#34;,&#34;totalrecovered&#34;:&#34;10897319&#34;},{&#34;dailyconfirmed&#34;:&#34;17873&#34;,&#34;dailydeceased&#34;:&#34;133&#34;,&#34;dailyrecovered&#34;:&#34;20643&#34;,&#34;date&#34;:&#34;9 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-09&#34;,&#34;totalconfirmed&#34;:&#34;11262419&#34;,&#34;totaldeceased&#34;:&#34;157508&#34;,&#34;totalrecovered&#34;:&#34;10917962&#34;},{&#34;dailyconfirmed&#34;:&#34;22851&#34;,&#34;dailydeceased&#34;:&#34;125&#34;,&#34;dailyrecovered&#34;:&#34;18154&#34;,&#34;date&#34;:&#34;10 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-10&#34;,&#34;totalconfirmed&#34;:&#34;11285270&#34;,&#34;totaldeceased&#34;:&#34;157633&#34;,&#34;totalrecovered&#34;:&#34;10936116&#34;},{&#34;dailyconfirmed&#34;:&#34;23298&#34;,&#34;dailydeceased&#34;:&#34;119&#34;,&#34;dailyrecovered&#34;:&#34;15092&#34;,&#34;date&#34;:&#34;11 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-11&#34;,&#34;totalconfirmed&#34;:&#34;11308568&#34;,&#34;totaldeceased&#34;:&#34;157752&#34;,&#34;totalrecovered&#34;:&#34;10951208&#34;},{&#34;dailyconfirmed&#34;:&#34;24845&#34;,&#34;dailydeceased&#34;:&#34;140&#34;,&#34;dailyrecovered&#34;:&#34;19972&#34;,&#34;date&#34;:&#34;12 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-12&#34;,&#34;totalconfirmed&#34;:&#34;11333413&#34;,&#34;totaldeceased&#34;:&#34;157892&#34;,&#34;totalrecovered&#34;:&#34;10971180&#34;},{&#34;dailyconfirmed&#34;:&#34;25154&#34;,&#34;dailydeceased&#34;:&#34;159&#34;,&#34;dailyrecovered&#34;:&#34;16508&#34;,&#34;date&#34;:&#34;13 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-13&#34;,&#34;totalconfirmed&#34;:&#34;11358567&#34;,&#34;totaldeceased&#34;:&#34;158051&#34;,&#34;totalrecovered&#34;:&#34;10987688&#34;},{&#34;dailyconfirmed&#34;:&#34;26513&#34;,&#34;dailydeceased&#34;:&#34;120&#34;,&#34;dailyrecovered&#34;:&#34;17590&#34;,&#34;date&#34;:&#34;14 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-14&#34;,&#34;totalconfirmed&#34;:&#34;11385080&#34;,&#34;totaldeceased&#34;:&#34;158171&#34;,&#34;totalrecovered&#34;:&#34;11005278&#34;},{&#34;dailyconfirmed&#34;:&#34;24437&#34;,&#34;dailydeceased&#34;:&#34;130&#34;,&#34;dailyrecovered&#34;:&#34;20186&#34;,&#34;date&#34;:&#34;15 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-15&#34;,&#34;totalconfirmed&#34;:&#34;11409517&#34;,&#34;totaldeceased&#34;:&#34;158301&#34;,&#34;totalrecovered&#34;:&#34;11025464&#34;},{&#34;dailyconfirmed&#34;:&#34;28869&#34;,&#34;dailydeceased&#34;:&#34;187&#34;,&#34;dailyrecovered&#34;:&#34;17746&#34;,&#34;date&#34;:&#34;16 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-16&#34;,&#34;totalconfirmed&#34;:&#34;11438386&#34;,&#34;totaldeceased&#34;:&#34;158488&#34;,&#34;totalrecovered&#34;:&#34;11043210&#34;},{&#34;dailyconfirmed&#34;:&#34;35838&#34;,&#34;dailydeceased&#34;:&#34;171&#34;,&#34;dailyrecovered&#34;:&#34;17793&#34;,&#34;date&#34;:&#34;17 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-17&#34;,&#34;totalconfirmed&#34;:&#34;11474224&#34;,&#34;totaldeceased&#34;:&#34;158659&#34;,&#34;totalrecovered&#34;:&#34;11061003&#34;},{&#34;dailyconfirmed&#34;:&#34;39687&#34;,&#34;dailydeceased&#34;:&#34;156&#34;,&#34;dailyrecovered&#34;:&#34;20356&#34;,&#34;date&#34;:&#34;18 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-18&#34;,&#34;totalconfirmed&#34;:&#34;11513911&#34;,&#34;totaldeceased&#34;:&#34;158815&#34;,&#34;totalrecovered&#34;:&#34;11081359&#34;},{&#34;dailyconfirmed&#34;:&#34;40906&#34;,&#34;dailydeceased&#34;:&#34;188&#34;,&#34;dailyrecovered&#34;:&#34;23623&#34;,&#34;date&#34;:&#34;19 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-19&#34;,&#34;totalconfirmed&#34;:&#34;11554817&#34;,&#34;totaldeceased&#34;:&#34;159003&#34;,&#34;totalrecovered&#34;:&#34;11104982&#34;},{&#34;dailyconfirmed&#34;:&#34;43815&#34;,&#34;dailydeceased&#34;:&#34;196&#34;,&#34;dailyrecovered&#34;:&#34;22971&#34;,&#34;date&#34;:&#34;20 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-20&#34;,&#34;totalconfirmed&#34;:&#34;11598632&#34;,&#34;totaldeceased&#34;:&#34;159199&#34;,&#34;totalrecovered&#34;:&#34;11127953&#34;},{&#34;dailyconfirmed&#34;:&#34;47009&#34;,&#34;dailydeceased&#34;:&#34;213&#34;,&#34;dailyrecovered&#34;:&#34;21205&#34;,&#34;date&#34;:&#34;21 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-21&#34;,&#34;totalconfirmed&#34;:&#34;11645641&#34;,&#34;totaldeceased&#34;:&#34;159412&#34;,&#34;totalrecovered&#34;:&#34;11149158&#34;},{&#34;dailyconfirmed&#34;:&#34;40636&#34;,&#34;dailydeceased&#34;:&#34;197&#34;,&#34;dailyrecovered&#34;:&#34;29779&#34;,&#34;date&#34;:&#34;22 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-22&#34;,&#34;totalconfirmed&#34;:&#34;11686277&#34;,&#34;totaldeceased&#34;:&#34;159609&#34;,&#34;totalrecovered&#34;:&#34;11178937&#34;},{&#34;dailyconfirmed&#34;:&#34;47239&#34;,&#34;dailydeceased&#34;:&#34;277&#34;,&#34;dailyrecovered&#34;:&#34;23913&#34;,&#34;date&#34;:&#34;23 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-23&#34;,&#34;totalconfirmed&#34;:&#34;11733516&#34;,&#34;totaldeceased&#34;:&#34;159886&#34;,&#34;totalrecovered&#34;:&#34;11202850&#34;},{&#34;dailyconfirmed&#34;:&#34;53419&#34;,&#34;dailydeceased&#34;:&#34;249&#34;,&#34;dailyrecovered&#34;:&#34;26575&#34;,&#34;date&#34;:&#34;24 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-24&#34;,&#34;totalconfirmed&#34;:&#34;11786935&#34;,&#34;totaldeceased&#34;:&#34;160135&#34;,&#34;totalrecovered&#34;:&#34;11229425&#34;},{&#34;dailyconfirmed&#34;:&#34;59083&#34;,&#34;dailydeceased&#34;:&#34;257&#34;,&#34;dailyrecovered&#34;:&#34;32917&#34;,&#34;date&#34;:&#34;25 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-25&#34;,&#34;totalconfirmed&#34;:&#34;11846018&#34;,&#34;totaldeceased&#34;:&#34;160392&#34;,&#34;totalrecovered&#34;:&#34;11262342&#34;},{&#34;dailyconfirmed&#34;:&#34;62276&#34;,&#34;dailydeceased&#34;:&#34;292&#34;,&#34;dailyrecovered&#34;:&#34;30341&#34;,&#34;date&#34;:&#34;26 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-26&#34;,&#34;totalconfirmed&#34;:&#34;11908294&#34;,&#34;totaldeceased&#34;:&#34;160684&#34;,&#34;totalrecovered&#34;:&#34;11292683&#34;},{&#34;dailyconfirmed&#34;:&#34;62632&#34;,&#34;dailydeceased&#34;:&#34;311&#34;,&#34;dailyrecovered&#34;:&#34;28728&#34;,&#34;date&#34;:&#34;27 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-27&#34;,&#34;totalconfirmed&#34;:&#34;11970926&#34;,&#34;totaldeceased&#34;:&#34;160995&#34;,&#34;totalrecovered&#34;:&#34;11321411&#34;},{&#34;dailyconfirmed&#34;:&#34;68206&#34;,&#34;dailydeceased&#34;:&#34;295&#34;,&#34;dailyrecovered&#34;:&#34;32269&#34;,&#34;date&#34;:&#34;28 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-28&#34;,&#34;totalconfirmed&#34;:&#34;12039132&#34;,&#34;totaldeceased&#34;:&#34;161290&#34;,&#34;totalrecovered&#34;:&#34;11353680&#34;},{&#34;dailyconfirmed&#34;:&#34;56152&#34;,&#34;dailydeceased&#34;:&#34;266&#34;,&#34;dailyrecovered&#34;:&#34;36989&#34;,&#34;date&#34;:&#34;29 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-29&#34;,&#34;totalconfirmed&#34;:&#34;12095284&#34;,&#34;totaldeceased&#34;:&#34;161556&#34;,&#34;totalrecovered&#34;:&#34;11390669&#34;},{&#34;dailyconfirmed&#34;:&#34;53237&#34;,&#34;dailydeceased&#34;:&#34;355&#34;,&#34;dailyrecovered&#34;:&#34;41242&#34;,&#34;date&#34;:&#34;30 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-30&#34;,&#34;totalconfirmed&#34;:&#34;12148521&#34;,&#34;totaldeceased&#34;:&#34;161911&#34;,&#34;totalrecovered&#34;:&#34;11431911&#34;},{&#34;dailyconfirmed&#34;:&#34;72113&#34;,&#34;dailydeceased&#34;:&#34;458&#34;,&#34;dailyrecovered&#34;:&#34;40423&#34;,&#34;date&#34;:&#34;31 March 2021&#34;,&#34;dateymd&#34;:&#34;2021-03-31&#34;,&#34;totalconfirmed&#34;:&#34;12220634&#34;,&#34;totaldeceased&#34;:&#34;162369&#34;,&#34;totalrecovered&#34;:&#34;11472334&#34;},{&#34;dailyconfirmed&#34;:&#34;81398&#34;,&#34;dailydeceased&#34;:&#34;468&#34;,&#34;dailyrecovered&#34;:&#34;50384&#34;,&#34;date&#34;:&#34;1 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-01&#34;,&#34;totalconfirmed&#34;:&#34;12302032&#34;,&#34;totaldeceased&#34;:&#34;162837&#34;,&#34;totalrecovered&#34;:&#34;11522718&#34;},{&#34;dailyconfirmed&#34;:&#34;89023&#34;,&#34;dailydeceased&#34;:&#34;713&#34;,&#34;dailyrecovered&#34;:&#34;44179&#34;,&#34;date&#34;:&#34;2 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-02&#34;,&#34;totalconfirmed&#34;:&#34;12391055&#34;,&#34;totaldeceased&#34;:&#34;163550&#34;,&#34;totalrecovered&#34;:&#34;11566897&#34;},{&#34;dailyconfirmed&#34;:&#34;92994&#34;,&#34;dailydeceased&#34;:&#34;514&#34;,&#34;dailyrecovered&#34;:&#34;60059&#34;,&#34;date&#34;:&#34;3 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-03&#34;,&#34;totalconfirmed&#34;:&#34;12484049&#34;,&#34;totaldeceased&#34;:&#34;164064&#34;,&#34;totalrecovered&#34;:&#34;11626956&#34;},{&#34;dailyconfirmed&#34;:&#34;103794&#34;,&#34;dailydeceased&#34;:&#34;477&#34;,&#34;dailyrecovered&#34;:&#34;52840&#34;,&#34;date&#34;:&#34;4 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-04&#34;,&#34;totalconfirmed&#34;:&#34;12587843&#34;,&#34;totaldeceased&#34;:&#34;164541&#34;,&#34;totalrecovered&#34;:&#34;11679796&#34;},{&#34;dailyconfirmed&#34;:&#34;96563&#34;,&#34;dailydeceased&#34;:&#34;446&#34;,&#34;dailyrecovered&#34;:&#34;50100&#34;,&#34;date&#34;:&#34;5 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-05&#34;,&#34;totalconfirmed&#34;:&#34;12684406&#34;,&#34;totaldeceased&#34;:&#34;164987&#34;,&#34;totalrecovered&#34;:&#34;11729896&#34;},{&#34;dailyconfirmed&#34;:&#34;115312&#34;,&#34;dailydeceased&#34;:&#34;630&#34;,&#34;dailyrecovered&#34;:&#34;59714&#34;,&#34;date&#34;:&#34;6 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-06&#34;,&#34;totalconfirmed&#34;:&#34;12799718&#34;,&#34;totaldeceased&#34;:&#34;165617&#34;,&#34;totalrecovered&#34;:&#34;11789610&#34;},{&#34;dailyconfirmed&#34;:&#34;126276&#34;,&#34;dailydeceased&#34;:&#34;684&#34;,&#34;dailyrecovered&#34;:&#34;59137&#34;,&#34;date&#34;:&#34;7 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-07&#34;,&#34;totalconfirmed&#34;:&#34;12925994&#34;,&#34;totaldeceased&#34;:&#34;166301&#34;,&#34;totalrecovered&#34;:&#34;11848747&#34;},{&#34;dailyconfirmed&#34;:&#34;131878&#34;,&#34;dailydeceased&#34;:&#34;802&#34;,&#34;dailyrecovered&#34;:&#34;61829&#34;,&#34;date&#34;:&#34;8 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-08&#34;,&#34;totalconfirmed&#34;:&#34;13057872&#34;,&#34;totaldeceased&#34;:&#34;167103&#34;,&#34;totalrecovered&#34;:&#34;11910576&#34;},{&#34;dailyconfirmed&#34;:&#34;144945&#34;,&#34;dailydeceased&#34;:&#34;773&#34;,&#34;dailyrecovered&#34;:&#34;77263&#34;,&#34;date&#34;:&#34;9 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-09&#34;,&#34;totalconfirmed&#34;:&#34;13202817&#34;,&#34;totaldeceased&#34;:&#34;167876&#34;,&#34;totalrecovered&#34;:&#34;11987839&#34;},{&#34;dailyconfirmed&#34;:&#34;152565&#34;,&#34;dailydeceased&#34;:&#34;838&#34;,&#34;dailyrecovered&#34;:&#34;90328&#34;,&#34;date&#34;:&#34;10 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-10&#34;,&#34;totalconfirmed&#34;:&#34;13355382&#34;,&#34;totaldeceased&#34;:&#34;168714&#34;,&#34;totalrecovered&#34;:&#34;12078167&#34;},{&#34;dailyconfirmed&#34;:&#34;169914&#34;,&#34;dailydeceased&#34;:&#34;904&#34;,&#34;dailyrecovered&#34;:&#34;75380&#34;,&#34;date&#34;:&#34;11 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-11&#34;,&#34;totalconfirmed&#34;:&#34;13525296&#34;,&#34;totaldeceased&#34;:&#34;169618&#34;,&#34;totalrecovered&#34;:&#34;12153547&#34;},{&#34;dailyconfirmed&#34;:&#34;160838&#34;,&#34;dailydeceased&#34;:&#34;880&#34;,&#34;dailyrecovered&#34;:&#34;96746&#34;,&#34;date&#34;:&#34;12 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-12&#34;,&#34;totalconfirmed&#34;:&#34;13686134&#34;,&#34;totaldeceased&#34;:&#34;170498&#34;,&#34;totalrecovered&#34;:&#34;12250293&#34;},{&#34;dailyconfirmed&#34;:&#34;185297&#34;,&#34;dailydeceased&#34;:&#34;1026&#34;,&#34;dailyrecovered&#34;:&#34;82271&#34;,&#34;date&#34;:&#34;13 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-13&#34;,&#34;totalconfirmed&#34;:&#34;13871431&#34;,&#34;totaldeceased&#34;:&#34;171524&#34;,&#34;totalrecovered&#34;:&#34;12332564&#34;},{&#34;dailyconfirmed&#34;:&#34;199584&#34;,&#34;dailydeceased&#34;:&#34;1038&#34;,&#34;dailyrecovered&#34;:&#34;93425&#34;,&#34;date&#34;:&#34;14 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-14&#34;,&#34;totalconfirmed&#34;:&#34;14071015&#34;,&#34;totaldeceased&#34;:&#34;172562&#34;,&#34;totalrecovered&#34;:&#34;12425989&#34;},{&#34;dailyconfirmed&#34;:&#34;216828&#34;,&#34;dailydeceased&#34;:&#34;1184&#34;,&#34;dailyrecovered&#34;:&#34;117897&#34;,&#34;date&#34;:&#34;15 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-15&#34;,&#34;totalconfirmed&#34;:&#34;14287843&#34;,&#34;totaldeceased&#34;:&#34;173746&#34;,&#34;totalrecovered&#34;:&#34;12543886&#34;},{&#34;dailyconfirmed&#34;:&#34;234002&#34;,&#34;dailydeceased&#34;:&#34;1338&#34;,&#34;dailyrecovered&#34;:&#34;122886&#34;,&#34;date&#34;:&#34;16 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-16&#34;,&#34;totalconfirmed&#34;:&#34;14521845&#34;,&#34;totaldeceased&#34;:&#34;175084&#34;,&#34;totalrecovered&#34;:&#34;12666772&#34;},{&#34;dailyconfirmed&#34;:&#34;260895&#34;,&#34;dailydeceased&#34;:&#34;1498&#34;,&#34;dailyrecovered&#34;:&#34;138209&#34;,&#34;date&#34;:&#34;17 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-17&#34;,&#34;totalconfirmed&#34;:&#34;14782740&#34;,&#34;totaldeceased&#34;:&#34;176582&#34;,&#34;totalrecovered&#34;:&#34;12804981&#34;},{&#34;dailyconfirmed&#34;:&#34;275063&#34;,&#34;dailydeceased&#34;:&#34;1620&#34;,&#34;dailyrecovered&#34;:&#34;143839&#34;,&#34;date&#34;:&#34;18 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-18&#34;,&#34;totalconfirmed&#34;:&#34;15057803&#34;,&#34;totaldeceased&#34;:&#34;178202&#34;,&#34;totalrecovered&#34;:&#34;12948820&#34;},{&#34;dailyconfirmed&#34;:&#34;257003&#34;,&#34;dailydeceased&#34;:&#34;1757&#34;,&#34;dailyrecovered&#34;:&#34;154357&#34;,&#34;date&#34;:&#34;19 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-19&#34;,&#34;totalconfirmed&#34;:&#34;15314806&#34;,&#34;totaldeceased&#34;:&#34;179959&#34;,&#34;totalrecovered&#34;:&#34;13103177&#34;},{&#34;dailyconfirmed&#34;:&#34;294365&#34;,&#34;dailydeceased&#34;:&#34;2021&#34;,&#34;dailyrecovered&#34;:&#34;166656&#34;,&#34;date&#34;:&#34;20 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-20&#34;,&#34;totalconfirmed&#34;:&#34;15609171&#34;,&#34;totaldeceased&#34;:&#34;181980&#34;,&#34;totalrecovered&#34;:&#34;13269833&#34;},{&#34;dailyconfirmed&#34;:&#34;315752&#34;,&#34;dailydeceased&#34;:&#34;2101&#34;,&#34;dailyrecovered&#34;:&#34;179434&#34;,&#34;date&#34;:&#34;21 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-21&#34;,&#34;totalconfirmed&#34;:&#34;15924923&#34;,&#34;totaldeceased&#34;:&#34;184081&#34;,&#34;totalrecovered&#34;:&#34;13449267&#34;},{&#34;dailyconfirmed&#34;:&#34;332531&#34;,&#34;dailydeceased&#34;:&#34;2257&#34;,&#34;dailyrecovered&#34;:&#34;192317&#34;,&#34;date&#34;:&#34;22 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-22&#34;,&#34;totalconfirmed&#34;:&#34;16257454&#34;,&#34;totaldeceased&#34;:&#34;186338&#34;,&#34;totalrecovered&#34;:&#34;13641584&#34;},{&#34;dailyconfirmed&#34;:&#34;345296&#34;,&#34;dailydeceased&#34;:&#34;2620&#34;,&#34;dailyrecovered&#34;:&#34;220545&#34;,&#34;date&#34;:&#34;23 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-23&#34;,&#34;totalconfirmed&#34;:&#34;16602750&#34;,&#34;totaldeceased&#34;:&#34;188958&#34;,&#34;totalrecovered&#34;:&#34;13862129&#34;},{&#34;dailyconfirmed&#34;:&#34;348996&#34;,&#34;dailydeceased&#34;:&#34;2761&#34;,&#34;dailyrecovered&#34;:&#34;215809&#34;,&#34;date&#34;:&#34;24 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-24&#34;,&#34;totalconfirmed&#34;:&#34;16951746&#34;,&#34;totaldeceased&#34;:&#34;191719&#34;,&#34;totalrecovered&#34;:&#34;14077938&#34;},{&#34;dailyconfirmed&#34;:&#34;354658&#34;,&#34;dailydeceased&#34;:&#34;2808&#34;,&#34;dailyrecovered&#34;:&#34;218626&#34;,&#34;date&#34;:&#34;25 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-25&#34;,&#34;totalconfirmed&#34;:&#34;17306404&#34;,&#34;totaldeceased&#34;:&#34;194527&#34;,&#34;totalrecovered&#34;:&#34;14296564&#34;},{&#34;dailyconfirmed&#34;:&#34;319471&#34;,&#34;dailydeceased&#34;:&#34;2762&#34;,&#34;dailyrecovered&#34;:&#34;249009&#34;,&#34;date&#34;:&#34;26 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-26&#34;,&#34;totalconfirmed&#34;:&#34;17625875&#34;,&#34;totaldeceased&#34;:&#34;197289&#34;,&#34;totalrecovered&#34;:&#34;14545573&#34;},{&#34;dailyconfirmed&#34;:&#34;362913&#34;,&#34;dailydeceased&#34;:&#34;3286&#34;,&#34;dailyrecovered&#34;:&#34;262349&#34;,&#34;date&#34;:&#34;27 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-27&#34;,&#34;totalconfirmed&#34;:&#34;17988788&#34;,&#34;totaldeceased&#34;:&#34;200575&#34;,&#34;totalrecovered&#34;:&#34;14807922&#34;},{&#34;dailyconfirmed&#34;:&#34;379404&#34;,&#34;dailydeceased&#34;:&#34;3646&#34;,&#34;dailyrecovered&#34;:&#34;274171&#34;,&#34;date&#34;:&#34;28 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-28&#34;,&#34;totalconfirmed&#34;:&#34;18368192&#34;,&#34;totaldeceased&#34;:&#34;204221&#34;,&#34;totalrecovered&#34;:&#34;15082093&#34;},{&#34;dailyconfirmed&#34;:&#34;386773&#34;,&#34;dailydeceased&#34;:&#34;3502&#34;,&#34;dailyrecovered&#34;:&#34;291727&#34;,&#34;date&#34;:&#34;29 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-29&#34;,&#34;totalconfirmed&#34;:&#34;18754965&#34;,&#34;totaldeceased&#34;:&#34;207723&#34;,&#34;totalrecovered&#34;:&#34;15373820&#34;},{&#34;dailyconfirmed&#34;:&#34;402014&#34;,&#34;dailydeceased&#34;:&#34;3525&#34;,&#34;dailyrecovered&#34;:&#34;299198&#34;,&#34;date&#34;:&#34;30 April 2021&#34;,&#34;dateymd&#34;:&#34;2021-04-30&#34;,&#34;totalconfirmed&#34;:&#34;19156979&#34;,&#34;totaldeceased&#34;:&#34;211248&#34;,&#34;totalrecovered&#34;:&#34;15673018&#34;},{&#34;dailyconfirmed&#34;:&#34;392576&#34;,&#34;dailydeceased&#34;:&#34;3685&#34;,&#34;dailyrecovered&#34;:&#34;308688&#34;,&#34;date&#34;:&#34;1 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-01&#34;,&#34;totalconfirmed&#34;:&#34;19549555&#34;,&#34;totaldeceased&#34;:&#34;214933&#34;,&#34;totalrecovered&#34;:&#34;15981706&#34;},{&#34;dailyconfirmed&#34;:&#34;370090&#34;,&#34;dailydeceased&#34;:&#34;3423&#34;,&#34;dailyrecovered&#34;:&#34;300004&#34;,&#34;date&#34;:&#34;2 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-02&#34;,&#34;totalconfirmed&#34;:&#34;19919645&#34;,&#34;totaldeceased&#34;:&#34;218356&#34;,&#34;totalrecovered&#34;:&#34;16281710&#34;},{&#34;dailyconfirmed&#34;:&#34;355769&#34;,&#34;dailydeceased&#34;:&#34;3439&#34;,&#34;dailyrecovered&#34;:&#34;318910&#34;,&#34;date&#34;:&#34;3 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-03&#34;,&#34;totalconfirmed&#34;:&#34;20275414&#34;,&#34;totaldeceased&#34;:&#34;221795&#34;,&#34;totalrecovered&#34;:&#34;16600620&#34;},{&#34;dailyconfirmed&#34;:&#34;382847&#34;,&#34;dailydeceased&#34;:&#34;3786&#34;,&#34;dailyrecovered&#34;:&#34;337699&#34;,&#34;date&#34;:&#34;4 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-04&#34;,&#34;totalconfirmed&#34;:&#34;20658261&#34;,&#34;totaldeceased&#34;:&#34;225581&#34;,&#34;totalrecovered&#34;:&#34;16938319&#34;},{&#34;dailyconfirmed&#34;:&#34;412624&#34;,&#34;dailydeceased&#34;:&#34;3979&#34;,&#34;dailyrecovered&#34;:&#34;330718&#34;,&#34;date&#34;:&#34;5 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-05&#34;,&#34;totalconfirmed&#34;:&#34;21070885&#34;,&#34;totaldeceased&#34;:&#34;229560&#34;,&#34;totalrecovered&#34;:&#34;17269037&#34;},{&#34;dailyconfirmed&#34;:&#34;414280&#34;,&#34;dailydeceased&#34;:&#34;3923&#34;,&#34;dailyrecovered&#34;:&#34;328349&#34;,&#34;date&#34;:&#34;6 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-06&#34;,&#34;totalconfirmed&#34;:&#34;21485165&#34;,&#34;totaldeceased&#34;:&#34;233483&#34;,&#34;totalrecovered&#34;:&#34;17597386&#34;},{&#34;dailyconfirmed&#34;:&#34;406901&#34;,&#34;dailydeceased&#34;:&#34;4233&#34;,&#34;dailyrecovered&#34;:&#34;327675&#34;,&#34;date&#34;:&#34;7 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-07&#34;,&#34;totalconfirmed&#34;:&#34;21892066&#34;,&#34;totaldeceased&#34;:&#34;237716&#34;,&#34;totalrecovered&#34;:&#34;17925061&#34;},{&#34;dailyconfirmed&#34;:&#34;403808&#34;,&#34;dailydeceased&#34;:&#34;4092&#34;,&#34;dailyrecovered&#34;:&#34;386395&#34;,&#34;date&#34;:&#34;8 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-08&#34;,&#34;totalconfirmed&#34;:&#34;22295874&#34;,&#34;totaldeceased&#34;:&#34;241808&#34;,&#34;totalrecovered&#34;:&#34;18311456&#34;},{&#34;dailyconfirmed&#34;:&#34;366455&#34;,&#34;dailydeceased&#34;:&#34;3749&#34;,&#34;dailyrecovered&#34;:&#34;353777&#34;,&#34;date&#34;:&#34;9 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-09&#34;,&#34;totalconfirmed&#34;:&#34;22662329&#34;,&#34;totaldeceased&#34;:&#34;245557&#34;,&#34;totalrecovered&#34;:&#34;18665233&#34;},{&#34;dailyconfirmed&#34;:&#34;329491&#34;,&#34;dailydeceased&#34;:&#34;3879&#34;,&#34;dailyrecovered&#34;:&#34;355930&#34;,&#34;date&#34;:&#34;10 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-10&#34;,&#34;totalconfirmed&#34;:&#34;22991820&#34;,&#34;totaldeceased&#34;:&#34;249436&#34;,&#34;totalrecovered&#34;:&#34;19021163&#34;},{&#34;dailyconfirmed&#34;:&#34;348555&#34;,&#34;dailydeceased&#34;:&#34;4198&#34;,&#34;dailyrecovered&#34;:&#34;355398&#34;,&#34;date&#34;:&#34;11 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-11&#34;,&#34;totalconfirmed&#34;:&#34;23340375&#34;,&#34;totaldeceased&#34;:&#34;253634&#34;,&#34;totalrecovered&#34;:&#34;19376561&#34;},{&#34;dailyconfirmed&#34;:&#34;362632&#34;,&#34;dailydeceased&#34;:&#34;4128&#34;,&#34;dailyrecovered&#34;:&#34;352005&#34;,&#34;date&#34;:&#34;12 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-12&#34;,&#34;totalconfirmed&#34;:&#34;23703007&#34;,&#34;totaldeceased&#34;:&#34;257762&#34;,&#34;totalrecovered&#34;:&#34;19728566&#34;},{&#34;dailyconfirmed&#34;:&#34;343005&#34;,&#34;dailydeceased&#34;:&#34;4000&#34;,&#34;dailyrecovered&#34;:&#34;344676&#34;,&#34;date&#34;:&#34;13 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-13&#34;,&#34;totalconfirmed&#34;:&#34;24046012&#34;,&#34;totaldeceased&#34;:&#34;261762&#34;,&#34;totalrecovered&#34;:&#34;20073242&#34;},{&#34;dailyconfirmed&#34;:&#34;326256&#34;,&#34;dailydeceased&#34;:&#34;3889&#34;,&#34;dailyrecovered&#34;:&#34;353200&#34;,&#34;date&#34;:&#34;14 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-14&#34;,&#34;totalconfirmed&#34;:&#34;24372268&#34;,&#34;totaldeceased&#34;:&#34;265651&#34;,&#34;totalrecovered&#34;:&#34;20426442&#34;},{&#34;dailyconfirmed&#34;:&#34;310757&#34;,&#34;dailydeceased&#34;:&#34;4077&#34;,&#34;dailyrecovered&#34;:&#34;362547&#34;,&#34;date&#34;:&#34;15 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-15&#34;,&#34;totalconfirmed&#34;:&#34;24683025&#34;,&#34;totaldeceased&#34;:&#34;269728&#34;,&#34;totalrecovered&#34;:&#34;20788989&#34;},{&#34;dailyconfirmed&#34;:&#34;281837&#34;,&#34;dailydeceased&#34;:&#34;4098&#34;,&#34;dailyrecovered&#34;:&#34;378526&#34;,&#34;date&#34;:&#34;16 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-16&#34;,&#34;totalconfirmed&#34;:&#34;24964862&#34;,&#34;totaldeceased&#34;:&#34;273826&#34;,&#34;totalrecovered&#34;:&#34;21167515&#34;},{&#34;dailyconfirmed&#34;:&#34;263021&#34;,&#34;dailydeceased&#34;:&#34;4334&#34;,&#34;dailyrecovered&#34;:&#34;422391&#34;,&#34;date&#34;:&#34;17 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-17&#34;,&#34;totalconfirmed&#34;:&#34;25227883&#34;,&#34;totaldeceased&#34;:&#34;278160&#34;,&#34;totalrecovered&#34;:&#34;21589906&#34;},{&#34;dailyconfirmed&#34;:&#34;267246&#34;,&#34;dailydeceased&#34;:&#34;4529&#34;,&#34;dailyrecovered&#34;:&#34;389758&#34;,&#34;date&#34;:&#34;18 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-18&#34;,&#34;totalconfirmed&#34;:&#34;25495129&#34;,&#34;totaldeceased&#34;:&#34;282689&#34;,&#34;totalrecovered&#34;:&#34;21979664&#34;},{&#34;dailyconfirmed&#34;:&#34;276187&#34;,&#34;dailydeceased&#34;:&#34;3877&#34;,&#34;dailyrecovered&#34;:&#34;369005&#34;,&#34;date&#34;:&#34;19 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-19&#34;,&#34;totalconfirmed&#34;:&#34;25771316&#34;,&#34;totaldeceased&#34;:&#34;286566&#34;,&#34;totalrecovered&#34;:&#34;22348669&#34;},{&#34;dailyconfirmed&#34;:&#34;259242&#34;,&#34;dailydeceased&#34;:&#34;4209&#34;,&#34;dailyrecovered&#34;:&#34;357173&#34;,&#34;date&#34;:&#34;20 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-20&#34;,&#34;totalconfirmed&#34;:&#34;26030558&#34;,&#34;totaldeceased&#34;:&#34;290775&#34;,&#34;totalrecovered&#34;:&#34;22705842&#34;},{&#34;dailyconfirmed&#34;:&#34;257299&#34;,&#34;dailydeceased&#34;:&#34;4194&#34;,&#34;dailyrecovered&#34;:&#34;357625&#34;,&#34;date&#34;:&#34;21 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-21&#34;,&#34;totalconfirmed&#34;:&#34;26287857&#34;,&#34;totaldeceased&#34;:&#34;294969&#34;,&#34;totalrecovered&#34;:&#34;23063467&#34;},{&#34;dailyconfirmed&#34;:&#34;240897&#34;,&#34;dailydeceased&#34;:&#34;3739&#34;,&#34;dailyrecovered&#34;:&#34;355138&#34;,&#34;date&#34;:&#34;22 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-22&#34;,&#34;totalconfirmed&#34;:&#34;26528754&#34;,&#34;totaldeceased&#34;:&#34;298708&#34;,&#34;totalrecovered&#34;:&#34;23418605&#34;},{&#34;dailyconfirmed&#34;:&#34;222834&#34;,&#34;dailydeceased&#34;:&#34;4454&#34;,&#34;dailyrecovered&#34;:&#34;302253&#34;,&#34;date&#34;:&#34;23 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-23&#34;,&#34;totalconfirmed&#34;:&#34;26751588&#34;,&#34;totaldeceased&#34;:&#34;303162&#34;,&#34;totalrecovered&#34;:&#34;23720858&#34;},{&#34;dailyconfirmed&#34;:&#34;195857&#34;,&#34;dailydeceased&#34;:&#34;3509&#34;,&#34;dailyrecovered&#34;:&#34;326737&#34;,&#34;date&#34;:&#34;24 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-24&#34;,&#34;totalconfirmed&#34;:&#34;26947445&#34;,&#34;totaldeceased&#34;:&#34;306671&#34;,&#34;totalrecovered&#34;:&#34;24047595&#34;},{&#34;dailyconfirmed&#34;:&#34;208992&#34;,&#34;dailydeceased&#34;:&#34;4160&#34;,&#34;dailyrecovered&#34;:&#34;295264&#34;,&#34;date&#34;:&#34;25 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-25&#34;,&#34;totalconfirmed&#34;:&#34;27156437&#34;,&#34;totaldeceased&#34;:&#34;310831&#34;,&#34;totalrecovered&#34;:&#34;24342859&#34;},{&#34;dailyconfirmed&#34;:&#34;211510&#34;,&#34;dailydeceased&#34;:&#34;3843&#34;,&#34;dailyrecovered&#34;:&#34;283054&#34;,&#34;date&#34;:&#34;26 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-26&#34;,&#34;totalconfirmed&#34;:&#34;27367947&#34;,&#34;totaldeceased&#34;:&#34;314674&#34;,&#34;totalrecovered&#34;:&#34;24625913&#34;},{&#34;dailyconfirmed&#34;:&#34;186075&#34;,&#34;dailydeceased&#34;:&#34;3659&#34;,&#34;dailyrecovered&#34;:&#34;271002&#34;,&#34;date&#34;:&#34;27 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-27&#34;,&#34;totalconfirmed&#34;:&#34;27554022&#34;,&#34;totaldeceased&#34;:&#34;318333&#34;,&#34;totalrecovered&#34;:&#34;24896915&#34;},{&#34;dailyconfirmed&#34;:&#34;174083&#34;,&#34;dailydeceased&#34;:&#34;3611&#34;,&#34;dailyrecovered&#34;:&#34;285332&#34;,&#34;date&#34;:&#34;28 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-28&#34;,&#34;totalconfirmed&#34;:&#34;27728105&#34;,&#34;totaldeceased&#34;:&#34;321944&#34;,&#34;totalrecovered&#34;:&#34;25182247&#34;},{&#34;dailyconfirmed&#34;:&#34;165282&#34;,&#34;dailydeceased&#34;:&#34;3463&#34;,&#34;dailyrecovered&#34;:&#34;264483&#34;,&#34;date&#34;:&#34;29 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-29&#34;,&#34;totalconfirmed&#34;:&#34;27893387&#34;,&#34;totaldeceased&#34;:&#34;325407&#34;,&#34;totalrecovered&#34;:&#34;25446730&#34;},{&#34;dailyconfirmed&#34;:&#34;153396&#34;,&#34;dailydeceased&#34;:&#34;3130&#34;,&#34;dailyrecovered&#34;:&#34;237664&#34;,&#34;date&#34;:&#34;30 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-30&#34;,&#34;totalconfirmed&#34;:&#34;28046783&#34;,&#34;totaldeceased&#34;:&#34;328537&#34;,&#34;totalrecovered&#34;:&#34;25684394&#34;},{&#34;dailyconfirmed&#34;:&#34;126883&#34;,&#34;dailydeceased&#34;:&#34;2783&#34;,&#34;dailyrecovered&#34;:&#34;255125&#34;,&#34;date&#34;:&#34;31 May 2021&#34;,&#34;dateymd&#34;:&#34;2021-05-31&#34;,&#34;totalconfirmed&#34;:&#34;28173666&#34;,&#34;totaldeceased&#34;:&#34;331320&#34;,&#34;totalrecovered&#34;:&#34;25939519&#34;},{&#34;dailyconfirmed&#34;:&#34;133152&#34;,&#34;dailydeceased&#34;:&#34;3205&#34;,&#34;dailyrecovered&#34;:&#34;231397&#34;,&#34;date&#34;:&#34;1 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-01&#34;,&#34;totalconfirmed&#34;:&#34;28306818&#34;,&#34;totaldeceased&#34;:&#34;334525&#34;,&#34;totalrecovered&#34;:&#34;26170916&#34;},{&#34;dailyconfirmed&#34;:&#34;134044&#34;,&#34;dailydeceased&#34;:&#34;2898&#34;,&#34;dailyrecovered&#34;:&#34;211890&#34;,&#34;date&#34;:&#34;2 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-02&#34;,&#34;totalconfirmed&#34;:&#34;28440862&#34;,&#34;totaldeceased&#34;:&#34;337423&#34;,&#34;totalrecovered&#34;:&#34;26382806&#34;},{&#34;dailyconfirmed&#34;:&#34;132424&#34;,&#34;dailydeceased&#34;:&#34;2717&#34;,&#34;dailyrecovered&#34;:&#34;206722&#34;,&#34;date&#34;:&#34;3 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-03&#34;,&#34;totalconfirmed&#34;:&#34;28573286&#34;,&#34;totaldeceased&#34;:&#34;340140&#34;,&#34;totalrecovered&#34;:&#34;26589528&#34;},{&#34;dailyconfirmed&#34;:&#34;120454&#34;,&#34;dailydeceased&#34;:&#34;3372&#34;,&#34;dailyrecovered&#34;:&#34;197763&#34;,&#34;date&#34;:&#34;4 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-04&#34;,&#34;totalconfirmed&#34;:&#34;28693740&#34;,&#34;totaldeceased&#34;:&#34;343512&#34;,&#34;totalrecovered&#34;:&#34;26787291&#34;},{&#34;dailyconfirmed&#34;:&#34;114488&#34;,&#34;dailydeceased&#34;:&#34;2682&#34;,&#34;dailyrecovered&#34;:&#34;189374&#34;,&#34;date&#34;:&#34;5 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-05&#34;,&#34;totalconfirmed&#34;:&#34;28808228&#34;,&#34;totaldeceased&#34;:&#34;346194&#34;,&#34;totalrecovered&#34;:&#34;26976665&#34;},{&#34;dailyconfirmed&#34;:&#34;101209&#34;,&#34;dailydeceased&#34;:&#34;2444&#34;,&#34;dailyrecovered&#34;:&#34;174156&#34;,&#34;date&#34;:&#34;6 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-06&#34;,&#34;totalconfirmed&#34;:&#34;28909437&#34;,&#34;totaldeceased&#34;:&#34;348638&#34;,&#34;totalrecovered&#34;:&#34;27150821&#34;},{&#34;dailyconfirmed&#34;:&#34;85804&#34;,&#34;dailydeceased&#34;:&#34;2107&#34;,&#34;dailyrecovered&#34;:&#34;182866&#34;,&#34;date&#34;:&#34;7 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-07&#34;,&#34;totalconfirmed&#34;:&#34;28995241&#34;,&#34;totaldeceased&#34;:&#34;350745&#34;,&#34;totalrecovered&#34;:&#34;27333687&#34;},{&#34;dailyconfirmed&#34;:&#34;92787&#34;,&#34;dailydeceased&#34;:&#34;2222&#34;,&#34;dailyrecovered&#34;:&#34;162356&#34;,&#34;date&#34;:&#34;8 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-08&#34;,&#34;totalconfirmed&#34;:&#34;29088028&#34;,&#34;totaldeceased&#34;:&#34;352967&#34;,&#34;totalrecovered&#34;:&#34;27496043&#34;},{&#34;dailyconfirmed&#34;:&#34;93883&#34;,&#34;dailydeceased&#34;:&#34;6139&#34;,&#34;dailyrecovered&#34;:&#34;149022&#34;,&#34;date&#34;:&#34;9 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-09&#34;,&#34;totalconfirmed&#34;:&#34;29181911&#34;,&#34;totaldeceased&#34;:&#34;359106&#34;,&#34;totalrecovered&#34;:&#34;27645065&#34;},{&#34;dailyconfirmed&#34;:&#34;91849&#34;,&#34;dailydeceased&#34;:&#34;3414&#34;,&#34;dailyrecovered&#34;:&#34;135329&#34;,&#34;date&#34;:&#34;10 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-10&#34;,&#34;totalconfirmed&#34;:&#34;29273760&#34;,&#34;totaldeceased&#34;:&#34;362520&#34;,&#34;totalrecovered&#34;:&#34;27780394&#34;},{&#34;dailyconfirmed&#34;:&#34;84574&#34;,&#34;dailydeceased&#34;:&#34;3996&#34;,&#34;dailyrecovered&#34;:&#34;122685&#34;,&#34;date&#34;:&#34;11 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-11&#34;,&#34;totalconfirmed&#34;:&#34;29358334&#34;,&#34;totaldeceased&#34;:&#34;366516&#34;,&#34;totalrecovered&#34;:&#34;27903079&#34;},{&#34;dailyconfirmed&#34;:&#34;80525&#34;,&#34;dailydeceased&#34;:&#34;3300&#34;,&#34;dailyrecovered&#34;:&#34;132664&#34;,&#34;date&#34;:&#34;12 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-12&#34;,&#34;totalconfirmed&#34;:&#34;29438859&#34;,&#34;totaldeceased&#34;:&#34;369816&#34;,&#34;totalrecovered&#34;:&#34;28035743&#34;},{&#34;dailyconfirmed&#34;:&#34;71001&#34;,&#34;dailydeceased&#34;:&#34;3922&#34;,&#34;dailyrecovered&#34;:&#34;119574&#34;,&#34;date&#34;:&#34;13 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-13&#34;,&#34;totalconfirmed&#34;:&#34;29509860&#34;,&#34;totaldeceased&#34;:&#34;373738&#34;,&#34;totalrecovered&#34;:&#34;28155317&#34;},{&#34;dailyconfirmed&#34;:&#34;60008&#34;,&#34;dailydeceased&#34;:&#34;2733&#34;,&#34;dailyrecovered&#34;:&#34;117376&#34;,&#34;date&#34;:&#34;14 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-14&#34;,&#34;totalconfirmed&#34;:&#34;29569868&#34;,&#34;totaldeceased&#34;:&#34;376471&#34;,&#34;totalrecovered&#34;:&#34;28272693&#34;},{&#34;dailyconfirmed&#34;:&#34;62215&#34;,&#34;dailydeceased&#34;:&#34;2540&#34;,&#34;dailyrecovered&#34;:&#34;107776&#34;,&#34;date&#34;:&#34;15 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-15&#34;,&#34;totalconfirmed&#34;:&#34;29632083&#34;,&#34;totaldeceased&#34;:&#34;379011&#34;,&#34;totalrecovered&#34;:&#34;28380469&#34;},{&#34;dailyconfirmed&#34;:&#34;67289&#34;,&#34;dailydeceased&#34;:&#34;2329&#34;,&#34;dailyrecovered&#34;:&#34;103900&#34;,&#34;date&#34;:&#34;16 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-16&#34;,&#34;totalconfirmed&#34;:&#34;29699372&#34;,&#34;totaldeceased&#34;:&#34;381340&#34;,&#34;totalrecovered&#34;:&#34;28484369&#34;},{&#34;dailyconfirmed&#34;:&#34;62436&#34;,&#34;dailydeceased&#34;:&#34;1591&#34;,&#34;dailyrecovered&#34;:&#34;88500&#34;,&#34;date&#34;:&#34;17 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-17&#34;,&#34;totalconfirmed&#34;:&#34;29761808&#34;,&#34;totaldeceased&#34;:&#34;382931&#34;,&#34;totalrecovered&#34;:&#34;28572869&#34;},{&#34;dailyconfirmed&#34;:&#34;60765&#34;,&#34;dailydeceased&#34;:&#34;1645&#34;,&#34;dailyrecovered&#34;:&#34;97854&#34;,&#34;date&#34;:&#34;18 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-18&#34;,&#34;totalconfirmed&#34;:&#34;29822573&#34;,&#34;totaldeceased&#34;:&#34;384576&#34;,&#34;totalrecovered&#34;:&#34;28670723&#34;},{&#34;dailyconfirmed&#34;:&#34;58615&#34;,&#34;dailydeceased&#34;:&#34;1574&#34;,&#34;dailyrecovered&#34;:&#34;87608&#34;,&#34;date&#34;:&#34;19 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-19&#34;,&#34;totalconfirmed&#34;:&#34;29881188&#34;,&#34;totaldeceased&#34;:&#34;386150&#34;,&#34;totalrecovered&#34;:&#34;28758331&#34;},{&#34;dailyconfirmed&#34;:&#34;52978&#34;,&#34;dailydeceased&#34;:&#34;1424&#34;,&#34;dailyrecovered&#34;:&#34;78189&#34;,&#34;date&#34;:&#34;20 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-20&#34;,&#34;totalconfirmed&#34;:&#34;29934166&#34;,&#34;totaldeceased&#34;:&#34;387574&#34;,&#34;totalrecovered&#34;:&#34;28836520&#34;},{&#34;dailyconfirmed&#34;:&#34;42683&#34;,&#34;dailydeceased&#34;:&#34;1167&#34;,&#34;dailyrecovered&#34;:&#34;82031&#34;,&#34;date&#34;:&#34;21 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-21&#34;,&#34;totalconfirmed&#34;:&#34;29976849&#34;,&#34;totaldeceased&#34;:&#34;388741&#34;,&#34;totalrecovered&#34;:&#34;28918551&#34;},{&#34;dailyconfirmed&#34;:&#34;50817&#34;,&#34;dailydeceased&#34;:&#34;1359&#34;,&#34;dailyrecovered&#34;:&#34;68697&#34;,&#34;date&#34;:&#34;22 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-22&#34;,&#34;totalconfirmed&#34;:&#34;30027666&#34;,&#34;totaldeceased&#34;:&#34;390100&#34;,&#34;totalrecovered&#34;:&#34;28987248&#34;},{&#34;dailyconfirmed&#34;:&#34;54309&#34;,&#34;dailydeceased&#34;:&#34;1323&#34;,&#34;dailyrecovered&#34;:&#34;69187&#34;,&#34;date&#34;:&#34;23 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-23&#34;,&#34;totalconfirmed&#34;:&#34;30081975&#34;,&#34;totaldeceased&#34;:&#34;391423&#34;,&#34;totalrecovered&#34;:&#34;29056435&#34;},{&#34;dailyconfirmed&#34;:&#34;51659&#34;,&#34;dailydeceased&#34;:&#34;1328&#34;,&#34;dailyrecovered&#34;:&#34;64369&#34;,&#34;date&#34;:&#34;24 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-24&#34;,&#34;totalconfirmed&#34;:&#34;30133634&#34;,&#34;totaldeceased&#34;:&#34;392751&#34;,&#34;totalrecovered&#34;:&#34;29120804&#34;},{&#34;dailyconfirmed&#34;:&#34;48768&#34;,&#34;dailydeceased&#34;:&#34;1183&#34;,&#34;dailyrecovered&#34;:&#34;64819&#34;,&#34;date&#34;:&#34;25 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-25&#34;,&#34;totalconfirmed&#34;:&#34;30182402&#34;,&#34;totaldeceased&#34;:&#34;393934&#34;,&#34;totalrecovered&#34;:&#34;29185623&#34;},{&#34;dailyconfirmed&#34;:&#34;49844&#34;,&#34;dailydeceased&#34;:&#34;1258&#34;,&#34;dailyrecovered&#34;:&#34;57866&#34;,&#34;date&#34;:&#34;26 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-26&#34;,&#34;totalconfirmed&#34;:&#34;30232246&#34;,&#34;totaldeceased&#34;:&#34;395192&#34;,&#34;totalrecovered&#34;:&#34;29243489&#34;},{&#34;dailyconfirmed&#34;:&#34;46523&#34;,&#34;dailydeceased&#34;:&#34;978&#34;,&#34;dailyrecovered&#34;:&#34;58563&#34;,&#34;date&#34;:&#34;27 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-27&#34;,&#34;totalconfirmed&#34;:&#34;30278769&#34;,&#34;totaldeceased&#34;:&#34;396170&#34;,&#34;totalrecovered&#34;:&#34;29302052&#34;},{&#34;dailyconfirmed&#34;:&#34;37070&#34;,&#34;dailydeceased&#34;:&#34;907&#34;,&#34;dailyrecovered&#34;:&#34;57016&#34;,&#34;date&#34;:&#34;28 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-28&#34;,&#34;totalconfirmed&#34;:&#34;30315839&#34;,&#34;totaldeceased&#34;:&#34;397077&#34;,&#34;totalrecovered&#34;:&#34;29359068&#34;},{&#34;dailyconfirmed&#34;:&#34;46104&#34;,&#34;dailydeceased&#34;:&#34;819&#34;,&#34;dailyrecovered&#34;:&#34;60789&#34;,&#34;date&#34;:&#34;29 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-29&#34;,&#34;totalconfirmed&#34;:&#34;30361943&#34;,&#34;totaldeceased&#34;:&#34;397896&#34;,&#34;totalrecovered&#34;:&#34;29419857&#34;},{&#34;dailyconfirmed&#34;:&#34;48606&#34;,&#34;dailydeceased&#34;:&#34;1002&#34;,&#34;dailyrecovered&#34;:&#34;61813&#34;,&#34;date&#34;:&#34;30 June 2021&#34;,&#34;dateymd&#34;:&#34;2021-06-30&#34;,&#34;totalconfirmed&#34;:&#34;30410549&#34;,&#34;totaldeceased&#34;:&#34;398898&#34;,&#34;totalrecovered&#34;:&#34;29481670&#34;},{&#34;dailyconfirmed&#34;:&#34;46781&#34;,&#34;dailydeceased&#34;:&#34;857&#34;,&#34;dailyrecovered&#34;:&#34;59054&#34;,&#34;date&#34;:&#34;1 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-01&#34;,&#34;totalconfirmed&#34;:&#34;30457330&#34;,&#34;totaldeceased&#34;:&#34;399755&#34;,&#34;totalrecovered&#34;:&#34;29540724&#34;},{&#34;dailyconfirmed&#34;:&#34;44187&#34;,&#34;dailydeceased&#34;:&#34;737&#34;,&#34;dailyrecovered&#34;:&#34;57497&#34;,&#34;date&#34;:&#34;2 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-02&#34;,&#34;totalconfirmed&#34;:&#34;30501517&#34;,&#34;totaldeceased&#34;:&#34;400492&#34;,&#34;totalrecovered&#34;:&#34;29598221&#34;},{&#34;dailyconfirmed&#34;:&#34;43027&#34;,&#34;dailydeceased&#34;:&#34;950&#34;,&#34;dailyrecovered&#34;:&#34;52270&#34;,&#34;date&#34;:&#34;3 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-03&#34;,&#34;totalconfirmed&#34;:&#34;30544544&#34;,&#34;totaldeceased&#34;:&#34;401442&#34;,&#34;totalrecovered&#34;:&#34;29650491&#34;},{&#34;dailyconfirmed&#34;:&#34;40150&#34;,&#34;dailydeceased&#34;:&#34;725&#34;,&#34;dailyrecovered&#34;:&#34;42342&#34;,&#34;date&#34;:&#34;4 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-04&#34;,&#34;totalconfirmed&#34;:&#34;30584694&#34;,&#34;totaldeceased&#34;:&#34;402167&#34;,&#34;totalrecovered&#34;:&#34;29692833&#34;},{&#34;dailyconfirmed&#34;:&#34;34026&#34;,&#34;dailydeceased&#34;:&#34;552&#34;,&#34;dailyrecovered&#34;:&#34;51933&#34;,&#34;date&#34;:&#34;5 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-05&#34;,&#34;totalconfirmed&#34;:&#34;30618720&#34;,&#34;totaldeceased&#34;:&#34;402719&#34;,&#34;totalrecovered&#34;:&#34;29744766&#34;},{&#34;dailyconfirmed&#34;:&#34;43964&#34;,&#34;dailydeceased&#34;:&#34;930&#34;,&#34;dailyrecovered&#34;:&#34;47054&#34;,&#34;date&#34;:&#34;6 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-06&#34;,&#34;totalconfirmed&#34;:&#34;30662684&#34;,&#34;totaldeceased&#34;:&#34;403649&#34;,&#34;totalrecovered&#34;:&#34;29791820&#34;},{&#34;dailyconfirmed&#34;:&#34;45701&#34;,&#34;dailydeceased&#34;:&#34;819&#34;,&#34;dailyrecovered&#34;:&#34;44529&#34;,&#34;date&#34;:&#34;7 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-07&#34;,&#34;totalconfirmed&#34;:&#34;30708385&#34;,&#34;totaldeceased&#34;:&#34;404468&#34;,&#34;totalrecovered&#34;:&#34;29836349&#34;},{&#34;dailyconfirmed&#34;:&#34;43504&#34;,&#34;dailydeceased&#34;:&#34;908&#34;,&#34;dailyrecovered&#34;:&#34;44204&#34;,&#34;date&#34;:&#34;8 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-08&#34;,&#34;totalconfirmed&#34;:&#34;30751889&#34;,&#34;totaldeceased&#34;:&#34;405376&#34;,&#34;totalrecovered&#34;:&#34;29880553&#34;},{&#34;dailyconfirmed&#34;:&#34;42660&#34;,&#34;dailydeceased&#34;:&#34;1207&#34;,&#34;dailyrecovered&#34;:&#34;45291&#34;,&#34;date&#34;:&#34;9 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-09&#34;,&#34;totalconfirmed&#34;:&#34;30794549&#34;,&#34;totaldeceased&#34;:&#34;406583&#34;,&#34;totalrecovered&#34;:&#34;29925844&#34;},{&#34;dailyconfirmed&#34;:&#34;41494&#34;,&#34;dailydeceased&#34;:&#34;898&#34;,&#34;dailyrecovered&#34;:&#34;41511&#34;,&#34;date&#34;:&#34;10 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-10&#34;,&#34;totalconfirmed&#34;:&#34;30836043&#34;,&#34;totaldeceased&#34;:&#34;407481&#34;,&#34;totalrecovered&#34;:&#34;29967355&#34;},{&#34;dailyconfirmed&#34;:&#34;37654&#34;,&#34;dailydeceased&#34;:&#34;720&#34;,&#34;dailyrecovered&#34;:&#34;39688&#34;,&#34;date&#34;:&#34;11 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-11&#34;,&#34;totalconfirmed&#34;:&#34;30873697&#34;,&#34;totaldeceased&#34;:&#34;408201&#34;,&#34;totalrecovered&#34;:&#34;30007043&#34;},{&#34;dailyconfirmed&#34;:&#34;30818&#34;,&#34;dailydeceased&#34;:&#34;2024&#34;,&#34;dailyrecovered&#34;:&#34;47544&#34;,&#34;date&#34;:&#34;12 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-12&#34;,&#34;totalconfirmed&#34;:&#34;30904515&#34;,&#34;totaldeceased&#34;:&#34;410225&#34;,&#34;totalrecovered&#34;:&#34;30054587&#34;},{&#34;dailyconfirmed&#34;:&#34;40314&#34;,&#34;dailydeceased&#34;:&#34;625&#34;,&#34;dailyrecovered&#34;:&#34;42436&#34;,&#34;date&#34;:&#34;13 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-13&#34;,&#34;totalconfirmed&#34;:&#34;30944829&#34;,&#34;totaldeceased&#34;:&#34;410850&#34;,&#34;totalrecovered&#34;:&#34;30097023&#34;},{&#34;dailyconfirmed&#34;:&#34;41759&#34;,&#34;dailydeceased&#34;:&#34;578&#34;,&#34;dailyrecovered&#34;:&#34;39293&#34;,&#34;date&#34;:&#34;14 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-14&#34;,&#34;totalconfirmed&#34;:&#34;30986588&#34;,&#34;totaldeceased&#34;:&#34;411428&#34;,&#34;totalrecovered&#34;:&#34;30136316&#34;},{&#34;dailyconfirmed&#34;:&#34;39071&#34;,&#34;dailydeceased&#34;:&#34;544&#34;,&#34;dailyrecovered&#34;:&#34;39827&#34;,&#34;date&#34;:&#34;15 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-15&#34;,&#34;totalconfirmed&#34;:&#34;31025659&#34;,&#34;totaldeceased&#34;:&#34;411972&#34;,&#34;totalrecovered&#34;:&#34;30176143&#34;},{&#34;dailyconfirmed&#34;:&#34;38117&#34;,&#34;dailydeceased&#34;:&#34;560&#34;,&#34;dailyrecovered&#34;:&#34;43878&#34;,&#34;date&#34;:&#34;16 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-16&#34;,&#34;totalconfirmed&#34;:&#34;31063776&#34;,&#34;totaldeceased&#34;:&#34;412532&#34;,&#34;totalrecovered&#34;:&#34;30220021&#34;},{&#34;dailyconfirmed&#34;:&#34;41283&#34;,&#34;dailydeceased&#34;:&#34;517&#34;,&#34;dailyrecovered&#34;:&#34;42051&#34;,&#34;date&#34;:&#34;17 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-17&#34;,&#34;totalconfirmed&#34;:&#34;31105059&#34;,&#34;totaldeceased&#34;:&#34;413049&#34;,&#34;totalrecovered&#34;:&#34;30262072&#34;},{&#34;dailyconfirmed&#34;:&#34;38330&#34;,&#34;dailydeceased&#34;:&#34;501&#34;,&#34;dailyrecovered&#34;:&#34;38545&#34;,&#34;date&#34;:&#34;18 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-18&#34;,&#34;totalconfirmed&#34;:&#34;31143389&#34;,&#34;totaldeceased&#34;:&#34;413550&#34;,&#34;totalrecovered&#34;:&#34;30300617&#34;},{&#34;dailyconfirmed&#34;:&#34;29420&#34;,&#34;dailydeceased&#34;:&#34;372&#34;,&#34;dailyrecovered&#34;:&#34;45356&#34;,&#34;date&#34;:&#34;19 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-19&#34;,&#34;totalconfirmed&#34;:&#34;31172809&#34;,&#34;totaldeceased&#34;:&#34;413922&#34;,&#34;totalrecovered&#34;:&#34;30345973&#34;},{&#34;dailyconfirmed&#34;:&#34;42128&#34;,&#34;dailydeceased&#34;:&#34;3998&#34;,&#34;dailyrecovered&#34;:&#34;36876&#34;,&#34;date&#34;:&#34;20 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-20&#34;,&#34;totalconfirmed&#34;:&#34;31214937&#34;,&#34;totaldeceased&#34;:&#34;417920&#34;,&#34;totalrecovered&#34;:&#34;30382849&#34;},{&#34;dailyconfirmed&#34;:&#34;41687&#34;,&#34;dailydeceased&#34;:&#34;510&#34;,&#34;dailyrecovered&#34;:&#34;38891&#34;,&#34;date&#34;:&#34;21 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-21&#34;,&#34;totalconfirmed&#34;:&#34;31256624&#34;,&#34;totaldeceased&#34;:&#34;418430&#34;,&#34;totalrecovered&#34;:&#34;30421740&#34;},{&#34;dailyconfirmed&#34;:&#34;34863&#34;,&#34;dailydeceased&#34;:&#34;481&#34;,&#34;dailyrecovered&#34;:&#34;38403&#34;,&#34;date&#34;:&#34;22 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-22&#34;,&#34;totalconfirmed&#34;:&#34;31291487&#34;,&#34;totaldeceased&#34;:&#34;418911&#34;,&#34;totalrecovered&#34;:&#34;30460143&#34;},{&#34;dailyconfirmed&#34;:&#34;39501&#34;,&#34;dailydeceased&#34;:&#34;542&#34;,&#34;dailyrecovered&#34;:&#34;35144&#34;,&#34;date&#34;:&#34;23 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-23&#34;,&#34;totalconfirmed&#34;:&#34;31330988&#34;,&#34;totaldeceased&#34;:&#34;419453&#34;,&#34;totalrecovered&#34;:&#34;30495287&#34;},{&#34;dailyconfirmed&#34;:&#34;40286&#34;,&#34;dailydeceased&#34;:&#34;541&#34;,&#34;dailyrecovered&#34;:&#34;40038&#34;,&#34;date&#34;:&#34;24 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-24&#34;,&#34;totalconfirmed&#34;:&#34;31371274&#34;,&#34;totaldeceased&#34;:&#34;419994&#34;,&#34;totalrecovered&#34;:&#34;30535325&#34;},{&#34;dailyconfirmed&#34;:&#34;38179&#34;,&#34;dailydeceased&#34;:&#34;411&#34;,&#34;dailyrecovered&#34;:&#34;35945&#34;,&#34;date&#34;:&#34;25 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-25&#34;,&#34;totalconfirmed&#34;:&#34;31409453&#34;,&#34;totaldeceased&#34;:&#34;420405&#34;,&#34;totalrecovered&#34;:&#34;30571270&#34;},{&#34;dailyconfirmed&#34;:&#34;30820&#34;,&#34;dailydeceased&#34;:&#34;418&#34;,&#34;dailyrecovered&#34;:&#34;42503&#34;,&#34;date&#34;:&#34;26 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-26&#34;,&#34;totalconfirmed&#34;:&#34;31440273&#34;,&#34;totaldeceased&#34;:&#34;420823&#34;,&#34;totalrecovered&#34;:&#34;30613773&#34;},{&#34;dailyconfirmed&#34;:&#34;42971&#34;,&#34;dailydeceased&#34;:&#34;641&#34;,&#34;dailyrecovered&#34;:&#34;41653&#34;,&#34;date&#34;:&#34;27 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-27&#34;,&#34;totalconfirmed&#34;:&#34;31483244&#34;,&#34;totaldeceased&#34;:&#34;421464&#34;,&#34;totalrecovered&#34;:&#34;30655426&#34;},{&#34;dailyconfirmed&#34;:&#34;43165&#34;,&#34;dailydeceased&#34;:&#34;640&#34;,&#34;dailyrecovered&#34;:&#34;38537&#34;,&#34;date&#34;:&#34;28 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-28&#34;,&#34;totalconfirmed&#34;:&#34;31526409&#34;,&#34;totaldeceased&#34;:&#34;422104&#34;,&#34;totalrecovered&#34;:&#34;30693963&#34;},{&#34;dailyconfirmed&#34;:&#34;44671&#34;,&#34;dailydeceased&#34;:&#34;549&#34;,&#34;dailyrecovered&#34;:&#34;42115&#34;,&#34;date&#34;:&#34;29 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-29&#34;,&#34;totalconfirmed&#34;:&#34;31571080&#34;,&#34;totaldeceased&#34;:&#34;422653&#34;,&#34;totalrecovered&#34;:&#34;30736078&#34;},{&#34;dailyconfirmed&#34;:&#34;41499&#34;,&#34;dailydeceased&#34;:&#34;598&#34;,&#34;dailyrecovered&#34;:&#34;37320&#34;,&#34;date&#34;:&#34;30 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-30&#34;,&#34;totalconfirmed&#34;:&#34;31612579&#34;,&#34;totaldeceased&#34;:&#34;423251&#34;,&#34;totalrecovered&#34;:&#34;30773398&#34;},{&#34;dailyconfirmed&#34;:&#34;41943&#34;,&#34;dailydeceased&#34;:&#34;542&#34;,&#34;dailyrecovered&#34;:&#34;39485&#34;,&#34;date&#34;:&#34;31 July 2021&#34;,&#34;dateymd&#34;:&#34;2021-07-31&#34;,&#34;totalconfirmed&#34;:&#34;31654522&#34;,&#34;totaldeceased&#34;:&#34;423793&#34;,&#34;totalrecovered&#34;:&#34;30812883&#34;},{&#34;dailyconfirmed&#34;:&#34;40629&#34;,&#34;dailydeceased&#34;:&#34;424&#34;,&#34;dailyrecovered&#34;:&#34;36628&#34;,&#34;date&#34;:&#34;1 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-01&#34;,&#34;totalconfirmed&#34;:&#34;31695151&#34;,&#34;totaldeceased&#34;:&#34;424217&#34;,&#34;totalrecovered&#34;:&#34;30849511&#34;},{&#34;dailyconfirmed&#34;:&#34;30085&#34;,&#34;dailydeceased&#34;:&#34;420&#34;,&#34;dailyrecovered&#34;:&#34;39120&#34;,&#34;date&#34;:&#34;2 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-02&#34;,&#34;totalconfirmed&#34;:&#34;31725236&#34;,&#34;totaldeceased&#34;:&#34;424637&#34;,&#34;totalrecovered&#34;:&#34;30888631&#34;},{&#34;dailyconfirmed&#34;:&#34;42530&#34;,&#34;dailydeceased&#34;:&#34;561&#34;,&#34;dailyrecovered&#34;:&#34;36552&#34;,&#34;date&#34;:&#34;3 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-03&#34;,&#34;totalconfirmed&#34;:&#34;31767766&#34;,&#34;totaldeceased&#34;:&#34;425198&#34;,&#34;totalrecovered&#34;:&#34;30925183&#34;},{&#34;dailyconfirmed&#34;:&#34;42797&#34;,&#34;dailydeceased&#34;:&#34;532&#34;,&#34;dailyrecovered&#34;:&#34;41873&#34;,&#34;date&#34;:&#34;4 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-04&#34;,&#34;totalconfirmed&#34;:&#34;31810563&#34;,&#34;totaldeceased&#34;:&#34;425730&#34;,&#34;totalrecovered&#34;:&#34;30967056&#34;},{&#34;dailyconfirmed&#34;:&#34;45005&#34;,&#34;dailydeceased&#34;:&#34;465&#34;,&#34;dailyrecovered&#34;:&#34;40906&#34;,&#34;date&#34;:&#34;5 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-05&#34;,&#34;totalconfirmed&#34;:&#34;31855568&#34;,&#34;totaldeceased&#34;:&#34;426195&#34;,&#34;totalrecovered&#34;:&#34;31007962&#34;},{&#34;dailyconfirmed&#34;:&#34;38705&#34;,&#34;dailydeceased&#34;:&#34;616&#34;,&#34;dailyrecovered&#34;:&#34;40026&#34;,&#34;date&#34;:&#34;6 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-06&#34;,&#34;totalconfirmed&#34;:&#34;31894273&#34;,&#34;totaldeceased&#34;:&#34;426811&#34;,&#34;totalrecovered&#34;:&#34;31047988&#34;},{&#34;dailyconfirmed&#34;:&#34;39068&#34;,&#34;dailydeceased&#34;:&#34;491&#34;,&#34;dailyrecovered&#34;:&#34;43935&#34;,&#34;date&#34;:&#34;7 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-07&#34;,&#34;totalconfirmed&#34;:&#34;31933341&#34;,&#34;totaldeceased&#34;:&#34;427302&#34;,&#34;totalrecovered&#34;:&#34;31091923&#34;},{&#34;dailyconfirmed&#34;:&#34;36036&#34;,&#34;dailydeceased&#34;:&#34;447&#34;,&#34;dailyrecovered&#34;:&#34;39832&#34;,&#34;date&#34;:&#34;8 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-08&#34;,&#34;totalconfirmed&#34;:&#34;31969377&#34;,&#34;totaldeceased&#34;:&#34;427749&#34;,&#34;totalrecovered&#34;:&#34;31131755&#34;},{&#34;dailyconfirmed&#34;:&#34;27428&#34;,&#34;dailydeceased&#34;:&#34;376&#34;,&#34;dailyrecovered&#34;:&#34;41461&#34;,&#34;date&#34;:&#34;9 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-09&#34;,&#34;totalconfirmed&#34;:&#34;31996805&#34;,&#34;totaldeceased&#34;:&#34;428125&#34;,&#34;totalrecovered&#34;:&#34;31173216&#34;},{&#34;dailyconfirmed&#34;:&#34;38376&#34;,&#34;dailydeceased&#34;:&#34;496&#34;,&#34;dailyrecovered&#34;:&#34;40097&#34;,&#34;date&#34;:&#34;10 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-10&#34;,&#34;totalconfirmed&#34;:&#34;32035181&#34;,&#34;totaldeceased&#34;:&#34;428621&#34;,&#34;totalrecovered&#34;:&#34;31213313&#34;},{&#34;dailyconfirmed&#34;:&#34;41586&#34;,&#34;dailydeceased&#34;:&#34;491&#34;,&#34;dailyrecovered&#34;:&#34;39127&#34;,&#34;date&#34;:&#34;11 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-11&#34;,&#34;totalconfirmed&#34;:&#34;32076767&#34;,&#34;totaldeceased&#34;:&#34;429112&#34;,&#34;totalrecovered&#34;:&#34;31252440&#34;},{&#34;dailyconfirmed&#34;:&#34;40081&#34;,&#34;dailydeceased&#34;:&#34;583&#34;,&#34;dailyrecovered&#34;:&#34;42156&#34;,&#34;date&#34;:&#34;12 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-12&#34;,&#34;totalconfirmed&#34;:&#34;32116848&#34;,&#34;totaldeceased&#34;:&#34;429695&#34;,&#34;totalrecovered&#34;:&#34;31294596&#34;},{&#34;dailyconfirmed&#34;:&#34;38761&#34;,&#34;dailydeceased&#34;:&#34;477&#34;,&#34;dailyrecovered&#34;:&#34;35759&#34;,&#34;date&#34;:&#34;13 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-13&#34;,&#34;totalconfirmed&#34;:&#34;32155609&#34;,&#34;totaldeceased&#34;:&#34;430172&#34;,&#34;totalrecovered&#34;:&#34;31330355&#34;},{&#34;dailyconfirmed&#34;:&#34;36135&#34;,&#34;dailydeceased&#34;:&#34;491&#34;,&#34;dailyrecovered&#34;:&#34;37936&#34;,&#34;date&#34;:&#34;14 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-14&#34;,&#34;totalconfirmed&#34;:&#34;32191744&#34;,&#34;totaldeceased&#34;:&#34;430663&#34;,&#34;totalrecovered&#34;:&#34;31368291&#34;},{&#34;dailyconfirmed&#34;:&#34;33245&#34;,&#34;dailydeceased&#34;:&#34;421&#34;,&#34;dailyrecovered&#34;:&#34;35936&#34;,&#34;date&#34;:&#34;15 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-15&#34;,&#34;totalconfirmed&#34;:&#34;32224989&#34;,&#34;totaldeceased&#34;:&#34;431084&#34;,&#34;totalrecovered&#34;:&#34;31404227&#34;},{&#34;dailyconfirmed&#34;:&#34;24692&#34;,&#34;dailydeceased&#34;:&#34;438&#34;,&#34;dailyrecovered&#34;:&#34;36862&#34;,&#34;date&#34;:&#34;16 August 2021&#34;,&#34;dateymd&#34;:&#34;2021-08-16&#34;,&#34;totalconfirmed&#34;:&#34;32249681&#34;,&#34;totaldeceased&#34;:&#34;431522&#34;,&#34;totalrecovered&#34;:&#34;31441089&#34;}] . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.json) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . &lt;bound method Response.json of &lt;Response [403]&gt;&gt; . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://ahadb63.github.io/ahadsblog/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 0 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [0, 2, 4, 6, 8, 10] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . [0, 2, 4, 6, 8, 10] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 0, 2, 4, 5, 6, 8, 10, 10, 12, 14, 15, 16, 18, 20, 20, 22, 24, 25, 26, 28, 30, 30, 32, 34, 35, 36, 38, 40, 40, 42, 44, 45, 46, 48, 50, 50, 52, 54, 55, 56, 58, 60, 60, 62, 64, 65, 66, 68, 70, 70, 72, 74, 75, 76, 78, 80, 80, 82, 84, 85, 86, 88, 90, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) #code should add the price of the menu items selected by the user print(total) . Menu burger $3.99 fries $1.99 drink $0.99 0 . Fixed Version . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99, } go = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times while go == 0: item = input(&quot;Please select an item from the menu&quot;) print(&quot;Your Order:&quot;, item.lower()) for k,v in menu.items(): if item.lower() == k: print(&quot;Your total is $&quot;, menu[item.lower()]) go = 1 break if item.lower() != k: print(&quot;Please Try Again&quot;) continue #code should add the price of the menu items selected by the user . Menu burger $3.99 fries $1.99 drink $0.99 Your Order: burger Your total is $ 3.99 . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99,} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #code should prompts the user multiple times, until they type &quot;STOP&quot; while True: item = input(&quot;Select an item from the menu then type STOP&quot;) if item == &quot;STOP&quot; : break elif item in menu: total += menu[item] else: print (&quot;Doesnt Exist&quot;) #code adds price of the menu items selected by the user print(&quot;Total: $&quot; + str(total)) . Menu burger $3.99 fries $1.99 drink $0.99 Total: $7.970000000000001 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://ahadb63.github.io/ahadsblog/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Team Final Project",
            "content": "Final Project Early Idea . Webpage that has multiple minigames . Games like chess, poker, slots?, snake, wordle, | Games will be categorized in categories. For example, there will be a Board Games, Card Games, etc. | . Roles . Sabine - Frontend dev Dash - Backend dev Ahad - Backend dev Aiden - Scrum Master .",
            "url": "https://ahadb63.github.io/ahadsblog/final/project/2022/09/27/Final-Project-Planning.html",
            "relUrl": "/final/project/2022/09/27/Final-Project-Planning.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "JavaScript Usage",
            "content": "# JAVASCRIPT - toc: true - badges: true - comments: true - categories: [Java, markdown] . console.log(&quot;Hello World my name is Ahad Biabani&quot;); . Hello World my name is Ahad Biabani . Using Variable in console.log . var ahad = &quot;Hello fortnite hi hi hi&quot;; console.log(ahad); . Hello fortnite hi hi hi . Output showing use of function . function logIt(output) { console.log(output); } logIt(ahad); . Hello fortnite hi hi hi . Showing reuse of fucntion . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;I like to play Ice Hockey&quot;); logIt(2005) . Reuse of logIT I like to play Ice Hockey 2005 . Dynamic or Loosely typed language (string, number) . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Ahad is the best APCSP student&quot;) logItType(&quot;hello&quot;); logItType(2005); logItType([1, 2, 3, 4, 5]); . Ahad is the best APCSP student string ; hello number ; 2005 object ; [ 1, 2, 3, 4, 5 ] . Build a Person Function/Class object and JSON . function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var student = new Person(&quot;Ahad Biabani&quot;, &quot;Ahadb63&quot;, 2024); // object type is easy to work with in JavaScript logItType(student); // before role logItType(student.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher student.setRole(&quot;Teacher&quot;); // set the role logItType(student); logItType(student.toJSON()); . object ; Person { name: &#39;Ahad Biabani&#39;, ghID: &#39;Ahadb63&#39;, classOf: 2024, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Ahad Biabani&#34;,&#34;ghID&#34;:&#34;Ahadb63&#34;,&#34;classOf&#34;:2024,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Ahad Biabani&#39;, ghID: &#39;Ahadb63&#39;, classOf: 2024, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Ahad Biabani&#34;,&#34;ghID&#34;:&#34;Ahadb63&#34;,&#34;classOf&#34;:2024,&#34;role&#34;:&#34;Teacher&#34;} . Build a Classroom Array/List of Persons and JSON . var students = [ new Person(&quot;Kian&quot;, &quot;Pasokhi&quot;, 2024), new Person(&quot;Khalid&quot;, &quot;Farah&quot;, 2024), new Person(&quot;Neel&quot;, &quot;Agnihotri&quot;, 2024), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); . evalmachine.&lt;anonymous&gt;:22 compsci = new Classroom(teacher, students); ^ ReferenceError: teacher is not defined at evalmachine.&lt;anonymous&gt;:22:25 at ContextifyScript.Script.runInThisContext (vm.js:25:33) at Object.runInThisContext (vm.js:97:38) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) . IJavaScript and Table formatting using toHTML method . Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid white;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em blue;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Ahad Biabani | Ahadb63 | 2024 | Teacher | Kian | Pasokhi | 2024 | Student | Khalid | Farah | 2024 | Student | Neel | Agnihotri | 2024 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://ahadb63.github.io/ahadsblog/2022/09/25/JavaScript-Use.html",
            "relUrl": "/2022/09/25/JavaScript-Use.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Agenda",
            "content": "9/22/22 Thursday . AMLIT . Poem Essay (tommorow at 11:59) | . Chemistry . none | . APUSH . Chapter 10 notes | Chapter 10 study | . Math . B8 HW | Test Corrections | . APCOMSCI . none | .",
            "url": "https://ahadb63.github.io/ahadsblog/agenda/2022/09/22/AGENDA.html",
            "relUrl": "/agenda/2022/09/22/AGENDA.html",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "List and Dictionaries",
            "content": "# &quot;List and Dictionaries&quot; &gt; &quot;Customized list and dictionary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . List and Dictionaries . This section is personalized to me and shows the things I like. This uses iteration - while loop . ThingsILike = [] ThingsILike.append({ &quot;FirstName&quot;: &quot;Ahad&quot; &quot;LastName:&quot; &quot;Biabani&quot; &quot;FavoriteFood:&quot; &quot;Steak&quot;, &quot;FavoriteSport&quot;: &quot;Ice Hockey&quot;, &quot;FavoriteVideoGame&quot;: &quot;BattleField 1&quot;, &quot;FavoriteArtist&quot;: &quot;Destroy Lonely&quot;, &quot;Hobbies&quot;: &quot;Ice Hockey and Video Games&quot;, &quot;FavoriteSubject&quot;: &quot;APCSP&quot; }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;FavoriteFood:&quot;, d_rec[&quot;FavoriteFood&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;FavoriteSport:&quot;, d_rec[&quot;FavoriteSport&quot;]) print(&quot; t&quot;, &quot;FavoriteVideoGame:&quot;, d_rec[&quot;FavoriteVideoGame&quot;]) print(&quot; t&quot;, &quot;FavoriteArtist:&quot;, d_rec[&quot;FavoriteArtist&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;,d_rec[&quot;Hobbies&quot;]) print(&quot; t&quot;, &quot;FavoriteSubject: &quot;,d_rec[&quot;FavoriteSubject&quot;]) print(end= &quot;&quot;) print() print(ThingsILike) #for loop algorithm iterates on length of Things I Like def while_loop():# while loop algorithm contains an initial n and an index incrementing statement (n += 1) print(&quot;While loop output n&quot;) i = 0 while i &lt; len(ThingsILike): record = ThingsILike[i] print_data(record) i += 1 return while_loop() # while loop algorithm contains an initial n and an index incrementing statement (n += 1) . This section is also personalized to me. This section uses iteration - for loop . AboutMe = [] AboutMe.append({ &quot;FirstName&quot;: &quot;Ahad&quot;, &quot;LastName&quot;: &quot;Biabani&quot;, &quot;DOB&quot;: &quot;Sept 18&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;aobiabain@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) print() def for_loop(): print(&quot;For loop output n&quot;) for record in AboutMe: print_data(record) for_loop() . . For loop output Ahad Biabani Email: aobiabain@gmail.com Residence: San Diego Birth Day: Sept 18 Cars: None . This section is also personalized to me. This uses iteration - recursive loop . AboutMe = [] AboutMe.append({ &quot;FirstName&quot;: &quot;Ahad&quot;, &quot;LastName&quot;: &quot;Biabani&quot;, &quot;DOB&quot;: &quot;Sept 18&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;aobiabain@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) print() def recursive_loop(i): if i &lt; len(AboutMe): record = AboutMe[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) # recursion algorithm loops incrementing on each call (n + 1) until exit condition is met . . Recursive loop output Ahad Biabani Email: aobiabain@gmail.com Residence: San Diego Birth Day: Sept 18 Cars: None . This is a quiz stored in a list . questions = 4 # number of quiz questions correct = 0 # initialize number of correct answers as 0 print(&quot;This is a 4 question quiz&quot;) def question_and_answer(prompt, answer): print(&quot;Question: &quot; + prompt) # asks user a question user_input = input() # takes user&#39;s input as variable msg print(&quot;Answer: &quot; + user_input) # print user&#39;s input as Answer if answer == user_input.lower(): # convert user&#39;s input to lowercase print(&quot;Correct Answer&quot;) global correct # allows to modify variable outside of current scope correct += 1 # add 1 to correct count else: print (&quot;Incorrect Answer&quot;) return user_input question_1 = question_and_answer(&quot;What is Ahads last name?&quot;, &quot;Biabani&quot;) question_2 = question_and_answer(&quot;What sport does Ahad play&quot;, &quot;Ice Hockey&quot;) question_3 = question_and_answer(&quot;How old is Ahad&quot;, &quot;16&quot;) question_4 = question_and_answer(&quot;When is his birthday?&quot;, &quot;September 18th&quot;) if correct &lt; 3: print(&#39;You scored {correct} correct answers out of 4, ur bad&#39;) elif correct &lt; 5: print(&#39;You scored {correct} correct answers out of 4, okay&#39;) else: print(&#39;You scored {correct} correct answers out of 4, good&#39;) print(&quot;A record of your quiz:&quot;) . This is a 4 question quiz Question: What is Ahads last name? .",
            "url": "https://ahadb63.github.io/ahadsblog/markdown/2022/09/07/list-and-dictionaries.html",
            "relUrl": "/markdown/2022/09/07/list-and-dictionaries.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Quiz Planning",
            "content": "# Quiz Planning - toc: true - badges: true - comments: true - categories: [Quiz, markdown] . Ideas for Quiz . Geography loction of statues | World Wonders | . | Sports Teams | different sports | players | . | History Historical figures | Historcial events | . | . We chose Geography as the topic for our quiz . Our Quiz will have three questions: . What country is the Eiffel Tower in? Answer: France | What country are the Pyramids Located? Answer: Egypt | What country and city is the Statue of Liberty in? Answer: United States, New York City | . Other: . We chose to add a bonus question | Bonus question gives viewer chance to decline and end quiz or move forward and do bonus question. | We have a loser screen and a winner screen. | . My Geography Quiz . Ideas for final project . Website where you can find information on characters from movies, shows, manga, and anime | Website that has lots of minigames | Trivia game website | website that teaches you stuff about math | . All projects aboce would orgamize the information and data and present it in different sections. . I need to add 6 points for each of the project ideas next time for full points on the weeks assignments . test .",
            "url": "https://ahadb63.github.io/ahadsblog/2022/09/07/Code.org-Quiz-Planning.html",
            "relUrl": "/2022/09/07/Code.org-Quiz-Planning.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Time Box Fragment",
            "content": "&lt;/p&gt; Week 0 Week 1 Week 2 . First Jupyter Notebook&lt;/td&gt; Tool Check&lt;/td&gt; Lists and Dictionaries&lt;/td&gt; &lt;/tr&gt; First Markdown Post&lt;/td&gt; Quiz&lt;/td&gt; &lt;/tr&gt; About Me&lt;/td&gt; Vocab&lt;/td&gt; Weekly Progress&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; test . &lt;/div&gt; | | | . | | . | | | .",
            "url": "https://ahadb63.github.io/ahadsblog/weeklyprogress/2022/09/05/TimeBoxFragment.html",
            "relUrl": "/weeklyprogress/2022/09/05/TimeBoxFragment.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Quiz",
            "content": "test test test . import getpass, sys def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) if rsp == &quot;import&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, pluto running /bin/python3 You will be asked 3 questions. Question: Are you ready to take a test? Answer: Question: What command is used to include other functions that were previously developed? is incorrect! Question: What command is used to evaluate correct or incorrect response in this example? is incorrect! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? is incorrect! pluto you scored 0/3 .",
            "url": "https://ahadb63.github.io/ahadsblog/quiz/2022/08/30/Quiz.html",
            "relUrl": "/quiz/2022/08/30/Quiz.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Quiz 2",
            "content": "import getpass, sys def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) if rsp == &quot;import&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, pluto running /bin/python3 You will be asked 3 questions. Question: Are you ready to take a test? Answer: Question: What command is used to include other functions that were previously developed? is incorrect! Question: What command is used to evaluate correct or incorrect response in this example? is incorrect! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? is incorrect! pluto you scored 0/3 .",
            "url": "https://ahadb63.github.io/ahadsblog/quiz/2022/08/30/QUIZ.html",
            "relUrl": "/quiz/2022/08/30/QUIZ.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "First Jupyter Notebook",
            "content": "print(1+1) print(&quot;hello&quot;) . .",
            "url": "https://ahadb63.github.io/ahadsblog/2022/08/29/firstjupyternotebook.html",
            "relUrl": "/2022/08/29/firstjupyternotebook.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Bash Tool Checks",
            "content": "Python Check . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Package . conda list . # packages in environment at /home/pluto/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . Jupyter Check . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/pluto/.local/share/jupyter/kernels/bash javascript /home/pluto/.local/share/jupyter/kernels/javascript python3 /home/pluto/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://ahadb63.github.io/ahadsblog/2022/08/29/Bash-Tool-Check.html",
            "relUrl": "/2022/08/29/Bash-Tool-Check.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Mrkdwnpost",
            "content": "Markdown test . Things I like . food | school | APCSP | Mr Yeung | .",
            "url": "https://ahadb63.github.io/ahadsblog/2022/08/24/mrkdwnpost.html",
            "relUrl": "/2022/08/24/mrkdwnpost.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | . | | | .",
            "url": "https://ahadb63.github.io/ahadsblog/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "CB quiz",
            "content": "",
            "url": "https://ahadb63.github.io/ahadsblog/quiz/2022/02/02/College-Board-Quiz.html",
            "relUrl": "/quiz/2022/02/02/College-Board-Quiz.html",
            "date": " • Feb 2, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "College board quiz (image)",
            "content": ".",
            "url": "https://ahadb63.github.io/ahadsblog/2022/02/02/College-Board-Quiz-(Image).html",
            "relUrl": "/2022/02/02/College-Board-Quiz-(Image).html",
            "date": " • Feb 2, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Week 4",
            "content": "# Week 4 &gt; Week 4 assignments - toc:true- badges: true - comments: true - categories: [Flask, markdown] . Flask Web Page Video . Collaboration Group is new, none of us know each other well | Variance in gender and culture | United under intrest for comsci | . | Potential Group Project Ideas Trivia game | Mafia game | Media database characters | movies | anime | . | . | .",
            "url": "https://ahadb63.github.io/ahadsblog/2020/09/29/Week-4.html",
            "relUrl": "/2020/09/29/Week-4.html",
            "date": " • Sep 29, 2020"
        }
        
    
  
    
        ,"post24": {
            "title": "COVIDAPI",
            "content": "&quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 .",
            "url": "https://ahadb63.github.io/ahadsblog/api/2020/09/09/apiii.html",
            "relUrl": "/api/2020/09/09/apiii.html",
            "date": " • Sep 9, 2020"
        }
        
    
  
    
        ,"post25": {
            "title": "REAL Notes Week 15",
            "content": "3.8 and 3.10 . Lists . Lists: a sequence of variables . we can use lists to store multiple items into one variable | used to store collections of data | changeable, ordered, allow duplicates | . fruits = [&quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot;] index = 1 print (fruits[index]) # Index starts at 0 and not 1, so grape will be printed and not apple (College Board starts at 1) . grape . sports = [&quot;football&quot;, &quot;soccer&quot;, &quot;baseball&quot;, &quot;golf&quot;, &quot;basketball&quot;] # add &quot;golf&quot; as the 3rd element in the list print (sports) . [&#39;football&#39;, &#39;soccer&#39;, &#39;baseball&#39;, &#39;golf&#39;, &#39;basketball&#39;] . sports = [&quot;football&quot;, &quot;hockey&quot;, &quot;baseball&quot;, &quot;basketball&quot;] # change the value &quot;soccer&quot; to &quot;hockey&quot; print (sports) . [&#39;football&#39;, &#39;hockey&#39;, &#39;baseball&#39;, &#39;basketball&#39;] . Output of list practice is unusual, | . | . Iteration . Iteration is the repetition of a process or utterance applied to the result or taken from a previous statement. | Types of Iteration include using a &quot;for loop&quot;, using a &quot;for loop and range()&quot;, using a &quot;while loop&quot;, and using comprehension | . a = [&#39;alpha&#39;, &#39;bravo&#39;, &#39;charlie&#39;] itr = iter(a) print(next(itr)) print(next(itr)) print(next(itr)) . alpha bravo charlie . Loops . Well, above is basically just printing them again, so how do we takes these iterators into something we can make use for? | Loops take essentially what we did above and automates it, here are some examples. | . Iteration HW . words = [&quot;alfa&quot;, &quot;bravo&quot;, &quot;charlie&quot;, &quot;delta&quot;, &quot;echo&quot;, &quot;foxtrot&quot;, &quot;golf&quot;, &quot;hotel&quot;, &quot;india&quot;, &quot;juliett&quot;, &quot;kilo&quot;, &quot;lima&quot;, &quot;mike&quot;, &quot;november&quot;, &quot;oscar&quot;, &quot;papa&quot;, &quot;quebec&quot;, &quot;romeo&quot;, &quot;sierra&quot;, &quot;tango&quot;, &quot;uniform&quot;, &quot;victor&quot;, &quot;whiskey&quot;, &quot;xray&quot;, &quot;yankee&quot;, &quot;zulu&quot;] inp = input().lower() itr = iter(words) name = [&quot;delta&quot;, &quot;alpha&quot;, &quot;hotel&quot;] d = &quot;delta&quot; a = &quot;alfa&quot; h = &quot;hotel&quot; . 2d List Challenge . print_matrix3 = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] . 3.8 and 3.10 Hacks . hacks for 3.8 and 3.10 . sports = [&quot;football&quot;, &quot;hockey&quot;, &quot;baseball&quot;, &quot;basketball&quot;] # change the value &quot;soccer&quot; to &quot;hockey&quot; print (sports) . [&#39;football&#39;, &#39;hockey&#39;, &#39;baseball&#39;, &#39;basketball&#39;] . sports = [&quot;football&quot;, &quot;soccer&quot;, &quot;baseball&quot;, &quot;golf&quot;, &quot;basketball&quot;] # add &quot;golf&quot; as the 3rd element in the list print (sports) . [&#39;football&#39;, &#39;soccer&#39;, &#39;baseball&#39;, &#39;golf&#39;, &#39;basketball&#39;] . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] . def print_matrix3(matrix): for row in matrix: print(*row) print_matrix3(keypad) . 1 2 3 4 5 6 7 8 9 0 . def print_matrix1(matrix): for i in range(len(matrix)): for j in range(len(matrix[i])): print(matrix[i][j], end=&quot; &quot;) . print(&quot;Raw matrix (list of lists): &quot;) print(keypad) print(&quot;Matrix printed using nested for loop iteration:&quot;) print_matrix1(keypad) print() . Raw matrix (list of lists): [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&#39; &#39;, 0, &#39; &#39;]] Matrix printed using nested for loop iteration: 1 2 3 4 5 6 7 8 9 0 . def print_matrix2(matrix): for row in matrix: # Iterates through rows. Iterates through every value in matrix and list. for col in row: # Iterates value in row. row values stored in col. print(col, end=&quot; &quot;) print() print_matrix2(keypad) . 1 2 3 4 5 6 7 8 9 0 . words = [&quot;alfa&quot;, &quot;bravo&quot;, &quot;charlie&quot;, &quot;delta&quot;, &quot;echo&quot;, &quot;foxtrot&quot;, &quot;golf&quot;, &quot;hotel&quot;, &quot;india&quot;, &quot;juliett&quot;, &quot;kilo&quot;, &quot;lima&quot;, &quot;mike&quot;, &quot;november&quot;, &quot;oscar&quot;, &quot;papa&quot;, &quot;quebec&quot;, &quot;romeo&quot;, &quot;sierra&quot;, &quot;tango&quot;, &quot;uniform&quot;, &quot;victor&quot;, &quot;whiskey&quot;, &quot;xray&quot;, &quot;yankee&quot;, &quot;zulu&quot;] output = &quot;&quot; for letter in inp: for word in words: if letter == word[0]: # fidns rigth words output += word + &quot; &quot; # adds space print(inp + &quot; n&quot; + output) # input is ahad biabani . ahad biabani alfa hotel alfa delta bravo india alfa bravo alfa november india . Print what month you were born and how old you are by iterating through the keyboard (don&#39;t just write a string). . keyboard = [[&quot;`&quot;, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] . month = keyboard[2][1] + keyboard[1][2] + keyboard[1][9] + keyboard[1][4] + keyboard[1][2] + keyboard[3][6] + keyboard[3][4] + keyboard[1][2] + keyboard[1][3] age = str(keyboard[0][1]) + str(keyboard[0][8]) print(month[:1] + month[1:].lower()) print(age) . September 18 . notes . VARIABLE : A variable is a named location in a computer&#39;s memory where a programmer can store and retrieve data. The data stored in a variable can be of various types, such as numbers, strings, or booleans (true or false values). . DATA TYPE : Data types refer to the different types of data that a variable can hold. Some common data types include integers, floating-point numbers, strings, and booleans. . ASSIGNMENT OPERATORS : Assignment operators are used to assign a value to a variable. For example, the equal sign (=) is an assignment operator that is used to assign a value to a variable on the left side of the equal sign. . LISTS : Lists are a data structure that allows a programmer to store and manipulate multiple values in a single, ordered collection. . 2D LISTS :lists are lists that contain other lists as elements. They can be thought of as a grid, with rows and columns, where each element in the grid is itself a list. . DICTIONARIES : Dictionaries are another data structure that allows a programmer to store and manipulate data. Unlike lists, which are ordered collections of data, dictionaries are unordered collections of key-value pairs. . CLASS ALGORITHMS : A class is a concept in object-oriented programming that allows a programmer to define a new data type. A class can contain variables and functions (called methods) that operate on those variables. . ALGORITHMS Algorithms are a set of steps or instructions that a computer can follow to solve a problem or accomplish a task. . SEQUENCE : A sequence is a common control flow pattern in which a set of instructions is executed in order, one after the other. . SELECTION : Selection is a control flow pattern in which a program only executes certain instructions depending on whether a certain condition is met. . ITERATION : Iteration is a control flow pattern in which a set of instructions is executed repeatedly until a certain condition is met. This is often accomplished using a looping construct, such as a for loop or a while loop. .",
            "url": "https://ahadb63.github.io/ahadsblog/notes/3.8/3.1/2020/09/09/Week-15-Notes-copy.html",
            "relUrl": "/notes/3.8/3.1/2020/09/09/Week-15-Notes-copy.html",
            "date": " • Sep 9, 2020"
        }
        
    
  
    
        ,"post26": {
            "title": "Grades",
            "content": "Grades . 3.1 &amp; 3.2 3.3 and 3.4 3.5-3.7 3.8-3.10 . 0.95/1 | 1/1 | .9/1 | .9/1 | .",
            "url": "https://ahadb63.github.io/ahadsblog/grades/2020/09/09/GRADES.html",
            "relUrl": "/grades/2020/09/09/GRADES.html",
            "date": " • Sep 9, 2020"
        }
        
    
  
    
        ,"post27": {
            "title": "Algorithm Hacks",
            "content": "var vars = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] ,expressions = [&#39;! ( a || b || c )&#39;, &#39;(!a &amp;&amp; !b &amp;&amp; !c)&#39;]; document.getElementById(&#39;getResult&#39;).addEventListener(&#39;click&#39;, ()=&gt;{ var len = vars.length ,splitBy = Math.round(len/2) ,trueSet ,trues = [] ,falses = [] ,truthData = []; vars = document.getElementById(&#39;vars&#39;).value.split(&#39;,&#39;); expressions = document.getElementById(&#39;expression&#39;).value.split(&#39;,&#39;); truthData.push(truth(vars, vars, true)); for(var i=1; i&lt;=splitBy; i++) { trueSet = reduceToCombinations(permut(vars, i)); trueSet.forEach((truthSrc)=&gt;{ trues = truth(vars, truthSrc); truthData.push(trues); }); } truthData.push(truth(vars, vars)); writeTruthTable(truthData); }); function truth(set, truths, reverse) { var w = {}; set.forEach(v=&gt;w[v]=(truths.indexOf(v)&gt;=0 ? true : false)^reverse); return w; } function reduceToCombinations(arr) { var i=1 ,lastEl; arr = arr.map(v=&gt;{return v.split(&#39;&#39;).sort().join(&#39;&#39;)}).sort(); lastEl = arr[0]; while(i&lt;arr.length) { if(arr[i] == lastEl) { arr.splice(i,1); } else { lastEl = arr[i]; i++; } } arr = arr.map(v=&gt;{return v.split(&#39;&#39;)}); return arr; } function writeTruthTable(truthData) { var table = &#39;&lt;table cellpadding=0 cellspacing=0&gt;&#39; ,keys ,vals ,exprRes; table += &#39;&lt;thead&gt;&lt;tr&gt;&#39;; vars.forEach(v=&gt;{ table += &#39;&lt;th&gt;&#39;; table += v; table += &#39;&lt;/th&gt;&#39;; }); expressions.forEach(v=&gt;{ table += &#39;&lt;th&gt;&#39;; table += v; table += &#39;&lt;/th&gt;&#39;; }); table += &#39;&lt;/tr&gt;&lt;/thead&gt;&#39;; truthData.forEach((v)=&gt; { vals = []; keys = []; table += &#39;&lt;tr&gt;&#39;; console.log(v); for(i in v){ vals.push(v[i]); keys.push(i); table += &#39;&lt;td&gt;&#39;; table += v[i]; table += &#39;&lt;/td&gt;&#39;; }; for(var i = 0; i&lt;keys.length; i++) { eval(`var ${keys[i]} = ${vals[i]};`); } expressions.forEach((expr)=&gt;{ exprRes = eval(expr); table += `&lt;td class=&quot;${exprRes}&quot;&gt;`; table += exprRes ? &#39;T&#39; : &#39;F&#39;; table += &#39;&lt;/td&gt;&#39;; }); table += &#39;&lt;/tr&gt;&#39;; }); table += &#39;&lt;/table&gt;&#39;; document.getElementById(&#39;result&#39;).innerHTML = table; } function permut(arr, c) { var buf = [] ,len ,arrSlice ,permArr ,proArr; if(c&lt;=1) { return arr; } else { len = arr.length; for(var i=0;i&lt;len;i++) { arrSlice = arr.slice(0,i).concat(arr.slice(i+1)); permArr = permut(arrSlice,c-1); proArr = []; for(var y=0; y&lt;permArr.length; y++) { proArr.push([arr[i]].concat(permArr[y]).join(&#39;&#39;)); } buf.push(...proArr); } } return buf; } . evalmachine.&lt;anonymous&gt;:4 document.getElementById(&#39;getResult&#39;).addEventListener(&#39;click&#39;, ()=&gt;{ ^ ReferenceError: document is not defined at evalmachine.&lt;anonymous&gt;:4:1 at ContextifyScript.Script.runInThisContext (vm.js:25:33) at Object.runInThisContext (vm.js:97:38) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) . const A = () =&gt; { console.log(&#39;A&#39;); return true; } const B = () =&gt; { console.log(&#39;B&#39;); return true; } const C = () =&gt; { console.log(&#39;C&#39;); return false; }A() || B() &amp;&amp; C() // prints &quot;A&quot;, returns true (A() || B()) &amp;&amp; C() // prints &quot;A C&quot;, returns false . evalmachine.&lt;anonymous&gt;:12 }A() || B() &amp;&amp; C() ^ SyntaxError: Unexpected identifier at createScript (vm.js:56:10) at Object.runInThisContext (vm.js:97:10) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) at process._tickCallback (internal/process/next_tick.js:104:9) . from itertools import product while True: bexp = input(&#39; nBoolean expression: &#39;) bexp = bexp.strip() if not bexp: print(&quot; nThank you&quot;) break code = compile(bexp, &#39;&lt;string&gt;&#39;, &#39;eval&#39;) names = code.co_names print(&#39; n&#39; + &#39; &#39;.join(names), &#39;:&#39;, bexp) for values in product(range(2), repeat=len(names)): env = dict(zip(names, values)) print(&#39; &#39;.join(str(v) for v in values), &#39;:&#39;, eval(code, env)) . : 1 : 1 : 2 : 2 : 3 : 3 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 1 : 2 : 2 Thank you .",
            "url": "https://ahadb63.github.io/ahadsblog/algorithm/hacks/2020/09/09/Algorithm-Hacks.html",
            "relUrl": "/algorithm/hacks/2020/09/09/Algorithm-Hacks.html",
            "date": " • Sep 9, 2020"
        }
        
    
  
    
        ,"post28": {
            "title": "Lesson 3.11",
            "content": "",
            "url": "https://ahadb63.github.io/ahadsblog/2020/09/09/3.11-CB-lesson.html",
            "relUrl": "/2020/09/09/3.11-CB-lesson.html",
            "date": " • Sep 9, 2020"
        }
        
    
  
    
        ,"post29": {
            "title": "Binary Search Lesson 3.11",
            "content": "Lesson 3.11 Binary Search . Goals/Objectives: . detirmine number of iterations required to find vlue in data set. | explain requirements for binary search | . What is Binary Search? . Binary search is a search algorithm that finds the position of a target value within a sorted array. Binary search compares the target value to the middle element of the array. | An algorithm for iterating to find a value inside a data set | . About Binary Search: . Binary Search Algorithm starts in the middle of a data set of numbers and eliminates half the data. This process reapeats until the desired value is found or until all elements have been eliminated. | In order to use binary search effectivly and properly, data must be stored in order | COLLEGE BOARD INDEX STARTS AT 1 NOT 0 | . Think about how you would you would try to find a certain number in this set. . One way would be to line up the numbers and count them individually untill you find the desired value. . When working with large data sets with lots of numbers, methods like these wont work . Instead, a Binary Search would be more effective. | . Here we can see the numbers are set in an increasing order. Setting numbers in an increasing or decreasing is needed for a binary search . Binary search is started with the middle number first Middle number is found by taking the higest index number plus the lowest and divided by two | . | Binary Search can be represented using a tree as shown below | . Heres an easy way to put it: . binary search fidns the desired element by continuously chopping the search area in half | say the element you are looking for is &#39;f&#39; | . [a b c d e f g h] . We would start in the middle at element &#39;d&#39; | becuase our target is greater than d we will eliminate everything left of &#39;d&#39; including &#39;d&#39; (chopping it in half) . [e f g h] is what now remains . again we would &#39;chop in half&#39; | say we iterate through &#39;g&#39; and &#39;h&#39;, our desired element is still not found so we would eliminate &#39;g; and &#39;h&#39; and continue the process | . [e f] . now we are down to 2 elements | &#39;chopping in half&#39; will give us our desired element | . [f] . | . def binarySearch(array, x, low, high): # Repeat until the pointers low and high meet each other while low &lt;= high: mid = low + (high - low)//2 if array[mid] == x: return mid elif array[mid] &lt; x: low = mid + 1 else: high = mid - 1 return -1 array = [3, 4, 5, 6, 7, 8, 9] x = 4 result = binarySearch(array, x, 0, len(array)-1) if result != -1: print(&quot;Element is present at index &quot; + str(result)) else: print(&quot;Not found&quot;) . Element is present at index 1 . Hacks . Using my example above and steps below, create your own iteration using binary search . Steps . Compare x with the middle element. | If x matches with the middle element, we return the mid index. | Else if x is greater than the mid element, then x can only lie in the right (greater) half subarray after the mid element. Then we apply the algorithm again for the right half. | Else if x is smaller, the target x must lie in the left (lower) half. So we apply the algorithm for the left half. | .",
            "url": "https://ahadb63.github.io/ahadsblog/binary/2020/09/09/3.11-CB-lesson-copy.html",
            "relUrl": "/binary/2020/09/09/3.11-CB-lesson-copy.html",
            "date": " • Sep 9, 2020"
        }
        
    
  
    
        ,"post30": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . ModuleNotFoundError Traceback (most recent call last) /vscode/ahadsblog/_notebooks/2020-02-20-test.ipynb Cell 8 in &lt;cell line: 2&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2020-02-20-test.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; #collapse-hide -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2020-02-20-test.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; import pandas as pd &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2020-02-20-test.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; import altair as alt ModuleNotFoundError: No module named &#39;pandas&#39; . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://ahadb63.github.io/ahadsblog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post31": {
            "title": "Python Test",
            "content": "print(&quot;hi&quot;) . hi .",
            "url": "https://ahadb63.github.io/ahadsblog/kerneltest/2020/02/02/kernelworking2.html",
            "relUrl": "/kerneltest/2020/02/02/kernelworking2.html",
            "date": " • Feb 2, 2020"
        }
        
    
  
    
        ,"post32": {
            "title": "Shell Script Bash Test",
            "content": "echo helloo . helloo .",
            "url": "https://ahadb63.github.io/ahadsblog/kerneltest/2020/02/02/kernel2.html",
            "relUrl": "/kerneltest/2020/02/02/kernel2.html",
            "date": " • Feb 2, 2020"
        }
        
    
  
    
        ,"post33": {
            "title": "API Test",
            "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;Weather app&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot; /&gt; &lt;!-- Google Fonts --&gt; &lt;link rel=&quot;preconnect&quot; href=&quot;https://fonts.gstatic.com&quot;&gt; &lt;link href=&quot;https://fonts.googleapis.com/css2?family=Lora:ital,wght@0,700;1,600&amp;display=swap&quot; rel=&quot;stylesheet&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;img src=&quot;&quot; alt=&quot;&quot; srcset=&quot;&quot; id=&quot;weather-icon&quot;&gt; &lt;div id=&quot;location&quot;&gt;Unable to Fetch Weather&lt;/div&gt; &lt;div class=&quot;desc&quot;&gt;No Information Available.&lt;/div&gt; &lt;div class=&quot;weather&quot;&gt; &lt;div class=&quot;c&quot;&gt;Error&lt;/div&gt; &lt;div class=&quot;circle&quot;&gt;&lt;/div&gt; &lt;div class=&quot;f&quot;&gt;Error&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;info&quot;&gt; &lt;h4&gt;Sunrise: &lt;span class=&quot;sunrise&quot;&gt;No Information Available&lt;/span&gt;&lt;/h4&gt; &lt;h4&gt;Sunset: &lt;span class=&quot;sunset&quot;&gt;No Information Available&lt;/span&gt;&lt;/h4&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src=&quot;scripts.js&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . evalmachine.&lt;anonymous&gt;:1 &lt;!DOCTYPE html&gt; ^ SyntaxError: Unexpected token &lt; at createScript (vm.js:56:10) at Object.runInThisContext (vm.js:97:10) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) at process._tickCallback (internal/process/next_tick.js:104:9) . // OpenWeatherMap API. Do not share it publicly. const api = 6e1adc6d03e5d0ef28a7e75964140dd7; //Replace with your API const iconImg = document.getElementById(&#39;weather-icon&#39;); const loc = document.querySelector(&#39;#location&#39;); const tempC = document.querySelector(&#39;.c&#39;); const tempF = document.querySelector(&#39;.f&#39;); const desc = document.querySelector(&#39;.desc&#39;); const sunriseDOM = document.querySelector(&#39;.sunrise&#39;); const sunsetDOM = document.querySelector(&#39;.sunset&#39;); window.addEventListener(&#39;load&#39;, () =&gt; { let long; let lat; // Accesing Geolocation of User if (navigator.geolocation) { navigator.geolocation.getCurrentPosition((position) =&gt; { // Storing Longitude and Latitude in variables long = position.coords.longitude; lat = position.coords.latitude; const base = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&amp;lon=${long}&amp;appid=${api}&amp;units=metric`; // Using fetch to get data fetch(base) .then((response) =&gt; { return response.json(); }) .then((data) =&gt; { const { temp, feels_like } = data.main; const place = data.name; const { description, icon } = data.weather[0]; const { sunrise, sunset } = data.sys; const iconUrl = `http://openweathermap.org/img/wn/${icon}@2x.png`; const fahrenheit = (temp * 9) / 5 + 32; // Converting Epoch(Unix) time to GMT const sunriseGMT = new Date(sunrise * 1000); const sunsetGMT = new Date(sunset * 1000); // Interacting with DOM to show data iconImg.src = iconUrl; loc.textContent = `${place}`; desc.textContent = `${description}`; tempC.textContent = `${temp.toFixed(2)} °C`; tempF.textContent = `${fahrenheit.toFixed(2)} °F`; sunriseDOM.textContent = `${sunriseGMT.toLocaleDateString()}, ${sunriseGMT.toLocaleTimeString()}`; sunsetDOM.textContent = `${sunsetGMT.toLocaleDateString()}, ${sunsetGMT.toLocaleTimeString()}`; }); }); } }); . evalmachine.&lt;anonymous&gt;:2 const api = 6e1adc6d03e5d0ef28a7e75964140dd7; //Replace with your API ^^^ SyntaxError: Invalid or unexpected token at createScript (vm.js:56:10) at Object.runInThisContext (vm.js:97:10) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) at process._tickCallback (internal/process/next_tick.js:104:9) . * { margin: 0; padding: 0; box-sizing: border-box; } body { font-family: &#39;Lora&#39;, serif; } .container { height: 100vh; width: 100vw; display: flex; align-items: center; justify-content: center; flex-direction: column; background: rgb(251, 242, 133); background: radial-gradient( circle, rgba(251, 242, 133, 0.6334908963585435) 0%, rgba(224, 196, 91, 0.8407738095238095) 35%, rgba(230, 224, 113, 1) 100% ); } .weather { display: flex; flex-direction: row; align-items: center; margin: 15px 0; font-size: 1.5rem; } #location { font-size: 3rem; font-weight: 800; font-style: italic; } .desc { font-size: 1.25rem; text-transform: capitalize; } .circle { background-color: black; border-radius: 50px; height: 15px; width: 15px; margin: 0 15px; } . evalmachine.&lt;anonymous&gt;:1 * { ^ SyntaxError: Unexpected token * at createScript (vm.js:56:10) at Object.runInThisContext (vm.js:97:10) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) at process._tickCallback (internal/process/next_tick.js:104:9) .",
            "url": "https://ahadb63.github.io/ahadsblog/2020/02/02/apii.html",
            "relUrl": "/2020/02/02/apii.html",
            "date": " • Feb 2, 2020"
        }
        
    
  
    
        ,"post34": {
            "title": "Hockey API",
            "content": "import requests url = &quot;https://nhl-stats-and-live-data.p.rapidapi.com/standings&quot; querystring = {&quot;season&quot;:&quot;20032004&quot;,&quot;date&quot;:&quot;2018-01-09&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;3d86dd31a2mshca1f32e22e2396cp1f7302jsn610cf54ceeb6&quot;, &quot;X-RapidAPI-Host&quot;: &quot;nhl-stats-and-live-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) print(&quot;Standings&quot;) standing = response.json().get(&quot;id&quot;) for key, value in id.items(): print(key, value) . {&#34;copyright&#34;:&#34;NHL and the NHL Shield are registered trademarks of the National Hockey League. NHL and NHL team marks are the property of the NHL and its teams. u00a9 NHL 2022. All Rights Reserved.&#34;,&#34;records&#34;:[{&#34;conference&#34;:{&#34;id&#34;:5,&#34;link&#34;:&#34;/api/v1/conferences/5&#34;,&#34;name&#34;:&#34;Western&#34;},&#34;division&#34;:{&#34;abbreviation&#34;:&#34;C&#34;,&#34;id&#34;:16,&#34;link&#34;:&#34;/api/v1/divisions/16&#34;,&#34;name&#34;:&#34;Central&#34;,&#34;nameShort&#34;:&#34;CEN&#34;},&#34;league&#34;:{&#34;id&#34;:133,&#34;link&#34;:&#34;/api/v1/league/133&#34;,&#34;name&#34;:&#34;National Hockey League&#34;},&#34;season&#34;:&#34;20032004&#34;,&#34;standingsType&#34;:&#34;regularSeason&#34;,&#34;teamRecords&#34;:[{&#34;clinchIndicator&#34;:&#34;p&#34;,&#34;conferenceHomeRank&#34;:&#34;4&#34;,&#34;conferenceL10Rank&#34;:&#34;11&#34;,&#34;conferenceRank&#34;:&#34;1&#34;,&#34;conferenceRoadRank&#34;:&#34;1&#34;,&#34;divisionHomeRank&#34;:&#34;3&#34;,&#34;divisionL10Rank&#34;:&#34;4&#34;,&#34;divisionRank&#34;:&#34;1&#34;,&#34;divisionRoadRank&#34;:&#34;1&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:211,&#34;goalsScored&#34;:267,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;7&#34;,&#34;leagueL10Rank&#34;:&#34;20&#34;,&#34;leagueRank&#34;:&#34;1&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:18,&#34;ot&#34;:11,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:53},&#34;leagueRoadRank&#34;:&#34;1&#34;,&#34;points&#34;:117,&#34;pointsPercentage&#34;:0.7134146341463414,&#34;ppConferenceRank&#34;:&#34;1&#34;,&#34;ppDivisionRank&#34;:&#34;1&#34;,&#34;ppLeagueRank&#34;:&#34;1&#34;,&#34;row&#34;:47,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W2&#34;,&#34;streakNumber&#34;:2,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:18,&#34;link&#34;:&#34;/api/v1/teams/18&#34;,&#34;name&#34;:&#34;Nashville Predators&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;1&#34;,&#34;conferenceL10Rank&#34;:&#34;1&#34;,&#34;conferenceRank&#34;:&#34;2&#34;,&#34;conferenceRoadRank&#34;:&#34;4&#34;,&#34;divisionHomeRank&#34;:&#34;1&#34;,&#34;divisionL10Rank&#34;:&#34;1&#34;,&#34;divisionRank&#34;:&#34;2&#34;,&#34;divisionRoadRank&#34;:&#34;2&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:218,&#34;goalsScored&#34;:277,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;1&#34;,&#34;leagueL10Rank&#34;:&#34;1&#34;,&#34;leagueRank&#34;:&#34;2&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:20,&#34;ot&#34;:10,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:52},&#34;leagueRoadRank&#34;:&#34;6&#34;,&#34;points&#34;:114,&#34;pointsPercentage&#34;:0.6951219512195121,&#34;ppConferenceRank&#34;:&#34;2&#34;,&#34;ppDivisionRank&#34;:&#34;2&#34;,&#34;ppLeagueRank&#34;:&#34;2&#34;,&#34;row&#34;:48,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W5&#34;,&#34;streakNumber&#34;:5,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:52,&#34;link&#34;:&#34;/api/v1/teams/52&#34;,&#34;name&#34;:&#34;Winnipeg Jets&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;2&#34;,&#34;conferenceL10Rank&#34;:&#34;5&#34;,&#34;conferenceRank&#34;:&#34;4&#34;,&#34;conferenceRoadRank&#34;:&#34;9&#34;,&#34;divisionHomeRank&#34;:&#34;2&#34;,&#34;divisionL10Rank&#34;:&#34;2&#34;,&#34;divisionRank&#34;:&#34;3&#34;,&#34;divisionRoadRank&#34;:&#34;4&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:232,&#34;goalsScored&#34;:253,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;3&#34;,&#34;leagueL10Rank&#34;:&#34;13&#34;,&#34;leagueRank&#34;:&#34;8&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:26,&#34;ot&#34;:11,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:45},&#34;leagueRoadRank&#34;:&#34;17&#34;,&#34;points&#34;:101,&#34;pointsPercentage&#34;:0.6158536585365854,&#34;ppConferenceRank&#34;:&#34;4&#34;,&#34;ppDivisionRank&#34;:&#34;3&#34;,&#34;ppLeagueRank&#34;:&#34;8&#34;,&#34;row&#34;:42,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:30,&#34;link&#34;:&#34;/api/v1/teams/30&#34;,&#34;name&#34;:&#34;Minnesota Wild&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;5&#34;,&#34;conferenceL10Rank&#34;:&#34;12&#34;,&#34;conferenceRank&#34;:&#34;8&#34;,&#34;conferenceRoadRank&#34;:&#34;11&#34;,&#34;divisionHomeRank&#34;:&#34;4&#34;,&#34;divisionL10Rank&#34;:&#34;5&#34;,&#34;divisionRank&#34;:&#34;4&#34;,&#34;divisionRoadRank&#34;:&#34;6&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:237,&#34;goalsScored&#34;:257,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;9&#34;,&#34;leagueL10Rank&#34;:&#34;24&#34;,&#34;leagueRank&#34;:&#34;17&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:30,&#34;ot&#34;:9,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:43},&#34;leagueRoadRank&#34;:&#34;22&#34;,&#34;points&#34;:95,&#34;pointsPercentage&#34;:0.5792682926829268,&#34;ppConferenceRank&#34;:&#34;8&#34;,&#34;ppDivisionRank&#34;:&#34;4&#34;,&#34;ppLeagueRank&#34;:&#34;17&#34;,&#34;row&#34;:41,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:21,&#34;link&#34;:&#34;/api/v1/teams/21&#34;,&#34;name&#34;:&#34;Colorado Avalanche&#34;},&#34;wildCardRank&#34;:&#34;2&#34;},{&#34;conferenceHomeRank&#34;:&#34;10&#34;,&#34;conferenceL10Rank&#34;:&#34;8&#34;,&#34;conferenceRank&#34;:&#34;9&#34;,&#34;conferenceRoadRank&#34;:&#34;6&#34;,&#34;divisionHomeRank&#34;:&#34;6&#34;,&#34;divisionL10Rank&#34;:&#34;3&#34;,&#34;divisionRank&#34;:&#34;5&#34;,&#34;divisionRoadRank&#34;:&#34;3&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:222,&#34;goalsScored&#34;:226,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;19&#34;,&#34;leagueL10Rank&#34;:&#34;17&#34;,&#34;leagueRank&#34;:&#34;18&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:32,&#34;ot&#34;:6,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:44},&#34;leagueRoadRank&#34;:&#34;11&#34;,&#34;points&#34;:94,&#34;pointsPercentage&#34;:0.573170731707317,&#34;ppConferenceRank&#34;:&#34;9&#34;,&#34;ppDivisionRank&#34;:&#34;5&#34;,&#34;ppLeagueRank&#34;:&#34;18&#34;,&#34;row&#34;:41,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:19,&#34;link&#34;:&#34;/api/v1/teams/19&#34;,&#34;name&#34;:&#34;St. Louis Blues&#34;},&#34;wildCardRank&#34;:&#34;3&#34;},{&#34;conferenceHomeRank&#34;:&#34;7&#34;,&#34;conferenceL10Rank&#34;:&#34;13&#34;,&#34;conferenceRank&#34;:&#34;10&#34;,&#34;conferenceRoadRank&#34;:&#34;10&#34;,&#34;divisionHomeRank&#34;:&#34;5&#34;,&#34;divisionL10Rank&#34;:&#34;6&#34;,&#34;divisionRank&#34;:&#34;6&#34;,&#34;divisionRoadRank&#34;:&#34;5&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:225,&#34;goalsScored&#34;:235,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;13&#34;,&#34;leagueL10Rank&#34;:&#34;25&#34;,&#34;leagueRank&#34;:&#34;19&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:32,&#34;ot&#34;:8,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:42},&#34;leagueRoadRank&#34;:&#34;21&#34;,&#34;points&#34;:92,&#34;pointsPercentage&#34;:0.5609756097560976,&#34;ppConferenceRank&#34;:&#34;10&#34;,&#34;ppDivisionRank&#34;:&#34;6&#34;,&#34;ppLeagueRank&#34;:&#34;19&#34;,&#34;row&#34;:38,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:25,&#34;link&#34;:&#34;/api/v1/teams/25&#34;,&#34;name&#34;:&#34;Dallas Stars&#34;},&#34;wildCardRank&#34;:&#34;4&#34;},{&#34;conferenceHomeRank&#34;:&#34;12&#34;,&#34;conferenceL10Rank&#34;:&#34;14&#34;,&#34;conferenceRank&#34;:&#34;13&#34;,&#34;conferenceRoadRank&#34;:&#34;13&#34;,&#34;divisionHomeRank&#34;:&#34;7&#34;,&#34;divisionL10Rank&#34;:&#34;7&#34;,&#34;divisionRank&#34;:&#34;7&#34;,&#34;divisionRoadRank&#34;:&#34;7&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:256,&#34;goalsScored&#34;:229,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;25&#34;,&#34;leagueL10Rank&#34;:&#34;26&#34;,&#34;leagueRank&#34;:&#34;25&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:39,&#34;ot&#34;:10,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:33},&#34;leagueRoadRank&#34;:&#34;24&#34;,&#34;points&#34;:76,&#34;pointsPercentage&#34;:0.4634146341463415,&#34;ppConferenceRank&#34;:&#34;13&#34;,&#34;ppDivisionRank&#34;:&#34;7&#34;,&#34;ppLeagueRank&#34;:&#34;25&#34;,&#34;row&#34;:32,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L2&#34;,&#34;streakNumber&#34;:2,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:16,&#34;link&#34;:&#34;/api/v1/teams/16&#34;,&#34;name&#34;:&#34;Chicago Blackhawks&#34;},&#34;wildCardRank&#34;:&#34;7&#34;}]},{&#34;conference&#34;:{&#34;id&#34;:6,&#34;link&#34;:&#34;/api/v1/conferences/6&#34;,&#34;name&#34;:&#34;Eastern&#34;},&#34;division&#34;:{&#34;abbreviation&#34;:&#34;A&#34;,&#34;id&#34;:17,&#34;link&#34;:&#34;/api/v1/divisions/17&#34;,&#34;name&#34;:&#34;Atlantic&#34;,&#34;nameShort&#34;:&#34;ATL&#34;},&#34;league&#34;:{&#34;id&#34;:133,&#34;link&#34;:&#34;/api/v1/league/133&#34;,&#34;name&#34;:&#34;National Hockey League&#34;},&#34;season&#34;:&#34;20032004&#34;,&#34;standingsType&#34;:&#34;regularSeason&#34;,&#34;teamRecords&#34;:[{&#34;clinchIndicator&#34;:&#34;z&#34;,&#34;conferenceHomeRank&#34;:&#34;3&#34;,&#34;conferenceL10Rank&#34;:&#34;9&#34;,&#34;conferenceRank&#34;:&#34;1&#34;,&#34;conferenceRoadRank&#34;:&#34;1&#34;,&#34;divisionHomeRank&#34;:&#34;2&#34;,&#34;divisionL10Rank&#34;:&#34;4&#34;,&#34;divisionRank&#34;:&#34;1&#34;,&#34;divisionRoadRank&#34;:&#34;1&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:236,&#34;goalsScored&#34;:296,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;6&#34;,&#34;leagueL10Rank&#34;:&#34;16&#34;,&#34;leagueRank&#34;:&#34;3&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:23,&#34;ot&#34;:5,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:54},&#34;leagueRoadRank&#34;:&#34;2&#34;,&#34;points&#34;:113,&#34;pointsPercentage&#34;:0.6890243902439024,&#34;ppConferenceRank&#34;:&#34;1&#34;,&#34;ppDivisionRank&#34;:&#34;1&#34;,&#34;ppLeagueRank&#34;:&#34;3&#34;,&#34;row&#34;:48,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;OT1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;ot&#34;},&#34;team&#34;:{&#34;id&#34;:14,&#34;link&#34;:&#34;/api/v1/teams/14&#34;,&#34;name&#34;:&#34;Tampa Bay Lightning&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;2&#34;,&#34;conferenceL10Rank&#34;:&#34;8&#34;,&#34;conferenceRank&#34;:&#34;2&#34;,&#34;conferenceRoadRank&#34;:&#34;2&#34;,&#34;divisionHomeRank&#34;:&#34;1&#34;,&#34;divisionL10Rank&#34;:&#34;3&#34;,&#34;divisionRank&#34;:&#34;2&#34;,&#34;divisionRoadRank&#34;:&#34;2&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:214,&#34;goalsScored&#34;:270,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;4&#34;,&#34;leagueL10Rank&#34;:&#34;12&#34;,&#34;leagueRank&#34;:&#34;4&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:20,&#34;ot&#34;:12,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:50},&#34;leagueRoadRank&#34;:&#34;3&#34;,&#34;points&#34;:112,&#34;pointsPercentage&#34;:0.6829268292682927,&#34;ppConferenceRank&#34;:&#34;2&#34;,&#34;ppDivisionRank&#34;:&#34;2&#34;,&#34;ppLeagueRank&#34;:&#34;4&#34;,&#34;row&#34;:47,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:6,&#34;link&#34;:&#34;/api/v1/teams/6&#34;,&#34;name&#34;:&#34;Boston Bruins&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;4&#34;,&#34;conferenceL10Rank&#34;:&#34;7&#34;,&#34;conferenceRank&#34;:&#34;4&#34;,&#34;conferenceRoadRank&#34;:&#34;6&#34;,&#34;divisionHomeRank&#34;:&#34;3&#34;,&#34;divisionL10Rank&#34;:&#34;2&#34;,&#34;divisionRank&#34;:&#34;3&#34;,&#34;divisionRoadRank&#34;:&#34;3&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:232,&#34;goalsScored&#34;:277,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;8&#34;,&#34;leagueL10Rank&#34;:&#34;11&#34;,&#34;leagueRank&#34;:&#34;7&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:26,&#34;ot&#34;:7,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:49},&#34;leagueRoadRank&#34;:&#34;13&#34;,&#34;points&#34;:105,&#34;pointsPercentage&#34;:0.6402439024390244,&#34;ppConferenceRank&#34;:&#34;4&#34;,&#34;ppDivisionRank&#34;:&#34;3&#34;,&#34;ppLeagueRank&#34;:&#34;7&#34;,&#34;row&#34;:42,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:10,&#34;link&#34;:&#34;/api/v1/teams/10&#34;,&#34;name&#34;:&#34;Toronto Maple Leafs&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;conferenceHomeRank&#34;:&#34;6&#34;,&#34;conferenceL10Rank&#34;:&#34;2&#34;,&#34;conferenceRank&#34;:&#34;9&#34;,&#34;conferenceRoadRank&#34;:&#34;8&#34;,&#34;divisionHomeRank&#34;:&#34;4&#34;,&#34;divisionL10Rank&#34;:&#34;1&#34;,&#34;divisionRank&#34;:&#34;4&#34;,&#34;divisionRoadRank&#34;:&#34;4&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:246,&#34;goalsScored&#34;:248,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;12&#34;,&#34;leagueL10Rank&#34;:&#34;4&#34;,&#34;leagueRank&#34;:&#34;16&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:30,&#34;ot&#34;:8,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:44},&#34;leagueRoadRank&#34;:&#34;16&#34;,&#34;points&#34;:96,&#34;pointsPercentage&#34;:0.5853658536585366,&#34;ppConferenceRank&#34;:&#34;9&#34;,&#34;ppDivisionRank&#34;:&#34;4&#34;,&#34;ppLeagueRank&#34;:&#34;16&#34;,&#34;row&#34;:41,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W5&#34;,&#34;streakNumber&#34;:5,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:13,&#34;link&#34;:&#34;/api/v1/teams/13&#34;,&#34;name&#34;:&#34;Florida Panthers&#34;},&#34;wildCardRank&#34;:&#34;3&#34;},{&#34;conferenceHomeRank&#34;:&#34;14&#34;,&#34;conferenceL10Rank&#34;:&#34;12&#34;,&#34;conferenceRank&#34;:&#34;13&#34;,&#34;conferenceRoadRank&#34;:&#34;13&#34;,&#34;divisionHomeRank&#34;:&#34;6&#34;,&#34;divisionL10Rank&#34;:&#34;5&#34;,&#34;divisionRank&#34;:&#34;5&#34;,&#34;divisionRoadRank&#34;:&#34;6&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:255,&#34;goalsScored&#34;:217,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;26&#34;,&#34;leagueL10Rank&#34;:&#34;23&#34;,&#34;leagueRank&#34;:&#34;27&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:39,&#34;ot&#34;:13,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:30},&#34;leagueRoadRank&#34;:&#34;28&#34;,&#34;points&#34;:73,&#34;pointsPercentage&#34;:0.4451219512195122,&#34;ppConferenceRank&#34;:&#34;13&#34;,&#34;ppDivisionRank&#34;:&#34;5&#34;,&#34;ppLeagueRank&#34;:&#34;27&#34;,&#34;row&#34;:25,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;OT1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;ot&#34;},&#34;team&#34;:{&#34;id&#34;:17,&#34;link&#34;:&#34;/api/v1/teams/17&#34;,&#34;name&#34;:&#34;Detroit Red Wings&#34;},&#34;wildCardRank&#34;:&#34;7&#34;},{&#34;conferenceHomeRank&#34;:&#34;11&#34;,&#34;conferenceL10Rank&#34;:&#34;13&#34;,&#34;conferenceRank&#34;:&#34;14&#34;,&#34;conferenceRoadRank&#34;:&#34;16&#34;,&#34;divisionHomeRank&#34;:&#34;5&#34;,&#34;divisionL10Rank&#34;:&#34;6&#34;,&#34;divisionRank&#34;:&#34;6&#34;,&#34;divisionRoadRank&#34;:&#34;8&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:264,&#34;goalsScored&#34;:209,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;21&#34;,&#34;leagueL10Rank&#34;:&#34;27&#34;,&#34;leagueRank&#34;:&#34;28&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:40,&#34;ot&#34;:13,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:29},&#34;leagueRoadRank&#34;:&#34;31&#34;,&#34;points&#34;:71,&#34;pointsPercentage&#34;:0.4329268292682927,&#34;ppConferenceRank&#34;:&#34;14&#34;,&#34;ppDivisionRank&#34;:&#34;6&#34;,&#34;ppLeagueRank&#34;:&#34;28&#34;,&#34;row&#34;:27,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:8,&#34;link&#34;:&#34;/api/v1/teams/8&#34;,&#34;name&#34;:&#34;Montr u00e9al Canadiens&#34;},&#34;wildCardRank&#34;:&#34;8&#34;},{&#34;conferenceHomeRank&#34;:&#34;15&#34;,&#34;conferenceL10Rank&#34;:&#34;16&#34;,&#34;conferenceRank&#34;:&#34;15&#34;,&#34;conferenceRoadRank&#34;:&#34;15&#34;,&#34;divisionHomeRank&#34;:&#34;7&#34;,&#34;divisionL10Rank&#34;:&#34;8&#34;,&#34;divisionRank&#34;:&#34;7&#34;,&#34;divisionRoadRank&#34;:&#34;7&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:291,&#34;goalsScored&#34;:221,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;29&#34;,&#34;leagueL10Rank&#34;:&#34;30&#34;,&#34;leagueRank&#34;:&#34;30&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:43,&#34;ot&#34;:11,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:28},&#34;leagueRoadRank&#34;:&#34;30&#34;,&#34;points&#34;:67,&#34;pointsPercentage&#34;:0.40853658536585363,&#34;ppConferenceRank&#34;:&#34;15&#34;,&#34;ppDivisionRank&#34;:&#34;7&#34;,&#34;ppLeagueRank&#34;:&#34;30&#34;,&#34;row&#34;:26,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L2&#34;,&#34;streakNumber&#34;:2,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:9,&#34;link&#34;:&#34;/api/v1/teams/9&#34;,&#34;name&#34;:&#34;Ottawa Senators&#34;},&#34;wildCardRank&#34;:&#34;9&#34;},{&#34;conferenceHomeRank&#34;:&#34;16&#34;,&#34;conferenceL10Rank&#34;:&#34;15&#34;,&#34;conferenceRank&#34;:&#34;16&#34;,&#34;conferenceRoadRank&#34;:&#34;12&#34;,&#34;divisionHomeRank&#34;:&#34;8&#34;,&#34;divisionL10Rank&#34;:&#34;7&#34;,&#34;divisionRank&#34;:&#34;8&#34;,&#34;divisionRoadRank&#34;:&#34;5&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:280,&#34;goalsScored&#34;:199,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;31&#34;,&#34;leagueL10Rank&#34;:&#34;29&#34;,&#34;leagueRank&#34;:&#34;31&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:45,&#34;ot&#34;:12,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:25},&#34;leagueRoadRank&#34;:&#34;25&#34;,&#34;points&#34;:62,&#34;pointsPercentage&#34;:0.3780487804878049,&#34;ppConferenceRank&#34;:&#34;16&#34;,&#34;ppDivisionRank&#34;:&#34;8&#34;,&#34;ppLeagueRank&#34;:&#34;31&#34;,&#34;row&#34;:24,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L4&#34;,&#34;streakNumber&#34;:4,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:7,&#34;link&#34;:&#34;/api/v1/teams/7&#34;,&#34;name&#34;:&#34;Buffalo Sabres&#34;},&#34;wildCardRank&#34;:&#34;10&#34;}]},{&#34;conference&#34;:{&#34;id&#34;:5,&#34;link&#34;:&#34;/api/v1/conferences/5&#34;,&#34;name&#34;:&#34;Western&#34;},&#34;division&#34;:{&#34;abbreviation&#34;:&#34;P&#34;,&#34;id&#34;:15,&#34;link&#34;:&#34;/api/v1/divisions/15&#34;,&#34;name&#34;:&#34;Pacific&#34;,&#34;nameShort&#34;:&#34;PAC&#34;},&#34;league&#34;:{&#34;id&#34;:133,&#34;link&#34;:&#34;/api/v1/league/133&#34;,&#34;name&#34;:&#34;National Hockey League&#34;},&#34;season&#34;:&#34;20032004&#34;,&#34;standingsType&#34;:&#34;regularSeason&#34;,&#34;teamRecords&#34;:[{&#34;clinchIndicator&#34;:&#34;y&#34;,&#34;conferenceHomeRank&#34;:&#34;3&#34;,&#34;conferenceL10Rank&#34;:&#34;6&#34;,&#34;conferenceRank&#34;:&#34;3&#34;,&#34;conferenceRoadRank&#34;:&#34;3&#34;,&#34;divisionHomeRank&#34;:&#34;1&#34;,&#34;divisionL10Rank&#34;:&#34;4&#34;,&#34;divisionRank&#34;:&#34;1&#34;,&#34;divisionRoadRank&#34;:&#34;2&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:228,&#34;goalsScored&#34;:272,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;5&#34;,&#34;leagueL10Rank&#34;:&#34;14&#34;,&#34;leagueRank&#34;:&#34;5&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:24,&#34;ot&#34;:7,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:51},&#34;leagueRoadRank&#34;:&#34;5&#34;,&#34;points&#34;:109,&#34;pointsPercentage&#34;:0.6646341463414634,&#34;ppConferenceRank&#34;:&#34;3&#34;,&#34;ppDivisionRank&#34;:&#34;1&#34;,&#34;ppLeagueRank&#34;:&#34;5&#34;,&#34;row&#34;:47,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L2&#34;,&#34;streakNumber&#34;:2,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:54,&#34;link&#34;:&#34;/api/v1/teams/54&#34;,&#34;name&#34;:&#34;Vegas Golden Knights&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;6&#34;,&#34;conferenceL10Rank&#34;:&#34;2&#34;,&#34;conferenceRank&#34;:&#34;5&#34;,&#34;conferenceRoadRank&#34;:&#34;8&#34;,&#34;divisionHomeRank&#34;:&#34;2&#34;,&#34;divisionL10Rank&#34;:&#34;1&#34;,&#34;divisionRank&#34;:&#34;2&#34;,&#34;divisionRoadRank&#34;:&#34;5&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:216,&#34;goalsScored&#34;:235,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;11&#34;,&#34;leagueL10Rank&#34;:&#34;2&#34;,&#34;leagueRank&#34;:&#34;9&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:25,&#34;ot&#34;:13,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:44},&#34;leagueRoadRank&#34;:&#34;14&#34;,&#34;points&#34;:101,&#34;pointsPercentage&#34;:0.6158536585365854,&#34;ppConferenceRank&#34;:&#34;5&#34;,&#34;ppDivisionRank&#34;:&#34;2&#34;,&#34;ppLeagueRank&#34;:&#34;9&#34;,&#34;row&#34;:40,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W5&#34;,&#34;streakNumber&#34;:5,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:24,&#34;link&#34;:&#34;/api/v1/teams/24&#34;,&#34;name&#34;:&#34;Anaheim Ducks&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;8&#34;,&#34;conferenceL10Rank&#34;:&#34;9&#34;,&#34;conferenceRank&#34;:&#34;6&#34;,&#34;conferenceRoadRank&#34;:&#34;5&#34;,&#34;divisionHomeRank&#34;:&#34;3&#34;,&#34;divisionL10Rank&#34;:&#34;6&#34;,&#34;divisionRank&#34;:&#34;3&#34;,&#34;divisionRoadRank&#34;:&#34;3&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:229,&#34;goalsScored&#34;:252,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;15&#34;,&#34;leagueL10Rank&#34;:&#34;18&#34;,&#34;leagueRank&#34;:&#34;11&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:27,&#34;ot&#34;:10,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:45},&#34;leagueRoadRank&#34;:&#34;10&#34;,&#34;points&#34;:100,&#34;pointsPercentage&#34;:0.6097560975609756,&#34;ppConferenceRank&#34;:&#34;6&#34;,&#34;ppDivisionRank&#34;:&#34;3&#34;,&#34;ppLeagueRank&#34;:&#34;10&#34;,&#34;row&#34;:40,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:28,&#34;link&#34;:&#34;/api/v1/teams/28&#34;,&#34;name&#34;:&#34;San Jose Sharks&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;9&#34;,&#34;conferenceL10Rank&#34;:&#34;3&#34;,&#34;conferenceRank&#34;:&#34;7&#34;,&#34;conferenceRoadRank&#34;:&#34;2&#34;,&#34;divisionHomeRank&#34;:&#34;4&#34;,&#34;divisionL10Rank&#34;:&#34;2&#34;,&#34;divisionRank&#34;:&#34;4&#34;,&#34;divisionRoadRank&#34;:&#34;1&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:203,&#34;goalsScored&#34;:239,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;18&#34;,&#34;leagueL10Rank&#34;:&#34;8&#34;,&#34;leagueRank&#34;:&#34;12&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:29,&#34;ot&#34;:8,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:45},&#34;leagueRoadRank&#34;:&#34;4&#34;,&#34;points&#34;:98,&#34;pointsPercentage&#34;:0.5975609756097561,&#34;ppConferenceRank&#34;:&#34;7&#34;,&#34;ppDivisionRank&#34;:&#34;4&#34;,&#34;ppLeagueRank&#34;:&#34;12&#34;,&#34;row&#34;:43,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:26,&#34;link&#34;:&#34;/api/v1/teams/26&#34;,&#34;name&#34;:&#34;Los Angeles Kings&#34;},&#34;wildCardRank&#34;:&#34;1&#34;},{&#34;conferenceHomeRank&#34;:&#34;14&#34;,&#34;conferenceL10Rank&#34;:&#34;15&#34;,&#34;conferenceRank&#34;:&#34;11&#34;,&#34;conferenceRoadRank&#34;:&#34;7&#34;,&#34;divisionHomeRank&#34;:&#34;7&#34;,&#34;divisionL10Rank&#34;:&#34;8&#34;,&#34;divisionRank&#34;:&#34;5&#34;,&#34;divisionRoadRank&#34;:&#34;4&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:248,&#34;goalsScored&#34;:218,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;28&#34;,&#34;leagueL10Rank&#34;:&#34;31&#34;,&#34;leagueRank&#34;:&#34;20&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:35,&#34;ot&#34;:10,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:37},&#34;leagueRoadRank&#34;:&#34;12&#34;,&#34;points&#34;:84,&#34;pointsPercentage&#34;:0.5121951219512195,&#34;ppConferenceRank&#34;:&#34;11&#34;,&#34;ppDivisionRank&#34;:&#34;5&#34;,&#34;ppLeagueRank&#34;:&#34;20&#34;,&#34;row&#34;:35,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:20,&#34;link&#34;:&#34;/api/v1/teams/20&#34;,&#34;name&#34;:&#34;Calgary Flames&#34;},&#34;wildCardRank&#34;:&#34;5&#34;},{&#34;conferenceHomeRank&#34;:&#34;11&#34;,&#34;conferenceL10Rank&#34;:&#34;10&#34;,&#34;conferenceRank&#34;:&#34;12&#34;,&#34;conferenceRoadRank&#34;:&#34;12&#34;,&#34;divisionHomeRank&#34;:&#34;5&#34;,&#34;divisionL10Rank&#34;:&#34;7&#34;,&#34;divisionRank&#34;:&#34;6&#34;,&#34;divisionRoadRank&#34;:&#34;6&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:263,&#34;goalsScored&#34;:234,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;24&#34;,&#34;leagueL10Rank&#34;:&#34;19&#34;,&#34;leagueRank&#34;:&#34;23&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:40,&#34;ot&#34;:6,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:36},&#34;leagueRoadRank&#34;:&#34;23&#34;,&#34;points&#34;:78,&#34;pointsPercentage&#34;:0.47560975609756095,&#34;ppConferenceRank&#34;:&#34;12&#34;,&#34;ppDivisionRank&#34;:&#34;6&#34;,&#34;ppLeagueRank&#34;:&#34;23&#34;,&#34;row&#34;:31,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W2&#34;,&#34;streakNumber&#34;:2,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:22,&#34;link&#34;:&#34;/api/v1/teams/22&#34;,&#34;name&#34;:&#34;Edmonton Oilers&#34;},&#34;wildCardRank&#34;:&#34;6&#34;},{&#34;conferenceHomeRank&#34;:&#34;13&#34;,&#34;conferenceL10Rank&#34;:&#34;4&#34;,&#34;conferenceRank&#34;:&#34;14&#34;,&#34;conferenceRoadRank&#34;:&#34;14&#34;,&#34;divisionHomeRank&#34;:&#34;6&#34;,&#34;divisionL10Rank&#34;:&#34;3&#34;,&#34;divisionRank&#34;:&#34;7&#34;,&#34;divisionRoadRank&#34;:&#34;7&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:264,&#34;goalsScored&#34;:218,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;27&#34;,&#34;leagueL10Rank&#34;:&#34;9&#34;,&#34;leagueRank&#34;:&#34;26&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:40,&#34;ot&#34;:11,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:31},&#34;leagueRoadRank&#34;:&#34;26&#34;,&#34;points&#34;:73,&#34;pointsPercentage&#34;:0.4451219512195122,&#34;ppConferenceRank&#34;:&#34;14&#34;,&#34;ppDivisionRank&#34;:&#34;7&#34;,&#34;ppLeagueRank&#34;:&#34;26&#34;,&#34;row&#34;:31,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;OT1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;ot&#34;},&#34;team&#34;:{&#34;id&#34;:23,&#34;link&#34;:&#34;/api/v1/teams/23&#34;,&#34;name&#34;:&#34;Vancouver Canucks&#34;},&#34;wildCardRank&#34;:&#34;8&#34;},{&#34;conferenceHomeRank&#34;:&#34;15&#34;,&#34;conferenceL10Rank&#34;:&#34;7&#34;,&#34;conferenceRank&#34;:&#34;15&#34;,&#34;conferenceRoadRank&#34;:&#34;15&#34;,&#34;divisionHomeRank&#34;:&#34;8&#34;,&#34;divisionL10Rank&#34;:&#34;5&#34;,&#34;divisionRank&#34;:&#34;8&#34;,&#34;divisionRoadRank&#34;:&#34;8&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:256,&#34;goalsScored&#34;:208,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;30&#34;,&#34;leagueL10Rank&#34;:&#34;15&#34;,&#34;leagueRank&#34;:&#34;29&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:41,&#34;ot&#34;:12,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:29},&#34;leagueRoadRank&#34;:&#34;27&#34;,&#34;points&#34;:70,&#34;pointsPercentage&#34;:0.4268292682926829,&#34;ppConferenceRank&#34;:&#34;15&#34;,&#34;ppDivisionRank&#34;:&#34;8&#34;,&#34;ppLeagueRank&#34;:&#34;29&#34;,&#34;row&#34;:27,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:53,&#34;link&#34;:&#34;/api/v1/teams/53&#34;,&#34;name&#34;:&#34;Arizona Coyotes&#34;},&#34;wildCardRank&#34;:&#34;9&#34;}]},{&#34;conference&#34;:{&#34;id&#34;:6,&#34;link&#34;:&#34;/api/v1/conferences/6&#34;,&#34;name&#34;:&#34;Eastern&#34;},&#34;division&#34;:{&#34;abbreviation&#34;:&#34;M&#34;,&#34;id&#34;:18,&#34;link&#34;:&#34;/api/v1/divisions/18&#34;,&#34;name&#34;:&#34;Metropolitan&#34;,&#34;nameShort&#34;:&#34;Metro&#34;},&#34;league&#34;:{&#34;id&#34;:133,&#34;link&#34;:&#34;/api/v1/league/133&#34;,&#34;name&#34;:&#34;National Hockey League&#34;},&#34;season&#34;:&#34;20032004&#34;,&#34;standingsType&#34;:&#34;regularSeason&#34;,&#34;teamRecords&#34;:[{&#34;clinchIndicator&#34;:&#34;y&#34;,&#34;conferenceHomeRank&#34;:&#34;5&#34;,&#34;conferenceL10Rank&#34;:&#34;1&#34;,&#34;conferenceRank&#34;:&#34;3&#34;,&#34;conferenceRoadRank&#34;:&#34;4&#34;,&#34;divisionHomeRank&#34;:&#34;2&#34;,&#34;divisionL10Rank&#34;:&#34;1&#34;,&#34;divisionRank&#34;:&#34;1&#34;,&#34;divisionRoadRank&#34;:&#34;2&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:239,&#34;goalsScored&#34;:259,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;10&#34;,&#34;leagueL10Rank&#34;:&#34;3&#34;,&#34;leagueRank&#34;:&#34;6&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:26,&#34;ot&#34;:7,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:49},&#34;leagueRoadRank&#34;:&#34;8&#34;,&#34;points&#34;:105,&#34;pointsPercentage&#34;:0.6402439024390244,&#34;ppConferenceRank&#34;:&#34;3&#34;,&#34;ppDivisionRank&#34;:&#34;1&#34;,&#34;ppLeagueRank&#34;:&#34;6&#34;,&#34;row&#34;:46,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:15,&#34;link&#34;:&#34;/api/v1/teams/15&#34;,&#34;name&#34;:&#34;Washington Capitals&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;1&#34;,&#34;conferenceL10Rank&#34;:&#34;6&#34;,&#34;conferenceRank&#34;:&#34;5&#34;,&#34;conferenceRoadRank&#34;:&#34;10&#34;,&#34;divisionHomeRank&#34;:&#34;1&#34;,&#34;divisionL10Rank&#34;:&#34;5&#34;,&#34;divisionRank&#34;:&#34;2&#34;,&#34;divisionRoadRank&#34;:&#34;6&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:250,&#34;goalsScored&#34;:272,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;2&#34;,&#34;leagueL10Rank&#34;:&#34;10&#34;,&#34;leagueRank&#34;:&#34;10&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:29,&#34;ot&#34;:6,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:47},&#34;leagueRoadRank&#34;:&#34;19&#34;,&#34;points&#34;:100,&#34;pointsPercentage&#34;:0.6097560975609756,&#34;ppConferenceRank&#34;:&#34;5&#34;,&#34;ppDivisionRank&#34;:&#34;2&#34;,&#34;ppLeagueRank&#34;:&#34;11&#34;,&#34;row&#34;:45,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W2&#34;,&#34;streakNumber&#34;:2,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:5,&#34;link&#34;:&#34;/api/v1/teams/5&#34;,&#34;name&#34;:&#34;Pittsburgh Penguins&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;8&#34;,&#34;conferenceL10Rank&#34;:&#34;4&#34;,&#34;conferenceRank&#34;:&#34;6&#34;,&#34;conferenceRoadRank&#34;:&#34;3&#34;,&#34;divisionHomeRank&#34;:&#34;4&#34;,&#34;divisionL10Rank&#34;:&#34;3&#34;,&#34;divisionRank&#34;:&#34;3&#34;,&#34;divisionRoadRank&#34;:&#34;1&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:243,&#34;goalsScored&#34;:251,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;16&#34;,&#34;leagueL10Rank&#34;:&#34;6&#34;,&#34;leagueRank&#34;:&#34;13&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:26,&#34;ot&#34;:14,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:42},&#34;leagueRoadRank&#34;:&#34;7&#34;,&#34;points&#34;:98,&#34;pointsPercentage&#34;:0.5975609756097561,&#34;ppConferenceRank&#34;:&#34;6&#34;,&#34;ppDivisionRank&#34;:&#34;3&#34;,&#34;ppLeagueRank&#34;:&#34;13&#34;,&#34;row&#34;:40,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W2&#34;,&#34;streakNumber&#34;:2,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:4,&#34;link&#34;:&#34;/api/v1/teams/4&#34;,&#34;name&#34;:&#34;Philadelphia Flyers&#34;},&#34;wildCardRank&#34;:&#34;0&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;7&#34;,&#34;conferenceL10Rank&#34;:&#34;5&#34;,&#34;conferenceRank&#34;:&#34;7&#34;,&#34;conferenceRoadRank&#34;:&#34;7&#34;,&#34;divisionHomeRank&#34;:&#34;3&#34;,&#34;divisionL10Rank&#34;:&#34;4&#34;,&#34;divisionRank&#34;:&#34;4&#34;,&#34;divisionRoadRank&#34;:&#34;4&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:230,&#34;goalsScored&#34;:242,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;14&#34;,&#34;leagueL10Rank&#34;:&#34;7&#34;,&#34;leagueRank&#34;:&#34;14&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:30,&#34;ot&#34;:7,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:45},&#34;leagueRoadRank&#34;:&#34;15&#34;,&#34;points&#34;:97,&#34;pointsPercentage&#34;:0.5914634146341463,&#34;ppConferenceRank&#34;:&#34;8&#34;,&#34;ppDivisionRank&#34;:&#34;5&#34;,&#34;ppLeagueRank&#34;:&#34;15&#34;,&#34;row&#34;:39,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:29,&#34;link&#34;:&#34;/api/v1/teams/29&#34;,&#34;name&#34;:&#34;Columbus Blue Jackets&#34;},&#34;wildCardRank&#34;:&#34;1&#34;},{&#34;clinchIndicator&#34;:&#34;x&#34;,&#34;conferenceHomeRank&#34;:&#34;9&#34;,&#34;conferenceL10Rank&#34;:&#34;3&#34;,&#34;conferenceRank&#34;:&#34;8&#34;,&#34;conferenceRoadRank&#34;:&#34;5&#34;,&#34;divisionHomeRank&#34;:&#34;5&#34;,&#34;divisionL10Rank&#34;:&#34;2&#34;,&#34;divisionRank&#34;:&#34;5&#34;,&#34;divisionRoadRank&#34;:&#34;3&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:244,&#34;goalsScored&#34;:248,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;17&#34;,&#34;leagueL10Rank&#34;:&#34;5&#34;,&#34;leagueRank&#34;:&#34;15&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:29,&#34;ot&#34;:9,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:44},&#34;leagueRoadRank&#34;:&#34;9&#34;,&#34;points&#34;:97,&#34;pointsPercentage&#34;:0.5914634146341463,&#34;ppConferenceRank&#34;:&#34;7&#34;,&#34;ppDivisionRank&#34;:&#34;4&#34;,&#34;ppLeagueRank&#34;:&#34;14&#34;,&#34;row&#34;:39,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:1,&#34;link&#34;:&#34;/api/v1/teams/1&#34;,&#34;name&#34;:&#34;New Jersey Devils&#34;},&#34;wildCardRank&#34;:&#34;2&#34;},{&#34;conferenceHomeRank&#34;:&#34;12&#34;,&#34;conferenceL10Rank&#34;:&#34;10&#34;,&#34;conferenceRank&#34;:&#34;10&#34;,&#34;conferenceRoadRank&#34;:&#34;9&#34;,&#34;divisionHomeRank&#34;:&#34;7&#34;,&#34;divisionL10Rank&#34;:&#34;6&#34;,&#34;divisionRank&#34;:&#34;6&#34;,&#34;divisionRoadRank&#34;:&#34;5&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:256,&#34;goalsScored&#34;:228,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;22&#34;,&#34;leagueL10Rank&#34;:&#34;21&#34;,&#34;leagueRank&#34;:&#34;21&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:35,&#34;ot&#34;:11,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:36},&#34;leagueRoadRank&#34;:&#34;18&#34;,&#34;points&#34;:83,&#34;pointsPercentage&#34;:0.5060975609756098,&#34;ppConferenceRank&#34;:&#34;10&#34;,&#34;ppDivisionRank&#34;:&#34;6&#34;,&#34;ppLeagueRank&#34;:&#34;21&#34;,&#34;row&#34;:33,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W1&#34;,&#34;streakNumber&#34;:1,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:12,&#34;link&#34;:&#34;/api/v1/teams/12&#34;,&#34;name&#34;:&#34;Carolina Hurricanes&#34;},&#34;wildCardRank&#34;:&#34;4&#34;},{&#34;conferenceHomeRank&#34;:&#34;13&#34;,&#34;conferenceL10Rank&#34;:&#34;11&#34;,&#34;conferenceRank&#34;:&#34;11&#34;,&#34;conferenceRoadRank&#34;:&#34;11&#34;,&#34;divisionHomeRank&#34;:&#34;8&#34;,&#34;divisionL10Rank&#34;:&#34;7&#34;,&#34;divisionRank&#34;:&#34;7&#34;,&#34;divisionRoadRank&#34;:&#34;7&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:296,&#34;goalsScored&#34;:264,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;23&#34;,&#34;leagueL10Rank&#34;:&#34;22&#34;,&#34;leagueRank&#34;:&#34;22&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:37,&#34;ot&#34;:10,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:35},&#34;leagueRoadRank&#34;:&#34;20&#34;,&#34;points&#34;:80,&#34;pointsPercentage&#34;:0.4878048780487805,&#34;ppConferenceRank&#34;:&#34;11&#34;,&#34;ppDivisionRank&#34;:&#34;7&#34;,&#34;ppLeagueRank&#34;:&#34;22&#34;,&#34;row&#34;:32,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;W3&#34;,&#34;streakNumber&#34;:3,&#34;streakType&#34;:&#34;wins&#34;},&#34;team&#34;:{&#34;id&#34;:2,&#34;link&#34;:&#34;/api/v1/teams/2&#34;,&#34;name&#34;:&#34;New York Islanders&#34;},&#34;wildCardRank&#34;:&#34;5&#34;},{&#34;conferenceHomeRank&#34;:&#34;10&#34;,&#34;conferenceL10Rank&#34;:&#34;14&#34;,&#34;conferenceRank&#34;:&#34;12&#34;,&#34;conferenceRoadRank&#34;:&#34;14&#34;,&#34;divisionHomeRank&#34;:&#34;6&#34;,&#34;divisionL10Rank&#34;:&#34;8&#34;,&#34;divisionRank&#34;:&#34;8&#34;,&#34;divisionRoadRank&#34;:&#34;8&#34;,&#34;gamesPlayed&#34;:82,&#34;goalsAgainst&#34;:268,&#34;goalsScored&#34;:231,&#34;lastUpdated&#34;:&#34;2022-10-08T17:22:24Z&#34;,&#34;leagueHomeRank&#34;:&#34;20&#34;,&#34;leagueL10Rank&#34;:&#34;28&#34;,&#34;leagueRank&#34;:&#34;24&#34;,&#34;leagueRecord&#34;:{&#34;losses&#34;:39,&#34;ot&#34;:9,&#34;type&#34;:&#34;league&#34;,&#34;wins&#34;:34},&#34;leagueRoadRank&#34;:&#34;29&#34;,&#34;points&#34;:77,&#34;pointsPercentage&#34;:0.4695121951219512,&#34;ppConferenceRank&#34;:&#34;12&#34;,&#34;ppDivisionRank&#34;:&#34;8&#34;,&#34;ppLeagueRank&#34;:&#34;24&#34;,&#34;row&#34;:31,&#34;streak&#34;:{&#34;streakCode&#34;:&#34;L3&#34;,&#34;streakNumber&#34;:3,&#34;streakType&#34;:&#34;losses&#34;},&#34;team&#34;:{&#34;id&#34;:3,&#34;link&#34;:&#34;/api/v1/teams/3&#34;,&#34;name&#34;:&#34;New York Rangers&#34;},&#34;wildCardRank&#34;:&#34;6&#34;}]}]} Standings . AttributeError Traceback (most recent call last) /vscode/ahadsblog/_notebooks/2020-02-02-api2.ipynb Cell 1 in &lt;cell line: 18&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2020-02-02-api2.ipynb#W0sdnNjb2RlLXJlbW90ZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; print(&#34;Standings&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2020-02-02-api2.ipynb#W0sdnNjb2RlLXJlbW90ZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; standing = response.json().get(&#34;id&#34;) &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2020-02-02-api2.ipynb#W0sdnNjb2RlLXJlbW90ZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; for key, value in id.items(): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/vscode/ahadsblog/_notebooks/2020-02-02-api2.ipynb#W0sdnNjb2RlLXJlbW90ZQ%3D%3D?line=18&#39;&gt;19&lt;/a&gt; print(key, value) AttributeError: &#39;builtin_function_or_method&#39; object has no attribute &#39;items&#39; .",
            "url": "https://ahadb63.github.io/ahadsblog/api/hockey/2020/02/02/api2.html",
            "relUrl": "/api/hockey/2020/02/02/api2.html",
            "date": " • Feb 2, 2020"
        }
        
    
  
    
        ,"post35": {
            "title": "Java Kernel Test",
            "content": "console.log(&quot;hello&quot;) . hello .",
            "url": "https://ahadb63.github.io/ahadsblog/kerneltest/2020/02/02/KernelWorking.html",
            "relUrl": "/kerneltest/2020/02/02/KernelWorking.html",
            "date": " • Feb 2, 2020"
        }
        
    
  
    
        ,"post36": {
            "title": "Final Project Design",
            "content": "Roles . ahad - devops | sabine - frontend | dash - backend | aiden - scrum master | . Our Project . Our project is a website where there will be ltos of minigames to play Minigames will be divided by category . Ex: Board games, Math games, Puzzle games | . What games are we making? . ahad - NA | sabine - NA | dash- blackjack and mario | aiden - tetris | .",
            "url": "https://ahadb63.github.io/ahadsblog/final/project/2020/02/02/Final-Project-Design.html",
            "relUrl": "/final/project/2020/02/02/Final-Project-Design.html",
            "date": " • Feb 2, 2020"
        }
        
    
  
    
        ,"post37": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://ahadb63.github.io/ahadsblog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  

  
      ,"page2": {
          "title": "About Me",
          "content": "about me . Student at DNHS | Graduating class of 2024 | .",
          "url": "https://ahadb63.github.io/ahadsblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  

  
      ,"page9": {
          "title": "Vocab and Notes",
          "content": "Vocab and Notes . Print : The print() function prints the specified message to the screen, or other standard output device. The message can be a string, or any other object, the object will be converted into a string before written to the screen. . | Kernel : The kernel is a computer program at the core of a computer’s operating system and generally has complete control over everything in the system. It is the portion of the operating system code that is always resident in memory and facilitates interactions between hardware and software components. . | Lists [] : A way of grouping data in an ordered sequence . | Dictionaries {} : A way of grouping data into in key-value relationships. Dictionaries are similar to JavaScript Object Notation (JSON). . |",
          "url": "https://ahadb63.github.io/ahadsblog/Vocab/",
          "relUrl": "/Vocab/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  

  

  
  

  
      ,"page16": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ahadb63.github.io/ahadsblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}